<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schemaobj/SchemaSchemaObj.hpp"
	Revision="2.13"
	Descr="C++18 Schema Object specification">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSchemaObjHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="libcfcore"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$obj"
		ExpansionClassName="$SchemaName$SchemaObjHpp"
		ExpansionKeyName="$SchemaName$SchemaObjHpp"
		ExpansionFileName="$SchemaName$SchemaObj.hpp"
>#pragma once

// Description: C++18 Schema Object specification for $SchemaName$.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;

namespace $CPlusNamespace$ {
	class I$SchemaName$SchemaObj;$iterate SchemaTables( each declForwardIObjTableObjs empty empty )$
}

#include &lt;$lower SchemaName$obj/I$SchemaName$SchemaObj.hpp&gt;

namespace $CPlusNamespace$ {
$declSchemaSchemaObjSchemaObjClassBody$
}
</GenFile>

<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaObjClassBody">
	class $SchemaName$SchemaObj
	: public virtual I$SchemaName$SchemaObj
	{
	public:$declSchemaObjStaticMembers$
	protected:$declSchemaObjMembers$
	public:$declSchemaSchemaObjSchemaSchemaObjConstructor$$declSchemaSchemaObjSchemaSchemaObjDestructor$$declSchemaSchemaObjSchemaObjGetSetSecCluster$$declSchemaSchemaObjSchemaObjGetSetSecTenant$$declSchemaSchemaObjSchemaObjGetSetSecUser$$declSchemaSchemaObjSchemaObjGetSetSecSession$$declSchemaSchemaObjSchemaSchemaObjGetSetDbSchemaNameMethods$$declSchemaSchemaObjSchemaSchemaObjReleasePreparedStatements$$declSchemaSchemaObjSchemaSchemaObjMethods$$iterate SchemaTables( each declSchemaSchemaObjSchemaSchemaObjTableObjAccessors empty empty )$$HPlusSchemaObjImplementation$$ReferencedHPlusSchemaObjImplementation$
	};
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaSchemaObjConstructor">
		$SchemaName$SchemaObj();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaSchemaObjDestructor">
		virtual ~$SchemaName$SchemaObj();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaObjStaticMembers">
		static const std::string CLASS_NAME;
		static const std::string SCHEMA_NAME;
		static const std::string SCHEMA_DBNAME;
		static const std::string S_System;</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaObjMembers">
		$CPlusSecNamespace$::$SecSchemaName$Authorization* authorization;
		$CPlusSecNamespace$::I$SecSchemaName$Schema* backingStore;
		std::string* secClusterName;
		std::string* secTenantName;
		std::string* secUserName;
		$CPlusSecNamespace$::I$SecSchemaName$ClusterObj* secCluster;
		long secClusterId;
		$CPlusSecNamespace$::I$SecSchemaName$TenantObj* secTenant;
		long secTenantId;
		$CPlusSecNamespace$::I$SecSchemaName$SecUserObj* secUser;
		uuid_t secSessionUserId;
		$CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* secSession;
		uuid_t secSessionSessionId;
		std::string* schemaDbName;
		std::string* lowerDbSchemaName;$iterate SchemaTables( each declSchemaSchemaObjTableObjMember empty empty )$$HPlusSchemaObjMembers$$ReferencedHPlusSchemaObjMembers$</GenRule>

	<GenRule GenDef="SchemaDef" Name="ReferencedHPlusSchemaObjImplementation"
		>$iterate SchemaRefs( each ApplyHPlusSchemaObjImplementation empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ApplyHPlusSchemaObjImplementation"
		>$reference RefSchema HPlusSchemaObjImplementation$</GenRule>

	<GenRule GenDef="SchemaDef" Name="ReferencedHPlusSchemaObjMembers"
		>$iterate SchemaRefs( each ApplyHPlusSchemaObjMembers empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ApplyHPlusSchemaObjMembers"
		>$reference RefSchema HPlusSchemaObjMembers$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaSchemaObjReleasePreparedStatements">
		/**
		 *	Release any prepared statements acquired by this connection.
		 *	&lt;p&gt;
		 *	Resets the prepared statements so they can acquire the new value of
		 *	&lt;tt&gt;setDbSchemaName()&lt;/tt&gt;.
		 */
		virtual void releasePreparedStatements();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaSchemaObjGetSetDbSchemaNameMethods"
		>$declSchemaSchemaObjSchemaSchemaObjGetSetDbSchemaNameGetMethods$$declSchemaSchemaObjSchemaSchemaObjGetSetDbSchemaNameSetMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaSchemaObjGetSetDbSchemaNameGetMethods">
		virtual std::string getDbSchemaName();
		virtual std::string getLowerDbSchemaName();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaSchemaObjGetSetDbSchemaNameSetMethods">
		virtual void setDbSchemaName( const std::string&amp; argDbSchemaName );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaObjGetSetSecCluster">
		virtual void setSecClusterName( const std::string&amp; value );
		virtual std::string getSecClusterName();
		virtual $CPlusSecNamespace$::I$SecSchemaName$ClusterObj* getSecCluster();
		virtual void setSecCluster( $CPlusSecNamespace$::I$SecSchemaName$ClusterObj* value );
		virtual long getSecClusterId();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaObjGetSetSecTenant">
		virtual void setSecTenantName( const std::string&amp; value );
		virtual std::string getSecTenantName();
		virtual $CPlusSecNamespace$::I$SecSchemaName$TenantObj* getSecTenant();
		virtual void setSecTenant( $CPlusSecNamespace$::I$SecSchemaName$TenantObj* value );
		virtual long getSecTenantId();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaObjGetSetSecUser">
		virtual void setSecUserName( const std::string&amp; value );
		virtual std::string getSecUserName();
		virtual $CPlusSecNamespace$::I$SecSchemaName$SecUserObj* getSecUser();
		virtual void setSecUser( $CPlusSecNamespace$::I$SecSchemaName$SecUserObj* value );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaObjGetSetSecSession">
		virtual $CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* getSecSession();
		virtual void setSecSession( $CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* value );
		virtual void setSecSessionId( const uuid_ptr_t value );
		virtual uuid_ptr_t getSecSessionSessionId();
		virtual uuid_ptr_t getSecSessionUserId();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaObjSchemaSchemaObjMethods">
		virtual $CPlusSecNamespace$::$SecSchemaName$Authorization* getAuthorization() const;
		virtual void setAuthorization( $CPlusSecNamespace$::$SecSchemaName$Authorization* value );
		virtual $CPlusSecNamespace$::I$SecSchemaName$Schema* getBackingStore();
		virtual void setBackingStore( $CPlusSecNamespace$::I$SecSchemaName$Schema* value );
		virtual std::string getSchemaName();
		virtual bool isConnected();
		virtual bool connect();
		virtual bool connect( const std::string&amp; username, const std::string&amp; password );
		virtual bool connect( const std::string&amp; clusterName, const std::string&amp; tenantName, const std::string&amp; secUserName, const std::string&amp; password );
		virtual void disconnect( bool doCommit );
		virtual void logout();
		virtual void minimizeMemory();
		virtual bool isTransactionOpen();
		virtual bool beginTransaction();
		virtual void commit();
		virtual void rollback();
</GenRule>

	<GenRule GenDef="Table" Name="declSchemaSchemaObjTableObjMember">
		I$SchemaName$$TableName$TableObj* $leadlower TableName$TableObj;</GenRule>

	<GenRule GenDef="Table" Name="declSchemaSchemaObjSchemaSchemaObjTableObjAccessors">
		virtual $CPlusDefNamespace$::I$DefSchemaName$$TableName$TableObj* get$TableName$TableObj();
</GenRule>

</RuleSet>
