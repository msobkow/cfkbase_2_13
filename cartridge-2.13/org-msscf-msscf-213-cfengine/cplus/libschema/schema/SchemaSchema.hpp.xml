<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schema/SchemaSchema.hpp"
	Revision="2.13"
	Descr="C++18 specification of a $SchemaName$ schema.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSchemaHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="libcfcore"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$SchemaHpp"
		ExpansionKeyName="$SchemaName$SchemaHpp"
		ExpansionFileName="$SchemaName$Schema.hpp"
>#pragma once

// Description: C++18 specification of a $SchemaName$ schema.

$MssSourceLicense$
#include &lt;cflib/ICFLibPublic.hpp&gt;
$poptop SchemaDef iterate SchemaRefs( each includeSchemaSchemaRefPublic empty empty )$
namespace $CPlusNamespace$ {
$iterate SchemaTables( each forwardDeclSchemaTablePKey empty empty )$
$iterate SchemaTables( each forwardDeclSchemaTableBuff empty empty )$
$iterate SchemaTables( each forwardDeclSchemaTableIndexKey empty empty )$
$iterate SchemaTables( each forwardDeclISchemaTableTable empty empty )$
}

#include &lt;$lower SchemaName$/I$SchemaName$Schema.hpp&gt;
$iterate SchemaRefs( first includeAuthConf empty includeAuthConf each empty )$
#include &lt;$lower DefSchemaName$/I$DefSchemaName$TablePerms.hpp&gt;

namespace $CPlusNamespace$ {

	class $SchemaName$Schema
	: public virtual $CPlusNamespace$::I$SchemaName$Schema$iterate SchemaRefs( each commaNewlineSchemaSchemaImplementsInterface empty empty )$
	{
	protected:
		$CPlusSecNamespace$::$SecSchemaName$Authorization* authorization;$iterate SchemaRefs( first declTablePermsMember each empty empty declTablePermsMember )$
		std::string* jndiName;
		std::string* schemaDbName;
		std::string* lowerDbSchemaName;
$iterate SchemaTables( each declSchemaTableTableMember )$
	public:
		static const std::string CLASS_NAME;
$declSchemaMoreMethods$$declSchemaSchemaCommitControl$$iterate SchemaRefs( first declSchemaSchemaTablePermsAccessors each empty empty declSchemaSchemaTablePermsAccessors )$$declSchemaSchemaReleasePreparedStatements$$declSchemaSchemaGetSetDbSchemaNameMethods$	};
}
</GenFile>

	<GenRule GenDef="SchemaRef" Name="includeSchemaSchemaRefPublic">
#include &lt;$lower reference RefSchema SchemaName$/I$reference RefSchema SchemaName$Public.hpp&gt;</GenRule>

<GenRule GenDef="SchemaRef" Name="declTablePermsMember"
	>$reference RefSchema declTablePermsMember$</GenRule>

<GenRule GenDef="SchemaDef" Name="declTablePermsMember">
$CPlusNamespace$::I$SchemaName$TablePerms* tablePerms;</GenRule>

	<GenRule GenDef="SchemaRef" Name="includeAuthConf"
		>$reference RefSchema includeAuthConf$</GenRule>

	<GenRule GenDef="SchemaDef" Name="includeAuthConf">
#include &lt;$lower SchemaName$/$SchemaName$Authorization.hpp&gt;</GenRule>

	<GenRule GenDef="SchemaRef" Name="includeSchemaSchemaInterface">
#include &lt;$lower reference RefSchema SchemaName$/I$reference RefSchema SchemaName$Schema.hpp&gt;</GenRule>

	<GenRule GenDef="SchemaRef" Name="commaNewlineSchemaSchemaImplementsInterface">,
	  public virtual $reference RefSchema CPlusNamespace$::I$reference RefSchema SchemaName$Schema</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaMoreMethods"
		>$iterate SchemaRefs( first declSchemaSchemaConstructor each empty empty declSchemaSchemaConstructor )$$declSchemaSchemaAuthorizationAccessors$$iterate SchemaRefs( first declSchemaSchemaJndiNameAccessors each empty empty declSchemaSchemaJndiNameAccessors )$$iterate SchemaRefs( first declSchemaSchemaConnectionMethods each empty empty declSchemaSchemaConnectionMethods )$$iterate SchemaRefs( first declSchemaSchemaNewSchema each empty empty declSchemaSchemaNewSchema )$$iterate Id16Generators( each declSchemaSchemaNextIdGen empty empty)$$iterate Id32Generators( each declSchemaSchemaNextIdGen empty empty)$$iterate Id64Generators( each declSchemaSchemaNextIdGen empty empty)$$iterate UuidGenerators( each declSchemaSchemaNextIdGen empty empty )$$iterate SchemaTables( each declSchemaSchemaTableMethods empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaReleasePreparedStatements"
		>$reference RefSchema declSchemaSchemaReleasePreparedStatements$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaReleasePreparedStatements">
		virtual void releasePreparedStatements();
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaSchemaReleasePreparedStatements">
		virtual void releasePreparedStatements();
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaGetSetDbSchemaNameMethods"
		>$reference RefSchema declSchemaSchemaGetSetDbSchemaNameMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaGetSetDbSchemaNameMethods">
		virtual const std::string* getDbSchemaName() const;
		virtual const std::string* getLowerDbSchemaName() const;
		virtual void setDbSchemaName( const std::string&amp; argDbSchemaName );
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaSchemaGetSetDbSchemaNameMethods">
		virtual const std::string* getDbSchemaName() const;
		virtual const std::string* getLowerDbSchemaName() const;
		virtual void setDbSchemaName( std::string argDbSchemaName );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaCommitControl"
		>$reference RefSchema declSchemaSchemaCommitControl$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaCommitControl">
		virtual bool isTransactionOpen() const;
		virtual bool beginTransaction();
		virtual void commit();
		virtual void rollback();
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaSchemaCommitControl">
		virtual bool isTransactionOpen() const;
		virtual bool beginTransaction();
		virtual void commit();
		virtual void rollback();
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id16Gen" Name="declSchemaSchemaNextIdGen">
		virtual int16_t next$Name$();
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id32Gen" Name="declSchemaSchemaNextIdGen">
		virtual int32_t next$Name$();
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id64Gen" Name="declSchemaSchemaNextIdGen">
		virtual int64_t next$Name$();
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="UuidGen" Name="declSchemaSchemaNextIdGen"></GenRule>

	<GenRule GenDef="Table" Name="declSchemaTableTableMember"
>		$CPlusDefNamespace$::I$DefSchemaName$$TableName$Table* table$TableName$;
</GenRule>

	<GenRule GenDef="Table" Name="declSchemaSchemaTableMethods"
		>$declSchemaSchemaTableTableAccessors$</GenRule>

	<GenRule GenDef="Object" Name="declSchemaSchemaAuthorizationAccessors"
		>$popto SchemaDef declSchemaSchemaAuthorizationAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaAuthorizationAccessors">
		virtual $CPlusSecNamespace$::$SecSchemaName$Authorization* getAuthorization() const;
		virtual void setAuthorization( $CPlusSecNamespace$::$SecSchemaName$Authorization* value );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaTablePermsAccessors"
		>$reference RefSchema declSchemaSchemaTablePermsAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaTablePermsAccessors">
		virtual $CPlusNamespace$::I$SchemaName$TablePerms* getTablePerms();
		virtual void setTablePerms( $CPlusNamespace$::I$SchemaName$TablePerms* value );
</GenRule>

	<GenRule GenDef="Table" Name="declSchemaSchemaTableTableAccessors">
		virtual $CPlusDefNamespace$::I$DefSchemaName$$TableName$Table* getTable$TableName$();
		virtual void setTable$TableName$( $CPlusDefNamespace$::I$DefSchemaName$$TableName$Table* value );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaConstructor"
		>$reference RefSchema declSchemaSchemaConstructor$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaConstructor">
		$poptop SchemaDef SchemaName$Schema();
		$poptop SchemaDef SchemaName$Schema( const std::string&amp; argJndiName );
		virtual ~$poptop SchemaDef SchemaName$Schema();
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaNewSchema"
		>$reference RefSchema declSchemaSchemaNewSchema$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaNewSchema">
		virtual $poptop SchemaDef CPlusNamespace$::I$poptop SchemaDef SchemaName$Schema* newSchema();
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaSchemaNewSchema">
		virtual $poptop SchemaDef CPlusNamespace$::I$poptop SchemaDef SchemaName$Schema* newSchema();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaJndiNameAccessors">
		virtual const std::string* getJndiName() const;
		virtual void setJndiName( const std::string&amp; value );
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaSchemaJndiNameAccessors">
		virtual const std::string* getJndiName() const;
		virtual void setJndiName( const std::string&amp; value );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaConnectionMethods"
		>$reference RefSchema declSchemaSchemaConnectionMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaConnectionMethods">
		virtual bool isConnected();
		virtual bool connect();
		virtual bool connect( const std::string&amp; username, const std::string&amp; password );
		virtual bool connect( const std::string&amp; loginId, const std::string&amp; password, const std::string&amp; clusterName, const std::string&amp; tenantName );
		virtual void disconnect( bool doCommit );
		virtual void logout( $CPlusSecNamespace$::$SecSchemaName$Authorization* auth );
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaSchemaConnectionMethods">
		virtual bool isConnected();
		virtual bool connect();
		virtual bool connect( const std::string&amp; username, const std::string&amp; password );
		virtual bool connect( const std::string&amp; loginId, const std::string&amp; password, const std::string&amp; clusterName, const std::string&amp; tenantName );
		virtual void disconnect( bool doCommit );
		virtual void logout( $CPlusSecNamespace$::$SecSchemaName$Authorization* auth );
</GenRule>

</RuleSet>
