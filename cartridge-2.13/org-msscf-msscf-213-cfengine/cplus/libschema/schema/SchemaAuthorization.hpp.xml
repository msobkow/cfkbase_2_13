<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schema/SchemaAuthorization.hpp"
	Revision="2.13"
	Descr="C++18 $SchemaName$ Authorization Specification">

	<GenFile GenDef="SchemaDef" Name="fileSchemaAuthorizationHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="libcfcore"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$AuthorizationHpp"
		ExpansionKeyName="$SchemaName$AuthorizationHpp"
		ExpansionFileName="$SchemaName$Authorization.hpp"
>#pragma once

// Description: C++18 $SchemaName$ Authorization Specification

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Schema.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$ClusterObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$TenantObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$SecSessionObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$SecUserObj.hpp&gt;
$iterate SchemaRefs( first includeSchemaAuthorizationInheritSecAuthorization each empty empty empty )$

namespace $CPlusNamespace$ {
$iterate SchemaRefs( first SchemaAuthorizationInheritAuthorization each empty empty SchemaAuthorizationBaseImplementation )$
}
</GenFile>

	<GenRule GenDef="SchemaRef" Name="SchemaAuthorizationInheritAuthorization">
	class $popto SchemaDef SchemaName$Authorization
	: public virtual $reference RefSchema CPlusSecNamespace$::$reference RefSchema SecSchemaName$Authorization
	{
		public:
			$popto SchemaDef SchemaName$Authorization();
			virtual ~$popto SchemaDef SchemaName$Authorization();
	};</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaAuthorizationBaseImplementation">
	class $SchemaName$Authorization
	{
		protected:
			uuid_t authUUID;
			std::string authUUIDStr;

			int64_t secClusterId;
			int64_t secTenantId;
			uuid_t secSessionId;
			uuid_t secUserId;
$SchemaAuthorizationHeaderPublicMethods$
	};</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaAuthorizationHeaderPublicMethods">
		public:
			$SchemaName$Authorization();
			virtual ~$SchemaName$Authorization();

			const uuid_ptr_t getAuthUUID() const;
			void setAuthUUID( const uuid_ptr_t value );
			void generateAuthUUID();
			const std::string getAuthUUIDStr();

			int64_t getSecClusterId() const;
			void setSecClusterId( int64_t clusterId );
			void setSecCluster( $CPlusSecNamespace$::I$SecSchemaName$ClusterObj&amp; value );

			int64_t getSecTenantId() const;
			void setSecTenantId( int64_t tenantId );
			void setSecTenant( $CPlusSecNamespace$::I$SecSchemaName$TenantObj&amp; value );

			const uuid_ptr_t getSecSessionId() const;
			void setSecSessionId( const uuid_ptr_t sessionId );
			void generateSecSessionId();
			void setSecSession( $CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* value );

			const uuid_ptr_t getSecUserId() const;
			void setSecUserId( const uuid_ptr_t userId );
			void generateSecUserId();</GenRule>

	<GenRule GenDef="SchemaRef" Name="includeSchemaAuthorizationInheritSecAuthorization">

#include &lt;$lower SecSchemaName$/$SecSchemaName$Authorization.hpp&gt;</GenRule>

</RuleSet>
