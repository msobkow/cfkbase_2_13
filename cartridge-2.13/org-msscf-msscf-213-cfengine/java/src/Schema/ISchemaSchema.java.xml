<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java"
	Name="src/Schema/ISchemaSchema.java"
	Revision="2.13"
	Descr="Java 11 interface for a $SchemaName$ schema.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaISchemaJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$"
		ExpansionClassName="I$SchemaName$SchemaJava"
		ExpansionKeyName="I$SchemaName$SchemaJava"
		ExpansionFileName="I$SchemaName$Schema.java"
>// Description: Java 11 interface for a $SchemaName$ schema.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$;
$SchemaISchemaImports$
public interface I$SchemaName$Schema
{$iterate Types( empty empty each declISchemaEnumType )$$declSchemaGetCFTipClientHandler$$declSchemaConfigurationFileAccessors$$declSchemaJndiNameAccessors$$declSchemaAuthorizationAccessors$$declSchemaConnectionMethods$$declNewSchema$$iterate Id16Generators( each declNextIdGen empty empty)$$iterate Id32Generators( each declNextIdGen empty empty)$$iterate Id64Generators( each declNextIdGen empty empty)$$iterate UuidGenerators( each declNextIdGen empty empty )$$iterate SchemaTables( each declTableMethods empty empty )
$$declSchemaCommitControl$$declSchemaTablePermsAccessors$$declSchemaReleasePreparedStatements$$declSchemaISchemaGetSetDbSchemaNameMethods$}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="SchemaISchemaImports">
import java.lang.reflect.*;
import java.net.*;
import java.rmi.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.msscf.msscf.cflib.CFLib.*;
import org.msscf.msscf.cflib.CFLib.Tip.CFTipClientHandler;
import org.msscf.msscf.cflib.CFLib.*;$importJavaPackageSchemaName$
</GenRule>

	<GenRule GenDef="EnumDef" Name="declISchemaEnumType"
		>$reallyDeclISchemaEnumType$</GenRule>

	<GenRule GenDef="EnumDef" Name="reallyDeclISchemaEnumType">
	public enum $Name$ {$iterate Tag( first declISchemaEnumTypeFirstTag each declISchemaEnumTypeEachTag )$
	};
</GenRule>

	<GenRule GenDef="EnumTag" Name="declISchemaEnumTypeFirstTag">
		$Name$</GenRule>

	<GenRule GenDef="EnumTag" Name="declISchemaEnumTypeEachTag">,
		$Name$</GenRule>

	<GenRule GenDef="Value" Name="declISchemaEnumType"></GenRule>

	<GenRule GenDef="Object" Name="declSchemaGetCFTipClientHandler">
	CFTipClientHandler getCFTipClientHandler();

	String getServerURL();
	void setServerURL( String value );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="extendsPackageSchemaName">
extends I$PackageSchemaName$Schema</GenRule>
	<GenRule GenDef="SchemaRef" Name="commaNewlinePackageSchemaName">,
	I$PackageSchemaName$Schema</GenRule>

	<GenRule GenDef="SchemaRef" Name="PackageSchemaName"
		>$reference RefSchema PackageSchemaName$</GenRule>
	<GenRule GenDef="SchemaDef" Name="PackageSchemaName"
		>$SchemaName$</GenRule>

	<GenRule GenDef="SchemaRef" Name="importJavaPackageSchemaName"
		>$reference RefSchema importJavaPackageSchemaName$</GenRule>
	<GenRule GenDef="SchemaDef" Name="importJavaPackageSchemaName">
import $lower JavaExpandPackage$.$SchemaName$.*;</GenRule>
	<GenRule GenDef="Table" Name="importJavaPackageSchemaName"
		>$popto SchemaDef importJavaPackageSchemaName$</GenRule>
	<GenRule GenDef="Object" Name="importJavaPackageSchemaName"
		>$popto SchemaDef importJavaPackageSchemaName$</GenRule>

	<GenRule GenDef="Tenant" Name="JavaExpandPackage"
		></GenRule>
	<GenRule GenDef="Tld" Name="JavaExpandPackage"
		>$Name$</GenRule>

	<GenRule GenDef="SchemaDef" Name="JavaExpandPackage"
		>$reference Scope JavaExpandPackage$</GenRule>

	<GenRule GenDef="TopProject" Name="JavaExpandPackage"
		>$reference Scope JavaExpandPackage$.$Name$</GenRule>

	<GenRule GenDef="SubProject" Name="JavaExpandPackage"
		>$reference Scope JavaExpandPackage$.$Name$</GenRule>

	<GenRule GenDef="TopDomain" Name="JavaExpandPackage"
		>$reference Scope JavaExpandPackage$.$Name$</GenRule>

	<GenRule GenDef="MinorVersion" Name="JavaExpandPackage"
		>$reference Scope reference Scope JavaExpandPackage$</GenRule>
	<GenRule GenDef="MajorVersion" Name="JavaExpandPackage"
		>$reference Scope JavaExpandPackage$</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaISchemaGetSetDbSchemaNameMethods"
		>$reference RefSchema declSchemaISchemaGetSetDbSchemaNameMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaISchemaGetSetDbSchemaNameMethods">
	/**
	 *	When you first connect to a database, you can opt to specify a database
	 *	schema name to be used by the session.  The implementation code must always
	 *	be dynamically based on the invocation of &lt;tt&gt;String getDbSchemaName()&lt;/tt&gt;
	 *	at runtime.
	 *	&lt;p&gt;
	 *	The initial value is defined by the implementing schema model which has inherited
	 *	the expression of the current schema model being expanded.  That is, it is specified
	 *	in the DbSchemaName attribute of a SchemaDef instance.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	String getDbSchemaName();
	String getLowerDbSchemaName();

	/**
	 *	The database is expected to override this implementation and invoke the
	 *	&lt;tt&gt;super.setDbSchemaName( String argDbSchemaName )&lt;/tt&gt; early
	 *	on in the implementation of the cust body.  You should let the exceptions
	 *	which can be thrown by this implementation pass unimpeded.
	 *	&lt;pg&gt;
	 *	When you set the database schema name, the database-specific implementation
	 *	of this method does a "commit; use database"-type sequence to change
	 *	to the target database.  This should be specified globally for all
	 *	database connections in a given cluster, so that all of
	 *	the application implementation clients are using the same database instance
	 *	regardless of what's been provided by the cust client implementation,
	 *	be it as a Java application or a web interface written using JEE.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	void setDbSchemaName( String argDbSchemaName );
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaISchemaGetSetDbSchemaNameMethods">
	/**
	 *	When you first connect to a database, you can opt to specify a database
	 *	schema name to be used by the session.  The implementation code must always
	 *	be dynamically based on the invocation of &lt;tt&gt;String getDbSchemaName()&lt;/tt&gt;
	 *	at runtime.
	 *	&lt;p&gt;
	 *	The initial value is defined by the implementing schema model which has inherited
	 *	the expression of the current schema model being expanded.  That is, it is specified
	 *	in the DbSchemaName attribute of a SchemaDef instance.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	String getDbSchemaName();
	String getLowerDbSchemaName();

	/**
	 *	The database is expected to override this implementation and invoke the
	 *	&lt;tt&gt;super.setDbSchemaName( String argDbSchemaName )&lt;/tt&gt; early
	 *	on in the implementation of the cust body.  You should let the exceptions
	 *	which can be thrown by this implementation pass unimpeded.
	 *	&lt;pg&gt;
	 *	When you set the database schema name, the database-specific implementation
	 *	of this method does a "commit; use database"-type sequence to change
	 *	to the target database.  This should be specified globally for all
	 *	database connections in a given cluster, so that all of
	 *	the application implementation clients are using the same database instance
	 *	regardless of what's been provided by the cust client implementation,
	 *	be it as a Java application or a web interface written using JEE.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	void setDbSchemaName( String argDbSchemaName );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaReleasePreparedStatements"
		>$reference RefSchema declSchemaReleasePreparedStatements$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaReleasePreparedStatements">
	/**
	 *	Release any prepared statements allocated by this instance.
	 *
	 *	@Exception CFLibNotSupportedException thrown by client-side implementations.
	 */
	void releasePreparedStatements();
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaReleasePreparedStatements">
	/**
	 *	Release any prepared statements allocated by this instance.
	 *
	 *	@Exception CFLibNotSupportedException thrown by client-side implementations.
	 */
	void releasePreparedStatements();
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaConfigurationFileAccessors"
		>$reference RefSchema declSchemaConfigurationFileAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaConfigurationFileAccessors"
		>$reallyDeclSchemaConfigurationFileAccessors$</GenRule>

	<GenRule GenDef="Object" Name="declSchemaConfigurationFileAccessors"
		>$reallyDeclSchemaConfigurationFileAccessors$</GenRule>

	<GenRule GenDef="SchemaRef" Name="reallyDeclSchemaConfigurationFileAccessors"
		>$reference RefSchema reallyDeclSchemaConfiguratonFileAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="reallyDeclSchemaConfigurationFileAccessors">
	$SchemaName$ConfigurationFile getConfigurationFile();
	void setConfigurationFile( $SchemaName$ConfigurationFile value );
</GenRule>

	<GenRule GenDef="Object" Name="reallyDeclSchemaConfigurationFileAccessors">
	$popto SchemaDef SchemaName$ConfigurationFile getConfigurationFile();
	void setConfigurationFile( $popto SchemaDef SchemaName$ConfigurationFile value );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaJndiNameAccessors"
		>$reference RefSchema declSchemaJndiNameAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaJndiNameAccessors"
		>$reallyDeclSchemaJndiNameAccessors$</GenRule>

	<GenRule GenDef="Object" Name="declSchemaJndiNameAccessors"
		>$reallyDeclSchemaJndiNameAccessors$</GenRule>

	<GenRule GenDef="SchemaRef" Name="reallyDeclSchemaJndiNameAccessors"
		>$reference RefSchema reallyDeclSchemaJndiNameAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="reallyDeclSchemaJndiNameAccessors">
	String getJndiName();
	void setJndiName( String value );
</GenRule>

	<GenRule GenDef="Object" Name="reallyDeclSchemaJndiNameAccessors">
	String getJndiName();
	void setJndiName( String value );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaConnectionMethods"
		>$reference RefSchema declSchemaConnectionMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaConnectionMethods"
		>$reallyDeclSchemaConnectionMethods$</GenRule>

	<GenRule GenDef="Object" Name="declSchemaConnectionMethods"
		>$reallyDeclSchemaConnectionMethods$</GenRule>

	<GenRule GenDef="SchemaRef" Name="reallyDeclSchemaConnectionMethods"
		>$reference RefSchema reallyDeclSchemaConnectionMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="reallyDeclSchemaConnectionMethods">
	/**
	 *	Is the schema connected to a persistent storage server?
	 *
	 *	@return	True if the schema is connected to persistent storage,
	 *		otherwise false.
	 */
	boolean isConnected();

	/**
	 *	Connect to the persistent storage server.
	 *
	 *	@return	True if a connection was established, otherwise false.
	 */
	boolean connect();

	/**
	 *	Connect to the persistent storage server using the specified
	 *	user name and password with the server and database specified
	 *	by the configuration file.  JNDI names are ignored by this method.
	 *
	 *	@return	True if a connection was established, otherwise false.
	 */
	boolean connect( String username, String password );

	/**
	 *	Extended login format for GUI login screens
	 */
	boolean connect( String loginId, String password, String clusterName, String tenantName );

	/**
	 *	Disconnect from the persistent storage server.
	 */
	void disconnect( boolean doCommit );

	/**
	 *	Log out of the server, releasing the authorization information.
	 */
	void logout( $SchemaName$Authorization auth );
</GenRule>

	<GenRule GenDef="Object" Name="reallyDeclSchemaConnectionMethods">
	/**
	 *	Is the schema connected to a persistent storage server?
	 *
	 *	@return	True if the schema is connected to persistent storage,
	 *		otherwise false.
	 */
	boolean isConnected();

	/**
	 *	Connect to the persistent storage server.
	 *
	 *	@return	True if a connection was established, otherwise false.
	 */
	boolean connect();

	/**
	 *	Connect to the persistent storage server using the specified
	 *	user name and password with the server and database specified
	 *	by the configuration file.  JNDI names are ignored by this method.
	 *
	 *	@return	True if a connection was established, otherwise false.
	 */
	boolean connect( String username, String password );

	/**
	 *	Extended login format for GUI login screens
	 */
	boolean connect( String loginId, String password, String clusterName, String tenantName );

	/**
	 *	Disconnect from the persistent storage server.
	 */
	void disconnect( boolean doCommit );

	/**
	 *	Log out of the server, releasing the authorization information.
	 */
	void logout( $SchemaName$Authorization auth );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaCommitControl"
		>$reference RefSchema declSchemaCommitControl$</GenRule>

	<GenRule GenDef="Object" Name="declSchemaCommitControl">
	/**
	 *	If a transaction is already opened for the schema connection,
	 *	return false.  If a new transaction is successfully opened,
	 *	return true.  Otherwise throw a RuntimeException detailing
	 *	why a transaction could not be initiated.
	 *	&lt;p&gt;
	 *	This permits the database persistence implementations to
	 *	switch between participating in an existing transaction
	 *	or implementing an implicit atomic transaction that is
	 *	committed or rolled back before the method returns:
	 *	&lt;p&gt;
	 *		boolean txnInitiated = false;
	 *		try {
	 *			txnInitiated = schema.beginTransaction();
	 *			... business logic and presentation code ...
	 *			if( txnInitiated ) {
	 *				schema.commit();
	 *			}
	 *		}
	 *		catch( RuntimeException e ) {
	 *			if( txnInitiated ) {
	 *				try {
	 *					schema.rollback();
	 *				}
	 *				catch( RuntimeException e ) {
	 *				}
	 *			}
	 *			... report exception or throw exception with cause ...
	 *		}
	 *	&lt;p&gt;
	 *	As the current web-form focused implementation will be managing
	 *	the transactions in the Servlet page response, I don't need to
	 *	implement the atomic transaction wrappers yet.
	 */

	/**
	 *	The client-side implementations always return true for this method.
	 *
	 *	@return	True if there is currently a transaction open, otherwise false.
	 *		Client-side implementations always return true.
	 */
	boolean isTransactionOpen();

	/**
	 *	Begin a transaction.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	boolean beginTransaction();

	/**
	 *	Commit the current open transaction.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	void commit();

	/**
	 *	Roll back the current open transaction.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	void rollback();
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declNewSchema"
		>$reference RefSchema declNewSchema$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declNewSchema">
	/**
	 *	Allocate a new schema instance.
	 *
	 *	@return	A new I$SchemaName$Schema instance.
	 */
	I$SchemaName$Schema newSchema();
</GenRule>

	<GenRule GenDef="Object" Name="declNewSchema">
	/**
	 *	Allocate a new schema instance.
	 *
	 *	@return	A new I$SchemaName$Schema instance.
	 */
	I$SchemaName$Schema newSchema();
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id16Gen" Name="declNextIdGen">
	/**
	 *	Get the next $Name$ identifier.
	 *
	 *	@return	The next $Name$ identifier.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	short next$Name$();
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id32Gen" Name="declNextIdGen">
	/**
	 *	Get the next $Name$ identifier.
	 *
	 *	@return	The next $Name$ identifier.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	int next$Name$();
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id64Gen" Name="declNextIdGen">
	/**
	 *	Get the next $Name$ identifier.
	 *
	 *	@return	The next $Name$ identifier.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	long next$Name$();
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="UuidGen" Name="declNextIdGen">
	/**
	 *	Get the next $Name$ identifier.
	 *
	 *	@return	The next $Name$ identifier.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	UUID next$Name$();
</GenRule>

	<GenRule GenDef="Table" Name="declTableMethods"
		>$declSchemaTableTableAccessors$$declSchemaTableFactoryAccessors$</GenRule>

	<GenRule GenDef="Table" Name="declSchemaTableTableAccessors">
	/**
	 *	Get the $TableName$ Table interface for the schema.
	 *
	 *	@return	The $TableName$ Table interface for the schema.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	I$SchemaName$$TableName$Table getTable$TableName$();
</GenRule>

	<GenRule GenDef="Table" Name="declSchemaTableFactoryAccessors">
	/**
	 *	Get the $TableName$ Factory interface for the schema.
	 *
	 *	@return	The $TableName$ Factory interface for the schema.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	I$SchemaName$$TableName$Factory getFactory$TableName$();
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaTablePermsAccessors"
		>$reference RefSchema declSchemaTablePermsAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaTablePermsAccessors">
	/**
	 *	Get the Table Permissions interface for the schema.
	 *
	 *	@return	The Table Permissions interface for the schema.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	I$SchemaName$TablePerms getTablePerms();

	/**
	 *	Set the Table Permissions interface for the schema.
	 *
	 *	@param	value	The Table Permissions interface to be used by the schema.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	void setTablePerms( I$SchemaName$TablePerms value );
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaAuthorizationAccessors">
	/**
	 *	Get the Authorization used by the schema.
	 *
	 *	@return	The Authorization used by the schema.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	$SchemaName$Authorization getAuthorization();

	/**
	 *	Set the Authorization used by the schema.
	 *
	 *	@param	value	The Authorization to be used by the schema.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	void setAuthorization( $SchemaName$Authorization value );
</GenRule>

</RuleSet>
