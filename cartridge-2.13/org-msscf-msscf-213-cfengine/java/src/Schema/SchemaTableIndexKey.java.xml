<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java"
	Name="src/Schema/SchemaTableIndexKey.java"
	Revision="2.13"
	Descr="Java 11 implementation of a $TableName$ $Suffix$ index key object.">

	<GenRule GenDef="Index" Name="fileSchemaTableIndexKeyJava"
		>$switch IsPrimaryIndex yes empty default implFileSchemaTableIndexKeyJava$</GenRule>

	<GenFile GenDef="Index" Name="implFileSchemaTableIndexKeyJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$$TableName$By$Suffix$KeyJava"
		ExpansionKeyName="$SchemaName$$TableName$By$Suffix$KeyJava"
		ExpansionFileName="$SchemaName$$TableName$By$Suffix$Key.java"
>// Description: Java 11 implementation of a $TableName$ by $Suffix$ index key object.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$;

import java.lang.reflect.*;
import java.io.*;
import java.math.*;
import java.net.*;
import java.rmi.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.msscf.msscf.cflib.CFLib.*;

public class $SchemaName$$TableName$By$Suffix$Key$implementSchemaTableBySuffixKeyComparable$
{$implSchemaTableBySuffixKeyColumnAttr$$implIndexKeyBaseConstructor$$implIndexKeyBaseColumns$$implIndexKeyEquals$$implIndexKeyGetHashCode$$implIndexKeyCompareTo$$implIndexKeyToString$}
</GenFile>

	<GenRule GenDef="Index" Name="implIndexKeyBaseColumns"
		>$iterate Columns( each implColumnGetterSetter )$</GenRule>

	<GenRule GenDef="Index" Name="implSchemaTableBySuffixKeyColumnAttr"
		>$iterate Columns( each implColumnAttr )$</GenRule>

	<GenRule GenDef="Index" Name="extendSchemaTableBySuffixKey">
	extends $poptop SchemaDef SchemaName$$TableName$By$Suffix$Key</GenRule>

	<GenRule GenDef="Index" Name="implementSchemaTableBySuffixKeyComparable">
	implements Comparable&lt;Object&gt;,
		Serializable</GenRule>

	<GenRule GenDef="Index" Name="implIndexKeyInhConstructor">
	public $SchemaName$$TableName$By$Suffix$Key() {
		super();
	}
</GenRule>

	<GenRule GenDef="Index" Name="implIndexKeyBaseConstructor">
	public $SchemaName$$TableName$By$Suffix$Key() {$iterate Columns( each implConstructorInitAttr )$
	}
</GenRule>

	<GenRule GenDef="Index" Name="implIndexKeyEquals">
	public boolean equals( Object obj ) {
		if( obj == null ) {
			return( false );
		}
		else if( obj instanceof $SchemaName$$TableName$By$Suffix$Key ) {
			$SchemaName$$TableName$By$Suffix$Key rhs = ($SchemaName$$TableName$By$Suffix$Key)obj;$iterate Columns( each implEqualsCmpAttr )$
			return( true );
		}
		else if( obj instanceof $SchemaName$$TableName$Buff ) {
			$SchemaName$$TableName$Buff rhs = ($SchemaName$$TableName$Buff)obj;$iterate Columns( each implEqualsCmpAttr )$
			return( true );
		}
		else {
			return( false );
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implIndexKeyGetHashCode">
	public int hashCode() {
		int hashCode = 0;$iterate Columns( each implGetHashCodeAttr )$
		return( hashCode &amp; 0x7fffffff );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implIndexKeyCompareTo">
	public int compareTo( Object obj ) {
		if( obj == null ) {
			return( 1 );
		}
		else if( obj instanceof $SchemaName$$TableName$By$Suffix$Key ) {
			$SchemaName$$TableName$By$Suffix$Key rhs = ($SchemaName$$TableName$By$Suffix$Key)obj;$iterate Columns( each implCompareToAttr )$
			return( 0 );
		}
		else if( obj instanceof $SchemaName$$TableName$Buff ) {
			$SchemaName$$TableName$Buff rhs = ($SchemaName$$TableName$Buff)obj;$iterate Columns( each implCompareToAttr )$
			return( 0 );
		}
		else {
			throw new CFLibUnsupportedClassException( getClass(),
				"compareTo",
				"obj",
				obj,
				null );
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implIndexKeyToString">
	public String toString() {
		String ret = "&lt;$SchemaName$$TableName$By$Suffix$"$iterate Columns( each implToStringEmitXmlAttr )$
			+ "/&gt;";
		return( ret );
	}
</GenRule>

</RuleSet>
