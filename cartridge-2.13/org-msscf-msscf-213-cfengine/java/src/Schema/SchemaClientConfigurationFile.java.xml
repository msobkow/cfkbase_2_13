<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java"
	Name="src/Schema/SchemaClientConfigurationFile.java"
	Revision="2.13"
	Descr="Java 11 configuration section for a $SchemaName$ schema.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaClientConfigurationFileJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$ClientConfigurationFileJava"
		ExpansionKeyName="$SchemaName$ClientConfigurationFileJava"
		ExpansionFileName="$SchemaName$ClientConfigurationFile.java"
>// Description: Java 11 client configuration file for a $SchemaName$ schema.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$;

import java.io.*;
import java.lang.reflect.*;
import java.net.*;
import java.rmi.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.msscf.msscf.cflib.CFLib.*;

public class $SchemaName$ClientConfigurationFile
{$ClientConfigurationFileImplDefBaseBody$}
</GenFile>

	<GenRule GenDef="Object" Name="ClientConfigurationFileImplDefBaseBody">
	protected String fileName = null;
	protected Properties props = new Properties();
$poptop SchemaDef declSchemaClientConfigurationFileKeyStore$$poptop SchemaDef declSchemaClientConfigurationFileDeviceName$
	public $poptop SchemaDef SchemaName$ClientConfigurationFile() {
	}
$poptop SchemaDef implClientConfigurationFileName$$poptop SchemaDef implClientConfigurationFileSchemaGet$$poptop SchemaDef implClientConfigurationFileSchemaSet$$poptop SchemaDef implClientConfigurationFileSchemaLoad$$poptop SchemaDef implClientConfigurationFileSchemaSave$$poptop SchemaDef implSchemaClientConfigurationFileKeyStore$$poptop SchemaDef implSchemaClientConfigurationFileDeviceName$$poptop SchemaDef implSchemaClientConfigurationFileServerURL$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ClientConfigurationFileExtendDefBaseBody">
	public $poptop SchemaDef SchemaName$ClientConfigurationFile() {
		super();
	}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="ClientConfigurationFileExtendDefBase">
	extends $reference RefSchema SchemaName$ClientConfigurationFile</GenRule>

	<GenRule GenDef="SchemaDef" Name="implClientConfigurationFileName">
	public String getFileName() {
		return( fileName );
	}

	public void setFileName( String value ) {
		fileName = value;
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implClientConfigurationFileSchemaGet">
	public String get( String theKey ) {
		return( props.getProperty( theKey ) );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implClientConfigurationFileSchemaSet">
	public void set( String theKey, String theValue ) {
		set( theKey, theValue, false );
	}

	public void set(String theKey, String theValue, boolean doSave ) {
		props.put( theKey, theValue );
		if( doSave ) {
			save();
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implClientConfigurationFileSchemaLoad">
	public void load() {
		load( fileName );
	}

	public void load( String configFileName ) {
		boolean doSave = false;
		try {
			FileReader reader = new FileReader( configFileName );
			props.load( reader );
			reader.close();
			keyStore = null;
			deviceName = null;
			loadServerURLProperties();
		}
		catch( FileNotFoundException e ) {
			doSave = true;
		}
		catch( IOException e ) {
			throw new CFLibRuntimeException( getClass(),
				"load",
				"IOException " + e.getMessage(),
				e );
		}
		if( doSave ) {
			save();
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implClientConfigurationFileSchemaSave">
	public void save() {
		try {
			FileWriter writer = new FileWriter( fileName );
			props.store( writer, "$SchemaName$ClientConfigurationFile" );
			writer.close();
		}
		catch( IOException e ) {
			throw new CFLibRuntimeException( getClass(),
				"save",
				"IOException " + e.getMessage(),
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaClientConfigurationFileKeyStore"
>	protected String keyStore = null;
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaClientConfigurationFileKeyStore">
	public String getKeyStore() {
		if( keyStore == null ) {
			keyStore = get( "KeyStore" );
		}
		return( keyStore );
	}

	public void setKeyStore( String value ) {
		keyStore = value;
		set( "KeyStore", keyStore );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaClientConfigurationFileDeviceName"
>	protected String deviceName = null;
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaClientConfigurationFileDeviceName">
	public String getDeviceName() {
		if( deviceName == null ) {
			deviceName = get( "DeviceName" );
		}
		return( deviceName );
	}

	public void setDeviceName( String value ) {
		deviceName = value;
		set( "DeviceName", deviceName );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaClientConfigurationFileServerURL"
		>$implSchemaClientConfigurationFileServerURLPart01$$implSchemaClientConfigurationFileServerURLPart02$$implSchemaClientConfigurationFileServerURLPart03$$implSchemaClientConfigurationFileServerURLPart04$$implSchemaClientConfigurationFileServerURLPart05$$implSchemaClientConfigurationFileServerURLPart06$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaClientConfigurationFileServerURLPart01">
	public final int maxServerURL = 20;
	public final int maxServerURLIndex = maxServerURL - 1;
	public final String attrNamePrefix = "ServerURL";

	protected String arrServerURL[] = new String[0];

	public String[] getServerURLArray() {
		return( arrServerURL );
	}

	public void loadServerURLProperties() {
		int curIdx;
		int maxURL = 0;
		String curURL;
		String attrName;
		for( curIdx = 0; curIdx &lt; maxServerURL; curIdx ++ ) {
			attrName = attrNamePrefix + Integer.toString( curIdx );
			curURL = get( attrName );
			if( ( curURL != null ) &amp;&amp; ( curURL.length() > 0 ) ) {
				maxURL = curIdx + 1;
			}
		}
		if( maxURL > 0 ) {
			String newServerURL[] = new String[ maxURL ];
			for( curIdx = 0; curIdx &lt; maxURL; curIdx ++ ) {
				attrName = attrNamePrefix + Integer.toString( curIdx );
				curURL = get( attrName );
				newServerURL[curIdx] = curURL;
			}
			arrServerURL = newServerURL;
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaClientConfigurationFileServerURLPart02">
	public String getLatestServerURL() {
		String latest;
		String curServerURL[] = arrServerURL;
		if( curServerURL.length &gt; 0 ) {
			latest = curServerURL[0];
		}
		else {
			latest = null;
		}
		return( latest );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaClientConfigurationFileServerURLPart03">
	public void setLatestServerURL( String value ) {
		final String S_ProcName = "setLatestServerURL";
		if( ( value == null ) || ( value.length() &lt;= 0 ) ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				"value" );
		}

		int foundServerURLAtIndex = -1;
		String curServerURLArray[] = arrServerURL;
		int numIdx = curServerURLArray.length;
		int curIdx;
		String curServerURL;

		for( curIdx = 0; curIdx &lt; numIdx; curIdx ++ ) {
			curServerURL = curServerURLArray[curIdx];
			if( value.equals( curServerURL ) ) {
				foundServerURLAtIndex = curIdx;
				curIdx = numIdx;
			}
		}

		if( foundServerURLAtIndex == 0 ) {
			// Do nothing -- it's already at the top
			return;
		}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaClientConfigurationFileServerURLPart04">
		String attrName;
		String curValue;
		String newServerURL[];

		if( foundServerURLAtIndex == -1 ) {
			// Not found, needs to be inserted at head
			newServerURL = new String[ numIdx + 1 ];
			newServerURL[0] = value;
			for( curIdx = 0; curIdx &lt; numIdx; curIdx ++ ) {
				newServerURL[ curIdx + 1 ] = arrServerURL[ curIdx ];
			}
			arrServerURL = newServerURL;
			numIdx = newServerURL.length;
			curIdx = numIdx - 1;
			while( curIdx &gt;= 0 ) {
				attrName = attrNamePrefix + Integer.toString( curIdx );
				curValue = newServerURL[ curIdx ];
				set( attrName, curValue );
				curIdx --;
			}
			save();
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaClientConfigurationFileServerURLPart05">
		else if( foundServerURLAtIndex &lt; maxServerURL ) {
			// Found, needs to move up
			newServerURL = new String[ numIdx ];
			newServerURL[0] = value;
			for( curIdx = 0; curIdx &lt; foundServerURLAtIndex; curIdx ++ ) {
				newServerURL[ curIdx + 1 ] = curServerURLArray[curIdx];
			}
			curIdx ++;
			while( curIdx &lt; numIdx ) {
				newServerURL[ curIdx + 1 ] = curServerURLArray[curIdx];
				curIdx ++;
			}
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaClientConfigurationFileServerURLPart06">
		else {
			// Found past maximum allowable index, trim array of serverURL.
			newServerURL = new String[ maxServerURL ];
			newServerURL[0] = value;
			for( curIdx = 0; curIdx &lt; maxServerURL; curIdx ++ ) {
				newServerURL[ curIdx + 1 ] = curServerURLArray[curIdx];
			}
		}

		arrServerURL = newServerURL;
		numIdx = newServerURL.length;
		for( curIdx = 0; curIdx &lt; numIdx; curIdx ++ ) {
			attrName = attrNamePrefix + Integer.toString( curIdx );
			curValue = newServerURL[ curIdx ];
			set( attrName, curValue );
		}

		save();
	}
</GenRule>

</RuleSet>
