<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java"
	Name="src/Schema/SchemaSchemaPool.java"
	Revision="2.13"
	Descr="Java 11 implementation of a $SchemaName$ schema pool.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSchemaPoolJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$SchemaPoolJava"
		ExpansionKeyName="$SchemaName$SchemaPoolJava"
		ExpansionFileName="$SchemaName$SchemaPool.java"
>// Description: Java 11 implementation of a $SchemaName$ schema pool.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$;

import java.util.*;
import org.msscf.msscf.cflib.CFLib.*;

public class $SchemaName$SchemaPool
{$implSchemaSchemaPoolBaseMembers$
}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaPoolBaseMembers">
$declSchemaSchemaPoolMembers$$implSchemaSchemaPoolBaseConstructor$$implSchemaSchemaPoolStaticMethods$$implSchemaSchemaPoolGetConfigurationFile$$implSchemaSchemaPoolInstanceAllocators$$implSchemaSchemaPoolToBeOverloaded$$implSchemaPoolConfigurationGetSetJndiName$</GenRule>

	<GenRule GenDef="Object" Name="implSchemaSchemaPoolBaseMembers">
$popto SchemaDef implSchemaPoolBaseMembers$</GenRule>

	<GenRule GenDef="SchemaRef" Name="extendsSchemaSchemaPool">
extends $reference RefSchema SchemaName$SchemaPool</GenRule>
	<GenRule GenDef="SchemaDef" Name="extendsSchemaSchemaPool"
		></GenRule>
	<GenRule GenDef="Object" Name="extendsSchemaSchemaPool"
		></GenRule>
	<GenRule GenDef="Object" Name="extendsDerefSchemaSchemaPool"
		>$poptop SchemaDef extendsSchemaSchemaPool$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolMembers">
	protected volatile static $SchemaName$SchemaPool schemaPool = null;$declConfigurationFileConf$$declConfigurationFileInstances$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declConfigurationFileInstances">
	protected LinkedList&lt;I$SchemaName$Schema&gt; instances = new LinkedList&lt;I$SchemaName$Schema&gt;();</GenRule>

	<GenRule GenDef="SchemaRef" Name="declConfigurationFileInstances">
	protected LinkedList&lt;I$reference RefSchema SchemaName$Schema&gt; instances = new LinkedList&lt;I$reference RefSchema SchemaName$Schema&gt;();</GenRule>

	<GenRule GenDef="Object" Name="declConfigurationFileInstances">
	protected LinkedList&lt;I$popto SchemaDef SchemaName$Schema&gt; instances = new LinkedList&lt;I$popto SchemaDef SchemaName$Schema&gt;();</GenRule>

	<GenRule GenDef="SchemaRef" Name="declConfigurationFileConf">
	protected String jndiName = null;
	protected $reference RefSchema SchemaName$ConfigurationFile configFile = ($reference RefSchema SchemaName$ConfigurationFile)( super.getConfigurationFile() );</GenRule>

	<GenRule GenDef="Object" Name="declConfigurationFileConf">
	protected String jndiName = null;
	protected $popto SchemaDef SchemaName$ConfigurationFile configFile = null;</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaPoolStaticMethods">
	public static $SchemaName$SchemaPool getSchemaPool() {
		return( schemaPool );
	}

	public static void setSchemaPool( $SchemaName$SchemaPool pool ) {$invokeBasePool$
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaPoolStaticSetterMethods">
	public static void setSchemaPool( $SchemaName$SchemaPool pool ) {$invokeBasePool$
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="invokeSuperPool">
		super( pool );</GenRule>

	<GenRule GenDef="SchemaDef" Name="invokeBasePool">
		if( schemaPool == null ) {
			schemaPool = pool;
		}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaPoolGetConfigurationFile">
	public $SchemaName$ConfigurationFile getConfigurationFile() {
		return( configFile );
	}
$implSchemaSchemaPoolSetConfigurationFile$
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaPoolSetConfigurationFile">
	public void setConfigurationFile( $SchemaName$ConfigurationFile value ) {
		$implSchemaSchemaPoolSetConfigurationFileInvokeBase$
	}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="implSchemaSchemaPoolSetConfigurationFile">
	public void setConfigurationFileFile( $reference RefSchema SchemaName$ConfigurationFile value ) {$implSchemaSchemaPoolSetConfigurationFileInvokeSuper$
	}
</GenRule>

	<GenRule GenDef="Object" Name="implSchemaSchemaPoolSetConfigurationFileInvokeSuper">
		super.setConfigurationFile( value );</GenRule>

	<GenRule GenDef="Object" Name="implSchemaSchemaPoolSetConfigurationFileInvokeBase">
		configFile = value;</GenRule>

	<GenRule GenDef="Object" Name="implSchemaPoolConfigurationGetSetJndiName">
	public String getJndiName() {
		return( jndiName );
	}

	public void setJndiName( String value ) {
		jndiName = value;
		if( ( jndiName != null ) &amp;&amp; ( jndiName.length() &gt; 0 ) ) {
			configFile = null;
		}
	}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="setConfigurationFileInvokeSuper">
		super.setConfigurationFile( value );</GenRule>

	<GenRule GenDef="Object" Name="setConfigurationFileInvokeBase">
		final String S_ProcName="setConfigurationFile";
		if( value == null ) {
			throw new CFLibNullArgumentException( $popto SchemaDef SchemaName$SchemaPool.class,
				S_ProcName,
				1,
				"value" );
		}
		configFile = value;
		if( configFile != null ) {
			jndiName = null;
		}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="getConfigurationFileInvokeSuper">
		$reference RefSchema SchemaName$ConfigurationFile configFile = ($reference RefSchema SchemaName$ConfigurationFile)( super.getConfigurationFile() );
		return( configFile );</GenRule>

	<GenRule GenDef="Object" Name="getConfigurationFileInvokeBase">
		return( configFile );</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaPoolBaseConstructor">
	public $poptop SchemaDef SchemaName$SchemaPool() {
	}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="implSchemaSchemaPoolConstructorInvokeSuper">
	public $poptop SchemaDef SchemaName$SchemaPool() {
		super();
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaPoolToBeOverloaded"
		>$reallyImplSchemaSchemaPoolToBeOverloaded$</GenRule>

	<GenRule GenDef="SchemaRef" Name="reallyImplSchemaSchemaPoolToBeOverloaded">
	/**
	 *	You need to overload the implementation of newInstance() to return
	 *	connected instances of your backing store.
	 */
	public I$reference RefSchema SchemaName$Schema newInstance() {
		I$reference RefSchema SchemaName$Schema retInst = new $reference RefSchema SchemaName$Schema();
		return( retInst );
	}

	/**
	 *	Overload disposeInstance().
	 */
	public void disposeInstance( I$reference RefSchema SchemaName$Schema inst ) {
		try {
			inst.disconnect( false );
		}
		catch( RuntimeException e ) {
		}
		if( instances != null ) {
			if( ! instances.contains( inst ) ) {
				instances.addFirst( inst );
			}
		}
	}
</GenRule>

	<GenRule GenDef="Object" Name="reallyImplSchemaSchemaPoolToBeOverloaded">
	/**
	 *	You need to overload the implementation of newInstance() to return
	 *	connected instances of your backing store.
	 */
	public I$SchemaName$Schema newInstance() {
		I$SchemaName$Schema retInst = new $SchemaName$Schema();
		return( retInst );
	}

	/**
	 *	Overload disposeInstance().
	 */
	public void disposeInstance( I$SchemaName$Schema inst ) {
		try {
			inst.disconnect( false );
		}
		catch( RuntimeException e ) {
		}
		if( instances != null ) {
			if( ! instances.contains( inst ) ) {
				instances.addFirst( inst );
			}
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaPoolInstanceAllocators">
	/**
	 *	Retrieve an entry from the pool with a previously
	 *	established database connection.
	 */
	public synchronized I$SchemaName$Schema getInstance() {
		I$SchemaName$Schema retInst = null;
		if( instances != null ) {
			if( instances.isEmpty() ) {
				retInst = newInstance();
				retInst.setConfigurationFile( ($SchemaName$ConfigurationFile)getConfigurationFile() );
				retInst.setJndiName( getJndiName() );
				retInst.connect();
			}
			else {
				retInst = instances.removeFirst();
			}
		}
		else {
			retInst = null;
		}
		return( retInst );
	}

	/**
	 *	Return an entry to the pool.
	 */
	public synchronized void releaseInstance( I$SchemaName$Schema inst ) {
		if( inst == null ) {
			return;
		}
		inst.rollback();
		if( instances != null ) {
			if( ! instances.contains( inst ) ) {
				instances.addFirst( inst );
			}
		}
	}
</GenRule>

</RuleSet>
