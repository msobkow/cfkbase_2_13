<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java"
	Name="src/SchemaRam/SchemaRamSchema.java"
	Revision="2.13"
	Descr="Java 11 implementation of an in-memory $SchemaName$ schema.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaRamSchemaJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$Ram"
		ExpansionClassName="$SchemaName$RamSchemaJava"
		ExpansionKeyName="$SchemaName$RamSchemaJava"
		ExpansionFileName="$SchemaName$RamSchema.java"
>// Description: Java 11 implementation of an in-memory RAM $SchemaName$ schema.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$Ram;

import java.lang.reflect.*;
import java.net.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.msscf.msscf.cflib.CFLib.*;$importJavaPackageSchemaName$$importJavaPackageSchemaNameObj$

public class $SchemaName$RamSchema
	extends $SchemaName$Schema
	implements I$SchemaName$Schema
{
$iterate Id16Generators( each declRamNextIdGen empty empty )$$iterate Id32Generators( each declRamNextIdGen empty empty )$$iterate Id64Generators( each declRamNextIdGen empty empty )$
$implSchemaRamConstructor$$implRamSchemaConnectionMethods$$implRamSchemaNewSchema$$iterate Id16Generators( each implRamNextIdGen empty empty)$$iterate Id32Generators( each implRamNextIdGen empty empty)$$iterate Id64Generators( each implRamNextIdGen empty empty)$$iterate UuidGenerators( each implRamNextIdGen empty empty )$$implRamSchemaReleasePreparedStatements$}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="implRamSchemaReleasePreparedStatements">
	public void releasePreparedStatements() {
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRamSchemaConnectionMethods">
	protected boolean sessConnected = false;

	public boolean isConnected() {
		return( sessConnected );
	}

	public boolean connect() {
		if( sessConnected ) {
			return( false );
		}
		else {
			sessConnected = true;
			tranOpen = false;
			return( true );
		}
	}

	public boolean connect( String username, String password ) {
		final String S_ProcName = "connect";
		if( ( username == null ) || ( username.length() &lt;= 0 ) ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				"username" );
		}
		if( password == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				"password" );
		}
		if( ! username.equals( "system" ) ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Only 'system' is authorized to use a RAM database" );
		}
		if( sessConnected ) {
			return( false );
		}
		else {
			sessConnected = true;
			tranOpen = false;
			return( true );
		}
	}

	public boolean connect( String loginId, String password, String clusterName, String tenantName ) {
		final String S_ProcName = "connect";
		if( ( loginId == null ) || ( loginId.length() &lt;= 0 ) ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				"loginId" );
		}
		if( password == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				"password" );
		}
		if( clusterName == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				3,
				"clusterName" );
		}
		if( tenantName == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				4,
				"tenantName" );
		}
		if( ! loginId.equals( "system" ) ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Only 'system' is authorized to use a RAM database" );
		}
		if( ! clusterName.equals( "system" ) ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Only the 'system' Cluster is authorized to use a RAM database" );
		}
		if( ! tenantName.equals( "system" ) ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Only the 'system' Tenant is authorized to use a RAM database" );
		}
		if( sessConnected ) {
			return( false );
		}
		else {
			sessConnected = true;
			tranOpen = false;
			return( true );
		}
	}

	public void disconnect( boolean doCommit ) {
		tranOpen = false;
		sessConnected = false;
	}

	//	Transactions are not supported, so pretend there is always one open

	protected boolean tranOpen = false;

	public boolean isTransactionOpen() {
		return( tranOpen );
	}

	public boolean beginTransaction() {
		if( tranOpen ) {
			return( false );
		}
		tranOpen = true;
		return( true );
	}

	public void commit() {
		tranOpen = false;
	}

	public void rollback() {
		tranOpen = false;
	}
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id16Gen" Name="declRamNextIdGen"
>		protected short next$Name$Value = 1;
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id32Gen" Name="declRamNextIdGen"
>		protected int next$Name$Value = 1;
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id64Gen" Name="declRamNextIdGen"
>		protected long next$Name$Value = 1;
</GenRule>

	<GenRule GenDef="Table" Name="implSchemaRamConstructTable">
		table$TableName$ = new $SchemaName$Ram$TableName$Table( this );</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaRamConstructor">
	public $SchemaName$RamSchema() {
		super();$iterate SchemaTables( each implSchemaRamConstructTable )$
	}
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id16Gen" Name="implRamNextIdGen">
	public short next$Name$() {
		short next = next$Name$Value++;
		return( next );
	}
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id32Gen" Name="implRamNextIdGen">
	public int next$Name$() {
		int next = next$Name$Value++;
		return( next );
	}
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id64Gen" Name="implRamNextIdGen">
	public long next$Name$() {
		long next = next$Name$Value++;
		return( next );
	}
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="UuidGen" Name="implRamNextIdGen">
	public UUID next$Name$() {
		UUID next = UUID.randomUUID();
		return( next );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRamSchemaNewSchema">
	public I$SchemaName$Schema newSchema() {
		throw new CFLibMustOverrideException( getClass(), "newSchema" );
	}
</GenRule>

</RuleSet>
