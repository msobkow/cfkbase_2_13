<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+mysql"
	Name="src/SchemaMySqlTableTable.java"
	Revision="2.13"
	Descr="Java 11 MySql Jdbc DbIO implementation for Table">

	<GenRule GenDef="IndexCol" Name="DbColumnName"
		>$reference Column DbColumnName$</GenRule>

	<GenFile GenDef="Table" Name="fileSchemaMySqlTableTableJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$MySql"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$mysql.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$MySql"
		ExpansionClassName="$SchemaName$MySql$TableName$TableJava"
		ExpansionKeyName="$SchemaName$MySql$TableName$TableJava"
		ExpansionFileName="$SchemaName$MySql$TableName$Table.java"
>$MySqlTableTablePreamble$
public class $SchemaName$MySql$TableName$Table
	implements I$SchemaName$$TableName$Table
{
	private $SchemaName$MySqlSchema schema;$declMySqlTableTablePStatements$$declMySqlDeleteTableByInheritedIndexes$$iterate DispensedId16Generators( each declMySqlTableIdGenPStatements empty empty )$$iterate DispensedId32Generators( each declMySqlTableIdGenPStatements empty empty )$$iterate DispensedId64Generators( each declMySqlTableIdGenPStatements empty empty )$$JavaMySqlTableMembers$
$implConstructMySqlTableTable$$iterate DispensedId16Generators( each implNextIdGen empty empty )$$iterate DispensedId32Generators( each implNextIdGen empty empty )$$iterate DispensedId64Generators( each implNextIdGen empty empty )$$implCreateTable$$declSqlSelectTableDistinctClassCode$$declSqlSelectTableBuff$$implUnpackResultSetToBuff$$implReadTableDerivedByPKey$$implLockTableDerivedByPKey$$implReadAllTableDerived$$implReadTableDerivedByIndexes$$implReadTableBuffByPKey$$implLockTableBuffByPKey$$implReadAllTableBuff$$switch PageData yes implPageAllTableBuff default empty$$implReadTableBuffByIndexes$$switch PageData yes implPageTableBuffByIndexes default empty$$implUpdateTable$$implDeleteTable$$switch HasChain yes implMySqlMoveUpTableBuff default empty$$switch HasChain yes implMySqlMoveDownTableBuff default empty$$implMySqlTableReleasePreparedStatements$$iterate ServerMethods( each implServerMethod empty empty )$$JavaMySqlTableImplementation$}
</GenFile>

	<GenRule GenDef="Table" Name="implPageTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implPageTableBuffByInhIndexes default implPageTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implPageTableBuffByIndexes$$iterate Index( each implPageTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByBaseIndexes"
		>$iterate Index( each implPageTableBuffByIndex )$</GenRule>

	<GenRule GenDef="Index" Name="PageData"
		>$poptop Table PageData$</GenRule>

	<GenRule GenDef="Table" Name="implPageAllTableBuff">
	/**
	 *	Read a page of all the specific $TableName$ buffer instances.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@return All the specific $TableName$ instances in the database accessible for the Authorization.
	 */
	public $DefSchemaName$$TableName$Buff[] pageAllBuff( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageAllBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implPageAllTableBuffTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByDuplicateIndex">
	/**
	 *	Read a page array of the specific $poptop Table TableName$ buffer instances identified by the duplicate key $Suffix$.
	 *
	 *	@param	Authorization	The session authorization information.$iterate Columns( each implCommentKeyAttr empty empty )$
	 *
	 *	@return An array of derived buffer instances for the specified key, potentially with 0 elements in the set.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	public $DefSchemaName$$poptop Table TableName$Buff[] pageBuffBy$declReadTableSuffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each declCommaColumnArg )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageBuffBy$declReadTableSuffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implPageTableBuffByReqDuplicateIndex$
			List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
			while( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlMoveUpTableBuff">
	/**
	 *	Move the specified buffer up in the chain (i.e. to the previous position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffUp( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int revision )
	{
		final String S_ProcName = "moveBuffUp";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implMoveUpTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveUpTryBody">
			Connection cnx = schema.getCnx();
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_moveup_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + ", ? )";
			if( stmtMoveUp == null ) {
				stmtMoveUp = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUp.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveUp.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlMoveUpTableAssignVar )$
			stmtMoveUp.setInt( argIdx++, revision );
			try {
				resultSet = stmtMoveUp.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignVar"
		>$switch IsNullable yes implMySqlMoveUpTableAssignOptVar
			default implMySqlMoveUpTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlMoveUpTableAssignOptBlobVar
			BoolDef implMySqlMoveUpTableAssignOptBoolVar
			EnumDef implMySqlMoveUpTableAssignOptEnumVar
			Int16Def implMySqlMoveUpTableAssignOptInt16Var
			Int32Def implMySqlMoveUpTableAssignOptInt32Var
			Int64Def implMySqlMoveUpTableAssignOptInt64Var
			UInt16Def implMySqlMoveUpTableAssignOptUInt16Var
			UInt32Def implMySqlMoveUpTableAssignOptUInt32Var
			UInt64Def implMySqlMoveUpTableAssignOptUInt64Var
			Id16Gen implMySqlMoveUpTableAssignOptInt16Var
			Id32Gen implMySqlMoveUpTableAssignOptInt32Var
			Id64Gen implMySqlMoveUpTableAssignOptInt64Var
			FloatDef implMySqlMoveUpTableAssignOptFloatVar
			DoubleDef implMySqlMoveUpTableAssignOptDoubleVar
			NumberDef implMySqlMoveUpTableAssignOptNumberVar
			StringDef implMySqlMoveUpTableAssignOptStringVar
			TokenDef implMySqlMoveUpTableAssignOptTokenVar
			NmTokenDef implMySqlMoveUpTableAssignOptNmTokenVar
			NmTokensDef implMySqlMoveUpTableAssignOptNmTokensVar
			TextDef implMySqlMoveUpTableAssignOptTextVar
			DateDef implMySqlMoveUpTableAssignOptDateVar
			TimeDef implMySqlMoveUpTableAssignOptTimeVar
			TimestampDef implMySqlMoveUpTableAssignOptTimestampVar
			TZDateDef implMySqlMoveUpTableAssignOptTZDateVar
			TZTimeDef implMySqlMoveUpTableAssignOptTZTimeVar
			TZTimestampDef implMySqlMoveUpTableAssignOptTZTimestampVar
			UuidDef implMySqlMoveUpTableAssignOptUuidVar
			UuidGen implMySqlMoveUpTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlMoveUpTableAssignReqBlobVar
			BoolDef implMySqlMoveUpTableAssignReqBoolVar
			EnumDef implMySqlMoveUpTableAssignReqEnumVar
			Int16Def implMySqlMoveUpTableAssignReqInt16Var
			Int32Def implMySqlMoveUpTableAssignReqInt32Var
			Int64Def implMySqlMoveUpTableAssignReqInt64Var
			UInt16Def implMySqlMoveUpTableAssignReqUInt16Var
			UInt32Def implMySqlMoveUpTableAssignReqUInt32Var
			UInt64Def implMySqlMoveUpTableAssignReqUInt64Var
			Id16Gen implMySqlMoveUpTableAssignReqInt16Var
			Id32Gen implMySqlMoveUpTableAssignReqInt32Var
			Id64Gen implMySqlMoveUpTableAssignReqInt64Var
			FloatDef implMySqlMoveUpTableAssignReqFloatVar
			DoubleDef implMySqlMoveUpTableAssignReqDoubleVar
			NumberDef implMySqlMoveUpTableAssignReqNumberVar
			StringDef implMySqlMoveUpTableAssignReqStringVar
			TokenDef implMySqlMoveUpTableAssignReqTokenVar
			NmTokenDef implMySqlMoveUpTableAssignReqNmTokenVar
			NmTokensDef implMySqlMoveUpTableAssignReqNmTokensVar
			TextDef implMySqlMoveUpTableAssignReqTextVar
			DateDef implMySqlMoveUpTableAssignReqDateVar
			TimeDef implMySqlMoveUpTableAssignReqTimeVar
			TimestampDef implMySqlMoveUpTableAssignReqTimestampVar
			TZDateDef implMySqlMoveUpTableAssignReqTZDateVar
			TZTimeDef implMySqlMoveUpTableAssignReqTZTimeVar
			TZTimestampDef implMySqlMoveUpTableAssignReqTZTimestampVar
			UuidDef implMySqlMoveUpTableAssignReqUuidVar
			UuidGen implMySqlMoveUpTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqBlobVar">
			stmtMoveUp.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveUp.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqBoolVar">
			stmtMoveUp.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtMoveUp.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqEnumVar">
			stmtMoveUp.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveUp.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqInt16Var">
			stmtMoveUp.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveUp.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqInt32Var">
			stmtMoveUp.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveUp.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqInt64Var">
			stmtMoveUp.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveUp.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqUInt16Var">
			stmtMoveUp.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveUp.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqUInt32Var">
			stmtMoveUp.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveUp.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqUInt64Var">
			stmtMoveUp.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveUp.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqFloatVar">
			stmtMoveUp.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveUp.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqDoubleVar">
			stmtMoveUp.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveUp.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqNumberVar">
			stmtMoveUp.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveUp.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqStringVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqTokenVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqNmTokenVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqNmTokensVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqTextVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqDateVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqTimeVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqTimestampVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqTZDateVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqTZTimeVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqTZTimestampVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignReqUuidVar">
			stmtMoveUp.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveUpTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlMoveDownTableBuff">
	/**
	 *	Move the specified buffer down in the chain (i.e. to the next position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffDown( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int revision )
	{
		final String S_ProcName = "moveBuffUp";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implMoveDownTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveDownTryBody">
			Connection cnx = schema.getCnx();
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_movedown_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + ", ? )";
			if( stmtMoveDown == null ) {
				stmtMoveDown = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDown.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveDown.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlMoveDownTableAssignVar )$
			stmtMoveDown.setInt( argIdx++, revision );
			try {
				resultSet = stmtMoveDown.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignVar"
		>$switch IsNullable yes implMySqlMoveDownTableAssignOptVar
			default implMySqlMoveDownTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlMoveDownTableAssignOptBlobVar
			BoolDef implMySqlMoveDownTableAssignOptBoolVar
			EnumDef implMySqlMoveDownTableAssignOptEnumVar
			Int16Def implMySqlMoveDownTableAssignOptInt16Var
			Int32Def implMySqlMoveDownTableAssignOptInt32Var
			Int64Def implMySqlMoveDownTableAssignOptInt64Var
			UInt16Def implMySqlMoveDownTableAssignOptUInt16Var
			UInt32Def implMySqlMoveDownTableAssignOptUInt32Var
			UInt64Def implMySqlMoveDownTableAssignOptUInt64Var
			Id16Gen implMySqlMoveDownTableAssignOptInt16Var
			Id32Gen implMySqlMoveDownTableAssignOptInt32Var
			Id64Gen implMySqlMoveDownTableAssignOptInt64Var
			FloatDef implMySqlMoveDownTableAssignOptFloatVar
			DoubleDef implMySqlMoveDownTableAssignOptDoubleVar
			NumberDef implMySqlMoveDownTableAssignOptNumberVar
			StringDef implMySqlMoveDownTableAssignOptStringVar
			TokenDef implMySqlMoveDownTableAssignOptTokenVar
			NmTokenDef implMySqlMoveDownTableAssignOptNmTokenVar
			NmTokensDef implMySqlMoveDownTableAssignOptNmTokensVar
			TextDef implMySqlMoveDownTableAssignOptTextVar
			DateDef implMySqlMoveDownTableAssignOptDateVar
			TimeDef implMySqlMoveDownTableAssignOptTimeVar
			TimestampDef implMySqlMoveDownTableAssignOptTimestampVar
			TZDateDef implMySqlMoveDownTableAssignOptTZDateVar
			TZTimeDef implMySqlMoveDownTableAssignOptTZTimeVar
			TZTimestampDef implMySqlMoveDownTableAssignOptTZTimestampVar
			UuidDef implMySqlMoveDownTableAssignOptUuidVar
			UuidGen implMySqlMoveDownTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlMoveDownTableAssignReqBlobVar
			BoolDef implMySqlMoveDownTableAssignReqBoolVar
			EnumDef implMySqlMoveDownTableAssignReqEnumVar
			Int16Def implMySqlMoveDownTableAssignReqInt16Var
			Int32Def implMySqlMoveDownTableAssignReqInt32Var
			Int64Def implMySqlMoveDownTableAssignReqInt64Var
			UInt16Def implMySqlMoveDownTableAssignReqUInt16Var
			UInt32Def implMySqlMoveDownTableAssignReqUInt32Var
			UInt64Def implMySqlMoveDownTableAssignReqUInt64Var
			Id16Gen implMySqlMoveDownTableAssignReqInt16Var
			Id32Gen implMySqlMoveDownTableAssignReqInt32Var
			Id64Gen implMySqlMoveDownTableAssignReqInt64Var
			FloatDef implMySqlMoveDownTableAssignReqFloatVar
			DoubleDef implMySqlMoveDownTableAssignReqDoubleVar
			NumberDef implMySqlMoveDownTableAssignReqNumberVar
			StringDef implMySqlMoveDownTableAssignReqStringVar
			TokenDef implMySqlMoveDownTableAssignReqTokenVar
			NmTokenDef implMySqlMoveDownTableAssignReqNmTokenVar
			NmTokensDef implMySqlMoveDownTableAssignReqNmTokensVar
			TextDef implMySqlMoveDownTableAssignReqTextVar
			DateDef implMySqlMoveDownTableAssignReqDateVar
			TimeDef implMySqlMoveDownTableAssignReqTimeVar
			TimestampDef implMySqlMoveDownTableAssignReqTimestampVar
			TZDateDef implMySqlMoveDownTableAssignReqTZDateVar
			TZTimeDef implMySqlMoveDownTableAssignReqTZTimeVar
			TZTimestampDef implMySqlMoveDownTableAssignReqTZTimestampVar
			UuidDef implMySqlMoveDownTableAssignReqUuidVar
			UuidGen implMySqlMoveDownTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqBlobVar">
			stmtMoveDown.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveDown.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqBoolVar">
			stmtMoveDown.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtMoveDown.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqEnumVar">
			stmtMoveDown.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveDown.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqInt16Var">
			stmtMoveDown.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveDown.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqInt32Var">
			stmtMoveDown.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveDown.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqInt64Var">
			stmtMoveDown.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveDown.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqUInt16Var">
			stmtMoveDown.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveDown.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqUInt32Var">
			stmtMoveDown.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveDown.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqUInt64Var">
			stmtMoveDown.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveDown.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqFloatVar">
			stmtMoveDown.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveDown.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqDoubleVar">
			stmtMoveDown.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveDown.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqNumberVar">
			stmtMoveDown.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveDown.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqStringVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqTokenVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqNmTokenVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqNmTokensVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqTextVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqDateVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqTimeVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqTimestampVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqTZDateVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqTZTimeVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqTZTimestampVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignReqUuidVar">
			stmtMoveDown.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlMoveDownTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implQuestion">?</GenRule>

	<GenRule GenDef="Object" Name="implCommaQuestion">, $implQuestion$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="declMySqlTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="declMySqlTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="declMySqlTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="declMySqlDeleteTableByInheritedIndexes"
		>$switch HasSuperClassRelation yes declMySqlDeleteTableByInhIndexes default declMySqlDeleteTableByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="declMySqlDeleteTableByInhIndexes"
		>$reference SuperClassRelation reference ToTable declMySqlDeleteTableByInheritedIndexes$$iterate Index( each declMySqlDeleteTableByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declMySqlDeleteTableByBaseIndexes"
		>$iterate Index( each declMySqlDeleteTableByIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="declMySqlDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declMySqlDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declMySqlDeleteTableByIndex">
	protected PreparedStatement stmtDeleteBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Table" Name="MySqlTableTablePreamble"
>// Description: Java 11 MySQL Jdbc DbIO implementation for $TableName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$MySql;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$$JavaMySqlTableImport$

/*
 *	$SchemaName$MySql$TableName$Table MySQL Jdbc DbIO implementation
 *	for $TableName$.
 */</GenRule>

	<GenRule GenDef="IndexCol" Name="Suffix"
		>$popto Index Suffix$</GenRule>
	<GenRule GenDef="Value" Name="Suffix"
		>$popto Index Suffix$</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTablePStatements"
		>$switch HasSuperClassRelation yes declMySqlTableTableInhPStatements default declMySqlTableTableBasePStatements$</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTableInhPStatements"
		>$reference SuperClassRelation reference ToTable declMySqlTableTablePStatements$$switch ThisHasChain yes declMySqlTableTablePStmtMove default empty$$iterate Index( each declMySqlTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTableBasePStatements"
		>$declMySqlTableTablePStmtEmitForPKey$$switch ThisHasChain yes declMySqlTableTablePStmtMove default empty$$reference PrimaryKeyIndex declMySqlTableTablePStmtEmitReadTableBuffByIndex$$iterate Index( each declMySqlTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTableBaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex declMySqlTableTablePStmtEmitReadTableClassCodeByIndex$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasSubClasses"
		>$poptop Table HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="declMySqlTableTablePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declMySqlTableTablePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declMySqlTableTablePStmtReadTableBuffByIndex"
		>$declMySqlTableTablePStmtEmitReadTableBuffByIndex$$switch PageData yes declMySqlTableTablePStmtPageTableBuffByIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="declMySqlTableTablePStmtEmitReadTableBuffByIndex"
>$switch TopTableHasSubClasses yes declMySqlTableTablePStmtEmitReadTableClassCodeByIndex default empty$
	protected PreparedStatement stmtReadBuffBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declMySqlTableTablePStmtPageTableBuffByIndex"
		>$ifduplicate_declMySqlTableTablePStmtEmitPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="ifduplicate_declMySqlTableTablePStmtEmitPageTableBuffByIndex"
		>$switch IsUnique yes empty default declMySqlTableTablePStmtEmitPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declMySqlTableTablePStmtEmitPageTableBuffByIndex">
	protected PreparedStatement stmtPageBuffBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declMySqlTableTablePStmtEmitReadTableClassCodeByIndex">
	protected PreparedStatement stmtReadClassCodeBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTablePStmtEmitForPKey">
	protected PreparedStatement stmtReadBuffByPKey = null;
	protected PreparedStatement stmtLockBuffByPKey = null;
	protected PreparedStatement stmtCreateByPKey = null;
	protected PreparedStatement stmtUpdateByPKey = null;
	protected PreparedStatement stmtDeleteByPKey = null;$poptop Table switch BaseHasHistory yes declMySqlTableTablePStmtEmitForPKeyAudit default empty$
	protected PreparedStatement stmtReadAllBuff = null;$switch PageData yes declMySqlTableTablePStmtPageForPKey default empty$$switch TopTableHasSubClasses yes declMySqlTableTablePStmtReadClassCodes default empty$</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTablePStmtPageForPKey">
	protected PreparedStatement stmtPageAllBuff = null;</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTablePStmtMove">
	protected PreparedStatement stmtMoveUp = null;
	protected PreparedStatement stmtMoveDown = null;</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTablePStmtEmitForPKeyAudit"
		>$switch InheritsBlob yes declMySqlTableTablePStmtEmitForPKeyReallyAudit default empty$</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTablePStmtEmitForPKeyReallyAudit">
	protected PreparedStatement stmtAuditCreatedByPKey = null;
	protected PreparedStatement stmtAuditUpdatedByPKey = null;</GenRule>

	<GenRule GenDef="Table" Name="declMySqlTableTablePStmtReadClassCodes">
	protected PreparedStatement stmtReadDerivedClassCode = null;
	protected PreparedStatement stmtLockDerivedClassCode = null;
	protected PreparedStatement stmtReadAllClassCode = null;</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleasePreparedStatements">
	/**
	 *	Release the prepared statements.
	 *	&lt;p&gt;
	 *	When the schema changes connections, the prepared statements
	 *	have to be released because they contain connection-specific
	 *	information for most databases.
	 */
	public void releasePreparedStatements() {
		S_sqlSelect$TableName$DistinctClassCode = null;
		S_sqlSelect$TableName$Buff = null;$releaseStmtReadBuffByPKey$$releaseStmtLockBuffByPKey$$releaseStmtCreateByPKey$$releaseStmtUpdateByPKey$$switch HasChain yes releaseStmtMove default empty$$releaseStmtDeleteByPKey$$implMySqlTableReleaseDeleteByInheritedIndexes$$poptop Table switch BaseHasHistory yes implMySqlTableReleasePStmtEmitForPKeyAudit default empty$$releaseStmtReadAllBuff$$switch PageData yes releaseStmtPageAllBuff default empty$$switch TopTableHasSubClasses yes implMySqlTableReleasePStmtReadClassCodes default empty$$implMySqlTableReleasePStatements$$iterate DispensedId16Generators( each implMySqlTableIdGenReleasePStatements empty empty )$$iterate DispensedId32Generators( each implMySqlTableIdGenReleasePStatements empty empty )$$iterate DispensedId64Generators( each implMySqlTableIdGenReleasePStatements empty empty )$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleasePStmtEmitForPKeyAudit"
		>$switch InheritsBlob yes implMySqlTableReleasePStmtEmitForPKeyReallyAudit default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleasePStmtEmitForPKeyReallyAudit">
		if( stmtAuditCreatedByPKey != null ) {
			try {
				stmtAuditCreatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditCreatedByPKey = null;
		}
		if( stmtAuditUpdatedByPKey != null ) {
			try {
				stmtAuditUpdatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditUpdatedByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleaseDeleteByInheritedIndexes"
		>$switch HasSuperClassRelation yes implMySqlTableReleaseDeleteByInhIndexes default implMySqlTableReleaseDeleteByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleaseDeleteByInhIndexes"
		>$reference SuperClassRelation reference ToTable implMySqlTableReleaseDeleteByInheritedIndexes$$iterate Index( each implMySqlTableReleaseDeleteByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleaseDeleteByBaseIndexes"
		>$iterate Index( each implMySqlTableReleaseDeleteByIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlTableReleaseDeleteByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implMySqlTableReleaseDeleteByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlTableReleaseDeleteByIndex">
		if( stmtDeleteBy$Suffix$ != null ) {
			try {
				stmtDeleteBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtDeleteBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="releaseStmtReadBuffByPKey">
		if( stmtReadBuffByPKey != null ) {
			try {
				stmtReadBuffByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtReadBuffByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="releaseStmtLockBuffByPKey">
		if( stmtLockBuffByPKey != null ) {
			try {
				stmtLockBuffByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtLockBuffByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="releaseStmtCreateByPKey">
		if( stmtCreateByPKey != null ) {
			try {
				stmtCreateByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtCreateByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="releaseStmtMove">
		if( stmtMoveUp != null ) {
			try {
				stmtMoveUp.close();
			}
			catch( SQLException e ) {
			}
			stmtMoveUp = null;
		}
		if( stmtMoveDown != null ) {
			try {
				stmtMoveDown.close();
			}
			catch( SQLException e ) {
			}
			stmtMoveDown = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="releaseStmtUpdateByPKey">
		if( stmtUpdateByPKey != null ) {
			try {
				stmtUpdateByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtUpdateByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="releaseStmtDeleteByPKey">
		if( stmtDeleteByPKey != null ) {
			try {
				stmtDeleteByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtDeleteByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="releaseStmtReadAllBuff">
		if( stmtReadAllBuff != null ) {
			try {
				stmtReadAllBuff .close();
			}
			catch( SQLException e ) {
			}
			stmtReadAllBuff = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="releaseStmtPageAllBuff">
		if( stmtPageAllBuff != null ) {
			try {
				stmtPageAllBuff .close();
			}
			catch( SQLException e ) {
			}
			stmtPageAllBuff = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleasePStmtReadClassCodes">
		if( stmtReadDerivedClassCode != null ) {
			try {
				stmtReadDerivedClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtReadDerivedClassCode = null;
		}
		if( stmtLockDerivedClassCode != null ) {
			try {
				stmtLockDerivedClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtLockDerivedClassCode = null;
		}
		if( stmtReadAllClassCode != null ) {
			try {
				stmtReadAllClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtReadAllClassCode = null;
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implMySqlTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implMySqlTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implMySqlTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleasePStatements"
		>$switch HasSuperClassRelation yes implMySqlTableReleaseInhPStatements default implMySqlTableReleaseBasePStatements$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleaseInhPStatements"
		>$reference SuperClassRelation reference ToTable implMySqlTableReleasePStatements$$iterate Index( each implMySqlTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleaseBasePStatements"
		>$reference PrimaryKeyIndex implMySqlTableReleasePStmtReadTableBuffByIndex$$iterate Index( each implMySqlTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlTableReleaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex implMySqlTableReleasePStmtDerivedClassCodeBySuffix$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlTableReleasePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implMySqlTableReleasePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlTableReleasePStmtReadTableBuffByIndex"
		>$implMySqlTableReleasePStmtEmitReadTableBuffByIndex$$switch PageData yes ifduplicate_implMySqlTableReleasePStmtEmitPageTableBuffByIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="ifduplicate_implMySqlTableReleasePStmtEmitPageTableBuffByIndex"
		>$switch IsUnique yes empty default implMySqlTableReleasePStmtEmitPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlTableReleasePStmtDerivedClassCodeBySuffix">
		if( stmtReadClassCodeBy$Suffix$ != null ) {
			try {
				stmtReadClassCodeBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtReadClassCodeBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implMySqlTableReleasePStmtEmitReadTableBuffByIndex"
>$switch TopTableHasSubClasses yes implMySqlTableReleasePStmtDerivedClassCodeBySuffix default empty$
		if( stmtReadBuffBy$Suffix$ != null ) {
			try {
				stmtReadBuffBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtReadBuffBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implMySqlTableReleasePStmtEmitPageTableBuffByIndex">
		if( stmtPageBuffBy$Suffix$ != null ) {
			try {
				stmtPageBuffBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtPageBuffBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implConstructMySqlTableTable">
	public $SchemaName$MySql$TableName$Table( $SchemaName$MySqlSchema argSchema ) {
		schema = argSchema;
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlIndexColumnNameComma">$DbColumnName$, </GenRule>
	<GenRule GenDef="IndexCol" Name="implMySqlIndexColumnName">$DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlIndexColumnBindVar">?</GenRule>
	<GenRule GenDef="IndexCol" Name="implMySqlIndexCommaColumnBindVar">, ?</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGen">
	public short next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		String sqlSelectNextIdGen =
				"SELECT " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$( $reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlNextIdGenCommaPassQArg first implMySqlNextIdGenPassQArg )$ );";$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlNextIdGenPassQArg">?</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlNextIdGenCommaPassQArg">,"
			+		"$implMySqlNextIdGenPassQArg$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenViaAttributes">
	public short next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		short retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenViaAttributesSetKeyValue">
		pkey.set$OptionalOrRequired$$Name$( arg$Name$ );</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenDeclAttr">,
		$implJavaAtomType$ arg$Name$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNextIdGen );
			}
			short nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlNextIdGen16SelectAssignVar )$
			try {
				rsSelect = stmtSelectNext$Name$.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				rsSelect = null;
			}
			if( ( rsSelect != null ) &amp;&amp; rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be returned by invoking " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$()" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getShort( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"next_id cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-buff select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignVar"
		>$switch IsNullable yes implMySqlNextIdGen16SelectAssignOptVar
			default implMySqlNextIdGen16SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlNextIdGen16SelectAssignOptBlobVar
			BoolDef implMySqlNextIdGen16SelectAssignOptBoolVar
			EnumDef implMySqlNextIdGen16SelectAssignOptEnumVar
			Int16Def implMySqlNextIdGen16SelectAssignOptInt16Var
			Int32Def implMySqlNextIdGen16SelectAssignOptInt32Var
			Int64Def implMySqlNextIdGen16SelectAssignOptInt64Var
			UInt16Def implMySqlNextIdGen16SelectAssignOptUInt16Var
			UInt32Def implMySqlNextIdGen16SelectAssignOptUInt32Var
			UInt64Def implMySqlNextIdGen16SelectAssignOptUInt64Var
			Id16Gen implMySqlNextIdGen16SelectAssignOptInt16Var
			Id32Gen implMySqlNextIdGen16SelectAssignOptInt32Var
			Id64Gen implMySqlNextIdGen16SelectAssignOptInt64Var
			FloatDef implMySqlNextIdGen16SelectAssignOptFloatVar
			DoubleDef implMySqlNextIdGen16SelectAssignOptDoubleVar
			NumberDef implMySqlNextIdGen16SelectAssignOptNumberVar
			StringDef implMySqlNextIdGen16SelectAssignOptStringVar
			TokenDef implMySqlNextIdGen16SelectAssignOptTokenVar
			NmTokenDef implMySqlNextIdGen16SelectAssignOptNmTokenVar
			NmTokensDef implMySqlNextIdGen16SelectAssignOptNmTokensVar
			TextDef implMySqlNextIdGen16SelectAssignOptTextVar
			DateDef implMySqlNextIdGen16SelectAssignOptDateVar
			TimeDef implMySqlNextIdGen16SelectAssignOptTimeVar
			TimestampDef implMySqlNextIdGen16SelectAssignOptTimestampVar
			TZDateDef implMySqlNextIdGen16SelectAssignOptTZDateVar
			TZTimeDef implMySqlNextIdGen16SelectAssignOptTZTimeVar
			TZTimestampDef implMySqlNextIdGen16SelectAssignOptTZTimestampVar
			UuidDef implMySqlNextIdGen16SelectAssignOptUuidVar
			UuidGen implMySqlNextIdGen16SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlNextIdGen16SelectAssignReqBlobVar
			BoolDef implMySqlNextIdGen16SelectAssignReqBoolVar
			EnumDef implMySqlNextIdGen16SelectAssignReqEnumVar
			Int16Def implMySqlNextIdGen16SelectAssignReqInt16Var
			Int32Def implMySqlNextIdGen16SelectAssignReqInt32Var
			Int64Def implMySqlNextIdGen16SelectAssignReqInt64Var
			UInt16Def implMySqlNextIdGen16SelectAssignReqUInt16Var
			UInt32Def implMySqlNextIdGen16SelectAssignReqUInt32Var
			UInt64Def implMySqlNextIdGen16SelectAssignReqUInt64Var
			Id16Gen implMySqlNextIdGen16SelectAssignReqInt16Var
			Id32Gen implMySqlNextIdGen16SelectAssignReqInt32Var
			Id64Gen implMySqlNextIdGen16SelectAssignReqInt64Var
			FloatDef implMySqlNextIdGen16SelectAssignReqFloatVar
			DoubleDef implMySqlNextIdGen16SelectAssignReqDoubleVar
			NumberDef implMySqlNextIdGen16SelectAssignReqNumberVar
			StringDef implMySqlNextIdGen16SelectAssignReqStringVar
			TokenDef implMySqlNextIdGen16SelectAssignReqTokenVar
			NmTokenDef implMySqlNextIdGen16SelectAssignReqNmTokenVar
			NmTokensDef implMySqlNextIdGen16SelectAssignReqNmTokensVar
			TextDef implMySqlNextIdGen16SelectAssignReqTextVar
			DateDef implMySqlNextIdGen16SelectAssignReqDateVar
			TimeDef implMySqlNextIdGen16SelectAssignReqTimeVar
			TimestampDef implMySqlNextIdGen16SelectAssignReqTimestampVar
			TZDateDef implMySqlNextIdGen16SelectAssignReqTZDateVar
			TZTimeDef implMySqlNextIdGen16SelectAssignReqTZTimeVar
			TZTimestampDef implMySqlNextIdGen16SelectAssignReqTZTimestampVar
			UuidDef implMySqlNextIdGen16SelectAssignReqUuidVar
			UuidGen implMySqlNextIdGen16SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqBlobVar">
			stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqBoolVar">
			stmtSelectNext$popto Id16Gen Name$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqEnumVar">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqFloatVar">
			stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqNumberVar">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqStringVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqTextVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignReqUuidVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen16SelectAssignClassCode">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGen">
	public int next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		String sqlSelectNextIdGen =
				"SELECT " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$( $reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlNextIdGenCommaPassQArg first implMySqlNextIdGenPassQArg )$ );";$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenViaAttributes">
	public int next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		int retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNextIdGen );
			}
			int nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlNextIdGen32SelectAssignVar )$
			try {
				rsSelect = stmtSelectNext$Name$.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				rsSelect = null;
			}
			if( ( rsSelect != null ) &amp;&amp; rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be returned by invoking " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$()" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getInt( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"next_id cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-buff select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignVar"
		>$switch IsNullable yes implMySqlNextIdGen32SelectAssignOptVar
			default implMySqlNextIdGen32SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlNextIdGen32SelectAssignOptBlobVar
			BoolDef implMySqlNextIdGen32SelectAssignOptBoolVar
			EnumDef implMySqlNextIdGen32SelectAssignOptEnumVar
			Int16Def implMySqlNextIdGen32SelectAssignOptInt16Var
			Int32Def implMySqlNextIdGen32SelectAssignOptInt32Var
			Int64Def implMySqlNextIdGen32SelectAssignOptInt64Var
			UInt16Def implMySqlNextIdGen32SelectAssignOptUInt16Var
			UInt32Def implMySqlNextIdGen32SelectAssignOptUInt32Var
			UInt64Def implMySqlNextIdGen32SelectAssignOptUInt64Var
			Id16Gen implMySqlNextIdGen32SelectAssignOptInt16Var
			Id32Gen implMySqlNextIdGen32SelectAssignOptInt32Var
			Id64Gen implMySqlNextIdGen32SelectAssignOptInt64Var
			FloatDef implMySqlNextIdGen32SelectAssignOptFloatVar
			DoubleDef implMySqlNextIdGen32SelectAssignOptDoubleVar
			NumberDef implMySqlNextIdGen32SelectAssignOptNumberVar
			StringDef implMySqlNextIdGen32SelectAssignOptStringVar
			TokenDef implMySqlNextIdGen32SelectAssignOptTokenVar
			NmTokenDef implMySqlNextIdGen32SelectAssignOptNmTokenVar
			NmTokensDef implMySqlNextIdGen32SelectAssignOptNmTokensVar
			TextDef implMySqlNextIdGen32SelectAssignOptTextVar
			DateDef implMySqlNextIdGen32SelectAssignOptDateVar
			TimeDef implMySqlNextIdGen32SelectAssignOptTimeVar
			TimestampDef implMySqlNextIdGen32SelectAssignOptTimestampVar
			TZDateDef implMySqlNextIdGen32SelectAssignOptTZDateVar
			TZTimeDef implMySqlNextIdGen32SelectAssignOptTZTimeVar
			TZTimestampDef implMySqlNextIdGen32SelectAssignOptTZTimestampVar
			UuidDef implMySqlNextIdGen32SelectAssignOptUuidVar
			UuidGen implMySqlNextIdGen32SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlNextIdGen32SelectAssignReqBlobVar
			BoolDef implMySqlNextIdGen32SelectAssignReqBoolVar
			EnumDef implMySqlNextIdGen32SelectAssignReqEnumVar
			Int16Def implMySqlNextIdGen32SelectAssignReqInt16Var
			Int32Def implMySqlNextIdGen32SelectAssignReqInt32Var
			Int64Def implMySqlNextIdGen32SelectAssignReqInt64Var
			UInt16Def implMySqlNextIdGen32SelectAssignReqUInt16Var
			UInt32Def implMySqlNextIdGen32SelectAssignReqUInt32Var
			UInt64Def implMySqlNextIdGen32SelectAssignReqUInt64Var
			Id16Gen implMySqlNextIdGen32SelectAssignReqInt16Var
			Id32Gen implMySqlNextIdGen32SelectAssignReqInt32Var
			Id64Gen implMySqlNextIdGen32SelectAssignReqInt64Var
			FloatDef implMySqlNextIdGen32SelectAssignReqFloatVar
			DoubleDef implMySqlNextIdGen32SelectAssignReqDoubleVar
			NumberDef implMySqlNextIdGen32SelectAssignReqNumberVar
			StringDef implMySqlNextIdGen32SelectAssignReqStringVar
			TokenDef implMySqlNextIdGen32SelectAssignReqTokenVar
			NmTokenDef implMySqlNextIdGen32SelectAssignReqNmTokenVar
			NmTokensDef implMySqlNextIdGen32SelectAssignReqNmTokensVar
			TextDef implMySqlNextIdGen32SelectAssignReqTextVar
			DateDef implMySqlNextIdGen32SelectAssignReqDateVar
			TimeDef implMySqlNextIdGen32SelectAssignReqTimeVar
			TimestampDef implMySqlNextIdGen32SelectAssignReqTimestampVar
			TZDateDef implMySqlNextIdGen32SelectAssignReqTZDateVar
			TZTimeDef implMySqlNextIdGen32SelectAssignReqTZTimeVar
			TZTimestampDef implMySqlNextIdGen32SelectAssignReqTZTimestampVar
			UuidDef implMySqlNextIdGen32SelectAssignReqUuidVar
			UuidGen implMySqlNextIdGen32SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqBlobVar">
			stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqBoolVar">
			stmtSelectNext$popto Id32Gen Name$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqEnumVar">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqFloatVar">
			stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqNumberVar">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqStringVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqTextVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignReqUuidVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen32SelectAssignClassCode">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGen">
	public long next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		String sqlSelectNextIdGen =
				"SELECT " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$( $reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlNextIdGenCommaPassQArg first implMySqlNextIdGenPassQArg )$ );";$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenViaAttributes">
	public long next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		long retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNextIdGen );
			}
			long nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlNextIdGen64SelectAssignVar )$
			try {
				rsSelect = stmtSelectNext$Name$.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				rsSelect = null;
			}
			if( ( rsSelect != null ) &amp;&amp; rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				nextId = 1L;
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be returned by invoking " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$()" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getLong( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"next_id cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-buff select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignVar"
		>$switch IsNullable yes implMySqlNextIdGen64SelectAssignOptVar
			default implMySqlNextIdGen64SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlNextIdGen64SelectAssignOptBlobVar
			BoolDef implMySqlNextIdGen64SelectAssignOptBoolVar
			EnumDef implMySqlNextIdGen64SelectAssignOptEnumVar
			Int16Def implMySqlNextIdGen64SelectAssignOptInt16Var
			Int32Def implMySqlNextIdGen64SelectAssignOptInt32Var
			Int64Def implMySqlNextIdGen64SelectAssignOptInt64Var
			UInt16Def implMySqlNextIdGen64SelectAssignOptUInt16Var
			UInt32Def implMySqlNextIdGen64SelectAssignOptUInt32Var
			UInt64Def implMySqlNextIdGen64SelectAssignOptUInt64Var
			Id16Gen implMySqlNextIdGen64SelectAssignOptInt16Var
			Id32Gen implMySqlNextIdGen64SelectAssignOptInt32Var
			Id64Gen implMySqlNextIdGen64SelectAssignOptInt64Var
			FloatDef implMySqlNextIdGen64SelectAssignOptFloatVar
			DoubleDef implMySqlNextIdGen64SelectAssignOptDoubleVar
			NumberDef implMySqlNextIdGen64SelectAssignOptNumberVar
			StringDef implMySqlNextIdGen64SelectAssignOptStringVar
			TokenDef implMySqlNextIdGen64SelectAssignOptTokenVar
			NmTokenDef implMySqlNextIdGen64SelectAssignOptNmTokenVar
			NmTokensDef implMySqlNextIdGen64SelectAssignOptNmTokensVar
			TextDef implMySqlNextIdGen64SelectAssignOptTextVar
			DateDef implMySqlNextIdGen64SelectAssignOptDateVar
			TimeDef implMySqlNextIdGen64SelectAssignOptTimeVar
			TimestampDef implMySqlNextIdGen64SelectAssignOptTimestampVar
			TZDateDef implMySqlNextIdGen64SelectAssignOptTZDateVar
			TZTimeDef implMySqlNextIdGen64SelectAssignOptTZTimeVar
			TZTimestampDef implMySqlNextIdGen64SelectAssignOptTZTimestampVar
			UuidDef implMySqlNextIdGen64SelectAssignOptUuidVar
			UuidGen implMySqlNextIdGen64SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlNextIdGen64SelectAssignReqBlobVar
			BoolDef implMySqlNextIdGen64SelectAssignReqBoolVar
			EnumDef implMySqlNextIdGen64SelectAssignReqEnumVar
			Int16Def implMySqlNextIdGen64SelectAssignReqInt16Var
			Int32Def implMySqlNextIdGen64SelectAssignReqInt32Var
			Int64Def implMySqlNextIdGen64SelectAssignReqInt64Var
			UInt16Def implMySqlNextIdGen64SelectAssignReqUInt16Var
			UInt32Def implMySqlNextIdGen64SelectAssignReqUInt32Var
			UInt64Def implMySqlNextIdGen64SelectAssignReqUInt64Var
			Id16Gen implMySqlNextIdGen64SelectAssignReqInt16Var
			Id32Gen implMySqlNextIdGen64SelectAssignReqInt32Var
			Id64Gen implMySqlNextIdGen64SelectAssignReqInt64Var
			FloatDef implMySqlNextIdGen64SelectAssignReqFloatVar
			DoubleDef implMySqlNextIdGen64SelectAssignReqDoubleVar
			NumberDef implMySqlNextIdGen64SelectAssignReqNumberVar
			StringDef implMySqlNextIdGen64SelectAssignReqStringVar
			TokenDef implMySqlNextIdGen64SelectAssignReqTokenVar
			NmTokenDef implMySqlNextIdGen64SelectAssignReqNmTokenVar
			NmTokensDef implMySqlNextIdGen64SelectAssignReqNmTokensVar
			TextDef implMySqlNextIdGen64SelectAssignReqTextVar
			DateDef implMySqlNextIdGen64SelectAssignReqDateVar
			TimeDef implMySqlNextIdGen64SelectAssignReqTimeVar
			TimestampDef implMySqlNextIdGen64SelectAssignReqTimestampVar
			TZDateDef implMySqlNextIdGen64SelectAssignReqTZDateVar
			TZTimeDef implMySqlNextIdGen64SelectAssignReqTZTimeVar
			TZTimestampDef implMySqlNextIdGen64SelectAssignReqTZTimestampVar
			UuidDef implMySqlNextIdGen64SelectAssignReqUuidVar
			UuidGen implMySqlNextIdGen64SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqBlobVar">
			stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqBoolVar">
			stmtSelectNext$popto Id64Gen Name$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqEnumVar">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqFloatVar">
			stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqNumberVar">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqStringVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqTextVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignReqUuidVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlNextIdGen64SelectAssignClassCode">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="UuidGen" Name="implNextIdGen">
	public UUID next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey )
	{
		UUID retval = UUID.randomUUID();
		return( retval );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevision">
				+		", revision )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevision"
		> + " )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevisionValue"> + ", "
				+		"1 )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevisionValue"> + " )"</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlCreateTableSetBuffPKeyGeneratedAttr"
		>$switch GenerateId yes implMySqlCreateTableSetBuffPKeyAttr default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlCreateTableSetBuffPKeyAttr">
			Buff.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implMySqlCreateTableGenKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlCreateTableKeys empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlCreateTableCopyKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlCreateTableKeysCopyId empty empty )$</GenRule>

	<GenRule GenDef="Object" Name="implCheckOpenTransaction"
		>$popto Table implCheckOpenTransaction$</GenRule>

	<GenRule GenDef="Table" Name="implCheckOpenTransaction">
		if( ! schema.isTransactionOpen() ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"Transaction not open" );
		}</GenRule>

	<GenRule GenDef="Table" Name="BaseDefIsBaseTable"
		>$reference BaseClass IsBaseTable$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTable"
		>$<!-- switch InheritsBlob yes implCreateTableOldStyle default -->implCreateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implCreateTableSPCopyInhColumns default implCreateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implCreateTableSPCopyColumns$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableCopyDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implMySqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implMySqlCreateTableCopyClassCode default empty$$iterate Columns( each implMySqlCreateTableCopyNonGenColumn empty empty )$</GenRule>

	<GenRule GenDef="Value" Name="implMySqlCreateTableCopyNonGenColumn"
		>$switch GenerateId yes empty default implMySqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSP">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implCreateTableSPTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPTryBody">
$implCreateTableSPCopyColumns$$reference PrimaryKeyIndex iterate Columns( each implCreateTableSPMaybeInitGeneratedUuid )$			Connection cnx = schema.getCnx();
			String sql =
				"call " + schema.getLowerDbSchemaName() + ".$sp_create_dbtablename$( ?, ?, ?, ?, ?, ?"$implCreateTableSPPassArgs$ + " )";
			if( stmtCreateByPKey == null ) {
				stmtCreateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implMySqlCreateTableBindClassCode default implMySqlCreateTableBindConstClassCode$$implCreateTableSPBindArgs$
			try {
				resultSet = stmtCreateByPKey.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff createdBuff = unpack$TableName$ResultSetToBuff( resultSet );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}$implMySqlCreateTableApplyBuff$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPMaybeInitGeneratedUuid"
		>$switch GenerateId yes implCreateTableSPCheckIfGeneratingUuid default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPCheckIfGeneratingUuid"
		>$switch BaseModelAtomClass
			UuidDef implCreateTableSPInitGeneratedUuid
			UuidGen implCreateTableSPInitGeneratedUuid
			default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPInitGeneratedUuid">
			UUID $Name$ = UUID.randomUUID();</GenRule>

	<GenRule GenDef="Table" Name="implMySqlCreateTableApplyBuff"
		>$switch HasSuperClassRelation yes implMySqlCreateTableApplyInhBuff default implMySqlCreateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlCreateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implMySqlCreateTableApplyBuff$$iterate Columns( each implMySqlCreateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlCreateTableApplyBaseBuff"
		>$iterate Columns( each implMySqlCreateTableApplyCol )$$implMySqlCreateTableApplyRevision$$switch HasAuditColumns yes implMySqlCreateTableApplyAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlCreateTableApplyRevision">
				Buff.setRequiredRevision( createdBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implMySqlCreateTableApplyAuditColumns">
				Buff.setCreatedByUserId( createdBuff.getCreatedByUserId() );
				Buff.setCreatedAt( createdBuff.getCreatedAt() );
				Buff.setUpdatedByUserId( createdBuff.getUpdatedByUserId() );
				Buff.setUpdatedAt( createdBuff.getUpdatedAt() );</GenRule>

	<GenRule GenDef="Value" Name="implMySqlCreateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implMySqlCreateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implMySqlCreateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( createdBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPBindInhArgs default implCreateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPBindArgs$$iterate Columns( each implCreateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindBaseArgs"
		>$iterate Columns( each implCreateTableSPBindNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implMySqlCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPBindForceUuidArg default implMySqlCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindForceUuidArg"
		>$switch BaseModelAtomClass
			UuidDef implMySqlCreateTableBindVar
			UuidGen implMySqlCreateTableBindVar
			default empty$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPPassInhArgs default implCreateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPPassArgs$$iterate Columns( each implCreateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassBaseArgs"
		>$iterate Columns( each implCreateTableSPPassNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPForceUuidArg default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPForceUuidArg"
		>$switch BaseModelAtomClass
			UuidGen implCreateTableSPPassAnArg
			UuidDef implCreateTableSPPassAnArg
			default empty$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implMySqlCreateTableSPPassGenericVar
			BoolDef implMySqlCreateTableSPPassGenericVar
			EnumDef implMySqlCreateTableSPPassGenericVar
			Int16Def implMySqlCreateTableSPPassGenericVar
			Int32Def implMySqlCreateTableSPPassGenericVar
			Int64Def implMySqlCreateTableSPPassGenericVar
			UInt16Def implMySqlCreateTableSPPassGenericVar
			UInt32Def implMySqlCreateTableSPPassGenericVar
			UInt64Def implMySqlCreateTableSPPassGenericVar
			Id16Gen implMySqlCreateTableSPPassGenericVar
			Id32Gen implMySqlCreateTableSPPassGenericVar
			Id64Gen implMySqlCreateTableSPPassGenericVar
			FloatDef implMySqlCreateTableSPPassFloatVar
			DoubleDef implMySqlCreateTableSPPassGenericVar
			NumberDef implMySqlCreateTableSPPassGenericVar
			StringDef implMySqlCreateTableSPPassGenericVar
			TokenDef implMySqlCreateTableSPPassGenericVar
			NmTokenDef implMySqlCreateTableSPPassGenericVar
			NmTokensDef implMySqlCreateTableSPPassGenericVar
			TextDef implMySqlCreateTableSPPassTextVar
			DateDef implMySqlCreateTableSPPassDateVar
			TimeDef implMySqlCreateTableSPPassTimeVar
			TimestampDef implMySqlCreateTableSPPassTimestampVar
			TZDateDef implMySqlCreateTableSPPassTZDateVar
			TZTimeDef implMySqlCreateTableSPPassTZTimeVar
			TZTimestampDef implMySqlCreateTableSPPassTZTimestampVar
			UuidDef implMySqlCreateTableSPPassGenericVar
			UuidGen implMySqlCreateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableSPPassGenericVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableSPPassFloatVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableSPPassTextVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableSPPassDateVar"> + ", "
				+		"date( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableSPPassTimeVar"> + ", "
				+		"time( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableSPPassTimestampVar"> + ", "
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableSPPassTZDateVar"> + ", "
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableSPPassTZTimeVar"> + ", "
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableSPPassTZTimestampVar"> + ", "
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableInvokeSuperCreate">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().create$reference SuperClassRelation reference ToTable TableName$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyle">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$switch HasSuperClassRelation yes implCreateTableInvokeSuperCreate default implCheckOpenTransaction$
		try {
			Connection cnx = schema.getCnx();$switch SecScope None empty System implCreateTableOSCheckSystem Cluster implCreateTableOSCheckCluster Tenant implCreateTableOSCheckTenant default error$$switch IsBaseTable yes implMySqlCreateTableClassCodeKey default empty$$switch HasSuperClassRelation no implMySqlCreateTableGenKeys default implMySqlCreateTableCopyKeys$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$$switch HasSuperClassRelation no implMySqlCreateTableInitRevision default empty$<!--
-->			String sql =
					"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$( "$switch IsBaseTable yes implMySqlCreateTableInsertClassCode default empty$$iterate Columns( each implMySqlCreateTableInsertColumnComma last implMySqlCreateTableInsertColumn )$$switch HasSuperClassRelation no implCreateTableSqlFragRevision default implCreateTableSqlFragNoRevision$
				+	"VALUES ( "$switch IsBaseTable yes implMySqlCreateTableValuesClassCode default empty$$iterate Columns( each implMySqlCreateTableValuesVarComma last implMySqlCreateTableValuesVar )$$switch HasSuperClassRelation no implCreateTableSqlFragRevisionValue default implCreateTableSqlFragNoRevisionValue$;$implCreateTableOldStylePartTwo$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implMySQLCreateTableValuesOptAuditColumns"
		>$switch HasAuditColumns yes implMySQLCreateTableValuesAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMySQLCreateTableValuesAuditColumns">
				+		" ?, "
				+		" timestamp( ? ), "
				+		" ?, "
				+		" timestamp( ? ), "</GenRule>

	<GenRule GenDef="Table" Name="implMySQLCreateTableInsertOptAuditColumns"
		>$switch HasAuditColumns yes implMySQLCreateTableInsertAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMySQLCreateTableInsertAuditColumns">
				+		"createdby, "
				+		"createdat, "
				+		"updatedby, "
				+		"updatedat, "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStylePartTwo">
			if( stmtCreateByPKey == null ) {
				stmtCreateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;$switch IsBaseTable yes implMySqlCreateTableBindClassCode default empty$$switch HasSuperClassRelation no implMySqlCreateTableBindOptAuditColumns default empty$$iterate Columns( each implMySqlCreateTableBindVar )$
			int rowsAffected;
			try {
				rowsAffected = stmtCreateByPKey.executeUpdate();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				rowsAffected = 0;
			}
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by insert, not " + rowsAffected );
			}$switch HasSuperClassRelation no implMySqlCreateTableSetBuffPKey default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlCreateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implMySqlCreateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlCreateTableBindAuditColumns">
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( Calendar.getInstance() ) );
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( Calendar.getInstance() ) );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreated"
		>$switch BaseHasClassCode yes implCreateTableOldStyleAuditCreatedWithCC default implCreateTableOldStyleAuditCreatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid,"
					+		" auditstamp,"
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, now(), $lower reference BaseClass ClassCode$.classcode"$reference BaseClass referencePrimaryKeyIndexDef iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 0 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditCreatedByPKey == null ) {
					stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
				}
				argIdx = 1;
				stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlCreateTableAssignVar )$
				int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedValInh default implCreateTableOldStyleAuditCreatedValBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedVal$$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValBase"
		>$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditCreatedReallyVal$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedReallyVal"
> + ", "
					+		"$lower reference Table ClassCode$.$DbColumnName$"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignVar"
		>$switch IsNullable yes implMySqlCreateTableAssignOptVar
			default implMySqlCreateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlCreateTableAssignOptBlobVar
			BoolDef implMySqlCreateTableAssignOptBoolVar
			EnumDef implMySqlCreateTableAssignOptEnumVar
			Int16Def implMySqlCreateTableAssignOptInt16Var
			Int32Def implMySqlCreateTableAssignOptInt32Var
			Int64Def implMySqlCreateTableAssignOptInt64Var
			UInt16Def implMySqlCreateTableAssignOptUInt16Var
			UInt32Def implMySqlCreateTableAssignOptUInt32Var
			UInt64Def implMySqlCreateTableAssignOptUInt64Var
			Id16Gen implMySqlCreateTableAssignOptInt16Var
			Id32Gen implMySqlCreateTableAssignOptInt32Var
			Id64Gen implMySqlCreateTableAssignOptInt64Var
			FloatDef implMySqlCreateTableAssignOptFloatVar
			DoubleDef implMySqlCreateTableAssignOptDoubleVar
			NumberDef implMySqlCreateTableAssignOptNumberVar
			StringDef implMySqlCreateTableAssignOptStringVar
			TokenDef implMySqlCreateTableAssignOptTokenVar
			NmTokenDef implMySqlCreateTableAssignOptNmTokenVar
			NmTokensDef implMySqlCreateTableAssignOptNmTokensVar
			TextDef implMySqlCreateTableAssignOptTextVar
			DateDef implMySqlCreateTableAssignOptDateVar
			TimeDef implMySqlCreateTableAssignOptTimeVar
			TimestampDef implMySqlCreateTableAssignOptTimestampVar
			TZDateDef implMySqlCreateTableAssignOptTZDateVar
			TZTimeDef implMySqlCreateTableAssignOptTZTimeVar
			TZTimestampDef implMySqlCreateTableAssignOptTZTimestampVar
			UuidDef implMySqlCreateTableAssignOptUuidVar
			UuidGen implMySqlCreateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlCreateTableAssignReqBlobVar
			BoolDef implMySqlCreateTableAssignReqBoolVar
			EnumDef implMySqlCreateTableAssignReqEnumVar
			Int16Def implMySqlCreateTableAssignReqInt16Var
			Int32Def implMySqlCreateTableAssignReqInt32Var
			Int64Def implMySqlCreateTableAssignReqInt64Var
			UInt16Def implMySqlCreateTableAssignReqUInt16Var
			UInt32Def implMySqlCreateTableAssignReqUInt32Var
			UInt64Def implMySqlCreateTableAssignReqUInt64Var
			Id16Gen implMySqlCreateTableAssignReqInt16Var
			Id32Gen implMySqlCreateTableAssignReqInt32Var
			Id64Gen implMySqlCreateTableAssignReqInt64Var
			FloatDef implMySqlCreateTableAssignReqFloatVar
			DoubleDef implMySqlCreateTableAssignReqDoubleVar
			NumberDef implMySqlCreateTableAssignReqNumberVar
			StringDef implMySqlCreateTableAssignReqStringVar
			TokenDef implMySqlCreateTableAssignReqTokenVar
			NmTokenDef implMySqlCreateTableAssignReqNmTokenVar
			NmTokensDef implMySqlCreateTableAssignReqNmTokensVar
			TextDef implMySqlCreateTableAssignReqTextVar
			DateDef implMySqlCreateTableAssignReqDateVar
			TimeDef implMySqlCreateTableAssignReqTimeVar
			TimestampDef implMySqlCreateTableAssignReqTimestampVar
			TZDateDef implMySqlCreateTableAssignReqTZDateVar
			TZTimeDef implMySqlCreateTableAssignReqTZTimeVar
			TZTimestampDef implMySqlCreateTableAssignReqTZTimestampVar
			UuidDef implMySqlCreateTableAssignReqUuidVar
			UuidGen implMySqlCreateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqBlobVar">
				stmtAuditCreatedByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqBoolVar">
				stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqEnumVar">
				stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqInt16Var">
				stmtAuditCreatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqInt32Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqInt64Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqUInt16Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqUInt32Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqUInt64Var">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqFloatVar">
				stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqDoubleVar">
				stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqNumberVar">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqStringVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqNmTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqNmTokensVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqTextVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqTZDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqTZTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqTZTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignReqUuidVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereIndexCol">
					+				"$lower reference BaseClass ClassCode$.$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereAndIndexCol">
					+			"AND $lower reference BaseClass ClassCode$.$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedData"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedDataInh default implCreateTableOldStyleAuditCreatedDataBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedData$$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataBase"
		>$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgNonPKeyColumn"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgColumnName"> + ", "
					+		"$DbColumnName$"</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgFirstColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgFirstColumnName">
					+		"$DbColumnName$"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedNoCC">
			String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, now()"$reference BaseClass referencePrimaryKeyIndexDef iterate Columns( each implCreateTableOldStyleAuditValIndexColName )$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 0"
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditCreatedByPKey == null ) {
				stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
			}
			argIdx = 1;
			stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlCreateTableAssignVar )$
			int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableClassCodeKey"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implMySqlCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implMySqlCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implMySqlCreateTableInsertColumnComma">
				+		"$lower DbColumnName$, "</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implMySqlCreateTableInsertColumn">
				+		"$lower DbColumnName$"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableInsertClassCode">
				+		"classcode, "</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesClassCode">
				+		"?, "</GenRule>

	<GenRule GenDef="Object" Name="implCreateTableOldStyleAuditValIndexColName"
		> + ", "$implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditValFirstIndexColName">
					+		"$lower reference Table ClassCode$.$DbColumnName$" </GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditValFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindClassCode">
			stmtCreateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindConstClassCode">
			stmtCreateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesVarComma"
		>$implMySqlCreateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlCreateTableValuesGenericVar
			BoolDef implMySqlCreateTableValuesGenericVar
			EnumDef implMySqlCreateTableValuesGenericVar
			Int16Def implMySqlCreateTableValuesGenericVar
			Int32Def implMySqlCreateTableValuesGenericVar
			Int64Def implMySqlCreateTableValuesGenericVar
			UInt16Def implMySqlCreateTableValuesGenericVar
			UInt32Def implMySqlCreateTableValuesGenericVar
			UInt64Def implMySqlCreateTableValuesGenericVar
			Id16Gen implMySqlCreateTableValuesGenericVar
			Id32Gen implMySqlCreateTableValuesGenericVar
			Id64Gen implMySqlCreateTableValuesGenericVar
			FloatDef implMySqlCreateTableValuesFloatVar
			DoubleDef implMySqlCreateTableValuesGenericVar
			NumberDef implMySqlCreateTableValuesGenericVar
			StringDef implMySqlCreateTableValuesGenericVar
			TokenDef implMySqlCreateTableValuesGenericVar
			NmTokenDef implMySqlCreateTableValuesGenericVar
			NmTokensDef implMySqlCreateTableValuesGenericVar
			TextDef implMySqlCreateTableValuesTextVar
			DateDef implMySqlCreateTableValuesDateVar
			TimeDef implMySqlCreateTableValuesTimeVar
			TimestampDef implMySqlCreateTableValuesTimestampVar
			TZDateDef implMySqlCreateTableValuesTZDateVar
			TZTimeDef implMySqlCreateTableValuesTZTimeVar
			TZTimestampDef implMySqlCreateTableValuesTZTimestampVar
			UuidDef implMySqlCreateTableValuesGenericVar
			UuidGen implMySqlCreateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesGenericVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesTextVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesFloatVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesDateVar">
				+		"date( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesTimeVar">
				+		"time( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesTimestampVar">
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesTZDateVar">
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesTZTimeVar">
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableValuesTZTimestampVar">
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindVarComma"
		>$implMySqlCreateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindVar"
		>$switch IsNullable yes implMySqlCreateTableBindOptVar
			default implMySqlCreateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlCreateTableBindOptBlobVar
			BoolDef implMySqlCreateTableBindOptBoolVar
			EnumDef implMySqlCreateTableBindOptEnumVar
			Int16Def implMySqlCreateTableBindOptInt16Var
			Int32Def implMySqlCreateTableBindOptInt32Var
			Int64Def implMySqlCreateTableBindOptInt64Var
			UInt16Def implMySqlCreateTableBindOptUInt16Var
			UInt32Def implMySqlCreateTableBindOptUInt32Var
			UInt64Def implMySqlCreateTableBindOptUInt64Var
			Id16Gen implMySqlCreateTableBindOptInt16Var
			Id32Gen implMySqlCreateTableBindOptInt32Var
			Id64Gen implMySqlCreateTableBindOptInt64Var
			FloatDef implMySqlCreateTableBindOptFloatVar
			DoubleDef implMySqlCreateTableBindOptDoubleVar
			NumberDef implMySqlCreateTableBindOptNumberVar
			StringDef implMySqlCreateTableBindOptStringVar
			TokenDef implMySqlCreateTableBindOptTokenVar
			NmTokenDef implMySqlCreateTableBindOptNmTokenVar
			NmTokensDef implMySqlCreateTableBindOptNmTokensVar
			TextDef implMySqlCreateTableBindOptTextVar
			DateDef implMySqlCreateTableBindOptDateVar
			TimeDef implMySqlCreateTableBindOptTimeVar
			TimestampDef implMySqlCreateTableBindOptTimestampVar
			TZDateDef implMySqlCreateTableBindOptTZDateVar
			TZTimeDef implMySqlCreateTableBindOptTZTimeVar
			TZTimestampDef implMySqlCreateTableBindOptTZTimestampVar
			UuidDef implMySqlCreateTableBindOptUuidVar
			UuidGen implMySqlCreateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlCreateTableBindReqBlobVar
			BoolDef implMySqlCreateTableBindReqBoolVar
			EnumDef implMySqlCreateTableBindReqEnumVar
			Int16Def implMySqlCreateTableBindReqInt16Var
			Int32Def implMySqlCreateTableBindReqInt32Var
			Int64Def implMySqlCreateTableBindReqInt64Var
			UInt16Def implMySqlCreateTableBindReqUInt16Var
			UInt32Def implMySqlCreateTableBindReqUInt32Var
			UInt64Def implMySqlCreateTableBindReqUInt64Var
			Id16Gen implMySqlCreateTableBindReqInt16Var
			Id32Gen implMySqlCreateTableBindReqInt32Var
			Id64Gen implMySqlCreateTableBindReqInt64Var
			FloatDef implMySqlCreateTableBindReqFloatVar
			DoubleDef implMySqlCreateTableBindReqDoubleVar
			NumberDef implMySqlCreateTableBindReqNumberVar
			StringDef implMySqlCreateTableBindReqStringVar
			TokenDef implMySqlCreateTableBindReqTokenVar
			NmTokenDef implMySqlCreateTableBindReqNmTokenVar
			NmTokensDef implMySqlCreateTableBindReqNmTokensVar
			TextDef implMySqlCreateTableBindReqTextVar
			DateDef implMySqlCreateTableBindReqDateVar
			TimeDef implMySqlCreateTableBindReqTimeVar
			TimestampDef implMySqlCreateTableBindReqTimestampVar
			TZDateDef implMySqlCreateTableBindReqTZDateVar
			TZTimeDef implMySqlCreateTableBindReqTZTimeVar
			TZTimestampDef implMySqlCreateTableBindReqTZTimestampVar
			UuidDef implMySqlCreateTableBindReqUuidVar
			UuidGen implMySqlCreateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqBlobVar">
			stmtCreateByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqBoolVar">
			stmtCreateByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptBoolVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqEnumVar">
			stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqInt16Var">
			stmtCreateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqInt32Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqInt64Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqUInt16Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqUInt32Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqUInt64Var">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqFloatVar">
			stmtCreateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqDoubleVar">
			stmtCreateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqNumberVar">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqStringVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqNmTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqNmTokensVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqTextVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqTZDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqTZTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqTZTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableBindReqUuidVar">
			stmtCreateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlCreateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Table" Name="implMySqlCreateTableInitRevision"
>			int Revision = 1;
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Value" Name="implMySqlCreateTableCopyData"
>$switch ColumnInPrimaryIndex yes empty default implMySqlCreateTableCopyColumn$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Value" Name="implMySqlCreateTableCopyColumn"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCreateTableCopyClassCode"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implMySqlCreateTableRetBuffAttrComma"
>$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$ = $Name$,
		</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implMySqlCreateTableKeys"
		>$switch GenerateId yes implMySqlCreateTableKeysGenId default implMySqlCreateTableKeysCopyId$</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implMySqlCreateTableKeysGenId"
		>$reference Column implMySqlCreateTableKeysGenId$</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implMySqlCreateTableKeysCopyId"
		>$reference Column implMySqlCreateTableKeysCopyId$</GenRule>

	<GenRule GenDef="TableCol" Name="implMySqlCreateTableKeysGenId"
		>$switch HasDispenser no implMySqlCreateTableKeysGenSchemaId default implMySqlCreateTableKeysGenTableId$</GenRule>

	<GenRule GenDef="TableCol" Name="implMySqlCreateTableKeysGenSchemaId"
>			$implJavaAtomType$ $Name$ = schema.next$reference DataType Name$();
</GenRule>

	<GenRule GenDef="TableCol" Name="implMySqlCreateTableKeysGenTableId"
>			$implJavaAtomType$ $Name$ = ((I$reference DataType reference Dispenser SchemaName$$reference DataType reference Dispenser TableName$Table)schema.getTable$reference DataType reference Dispenser TableName$()).next$reference DataType Name$( Authorization$popto Table iterate OnlyOwnerRelations( first implMySqlCreateTableKeysGenTableIdPassArgs each empty )$ );
</GenRule>

	<GenRule GenDef="Relation" Name="implMySqlCreateTableKeysGenTableIdPassArgs"
		>$reference FromIndex iterate Columns( each implMySqlCreateTableKeysGenTableIdCommaArg )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlCreateTableKeysGenTableIdCommaArg">,
				Buff.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Atom" Name="implMySqlCreateTableKeys"
		></GenRule>

	<GenRule GenDef="TableCol" Name="implMySqlCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implMySqlCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlClassCodeSelectFragDbNameComma"
>				+		"$lower reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlSelectDistinctClassCodeFrag"
>				+		"DISTINCT $lower reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlClassCodeJoinBaseTable"
>				+	"INNER JOIN $lower reference BaseClass DbSchemaName$.$reference BaseClass DbTableName$ $lower reference BaseClass ClassCode$ ON "
$reference PrimaryKeyIndex iterate Columns( first implMySqlClassCodeJoinBaseTableColumn each implMySqlClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlClassCodeJoinBaseTableColumn">
				+		"$lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>
	<GenRule GenDef="IndexCol" Name="implMySqlClassCodeAndJoinBaseTableColumn">
				+		"AND $lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLocalizeClassCodeKey"
>			String ClassCode = PKey.getClassCode();
</GenRule>

	<GenRule GenDef="TableCol" Name="implMySqlTableColumnFetchColumn"
		>$switch IsNullable yes implMySqlTableColumnFetchOptAttr default implMySqlTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implMySqlTableColumnFetchColumn"
		>$switch IsNullable yes implMySqlTableColumnFetchOptAttr default implMySqlTableColumnFetchReqAttr$</GenRule>

	<GenRule GenDef="TableCol" Name="implMySqlTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implMySqlTableColumnFetchBlobOptAttr
			UInt64Def implMySqlTableColumnFetchUInt64OptAttr
			NumberDef implMySqlTableColumnFetchNumberOptAttr
			DateDef implMySqlTableColumnFetchDateOptAttr
			TimeDef implMySqlTableColumnFetchTimeOptAttr
			TimestampDef implMySqlTableColumnFetchTimestampOptAttr
			TZDateDef implMySqlTableColumnFetchTZDateOptAttr
			TZTimeDef implMySqlTableColumnFetchTZTimeOptAttr
			TZTimestampDef implMySqlTableColumnFetchTZTimestampOptAttr
			UuidDef implMySqlTableColumnFetchUuidOptAttr
			UuidGen implMySqlTableColumnFetchUuidOptAttr
			default implMySqlTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implMySqlTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass BlobDef implMySqlTableColumnFetchBlobOptAttr default implMySqlTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchBlobOptAttr"
>				{
					byte colVal[] = resultSet.getBytes( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchUInt64OptAttr"
>				{
					String strval = resultSet.getString( idxcol );
					if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						BigDecimal bival = new BigDecimal( strval );
						buff.setOptional$Name$( bival );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchNumberOptAttr"
>				{
					BigDecimal value = resultSet.getBigDecimal( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( value );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MySqlSchema.convertDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MySqlSchema.convertTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MySqlSchema.convertTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchTZDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MySqlSchema.convertTZDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchTZTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MySqlSchema.convertTZTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchTZTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MySqlSchema.convertTZTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchUuidOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( UUID.fromString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implMySqlAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implMySqlTableColumnFetchGenOptAttr"
		>$implMySqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implMySqlTableColumnFetchGenOptAttr"
		>$implMySqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implMySqlTableColumnFetchGenOptAttr"
		>$implMySqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implMySqlTableColumnFetchGenOptAttr"
		>$implMySqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implMySqlTableColumnFetchGenOptAttr"
		>$implMySqlTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchOptStringAttr"
>				{
					$implJavaReqAtomType$ colVal = $implMySqlAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implMySqlTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implMySqlAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchReqAttr"
		>$switch BaseModelAtomClass
			BlobDef implMySqlTableColumnFetchBlobReqAttr
			UInt64Def implMySqlTableColumnFetchUInt64ReqAttr
			NumberDef implMySqlTableColumnFetchNumberReqAttr
			default implMySqlTableColumnFetchGenReqAttr$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchBlobReqAttr"
>				{
					byte colVal[] = resultSet.getBytes( idxcol );
					buff.setRequired$Name$( colVal );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchUInt64ReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnFetchNumberReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implMySqlTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implMySqlAtomFetchReqColumn$ );
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implMySqlTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implMySqlAtomFetchReqColumn$ );
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implMySqlAtomFetchReqColumn"
		>$reference DataType implMySqlAtomFetchReqColumn$</GenRule>

	<GenRule GenDef="BlobDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getBytes( idxcol ) )</GenRule>

	<GenRule GenDef="BoolDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getBoolean( idxcol )</GenRule>

	<GenRule GenDef="EnumDef" Name="implMySqlAtomFetchReqColumn"
		>$EffSchemaName$Schema.ordinalTo$Name$( resultSet.getShort( idxcol ) )</GenRule>

	<GenRule GenDef="Int16Def" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getShort( idxcol )</GenRule>

	<GenRule GenDef="Int32Def" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="Int64Def" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt16Def" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="UInt32Def" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt64Def" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="FloatDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getFloat( idxcol )</GenRule>

	<GenRule GenDef="DoubleDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getDouble( idxcol )</GenRule>

	<GenRule GenDef="NumberDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="StringDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TokenDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokenDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokensDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TextDef" Name="implMySqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="DateDef" Name="implMySqlAtomFetchReqColumn"
		>$SchemaName$MySqlSchema.convertDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimeDef" Name="implMySqlAtomFetchReqColumn"
		>$SchemaName$MySqlSchema.convertTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimestampDef" Name="implMySqlAtomFetchReqColumn"
		>$SchemaName$MySqlSchema.convertTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZDateDef" Name="implMySqlAtomFetchReqColumn"
		>$SchemaName$MySqlSchema.convertTZDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimeDef" Name="implMySqlAtomFetchReqColumn"
		>$SchemaName$MySqlSchema.convertTZTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimestampDef" Name="implMySqlAtomFetchReqColumn"
		>$SchemaName$MySqlSchema.convertTZTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidDef" Name="implMySqlAtomFetchReqColumn"
		>$SchemaName$MySqlSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidGen" Name="implMySqlAtomFetchReqColumn"
		>$SchemaName$MySqlSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlLocalizeTableKeys"
		>$reference Column implMySqlCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="TableCol" Name="implMySqlLocalizeTableKeys"
		>$implMySqlCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="Atom" Name="implMySqlLocalizeTableKeys"
		>$implMySqlCreateTableKeysLocalizeId$</GenRule>

	<GenRule GenDef="TableCol" Name="implMySqlCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implMySqlCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlClassCodeSelectFragDbNameComma"
>				+		"$lower popto Table reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlSelectDistinctClassCodeFrag"
>				+		"DISTINCT $lower popto Table reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlInhTableColumnSelectFrags"
		>$switch HasSuperClassRelation yes implMySqlChainTableColumnSelectFrags default empty$$iterate Columns( each implMySqlTableDataColumnSelectFrag )$</GenRule>

	<GenRule GenDef="Value" Name="implMySqlTableDataColumnSelectFrag"
		>$switch ColumnInPrimaryIndex yes empty default implMySqlTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlChainTableColumnSelectFrags"
		>$reference SuperClassRelation reference ToTable implMySqlInhTableColumnSelectFrags$</GenRule>


	<GenRule GenDef="Object" Name="implBuffTableColumnFetchClassCode"
>				if( ! ( buff.getClassCode().equals( resultSet.getString( idxcol ) ) ) ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected ClassCode \"" + buff.getClassCode() +	"\", not \"" + resultSet.getString( idxcol ) + "\"" );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Value" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="IndexCol" Name="implBuffTableColumnFetchColumn"
		>$reference Column implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchBlobOptAttr"
>		{
			byte colVal[] = resultSet.getBytes( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchUInt64OptAttr"
>		{
			String strval = resultSet.getString( idxcol );
			if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
				buff.setOptional$Name$( null );
			}
			else {
				BigDecimal bival = new BigDecimal( strval );
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchNumberOptAttr"
>		{
			BigDecimal bival = resultSet.getBigDecimal( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implMySqlAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchOptStringAttr"
>		{
			$implJavaReqAtomType$ colVal = $implMySqlAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implMySqlAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implMySqlAtomFetchReqColumn$ );
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implMySqlAtomFetchReqColumn$ );
		idxcol++;
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildFromHierarchy"
		>$switch HasSuperClassRelation yes implReadTableBuffBuildInhFromHierarchy default implReadTableBuffBuildBaseFromHierarchy$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildInhFromHierarchy"
>$reference SuperClassRelation reference ToTable implReadTableBuffBuildFromHierarchy$
				+	"INNER JOIN " + schema.getLowerDbSchemaName() + ".$DbTableName$ $lower ClassCode$ ON "$reference PrimaryKeyIndex iterate Columns( first implMySqlClassCodeJoinBaseTableColumn each implMySqlClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildBaseFromHierarchy">" + schema.getLowerDbSchemaName() + ".$DbTableName$ AS $lower ClassCode$ "</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildFetchColumns"
		>$switch HasSuperClassRelation yes implBuffTableBuildInhFetchColumns default implBuffTableBuildBaseFetchColumns$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildInhFetchColumns"
		>$reference SuperClassRelation reference ToTable implBuffTableBuildFetchColumns$$iterate Columns( each implBuffTableColumnFetchDataColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildBaseFetchColumns"
		>$iterate Columns( each implBuffTableColumnFetchColumn )$</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableDistinctClassCode">
	protected static String S_sqlSelect$TableName$DistinctClassCode = null;

	public String getSqlSelect$TableName$DistinctClassCode() {
		if( S_sqlSelect$TableName$DistinctClassCode == null ) {
			S_sqlSelect$TableName$DistinctClassCode =
					"SELECT "
$implMySqlSelectDistinctClassCodeFrag$<!--
-->				+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$DistinctClassCode );
	}
</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableBuff">
	protected static String S_sqlSelect$TableName$Buff = null;

	public String getSqlSelect$TableName$Buff() {
		if( S_sqlSelect$TableName$Buff == null ) {
			S_sqlSelect$TableName$Buff =
					"SELECT "
$switch HasClassCode yes implMySqlClassCodeSelectFragDbNameComma default empty$$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlTableColumnSelectFragDbNameComma )$$implMySqlInhTableColumnSelectFrags$				+		"$lower reference BaseClass ClassCode$.Revision "
				+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$Buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetWalkClassCode">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetMapViaClassCode">
		String classCode = resultSet.getString( idxcol );
		idxcol++;
		$DefSchemaName$$TableName$Buff buff;
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Unrecognized class code \"" + classCode + "\"" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetDirectBuff">
		$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetToBuff">
	protected $DefSchemaName$$TableName$Buff unpack$TableName$ResultSetToBuff( ResultSet resultSet )
	throws SQLException
	{
		final String S_ProcName = "unpack$TableName$ResultSetToBuff";
		int idxcol = 1;$switch HasClassCode yes implUnpackResultSetMapViaClassCode default implUnpackResultSetDirectBuff$$switch HasAuditColumns yes implBuffTableBuildFetchAuditColumns default empty$$implBuffTableBuildFetchColumns$
		buff.setRequiredRevision( resultSet.getInt( idxcol ) );
		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildFetchAuditColumns">
		{
			String colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedAt( null );
			}
			else {
				buff.setCreatedAt( $SchemaName$MySqlSchema.convertTimestampString( colString ) );
			}
		}
		idxcol++;
		{
			String colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedByUserId( null );
			}
			else {
				buff.setCreatedByUserId( UUID.fromString( colString ) );
			}
		}
		idxcol++;
		{
			String colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedAt( null );
			}
			else {
				buff.setUpdatedAt( $SchemaName$MySqlSchema.convertTimestampString( colString ) );
			}
		}
		idxcol++;
		{
			String colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedByUserId( null );
			}
			else {
				buff.setUpdatedByUserId( UUID.fromString( colString ) );
			}
		}
		idxcol++;</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeReadBuff"
>		buff = readBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeLockBuff"
>		buff = lockBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedAssembleSubClasses default implReadTableDerivedInvokeReadBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadDerivedClassCode == null ) {
				stmtReadDerivedClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlReadTableDerivedClassCodeAssignVar )$
			try {
				resultSet = stmtReadDerivedClassCode.executeQuery();
			}$implMySqlReadTableDerivedClassCodeCatchBlah$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = readBuff( Authorization, PKey );
		}$implReadTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadTableDerivedClassCodeCatchBlah">
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadDerivedClassCodeBindSecClusterId">
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadDerivedClassCodeBindSecTenantId">
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implMySqlReadTableDerivedClassCodeAssignOptVar
			default implMySqlReadTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlReadTableDerivedClassCodeAssignOptBlobVar
			BoolDef implMySqlReadTableDerivedClassCodeAssignOptBoolVar
			EnumDef implMySqlReadTableDerivedClassCodeAssignOptEnumVar
			Int16Def implMySqlReadTableDerivedClassCodeAssignOptInt16Var
			Int32Def implMySqlReadTableDerivedClassCodeAssignOptInt32Var
			Int64Def implMySqlReadTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implMySqlReadTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implMySqlReadTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implMySqlReadTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implMySqlReadTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implMySqlReadTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implMySqlReadTableDerivedClassCodeAssignOptInt64Var
			FloatDef implMySqlReadTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implMySqlReadTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implMySqlReadTableDerivedClassCodeAssignOptNumberVar
			StringDef implMySqlReadTableDerivedClassCodeAssignOptStringVar
			TokenDef implMySqlReadTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implMySqlReadTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implMySqlReadTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implMySqlReadTableDerivedClassCodeAssignOptTextVar
			DateDef implMySqlReadTableDerivedClassCodeAssignOptDateVar
			TimeDef implMySqlReadTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implMySqlReadTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implMySqlReadTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implMySqlReadTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implMySqlReadTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implMySqlReadTableDerivedClassCodeAssignOptUuidVar
			UuidGen implMySqlReadTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlReadTableDerivedClassCodeAssignReqBlobVar
			BoolDef implMySqlReadTableDerivedClassCodeAssignReqBoolVar
			EnumDef implMySqlReadTableDerivedClassCodeAssignReqEnumVar
			Int16Def implMySqlReadTableDerivedClassCodeAssignReqInt16Var
			Int32Def implMySqlReadTableDerivedClassCodeAssignReqInt32Var
			Int64Def implMySqlReadTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implMySqlReadTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implMySqlReadTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implMySqlReadTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implMySqlReadTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implMySqlReadTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implMySqlReadTableDerivedClassCodeAssignReqInt64Var
			FloatDef implMySqlReadTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implMySqlReadTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implMySqlReadTableDerivedClassCodeAssignReqNumberVar
			StringDef implMySqlReadTableDerivedClassCodeAssignReqStringVar
			TokenDef implMySqlReadTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implMySqlReadTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implMySqlReadTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implMySqlReadTableDerivedClassCodeAssignReqTextVar
			DateDef implMySqlReadTableDerivedClassCodeAssignReqDateVar
			TimeDef implMySqlReadTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implMySqlReadTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implMySqlReadTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implMySqlReadTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implMySqlReadTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implMySqlReadTableDerivedClassCodeAssignReqUuidVar
			UuidGen implMySqlReadTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqBlobVar">
			stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqBoolVar">
			stmtReadDerivedClassCode.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqEnumVar">
			stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqInt16Var">
			stmtReadDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqInt32Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqInt64Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqUInt16Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqUInt32Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqUInt64Var">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqFloatVar">
			stmtReadDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqDoubleVar">
			stmtReadDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqNumberVar">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqStringVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqNmTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqNmTokensVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqTextVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqTZDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqTZTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignReqUuidVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$reference BaseClass reference PrimaryKeyIndex Suffix$( Authorization$poptop Table reference PrimaryKeyIndex iterate Columns( each implReadTableDerivedInvokeSubClassPassPKeyArg )$ );
		}$implReadTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedInvokeSubClassPassPKeyArg">,
				PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$reference Column Name$()</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByPKey">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readDerived";$implCheckOpenTransaction$
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implReadTableDerivedInvokeReadBuff default implReadTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedByPKey">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff lockDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockDerived";$implCheckOpenTransaction$
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implLockTableDerivedInvokeLockBuff default implLockTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implLockTableDerivedAssembleSubClasses default implLockTableDerivedInvokeLockBuff$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc$( ?, ?, ?, ?, ?"$reference PrimaryKeyIndex iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtLockDerivedClassCode == null ) {
				stmtLockDerivedClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference PrimaryKeyIndex iterate Columns( each implMySqlLockTableDerivedClassCodeAssignVar )$
			try {
				resultSet = stmtLockDerivedClassCode.executeQuery();
			}$implMySqlLockDerivedClassCodeCatchBlah$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlLockDerivedClassCodeCatchBlah">
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlLockDerivedClassCodeBindSecClusterId">
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implMySqlLockDerivedClassCodeBindSecTenantId">
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implMySqlLockTableDerivedClassCodeAssignOptVar
			default implMySqlLockTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlLockTableDerivedClassCodeAssignOptBlobVar
			BoolDef implMySqlLockTableDerivedClassCodeAssignOptBoolVar
			EnumDef implMySqlLockTableDerivedClassCodeAssignOptEnumVar
			Int16Def implMySqlLockTableDerivedClassCodeAssignOptInt16Var
			Int32Def implMySqlLockTableDerivedClassCodeAssignOptInt32Var
			Int64Def implMySqlLockTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implMySqlLockTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implMySqlLockTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implMySqlLockTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implMySqlLockTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implMySqlLockTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implMySqlLockTableDerivedClassCodeAssignOptInt64Var
			FloatDef implMySqlLockTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implMySqlLockTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implMySqlLockTableDerivedClassCodeAssignOptNumberVar
			StringDef implMySqlLockTableDerivedClassCodeAssignOptStringVar
			TokenDef implMySqlLockTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implMySqlLockTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implMySqlLockTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implMySqlLockTableDerivedClassCodeAssignOptTextVar
			DateDef implMySqlLockTableDerivedClassCodeAssignOptDateVar
			TimeDef implMySqlLockTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implMySqlLockTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implMySqlLockTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implMySqlLockTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implMySqlLockTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implMySqlLockTableDerivedClassCodeAssignOptUuidVar
			UuidGen implMySqlLockTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlLockTableDerivedClassCodeAssignReqBlobVar
			BoolDef implMySqlLockTableDerivedClassCodeAssignReqBoolVar
			EnumDef implMySqlLockTableDerivedClassCodeAssignReqEnumVar
			Int16Def implMySqlLockTableDerivedClassCodeAssignReqInt16Var
			Int32Def implMySqlLockTableDerivedClassCodeAssignReqInt32Var
			Int64Def implMySqlLockTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implMySqlLockTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implMySqlLockTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implMySqlLockTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implMySqlLockTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implMySqlLockTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implMySqlLockTableDerivedClassCodeAssignReqInt64Var
			FloatDef implMySqlLockTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implMySqlLockTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implMySqlLockTableDerivedClassCodeAssignReqNumberVar
			StringDef implMySqlLockTableDerivedClassCodeAssignReqStringVar
			TokenDef implMySqlLockTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implMySqlLockTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implMySqlLockTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implMySqlLockTableDerivedClassCodeAssignReqTextVar
			DateDef implMySqlLockTableDerivedClassCodeAssignReqDateVar
			TimeDef implMySqlLockTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implMySqlLockTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implMySqlLockTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implMySqlLockTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implMySqlLockTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implMySqlLockTableDerivedClassCodeAssignReqUuidVar
			UuidGen implMySqlLockTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqBlobVar">
			stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqBoolVar">
			stmtLockDerivedClassCode.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqEnumVar">
			stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqInt16Var">
			stmtLockDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqInt32Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqInt64Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqUInt16Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqUInt32Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqUInt64Var">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqFloatVar">
			stmtLockDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqDoubleVar">
			stmtLockDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqNumberVar">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqStringVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqNmTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqNmTokensVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqTextVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqTZDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqTZTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignReqUuidVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implLockTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeReadAllBuff"
>		buffArray = readAllBuff( Authorization );
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadAllTableDerivedAssembleSubClasses default implReadAllTableDerivedInvokeReadAllBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClasses"
>		String classCode;
		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc_all$( ?, ?, ?, ?, ? )";
			if( stmtReadAllClassCode == null ) {
				stmtReadAllClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			try {
				resultSet = stmtReadAllClassCode.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			while( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				classCodeList.add( classCode );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}$implMySqlReadAllTableDerivedStillMoreCode$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadAllTableDerivedStillMoreCode">
		List&lt;$DefSchemaName$$TableName$Buff&gt; resultList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
		for( int classCodeIdx = 0; classCodeIdx &lt; classCodeList.size(); classCodeIdx ++ ) {
			$DefSchemaName$$TableName$Buff[] subList;
			classCode = classCodeList.get( classCodeIdx );
			if( classCode.equals( "$ClassCode$" ) ) {
				subList = readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
			for( int idxSubList = 0; idxSubList &lt; subList.length; idxSubList ++ ) {
				resultList.add( subList[ idxSubList ] );
			}
		}
		int idx = 0;
		buffArray = new $DefSchemaName$$TableName$Buff[ resultList.size() ];
		Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			buffArray[idx++] = iter.next();
		}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadAllClassCodeBindSecClusterId">
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadAllClassCodeBindSecTenantId">
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadAllTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				subList = schema.getTable$TableName$().readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerived">
	public $DefSchemaName$$TableName$Buff[] readAllDerived( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllDerived";
		$DefSchemaName$$TableName$Buff[] buffArray;$implCheckOpenTransaction$
$switch HasClassCode no implReadAllTableDerivedInvokeReadAllBuff default implReadAllTableDerivedCheckForSubClasses$<!--
-->		return( buffArray );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByIndexes"
		>$switch HasSuperClassRelation yes implReadTableDerivedByInhIndexes default implReadTableDerivedByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableDerivedByIndexes$$iterate Index( each implReadTableDerivedByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByBaseIndexes"
		>$iterate Index( each implReadTableDerivedByIndex )$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableDerivedByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByIndex"
		>$switch IsUnique
			yes implReadTableDerivedByUniqueIndex
			default implReadTableDerivedByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByUniqueIndexAssembleSubClasses default implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex"
>		buff = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableDerivedByUniqueIndexAssembleReqSubClasses$
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$poptop Table ClassCode$" ) ) {
			buff = readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexTopWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexOptDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexOptReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleOptSubClasses">
			String sql =
					getSqlSelect$poptop Table TableName$DistinctClassCode()
				+	"WHERE "
$iterate Columns( first implMySqlIndexColumnWhereFragBindVar each implMySqlIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			try {
				resultSet = stmt.executeQuery( sql );
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleReqSubClasses">
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?$iterate Columns( each implCommaQuestion )$ )";
			if( stmtReadClassCodeBy$Suffix$ == null ) {
				stmtReadClassCodeBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMySqlReadDerivedClassCodeBySuffixBindVar )$
			try {
				resultSet = stmtReadClassCodeBy$Suffix$.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadClassCodeBySuffixBindSecClusterId">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadClassCodeBySuffixBindSecTenantId">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindVar"
		>$switch IsNullable yes implMySqlReadDerivedClassCodeBySuffixBindOptVar
			default implMySqlReadDerivedClassCodeBySuffixBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlReadDerivedClassCodeBySuffixBindOptBlobVar
			BoolDef implMySqlReadDerivedClassCodeBySuffixBindOptBoolVar
			EnumDef implMySqlReadDerivedClassCodeBySuffixBindOptEnumVar
			Int16Def implMySqlReadDerivedClassCodeBySuffixBindOptInt16Var
			Int32Def implMySqlReadDerivedClassCodeBySuffixBindOptInt32Var
			Int64Def implMySqlReadDerivedClassCodeBySuffixBindOptInt64Var
			UInt16Def implMySqlReadDerivedClassCodeBySuffixBindOptUInt16Var
			UInt32Def implMySqlReadDerivedClassCodeBySuffixBindOptUInt32Var
			UInt64Def implMySqlReadDerivedClassCodeBySuffixBindOptUInt64Var
			Id16Gen implMySqlReadDerivedClassCodeBySuffixBindOptInt16Var
			Id32Gen implMySqlReadDerivedClassCodeBySuffixBindOptInt32Var
			Id64Gen implMySqlReadDerivedClassCodeBySuffixBindOptInt64Var
			FloatDef implMySqlReadDerivedClassCodeBySuffixBindOptFloatVar
			DoubleDef implMySqlReadDerivedClassCodeBySuffixBindOptDoubleVar
			NumberDef implMySqlReadDerivedClassCodeBySuffixBindOptNumberVar
			StringDef implMySqlReadDerivedClassCodeBySuffixBindOptStringVar
			TokenDef implMySqlReadDerivedClassCodeBySuffixBindOptTokenVar
			NmTokenDef implMySqlReadDerivedClassCodeBySuffixBindOptNmTokenVar
			NmTokensDef implMySqlReadDerivedClassCodeBySuffixBindOptNmTokensVar
			TextDef implMySqlReadDerivedClassCodeBySuffixBindOptTextVar
			DateDef implMySqlReadDerivedClassCodeBySuffixBindOptDateVar
			TimeDef implMySqlReadDerivedClassCodeBySuffixBindOptTimeVar
			TimestampDef implMySqlReadDerivedClassCodeBySuffixBindOptTimestampVar
			TZDateDef implMySqlReadDerivedClassCodeBySuffixBindOptTZDateVar
			TZTimeDef implMySqlReadDerivedClassCodeBySuffixBindOptTZTimeVar
			TZTimestampDef implMySqlReadDerivedClassCodeBySuffixBindOptTZTimestampVar
			UuidDef implMySqlReadDerivedClassCodeBySuffixBindOptUuidVar
			UuidGen implMySqlReadDerivedClassCodeBySuffixBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlReadDerivedClassCodeBySuffixBindReqBlobVar
			BoolDef implMySqlReadDerivedClassCodeBySuffixBindReqBoolVar
			EnumDef implMySqlReadDerivedClassCodeBySuffixBindReqEnumVar
			Int16Def implMySqlReadDerivedClassCodeBySuffixBindReqInt16Var
			Int32Def implMySqlReadDerivedClassCodeBySuffixBindReqInt32Var
			Int64Def implMySqlReadDerivedClassCodeBySuffixBindReqInt64Var
			UInt16Def implMySqlReadDerivedClassCodeBySuffixBindReqUInt16Var
			UInt32Def implMySqlReadDerivedClassCodeBySuffixBindReqUInt32Var
			UInt64Def implMySqlReadDerivedClassCodeBySuffixBindReqUInt64Var
			Id16Gen implMySqlReadDerivedClassCodeBySuffixBindReqInt16Var
			Id32Gen implMySqlReadDerivedClassCodeBySuffixBindReqInt32Var
			Id64Gen implMySqlReadDerivedClassCodeBySuffixBindReqInt64Var
			FloatDef implMySqlReadDerivedClassCodeBySuffixBindReqFloatVar
			DoubleDef implMySqlReadDerivedClassCodeBySuffixBindReqDoubleVar
			NumberDef implMySqlReadDerivedClassCodeBySuffixBindReqNumberVar
			StringDef implMySqlReadDerivedClassCodeBySuffixBindReqStringVar
			TokenDef implMySqlReadDerivedClassCodeBySuffixBindReqTokenVar
			NmTokenDef implMySqlReadDerivedClassCodeBySuffixBindReqNmTokenVar
			NmTokensDef implMySqlReadDerivedClassCodeBySuffixBindReqNmTokensVar
			TextDef implMySqlReadDerivedClassCodeBySuffixBindReqTextVar
			DateDef implMySqlReadDerivedClassCodeBySuffixBindReqDateVar
			TimeDef implMySqlReadDerivedClassCodeBySuffixBindReqTimeVar
			TimestampDef implMySqlReadDerivedClassCodeBySuffixBindReqTimestampVar
			TZDateDef implMySqlReadDerivedClassCodeBySuffixBindReqTZDateVar
			TZTimeDef implMySqlReadDerivedClassCodeBySuffixBindReqTZTimeVar
			TZTimestampDef implMySqlReadDerivedClassCodeBySuffixBindReqTZTimestampVar
			UuidDef implMySqlReadDerivedClassCodeBySuffixBindReqUuidVar
			UuidGen implMySqlReadDerivedClassCodeBySuffixBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqBlobVar">
			stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptBlobVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqBoolVar">
			stmtReadClassCodeBy$Suffix$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptBoolVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqEnumVar">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptEnumVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqInt16Var">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqInt32Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqInt64Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqUInt16Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqUInt32Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqUInt64Var">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqFloatVar">
			stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptFloatVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqDoubleVar">
			stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqNumberVar">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptNumberVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqStringVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptStringVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqNmTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqNmTokensVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqTextVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptTextVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqTZDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqTZTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqTZTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindReqUuidVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadDerivedClassCodeBySuffixBindOptUuidVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedPassArg">,
				$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasClassCode"
		>$poptop Table HasClassCode$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "$SchemaName$MySql$poptop Table TableName$Table.readDerivedBy$Suffix$() ";
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByUniqueIndexInvokeReadBuff default implReadTableDerivedByUniqueIndexCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuff"
>		buff = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuff"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByDuplicateIndexAssembleSubClasses default implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleSubClasses"
>		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		String classCode;
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableDerivedByDuplicateIndexAssembleReqSubClasses$
			while( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				classCodeList.add( classCode );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}$implReadTableDerivedByDuplicateIndexAssembleSubClassesBuildList$
		int idx = 0;
		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ resultList.size() ];
		Iterator&lt;$DefSchemaName$$poptop Table Name$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			retBuff[idx++] = iter.next();
		}
		return( retBuff );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleSubClassesBuildList">
		List&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt; resultList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt;();
		ListIterator&lt;String&gt; classCodeIter = classCodeList.listIterator();
		while( classCodeIter.hasNext() ) {
			classCode = classCodeIter.next();
			if( classCode.equals( "$poptop Table ClassCode$" ) ) {
				$poptop Table DefSchemaName$$poptop Table Name$Buff[] subList
					= readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexTopWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
		}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexOptDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexOptReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleOptSubClasses">
			String sql =
					getSqlSelect$poptop Table TableName$DistinctClassCode()
				+	"WHERE "
$popto Index iterate Columns( first implMySqlIndexColumnWhereFragBindVar each implMySqlIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			try {
				resultSet = stmt.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleReqSubClasses">
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadClassCodeBy$Suffix$ == null ) {
				stmtReadClassCodeBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMySqlReadDerivedClassCodeBySuffixBindVar )$
			try {
				resultSet = stmtReadClassCodeBy$Suffix$.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedSubListPassArg">,
						$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				$DefSchemaName$$TableName$Buff[] subList
					= schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readDerivedBy$Suffix$";$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByDuplicateIndexInvokeReadBuff default implReadTableDerivedByDuplicateIndexCheckForSubClasses$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff readBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implReadTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlLocalizeTableKeys empty empty )$<!--
-->			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadBuffByPKey == null ) {
				stmtReadBuffByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlReadByPKeyTableAssignVar )$
			try {
				resultSet = stmtReadBuffByPKey.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadByPKeyBindSecClusterId">
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadByPKeyBindSecTenantId">
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignVar"
		>$switch IsNullable yes implMySqlReadByPKeyTableAssignOptVar
			default implMySqlReadByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlReadByPKeyTableAssignOptBlobVar
			BoolDef implMySqlReadByPKeyTableAssignOptBoolVar
			EnumDef implMySqlReadByPKeyTableAssignOptEnumVar
			Int16Def implMySqlReadByPKeyTableAssignOptInt16Var
			Int32Def implMySqlReadByPKeyTableAssignOptInt32Var
			Int64Def implMySqlReadByPKeyTableAssignOptInt64Var
			UInt16Def implMySqlReadByPKeyTableAssignOptUInt16Var
			UInt32Def implMySqlReadByPKeyTableAssignOptUInt32Var
			UInt64Def implMySqlReadByPKeyTableAssignOptUInt64Var
			Id16Gen implMySqlReadByPKeyTableAssignOptInt16Var
			Id32Gen implMySqlReadByPKeyTableAssignOptInt32Var
			Id64Gen implMySqlReadByPKeyTableAssignOptInt64Var
			FloatDef implMySqlReadByPKeyTableAssignOptFloatVar
			DoubleDef implMySqlReadByPKeyTableAssignOptDoubleVar
			NumberDef implMySqlReadByPKeyTableAssignOptNumberVar
			StringDef implMySqlReadByPKeyTableAssignOptStringVar
			TokenDef implMySqlReadByPKeyTableAssignOptTokenVar
			NmTokenDef implMySqlReadByPKeyTableAssignOptNmTokenVar
			NmTokensDef implMySqlReadByPKeyTableAssignOptNmTokensVar
			TextDef implMySqlReadByPKeyTableAssignOptTextVar
			DateDef implMySqlReadByPKeyTableAssignOptDateVar
			TimeDef implMySqlReadByPKeyTableAssignOptTimeVar
			TimestampDef implMySqlReadByPKeyTableAssignOptTimestampVar
			TZDateDef implMySqlReadByPKeyTableAssignOptTZDateVar
			TZTimeDef implMySqlReadByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implMySqlReadByPKeyTableAssignOptTZTimestampVar
			UuidDef implMySqlReadByPKeyTableAssignOptUuidVar
			UuidGen implMySqlReadByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlReadByPKeyTableAssignReqBlobVar
			BoolDef implMySqlReadByPKeyTableAssignReqBoolVar
			EnumDef implMySqlReadByPKeyTableAssignReqEnumVar
			Int16Def implMySqlReadByPKeyTableAssignReqInt16Var
			Int32Def implMySqlReadByPKeyTableAssignReqInt32Var
			Int64Def implMySqlReadByPKeyTableAssignReqInt64Var
			UInt16Def implMySqlReadByPKeyTableAssignReqUInt16Var
			UInt32Def implMySqlReadByPKeyTableAssignReqUInt32Var
			UInt64Def implMySqlReadByPKeyTableAssignReqUInt64Var
			Id16Gen implMySqlReadByPKeyTableAssignReqInt16Var
			Id32Gen implMySqlReadByPKeyTableAssignReqInt32Var
			Id64Gen implMySqlReadByPKeyTableAssignReqInt64Var
			FloatDef implMySqlReadByPKeyTableAssignReqFloatVar
			DoubleDef implMySqlReadByPKeyTableAssignReqDoubleVar
			NumberDef implMySqlReadByPKeyTableAssignReqNumberVar
			StringDef implMySqlReadByPKeyTableAssignReqStringVar
			TokenDef implMySqlReadByPKeyTableAssignReqTokenVar
			NmTokenDef implMySqlReadByPKeyTableAssignReqNmTokenVar
			NmTokensDef implMySqlReadByPKeyTableAssignReqNmTokensVar
			TextDef implMySqlReadByPKeyTableAssignReqTextVar
			DateDef implMySqlReadByPKeyTableAssignReqDateVar
			TimeDef implMySqlReadByPKeyTableAssignReqTimeVar
			TimestampDef implMySqlReadByPKeyTableAssignReqTimestampVar
			TZDateDef implMySqlReadByPKeyTableAssignReqTZDateVar
			TZTimeDef implMySqlReadByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implMySqlReadByPKeyTableAssignReqTZTimestampVar
			UuidDef implMySqlReadByPKeyTableAssignReqUuidVar
			UuidGen implMySqlReadByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqBlobVar">
			stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqBoolVar">
			stmtReadBuffByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqEnumVar">
			stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqInt16Var">
			stmtReadBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqInt32Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqInt64Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqUInt16Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqUInt32Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqUInt64Var">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqFloatVar">
			stmtReadBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqDoubleVar">
			stmtReadBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqNumberVar">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqStringVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqNmTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqNmTokensVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqTextVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqTZDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqTZTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqTZTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignReqUuidVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadByPKeyTableAssignClassCode">
			stmtReadBuffByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff lockBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implLockTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlLocalizeTableKeys empty empty )$<!--
-->			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_lock_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtLockBuffByPKey == null ) {
				stmtLockBuffByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlLockByPKeyTableAssignVar )$
			try {
				resultSet = stmtLockBuffByPKey.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignVar"
		>$switch IsNullable yes implMySqlLockByPKeyTableAssignOptVar
			default implMySqlLockByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlLockByPKeyTableAssignOptBlobVar
			BoolDef implMySqlLockByPKeyTableAssignOptBoolVar
			EnumDef implMySqlLockByPKeyTableAssignOptEnumVar
			Int16Def implMySqlLockByPKeyTableAssignOptInt16Var
			Int32Def implMySqlLockByPKeyTableAssignOptInt32Var
			Int64Def implMySqlLockByPKeyTableAssignOptInt64Var
			UInt16Def implMySqlLockByPKeyTableAssignOptUInt16Var
			UInt32Def implMySqlLockByPKeyTableAssignOptUInt32Var
			UInt64Def implMySqlLockByPKeyTableAssignOptUInt64Var
			Id16Gen implMySqlLockByPKeyTableAssignOptInt16Var
			Id32Gen implMySqlLockByPKeyTableAssignOptInt32Var
			Id64Gen implMySqlLockByPKeyTableAssignOptInt64Var
			FloatDef implMySqlLockByPKeyTableAssignOptFloatVar
			DoubleDef implMySqlLockByPKeyTableAssignOptDoubleVar
			NumberDef implMySqlLockByPKeyTableAssignOptNumberVar
			StringDef implMySqlLockByPKeyTableAssignOptStringVar
			TokenDef implMySqlLockByPKeyTableAssignOptTokenVar
			NmTokenDef implMySqlLockByPKeyTableAssignOptNmTokenVar
			NmTokensDef implMySqlLockByPKeyTableAssignOptNmTokensVar
			TextDef implMySqlLockByPKeyTableAssignOptTextVar
			DateDef implMySqlLockByPKeyTableAssignOptDateVar
			TimeDef implMySqlLockByPKeyTableAssignOptTimeVar
			TimestampDef implMySqlLockByPKeyTableAssignOptTimestampVar
			TZDateDef implMySqlLockByPKeyTableAssignOptTZDateVar
			TZTimeDef implMySqlLockByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implMySqlLockByPKeyTableAssignOptTZTimestampVar
			UuidDef implMySqlLockByPKeyTableAssignOptUuidVar
			UuidGen implMySqlLockByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlLockByPKeyTableAssignReqBlobVar
			BoolDef implMySqlLockByPKeyTableAssignReqBoolVar
			EnumDef implMySqlLockByPKeyTableAssignReqEnumVar
			Int16Def implMySqlLockByPKeyTableAssignReqInt16Var
			Int32Def implMySqlLockByPKeyTableAssignReqInt32Var
			Int64Def implMySqlLockByPKeyTableAssignReqInt64Var
			UInt16Def implMySqlLockByPKeyTableAssignReqUInt16Var
			UInt32Def implMySqlLockByPKeyTableAssignReqUInt32Var
			UInt64Def implMySqlLockByPKeyTableAssignReqUInt64Var
			Id16Gen implMySqlLockByPKeyTableAssignReqInt16Var
			Id32Gen implMySqlLockByPKeyTableAssignReqInt32Var
			Id64Gen implMySqlLockByPKeyTableAssignReqInt64Var
			FloatDef implMySqlLockByPKeyTableAssignReqFloatVar
			DoubleDef implMySqlLockByPKeyTableAssignReqDoubleVar
			NumberDef implMySqlLockByPKeyTableAssignReqNumberVar
			StringDef implMySqlLockByPKeyTableAssignReqStringVar
			TokenDef implMySqlLockByPKeyTableAssignReqTokenVar
			NmTokenDef implMySqlLockByPKeyTableAssignReqNmTokenVar
			NmTokensDef implMySqlLockByPKeyTableAssignReqNmTokensVar
			TextDef implMySqlLockByPKeyTableAssignReqTextVar
			DateDef implMySqlLockByPKeyTableAssignReqDateVar
			TimeDef implMySqlLockByPKeyTableAssignReqTimeVar
			TimestampDef implMySqlLockByPKeyTableAssignReqTimestampVar
			TZDateDef implMySqlLockByPKeyTableAssignReqTZDateVar
			TZTimeDef implMySqlLockByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implMySqlLockByPKeyTableAssignReqTZTimestampVar
			UuidDef implMySqlLockByPKeyTableAssignReqUuidVar
			UuidGen implMySqlLockByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqBlobVar">
			stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqBoolVar">
			stmtLockBuffByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqEnumVar">
			stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqInt16Var">
			stmtLockBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqInt32Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqInt64Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqUInt16Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqUInt32Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqUInt64Var">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqFloatVar">
			stmtLockBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqDoubleVar">
			stmtLockBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqNumberVar">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqStringVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqNmTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqNmTokensVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqTextVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqTZDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqTZTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqTZTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignReqUuidVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlLockByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffWhereClassCode">
				+	"WHERE "
				+		"$lower reference BaseClass ClassCode$.ClassCode = '$ClassCode$' "</GenRule>

	<GenRule GenDef="Object" Name="implBuffIndexColumnOrderBy">
				+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implBuffIndexColumnCommaOrderBy"
		>$implBuffIndexColumnOrderBy$ + ", "</GenRule>


	<GenRule GenDef="Table" Name="implReadTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implReadTableBuffByInhIndexes default implReadTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableBuffByIndexes$$iterate Index( each implReadTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByBaseIndexes"
		>$iterate Index( each implReadTableBuffByIndex )$</GenRule>


	<GenRule GenDef="Table" Name="implReadAllTableBuff">
	public $DefSchemaName$$TableName$Buff[] readAllBuff( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implReadAllTableBuffTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableBuffTryBody">
			Connection cnx = schema.getCnx();
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_all$( ?, ?, ?, ?, ? )";
			if( stmtReadAllBuff == null ) {
				stmtReadAllBuff = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			try {
				resultSet = stmtReadAllBuff.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			while( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );</GenRule>

	<GenRule GenDef="Table" Name="implPageAllTableBuffTryBody">
			Connection cnx = schema.getCnx();
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_page_dbtablename_all$( ?, ?, ?, ?, ?$reference BaseClass reference PrimaryKeyIndex iterate Columns( each emitCommaQuestion )$ )";
			if( stmtPageAllBuff == null ) {
				stmtPageAllBuff = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtPageAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtPageAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtPageAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlPageAllAssignOptPriorCol )$
			try {
				resultSet = stmtPageAllBuff.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			while( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptPriorCol"
		>$switch BaseModelAtomClass
			BlobDef implMySqlPageAllAssignOptBlobPriorCol
			BoolDef implMySqlPageAllAssignOptBoolPriorCol
			EnumDef implMySqlPageAllAssignOptEnumPriorCol
			Int16Def implMySqlPageAllAssignOptInt16PriorCol
			Int32Def implMySqlPageAllAssignOptInt32PriorCol
			Int64Def implMySqlPageAllAssignOptInt64PriorCol
			UInt16Def implMySqlPageAllAssignOptUInt16PriorCol
			UInt32Def implMySqlPageAllAssignOptUInt32PriorCol
			UInt64Def implMySqlPageAllAssignOptUInt64PriorCol
			Id16Gen implMySqlPageAllAssignOptInt16PriorCol
			Id32Gen implMySqlPageAllAssignOptInt32PriorCol
			Id64Gen implMySqlPageAllAssignOptInt64PriorCol
			FloatDef implMySqlPageAllAssignOptFloatPriorCol
			DoubleDef implMySqlPageAllAssignOptDoublePriorCol
			NumberDef implMySqlPageAllAssignOptNumberPriorCol
			StringDef implMySqlPageAllAssignOptStringPriorCol
			TokenDef implMySqlPageAllAssignOptTokenPriorCol
			NmTokenDef implMySqlPageAllAssignOptNmTokenPriorCol
			NmTokensDef implMySqlPageAllAssignOptNmTokensPriorCol
			TextDef implMySqlPageAllAssignOptTextPriorCol
			DateDef implMySqlPageAllAssignOptDatePriorCol
			TimeDef implMySqlPageAllAssignOptTimePriorCol
			TimestampDef implMySqlPageAllAssignOptTimestampPriorCol
			TZDateDef implMySqlPageAllAssignOptTZDatePriorCol
			TZTimeDef implMySqlPageAllAssignOptTZTimePriorCol
			TZTimestampDef implMySqlPageAllAssignOptTZTimestampPriorCol
			UuidDef implMySqlPageAllAssignOptUuidPriorCol
			UuidGen implMySqlPageAllAssignOptUuidPriorCol
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptBlobPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBytes( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptBoolPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBoolean( argIdx++, prior$Name$.booleanValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptEnumPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setShort( argIdx++, (short)prior$Name$.ordinal() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptInt16PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setShort( argIdx++, prior$Name$.shortValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptInt32PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptInt64PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptUInt16PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptUInt32PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptUInt64PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptFloatPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setFloat( argIdx++, prior$Name$.floatValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptDoublePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setDouble( argIdx++, prior$Name$.doubleValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptNumberPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptStringPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptTokenPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptNmTokenPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptNmTokensPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptTextPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptDatePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptTimePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptTimestampPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptTZDatePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptTZTimePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptTZTimestampPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageAllAssignOptUuidPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$.toString() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="emitCommaQuestion"
		>, ?</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadAllBindSecClusterId">
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implMySqlReadAllBindSecTenantId">
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByIndex"
		>$switch IsUnique
			yes implReadTableBuffByUniqueIndex
			default implReadTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByIndex"
		>$switch IsUnique
			yes empty
			default maybe_implPageTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="maybe_implPageTableBuffByDuplicateIndex"
		>$switch PageData yes implPageTableBuffByDuplicateIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableBuffByReqUniqueIndex$
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndex">
			String sql =
					getSqlSelect$poptop Table TableName$Buff()
				+	"WHERE "
$iterate Columns( first implMySqlIndexColumnWhereFragBindVar each implMySqlIndexColumnWhereAndFragBindVar )$$implMySqlWhereFragRestrictClassCode$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			try {
				resultSet = stmt.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}</GenRule>

	<GenRule GenDef="Object" Name="BaseHasSubClasses"
		>$poptop Table reference BaseClass HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlWhereFragRestrictClassCode"
		>$switch BaseHasSubClasses yes implMySqlWhereFragDoRestrict default empty$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlWhereFragDoRestrict">
				+		"AND "
				+			"$lower poptop Table reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'"</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqUniqueIndex">
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadBuffBy$Suffix$ == null ) {
				stmtReadBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMySqlReadBuffBySuffixAssignVar )$
			try {
				resultSet = stmtReadBuffBy$Suffix$.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="SecScope">$poptop Table SecScope$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlReadBuffBySuffixBindSecClusterId">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Index" Name="implMySqlReadBuffBySuffixBindSecTenantId">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignVar"
		>$switch IsNullable yes implMySqlReadBuffBySuffixAssignOptVar
			default implMySqlReadBuffBySuffixAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlReadBuffBySuffixAssignOptBlobVar
			BoolDef implMySqlReadBuffBySuffixAssignOptBoolVar
			EnumDef implMySqlReadBuffBySuffixAssignOptEnumVar
			Int16Def implMySqlReadBuffBySuffixAssignOptInt16Var
			Int32Def implMySqlReadBuffBySuffixAssignOptInt32Var
			Int64Def implMySqlReadBuffBySuffixAssignOptInt64Var
			UInt16Def implMySqlReadBuffBySuffixAssignOptUInt16Var
			UInt32Def implMySqlReadBuffBySuffixAssignOptUInt32Var
			UInt64Def implMySqlReadBuffBySuffixAssignOptUInt64Var
			Id16Gen implMySqlReadBuffBySuffixAssignOptInt16Var
			Id32Gen implMySqlReadBuffBySuffixAssignOptInt32Var
			Id64Gen implMySqlReadBuffBySuffixAssignOptInt64Var
			FloatDef implMySqlReadBuffBySuffixAssignOptFloatVar
			DoubleDef implMySqlReadBuffBySuffixAssignOptDoubleVar
			NumberDef implMySqlReadBuffBySuffixAssignOptNumberVar
			StringDef implMySqlReadBuffBySuffixAssignOptStringVar
			TokenDef implMySqlReadBuffBySuffixAssignOptTokenVar
			NmTokenDef implMySqlReadBuffBySuffixAssignOptNmTokenVar
			NmTokensDef implMySqlReadBuffBySuffixAssignOptNmTokensVar
			TextDef implMySqlReadBuffBySuffixAssignOptTextVar
			DateDef implMySqlReadBuffBySuffixAssignOptDateVar
			TimeDef implMySqlReadBuffBySuffixAssignOptTimeVar
			TimestampDef implMySqlReadBuffBySuffixAssignOptTimestampVar
			TZDateDef implMySqlReadBuffBySuffixAssignOptTZDateVar
			TZTimeDef implMySqlReadBuffBySuffixAssignOptTZTimeVar
			TZTimestampDef implMySqlReadBuffBySuffixAssignOptTZTimestampVar
			UuidDef implMySqlReadBuffBySuffixAssignOptUuidVar
			UuidGen implMySqlReadBuffBySuffixAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlReadBuffBySuffixAssignReqBlobVar
			BoolDef implMySqlReadBuffBySuffixAssignReqBoolVar
			EnumDef implMySqlReadBuffBySuffixAssignReqEnumVar
			Int16Def implMySqlReadBuffBySuffixAssignReqInt16Var
			Int32Def implMySqlReadBuffBySuffixAssignReqInt32Var
			Int64Def implMySqlReadBuffBySuffixAssignReqInt64Var
			UInt16Def implMySqlReadBuffBySuffixAssignReqUInt16Var
			UInt32Def implMySqlReadBuffBySuffixAssignReqUInt32Var
			UInt64Def implMySqlReadBuffBySuffixAssignReqUInt64Var
			Id16Gen implMySqlReadBuffBySuffixAssignReqInt16Var
			Id32Gen implMySqlReadBuffBySuffixAssignReqInt32Var
			Id64Gen implMySqlReadBuffBySuffixAssignReqInt64Var
			FloatDef implMySqlReadBuffBySuffixAssignReqFloatVar
			DoubleDef implMySqlReadBuffBySuffixAssignReqDoubleVar
			NumberDef implMySqlReadBuffBySuffixAssignReqNumberVar
			StringDef implMySqlReadBuffBySuffixAssignReqStringVar
			TokenDef implMySqlReadBuffBySuffixAssignReqTokenVar
			NmTokenDef implMySqlReadBuffBySuffixAssignReqNmTokenVar
			NmTokensDef implMySqlReadBuffBySuffixAssignReqNmTokensVar
			TextDef implMySqlReadBuffBySuffixAssignReqTextVar
			DateDef implMySqlReadBuffBySuffixAssignReqDateVar
			TimeDef implMySqlReadBuffBySuffixAssignReqTimeVar
			TimestampDef implMySqlReadBuffBySuffixAssignReqTimestampVar
			TZDateDef implMySqlReadBuffBySuffixAssignReqTZDateVar
			TZTimeDef implMySqlReadBuffBySuffixAssignReqTZTimeVar
			TZTimestampDef implMySqlReadBuffBySuffixAssignReqTZTimestampVar
			UuidDef implMySqlReadBuffBySuffixAssignReqUuidVar
			UuidGen implMySqlReadBuffBySuffixAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqBlobVar">
			stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqBoolVar">
			stmtReadBuffBy$Suffix$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqEnumVar">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqInt16Var">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqInt32Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqInt64Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqUInt16Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqUInt32Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqUInt64Var">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqFloatVar">
			stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqDoubleVar">
			stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqNumberVar">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqStringVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqNmTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqNmTokensVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqTextVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqTZDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqTZTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqTZTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignReqUuidVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlReadBuffBySuffixAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableBuffByReqDuplicateIndex$
			List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
			while( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndex">
			String sql =
					getSqlSelect$poptop Table TableName$Buff()
				+	"WHERE "
$popto Index iterate Columns( first implMySqlIndexColumnWhereFragBindVar each implMySqlIndexColumnWhereAndFragBindVar )$$implMySqlWhereFragRestrictClassCode$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );
			try {
				resultSet = stmt.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqDuplicateIndex">
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadBuffBy$Suffix$ == null ) {
				stmtReadBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMySqlReadBuffBySuffixAssignVar )$
			try {
				resultSet = stmtReadBuffBy$Suffix$.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByReqDuplicateIndex">
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_page_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtPageBuffBy$Suffix$ == null ) {
				stmtPageBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtPageBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMySqlPageBuffBySuffixAssignVar )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlPageByIndexAssignOptPriorCol )$
			try {
				resultSet = stmtPageBuffBy$Suffix$.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignVar"
		>$switch IsNullable yes implMySqlPageBuffBySuffixAssignOptVar
			default implMySqlPageBuffBySuffixAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlPageBuffBySuffixAssignOptBlobVar
			BoolDef implMySqlPageBuffBySuffixAssignOptBoolVar
			EnumDef implMySqlPageBuffBySuffixAssignOptEnumVar
			Int16Def implMySqlPageBuffBySuffixAssignOptInt16Var
			Int32Def implMySqlPageBuffBySuffixAssignOptInt32Var
			Int64Def implMySqlPageBuffBySuffixAssignOptInt64Var
			UInt16Def implMySqlPageBuffBySuffixAssignOptUInt16Var
			UInt32Def implMySqlPageBuffBySuffixAssignOptUInt32Var
			UInt64Def implMySqlPageBuffBySuffixAssignOptUInt64Var
			Id16Gen implMySqlPageBuffBySuffixAssignOptInt16Var
			Id32Gen implMySqlPageBuffBySuffixAssignOptInt32Var
			Id64Gen implMySqlPageBuffBySuffixAssignOptInt64Var
			FloatDef implMySqlPageBuffBySuffixAssignOptFloatVar
			DoubleDef implMySqlPageBuffBySuffixAssignOptDoubleVar
			NumberDef implMySqlPageBuffBySuffixAssignOptNumberVar
			StringDef implMySqlPageBuffBySuffixAssignOptStringVar
			TokenDef implMySqlPageBuffBySuffixAssignOptTokenVar
			NmTokenDef implMySqlPageBuffBySuffixAssignOptNmTokenVar
			NmTokensDef implMySqlPageBuffBySuffixAssignOptNmTokensVar
			TextDef implMySqlPageBuffBySuffixAssignOptTextVar
			DateDef implMySqlPageBuffBySuffixAssignOptDateVar
			TimeDef implMySqlPageBuffBySuffixAssignOptTimeVar
			TimestampDef implMySqlPageBuffBySuffixAssignOptTimestampVar
			TZDateDef implMySqlPageBuffBySuffixAssignOptTZDateVar
			TZTimeDef implMySqlPageBuffBySuffixAssignOptTZTimeVar
			TZTimestampDef implMySqlPageBuffBySuffixAssignOptTZTimestampVar
			UuidDef implMySqlPageBuffBySuffixAssignOptUuidVar
			UuidGen implMySqlPageBuffBySuffixAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlPageBuffBySuffixAssignReqBlobVar
			BoolDef implMySqlPageBuffBySuffixAssignReqBoolVar
			EnumDef implMySqlPageBuffBySuffixAssignReqEnumVar
			Int16Def implMySqlPageBuffBySuffixAssignReqInt16Var
			Int32Def implMySqlPageBuffBySuffixAssignReqInt32Var
			Int64Def implMySqlPageBuffBySuffixAssignReqInt64Var
			UInt16Def implMySqlPageBuffBySuffixAssignReqUInt16Var
			UInt32Def implMySqlPageBuffBySuffixAssignReqUInt32Var
			UInt64Def implMySqlPageBuffBySuffixAssignReqUInt64Var
			Id16Gen implMySqlPageBuffBySuffixAssignReqInt16Var
			Id32Gen implMySqlPageBuffBySuffixAssignReqInt32Var
			Id64Gen implMySqlPageBuffBySuffixAssignReqInt64Var
			FloatDef implMySqlPageBuffBySuffixAssignReqFloatVar
			DoubleDef implMySqlPageBuffBySuffixAssignReqDoubleVar
			NumberDef implMySqlPageBuffBySuffixAssignReqNumberVar
			StringDef implMySqlPageBuffBySuffixAssignReqStringVar
			TokenDef implMySqlPageBuffBySuffixAssignReqTokenVar
			NmTokenDef implMySqlPageBuffBySuffixAssignReqNmTokenVar
			NmTokensDef implMySqlPageBuffBySuffixAssignReqNmTokensVar
			TextDef implMySqlPageBuffBySuffixAssignReqTextVar
			DateDef implMySqlPageBuffBySuffixAssignReqDateVar
			TimeDef implMySqlPageBuffBySuffixAssignReqTimeVar
			TimestampDef implMySqlPageBuffBySuffixAssignReqTimestampVar
			TZDateDef implMySqlPageBuffBySuffixAssignReqTZDateVar
			TZTimeDef implMySqlPageBuffBySuffixAssignReqTZTimeVar
			TZTimestampDef implMySqlPageBuffBySuffixAssignReqTZTimestampVar
			UuidDef implMySqlPageBuffBySuffixAssignReqUuidVar
			UuidGen implMySqlPageBuffBySuffixAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqBlobVar">
			stmtPageBuffBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqBoolVar">
			stmtPageBuffBy$Suffix$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqEnumVar">
			stmtPageBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqInt16Var">
			stmtPageBuffBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqInt32Var">
			stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqInt64Var">
			stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqUInt16Var">
			stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqUInt32Var">
			stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqUInt64Var">
			stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqFloatVar">
			stmtPageBuffBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqDoubleVar">
			stmtPageBuffBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqNumberVar">
			stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqStringVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptStringVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqTokenVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqNmTokenVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqNmTokensVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqTextVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptTextVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqDateVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptDateVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqTimeVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqTimestampVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqTZDateVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqTZTimeVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqTZTimestampVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignReqUuidVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlPageBuffBySuffixAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptPriorCol"
		>$switch BaseModelAtomClass
			BlobDef implMySqlPageByIndexAssignOptBlobPriorCol
			BoolDef implMySqlPageByIndexAssignOptBoolPriorCol
			EnumDef implMySqlPageByIndexAssignOptEnumPriorCol
			Int16Def implMySqlPageByIndexAssignOptInt16PriorCol
			Int32Def implMySqlPageByIndexAssignOptInt32PriorCol
			Int64Def implMySqlPageByIndexAssignOptInt64PriorCol
			UInt16Def implMySqlPageByIndexAssignOptUInt16PriorCol
			UInt32Def implMySqlPageByIndexAssignOptUInt32PriorCol
			UInt64Def implMySqlPageByIndexAssignOptUInt64PriorCol
			Id16Gen implMySqlPageByIndexAssignOptInt16PriorCol
			Id32Gen implMySqlPageByIndexAssignOptInt32PriorCol
			Id64Gen implMySqlPageByIndexAssignOptInt64PriorCol
			FloatDef implMySqlPageByIndexAssignOptFloatPriorCol
			DoubleDef implMySqlPageByIndexAssignOptDoublePriorCol
			NumberDef implMySqlPageByIndexAssignOptNumberPriorCol
			StringDef implMySqlPageByIndexAssignOptStringPriorCol
			TokenDef implMySqlPageByIndexAssignOptTokenPriorCol
			NmTokenDef implMySqlPageByIndexAssignOptNmTokenPriorCol
			NmTokensDef implMySqlPageByIndexAssignOptNmTokensPriorCol
			TextDef implMySqlPageByIndexAssignOptTextPriorCol
			DateDef implMySqlPageByIndexAssignOptDatePriorCol
			TimeDef implMySqlPageByIndexAssignOptTimePriorCol
			TimestampDef implMySqlPageByIndexAssignOptTimestampPriorCol
			TZDateDef implMySqlPageByIndexAssignOptTZDatePriorCol
			TZTimeDef implMySqlPageByIndexAssignOptTZTimePriorCol
			TZTimestampDef implMySqlPageByIndexAssignOptTZTimestampPriorCol
			UuidDef implMySqlPageByIndexAssignOptUuidPriorCol
			UuidGen implMySqlPageByIndexAssignOptUuidPriorCol
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptBlobPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBytes( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptBoolPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBoolean( argIdx++, prior$Name$.booleanValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptEnumPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setShort( argIdx++, (short)prior$Name$.ordinal() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptInt16PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setShort( argIdx++, prior$Name$.shortValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptInt32PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptInt64PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptUInt16PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptUInt32PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptUInt64PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptFloatPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setFloat( argIdx++, prior$Name$.floatValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptDoublePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setDouble( argIdx++, prior$Name$.doubleValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptNumberPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptStringPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptTokenPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptNmTokenPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptNmTokensPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptTextPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptDatePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptTimePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptTimestampPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptTZDatePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptTZTimePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptTZTimestampPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlPageByIndexAssignOptUuidPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$.toString() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>



















	<GenRule GenDef="Index" Name="implReadTableByIndex"
		>$switch IsUnique
			yes implReadTableByUniqueIndex
			default implReadTableByDuplicateIndex$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlIndexColumnWhereAndFragBindVar">
			+	"AND "
$implMySqlIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implMySqlIndexColumnWhereFragBindOptVar
			default implMySqlIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlIndexColumnWhereFragBindOptBlobVar
			BoolDef implMySqlIndexColumnWhereFragBindOptBoolVar
			EnumDef implMySqlIndexColumnWhereFragBindOptEnumVar
			Int16Def implMySqlIndexColumnWhereFragBindOptInt16Var
			Int32Def implMySqlIndexColumnWhereFragBindOptInt32Var
			Int64Def implMySqlIndexColumnWhereFragBindOptInt64Var
			UInt16Def implMySqlIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implMySqlIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implMySqlIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implMySqlIndexColumnWhereFragBindOptInt16Var
			Id32Gen implMySqlIndexColumnWhereFragBindOptInt32Var
			Id64Gen implMySqlIndexColumnWhereFragBindOptInt64Var
			FloatDef implMySqlIndexColumnWhereFragBindOptFloatVar
			DoubleDef implMySqlIndexColumnWhereFragBindOptDoubleVar
			NumberDef implMySqlIndexColumnWhereFragBindOptNumberVar
			StringDef implMySqlIndexColumnWhereFragBindOptStringVar
			TokenDef implMySqlIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implMySqlIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implMySqlIndexColumnWhereFragBindOptNmTokensVar
			TextDef implMySqlIndexColumnWhereFragBindOptTextVar
			DateDef implMySqlIndexColumnWhereFragBindOptDateVar
			TimeDef implMySqlIndexColumnWhereFragBindOptTimeVar
			TimestampDef implMySqlIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implMySqlIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implMySqlIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implMySqlIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implMySqlIndexColumnWhereFragBindOptUuidVar
			UuidGen implMySqlIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlIndexColumnWhereFragBindReqBlobVar
			BoolDef implMySqlIndexColumnWhereFragBindReqBoolVar
			EnumDef implMySqlIndexColumnWhereFragBindReqEnumVar
			Int16Def implMySqlIndexColumnWhereFragBindReqInt16Var
			Int32Def implMySqlIndexColumnWhereFragBindReqInt32Var
			Int64Def implMySqlIndexColumnWhereFragBindReqInt64Var
			UInt16Def implMySqlIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implMySqlIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implMySqlIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implMySqlIndexColumnWhereFragBindReqInt16Var
			Id32Gen implMySqlIndexColumnWhereFragBindReqInt32Var
			Id64Gen implMySqlIndexColumnWhereFragBindReqInt64Var
			FloatDef implMySqlIndexColumnWhereFragBindReqFloatVar
			DoubleDef implMySqlIndexColumnWhereFragBindReqDoubleVar
			NumberDef implMySqlIndexColumnWhereFragBindReqNumberVar
			StringDef implMySqlIndexColumnWhereFragBindReqStringVar
			TokenDef implMySqlIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implMySqlIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implMySqlIndexColumnWhereFragBindReqNmTokensVar
			TextDef implMySqlIndexColumnWhereFragBindReqTextVar
			DateDef implMySqlIndexColumnWhereFragBindReqDateVar
			TimeDef implMySqlIndexColumnWhereFragBindReqTimeVar
			TimestampDef implMySqlIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implMySqlIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implMySqlIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implMySqlIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implMySqlIndexColumnWhereFragBindReqUuidVar
			UuidGen implMySqlIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqBlobVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getBlobString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptBlobVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getBlobString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqBoolVar"
>				+		( $Name$ ? "$lower ClassCode$.$DbColumnName$ = true " : "$lower ClassCode$.$DbColumnName$ = false " )
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptBoolVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null " :
								( $Name$ ? "true, " : "false, " ) )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqEnumVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptEnumVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqInt16Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqInt32Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqInt64Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqUInt16Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptUInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqUInt32Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptUInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqUInt64Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptUInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqFloatVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptFloatVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqDoubleVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptDoubleVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqNumberVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptNumberVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqStringVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptStringVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqTokenVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqNmTokenVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptNmTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqNmTokensVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptNmTokensVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqTextVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptTextVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqDateVar"
>				+		"date( " + $SchemaName$MySqlSchema.getDateString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = date( " + $SchemaName$MySqlSchema.getDateString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqTimeVar"
>				+		"time( " + $SchemaName$MySqlSchema.getTimeString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = time( " + $SchemaName$MySqlSchema.getTimeString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqTimestampVar"
>				+		"timestamp( " + $SchemaName$MySqlSchema.getTimestampString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTimestampString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqTZDateVar"
>				+		"timestamp( " + $SchemaName$MySqlSchema.getTZDateString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptTZDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTZDateString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqTZTimeVar"
>				+		"timestamp( " + $SchemaName$MySqlSchema.getTimeString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptTZTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqTZTimestampVar"
>				+		"timestamp( " + $SchemaName$MySqlSchema.getTimestampString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptTZTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindReqUuidVar"
>				+		"$lower ClassCode$.$DbColumnName$ = '" + $Name$.toString() + "' "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragBindOptUuidVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = '" + $Name$.toString() + "' " )</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlIndexColumnWhereAndFragValueVar">
					+	"AND "
$implMySqlIndexColumnWhereFragValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnCommaArgValueVar"> + ", "$implMySqlIndexColumnArgValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlCommaArgRevision"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlIndexColumnArgValueWhereFragValueGeneric
			BoolDef implMySqlIndexColumnArgValueWhereFragValueBool
			EnumDef implMySqlIndexColumnArgValueWhereFragValueGeneric
			Int16Def implMySqlIndexColumnArgValueWhereFragValueGeneric
			Int32Def implMySqlIndexColumnArgValueWhereFragValueGeneric
			Int64Def implMySqlIndexColumnArgValueWhereFragValueGeneric
			UInt16Def implMySqlIndexColumnArgValueWhereFragValueGeneric
			UInt32Def implMySqlIndexColumnArgValueWhereFragValueGeneric
			UInt64Def implMySqlIndexColumnArgValueWhereFragValueGeneric
			Id16Gen implMySqlIndexColumnArgValueWhereFragValueGeneric
			Id32Gen implMySqlIndexColumnArgValueWhereFragValueGeneric
			Id64Gen implMySqlIndexColumnArgValueWhereFragValueGeneric
			FloatDef implMySqlIndexColumnArgValueWhereFragValueFloat
			DoubleDef implMySqlIndexColumnArgValueWhereFragValueGeneric
			NumberDef implMySqlIndexColumnArgValueWhereFragValueGeneric
			StringDef implMySqlIndexColumnArgValueWhereFragValueGeneric
			TokenDef implMySqlIndexColumnArgValueWhereFragValueGeneric
			NmTokenDef implMySqlIndexColumnArgValueWhereFragValueGeneric
			NmTokensDef implMySqlIndexColumnArgValueWhereFragValueGeneric
			TextDef implMySqlIndexColumnArgValueWhereFragValueText
			DateDef implMySqlIndexColumnArgValueWhereFragValueDate
			TimeDef implMySqlIndexColumnArgValueWhereFragValueTime
			TimestampDef implMySqlIndexColumnArgValueWhereFragValueTimestamp
			TZDateDef implMySqlIndexColumnArgValueWhereFragValueTZDate
			TZTimeDef implMySqlIndexColumnArgValueWhereFragValueTZTime
			TZTimestampDef implMySqlIndexColumnArgValueWhereFragValueTZTimestamp
			UuidDef implMySqlIndexColumnArgValueWhereFragValueGeneric
			UuidGen implMySqlIndexColumnArgValueWhereFragValueGeneric
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueGeneric">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueFloat">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueText">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueBool">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueDate">
				+		"date( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueTime">
				+		"time( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueTimestamp">
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueTZDate">
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueTZTime">
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueTZTimestamp">
				+		"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnArgValueWhereFragValueUuid">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlIndexColumnWhereFragValueGenericVar
			BoolDef implMySqlIndexColumnWhereFragValueBoolVar
			EnumDef implMySqlIndexColumnWhereFragValueGenericVar
			Int16Def implMySqlIndexColumnWhereFragValueGenericVar
			Int32Def implMySqlIndexColumnWhereFragValueGenericVar
			Int64Def implMySqlIndexColumnWhereFragValueGenericVar
			UInt16Def implMySqlIndexColumnWhereFragValueGenericVar
			UInt32Def implMySqlIndexColumnWhereFragValueGenericVar
			UInt64Def implMySqlIndexColumnWhereFragValueGenericVar
			Id16Gen implMySqlIndexColumnWhereFragValueGenericVar
			Id32Gen implMySqlIndexColumnWhereFragValueGenericVar
			Id64Gen implMySqlIndexColumnWhereFragValueGenericVar
			FloatDef implMySqlIndexColumnWhereFragValueFloatVar
			DoubleDef implMySqlIndexColumnWhereFragValueGenericVar
			NumberDef implMySqlIndexColumnWhereFragValueGenericVar
			StringDef implMySqlIndexColumnWhereFragValueGenericVar
			TokenDef implMySqlIndexColumnWhereFragValueGenericVar
			NmTokenDef implMySqlIndexColumnWhereFragValueGenericVar
			NmTokensDef implMySqlIndexColumnWhereFragValueGenericVar
			TextDef implMySqlIndexColumnWhereFragValueTextVar
			DateDef implMySqlIndexColumnWhereFragValueDateVar
			TimeDef implMySqlIndexColumnWhereFragValueTimeVar
			TimestampDef implMySqlIndexColumnWhereFragValueTimestampVar
			TZDateDef implMySqlIndexColumnWhereFragValueTZDateVar
			TZTimeDef implMySqlIndexColumnWhereFragValueTZTimeVar
			TZTimestampDef implMySqlIndexColumnWhereFragValueTZTimestampVar
			UuidDef implMySqlIndexColumnWhereFragValueGenericVar
			UuidGen implMySqlIndexColumnWhereFragValueGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueGenericVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueFloatVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueTextVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueBoolVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueDateVar"
>				+		"$lower ClassCode$.$DbColumnName$ = date( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueTimeVar"
>				+		"$lower ClassCode$.$DbColumnName$ = time( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueTimestampVar"
>				+		"$lower ClassCode$.$DbColumnName$ = timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueTZDateVar"
>				+		"$lower ClassCode$.$DbColumnName$ = timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueTZTimeVar"
>				+		"$lower ClassCode$.$DbColumnName$ = timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueTZTimestampVar"
>				+		"$lower ClassCode$.$DbColumnName$ = timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnWhereFragValueUuidVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlTableColumnSelectFragDbNameComma"
		>$reference Column implMySqlTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameComma"
>				+		"$switch BaseModelAtomClass
				BlobDef implMySqlTableColumnSelectFragDbNameBlob
				BoolDef implMySqlTableColumnSelectFragDbNameBool
				EnumDef implMySqlTableColumnSelectFragDbNameEnum
				Int16Def implMySqlTableColumnSelectFragDbNameInt16
				Int32Def implMySqlTableColumnSelectFragDbNameInt32
				Int64Def implMySqlTableColumnSelectFragDbNameInt64
				UInt16Def implMySqlTableColumnSelectFragDbNameUInt16
				UInt32Def implMySqlTableColumnSelectFragDbNameUInt32
				UInt64Def implMySqlTableColumnSelectFragDbNameUInt64
				Id16Gen implMySqlTableColumnSelectFragDbNameInt16
				Id32Gen implMySqlTableColumnSelectFragDbNameInt32
				Id64Gen implMySqlTableColumnSelectFragDbNameInt64
				FloatDef implMySqlTableColumnSelectFragDbNameFloat
				DoubleDef implMySqlTableColumnSelectFragDbNameDouble
				NumberDef implMySqlTableColumnSelectFragDbNameNumber
				StringDef implMySqlTableColumnSelectFragDbNameString
				TokenDef implMySqlTableColumnSelectFragDbNameToken
				NmTokenDef implMySqlTableColumnSelectFragDbNameNmToken
				NmTokensDef implMySqlTableColumnSelectFragDbNameNmTokens
				TextDef implMySqlTableColumnSelectFragDbNameText
				DateDef implMySqlTableColumnSelectFragDbNameDate
				TimeDef implMySqlTableColumnSelectFragDbNameTime
				TimestampDef implMySqlTableColumnSelectFragDbNameTimestamp
				TZDateDef implMySqlTableColumnSelectFragDbNameTZDate
				TZTimeDef implMySqlTableColumnSelectFragDbNameTZTime
				TZTimestampDef implMySqlTableColumnSelectFragDbNameTZTimestamp
				UuidDef implMySqlTableColumnSelectFragDbNameUuid
				UuidGen implMySqlTableColumnSelectFragDbNameUuid
				default empty$, "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameBlob"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameBool"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameEnum"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameInt16"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameInt32"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameInt64"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameUInt16"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameUInt32"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameUInt64"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameFloat"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameDouble"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameNumber"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameString"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameToken"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameNmToken"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameNmTokens"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameText"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameDate"
		>date_format( $lower ClassCode$.$DbColumnName$, '%Y-%m-%d' ) as $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameTime"
		>date_format( $lower ClassCode$.$DbColumnName$, '%H:%i:%S' ) as $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameTimestamp"
		>date_format( $lower ClassCode$.$DbColumnName$, '%Y-%m-%d %H:%i:%S' ) as $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameTZDate"
		>date_format( $lower ClassCode$.$DbColumnName$, '%Y-%m-%d %H:%i:%S' ) as $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameTZTime"
		>date_format( $lower ClassCode$.$DbColumnName$, '%Y-%m-%d %H:%i:%S' ) as $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameTZTimestamp"
		>date_format( $lower ClassCode$.$DbColumnName$, '%Y-%m-%d %H:%i:%S' ) as $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbNameUuid"
		>$lower ClassCode$.$DbColumnName$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnSelectFragDbName"
>			+		"$switch BaseModelAtomClass
			BlobDef implMySqlTableColumnSelectFragDbNameBlob
			BoolDef implMySqlTableColumnSelectFragDbNameBool
			EnumDef implMySqlTableColumnSelectFragDbNameEnum
			Int16Def implMySqlTableColumnSelectFragDbNameInt16
			Int32Def implMySqlTableColumnSelectFragDbNameInt32
			Int64Def implMySqlTableColumnSelectFragDbNameInt64
			UInt16Def implMySqlTableColumnSelectFragDbNameUInt16
			UInt32Def implMySqlTableColumnSelectFragDbNameUInt32
			UInt64Def implMySqlTableColumnSelectFragDbNameUInt64
			Id16Gen implMySqlTableColumnSelectFragDbNameInt16
			Id32Gen implMySqlTableColumnSelectFragDbNameInt32
			Id64Gen implMySqlTableColumnSelectFragDbNameInt64
			FloatDef implMySqlTableColumnSelectFragDbNameFloat
			DoubleDef implMySqlTableColumnSelectFragDbNameDouble
			NumberDef implMySqlTableColumnSelectFragDbNameNumber
			StringDef implMySqlTableColumnSelectFragDbNameString
			TokenDef implMySqlTableColumnSelectFragDbNameToken
			NmTokenDef implMySqlTableColumnSelectFragDbNameNmToken
			NmTokensDef implMySqlTableColumnSelectFragDbNameNmTokens
			TextDef implMySqlTableColumnSelectFragDbNameText
			DateDef implMySqlTableColumnSelectFragDbNameDate
			TimeDef implMySqlTableColumnSelectFragDbNameTime
			TimestampDef implMySqlTableColumnSelectFragDbNameTimestamp
			TZDateDef implMySqlTableColumnSelectFragDbNameTZDate
			TZTimeDef implMySqlTableColumnSelectFragDbNameTZTime
			TZTimestampDef implMySqlTableColumnSelectFragDbNameTZTimestamp
			UuidDef implMySqlTableColumnSelectFragDbNameUuid
			UuidGen implMySqlTableColumnSelectFragDbNameUuid
			default empty$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implMySqlTableColumnSqlFragDbName"
>			+		"$lower ClassCode$.$DbColumnName$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implMySqlTableColumnSqlFragDbName"
>			+		"$lower ClassCode$.$DbColumnName$ "
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlIndexColumnOrderBy">
			+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implMySqlIndexColumnCommaOrderBy"
		>$implMySqlIndexColumnOrderBy$ + ", "</GenRule>

	<GenRule GenDef="IndexCol" Name="implUpdateTableCopyBuffToPKey">
			pkey.set$OptionalOrRequired$$Name$( Buff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableExtractRevision"
>			int Revision = Buff.getRequiredRevision();
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableCheckRevision"
>			int Revision = Buff.getRequiredRevision();
			$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey pkey = schema.getFactory$Name$().newPKey();$reference PrimaryKeyIndex iterate Columns( each implUpdateTableCopyBuffToPKey )$
			$SchemaName$$TableName$Buff readBuff = lockBuff( Authorization, pkey );
			if( readBuff == null ) {
				throw new CFLibStaleCacheDetectedException( getClass(),
					S_ProcName,
					"Attempted to update record which could not be locked/found",
					schema.getLowerDbSchemaName() + ".$lower DbTableName$",
					pkey );
			}
			int oldRevision = readBuff.getRequiredRevision();
			if( oldRevision != Revision ) {
				throw new CFLibCollisionDetectedException( getClass(),
					S_ProcName,
					Buff );
			}
			int newRevision = Revision + 1;</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSqlFragUpdateRevision">
				+		", Revision = ? "</GenRule>

	<GenRule GenDef="Table" Name="implMySqlUpdateTableSqlFragWhereAndRevision">
				+	"AND "
				+		"Revision = ? "</GenRule>


	<GenRule GenDef="Table" Name="implUpdateTable"
		>$<!-- switch InheritsBlob yes implUpdateTableOldStyle default -->implUpdateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableInitClassCode">
			String ClassCode = "$ClassCode$";</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractVars"
		>$switch HasSuperClassRelation yes implUpdateTableSPExtractInhVars default implUpdateTableSPExtractBaseVars$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractBaseVars"
		>$switch IsBaseTable yes implMySqlCreateTableCopyClassCode default empty$$iterate Columns( each implMySqlCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractInhVars"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPExtractVars$$iterate Columns( each implMySqlCreateTableCopyData empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implUpdateTableSPCopyInhColumns default implUpdateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPCopyColumns$$iterate DataColumns( each implMySqlCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implMySqlCreateTableCopyClassCode default empty$$iterate Columns( each implMySqlCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSP">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";
		ResultSet resultSet = null;
		try {$implUpdateTableSPTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPTryBody">
$implUpdateTableSPCopyColumns$			int Revision = Buff.getRequiredRevision();
			Connection cnx = schema.getCnx();
			String sql =
				"call " + schema.getLowerDbSchemaName() + ".$sp_update_dbtablename$( ?, ?, ?, ?, ?, ?"$implUpdateTableSPPassArgs$ + ", "
					+ "?" + " )";
			if( stmtUpdateByPKey == null ) {
				stmtUpdateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implMySqlUpdateTableBindClassCode default implMySqlUpdateTableBindConstClassCode$$implUpdateTableSPBindArgs$$implMySqlUpdateTableBindRevision$
			try {
				resultSet = stmtUpdateByPKey.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff updatedBuff = unpack$TableName$ResultSetToBuff( resultSet );
				if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}$implMySqlUpdateTableApplyBuff$$implMySqlUpdateTableApplyRevision$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlUpdateTableApplyRevision">
				Buff.setRequiredRevision( updatedBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implMySqlUpdateTableApplyBuff"
		>$switch HasSuperClassRelation yes implMySqlUpdateTableApplyInhBuff default implMySqlUpdateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlUpdateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implMySqlUpdateTableApplyBuff$$iterate Columns( each implMySqlUpdateTableApplyDataCol )$</GenRule>

	<!-- Note: Updates aren't allowed to change the primary key so we don't copy back those attributes -->
	<GenRule GenDef="Table" Name="implMySqlUpdateTableApplyBaseBuff"
		>$iterate Columns( each implMySqlUpdateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Value" Name="implMySqlUpdateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implMySqlUpdateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implMySqlUpdateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( updatedBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPBindInhArgs default implUpdateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPBindArgs$$iterate Columns( each implUpdateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindBaseArgs"
		>$iterate Columns( each implMySqlUpdateTableBindVar )$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implMySqlUpdateTableBindVar$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPPassInhArgs default implUpdateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPPassArgs$$iterate Columns( each implUpdateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassBaseArgs"
		>$iterate Columns( each implUpdateTableSPPassAnArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassBaseArgsClassCode"
		>?, </GenRule>
	<GenRule GenDef="Value" Name="implUpdateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implUpdateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implMySqlUpdateTableSPPassGenericVar
			BoolDef implMySqlUpdateTableSPPassGenericVar
			EnumDef implMySqlUpdateTableSPPassGenericVar
			Int16Def implMySqlUpdateTableSPPassGenericVar
			Int32Def implMySqlUpdateTableSPPassGenericVar
			Int64Def implMySqlUpdateTableSPPassGenericVar
			UInt16Def implMySqlUpdateTableSPPassGenericVar
			UInt32Def implMySqlUpdateTableSPPassGenericVar
			UInt64Def implMySqlUpdateTableSPPassGenericVar
			Id16Gen implMySqlUpdateTableSPPassGenericVar
			Id32Gen implMySqlUpdateTableSPPassGenericVar
			Id64Gen implMySqlUpdateTableSPPassGenericVar
			FloatDef implMySqlUpdateTableSPPassFloatVar
			DoubleDef implMySqlUpdateTableSPPassGenericVar
			NumberDef implMySqlUpdateTableSPPassGenericVar
			StringDef implMySqlUpdateTableSPPassGenericVar
			TokenDef implMySqlUpdateTableSPPassGenericVar
			NmTokenDef implMySqlUpdateTableSPPassGenericVar
			NmTokensDef implMySqlUpdateTableSPPassGenericVar
			TextDef implMySqlUpdateTableSPPassTextVar
			DateDef implMySqlUpdateTableSPPassDateVar
			TimeDef implMySqlUpdateTableSPPassTimeVar
			TimestampDef implMySqlUpdateTableSPPassTimestampVar
			TZDateDef implMySqlUpdateTableSPPassTZDateVar
			TZTimeDef implMySqlUpdateTableSPPassTZTimeVar
			TZTimestampDef implMySqlUpdateTableSPPassTZTimestampVar
			UuidDef implMySqlUpdateTableSPPassGenericVar
			UuidGen implMySqlUpdateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableSPPassGenericVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableSPPassFloatVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableSPPassTextVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableSPPassDateVar"> + ", "
					+	"date( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableSPPassTimeVar"> + ", "
					+	"time( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableSPPassTimestampVar"> + ", "
					+	"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableSPPassTZDateVar"> + ", "
					+	"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableSPPassTZTimeVar"> + ", "
					+	"timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableSPPassTZTimestampVar"> + ", "
					+	"timestamp( ? )"</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleInvokeSuper">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().update$reference SuperClassRelation reference ToTable Name$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyle">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";$switch SecScope None empty System implUpdateTableOSCheckSystem Cluster implUpdateTableOSCheckCluster Tenant implUpdateTableOSCheckTenant default error$$switch HasSuperClassRelation yes implUpdateTableOldStyleInvokeSuper default empty$
		try {
			Connection cnx = schema.getCnx();
$switch IsBaseTable yes implMySqlCreateTableCopyClassCode default empty$$iterate Columns( each implMySqlCreateTableCopyColumn empty empty )$$switch HasSuperClassRelation no implUpdateTableCheckRevision default implUpdateTableExtractRevision$$switch HasDataColumns yes implUpdateTableOldStyleDoUpdate default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdated"
		>$switch BaseHasClassCode yes implUpdateTableOldStyleAuditUpdatedWithCC default implUpdateTableOldStyleAuditUpdatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp, "
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, now(), $lower reference BaseClass ClassCode$.classcode"$reference BaseClass referencePrimaryKeyIndexDef iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditUpdatedByPKey == null ) {
					stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
				}
				argIdx = 1;
				stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlUpdateTableAssignVar )$
				int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedNoCC">
			String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, now()"$reference BaseClass referencePrimaryKeyIndexDef iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditUpdatedByPKey == null ) {
				stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
			}
			argIdx = 1;
			stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlUpdateTableAssignVar )$
			int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignVar"
		>$switch IsNullable yes implMySqlUpdateTableAssignOptVar
			default implMySqlUpdateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlUpdateTableAssignOptBlobVar
			BoolDef implMySqlUpdateTableAssignOptBoolVar
			EnumDef implMySqlUpdateTableAssignOptEnumVar
			Int16Def implMySqlUpdateTableAssignOptInt16Var
			Int32Def implMySqlUpdateTableAssignOptInt32Var
			Int64Def implMySqlUpdateTableAssignOptInt64Var
			UInt16Def implMySqlUpdateTableAssignOptUInt16Var
			UInt32Def implMySqlUpdateTableAssignOptUInt32Var
			UInt64Def implMySqlUpdateTableAssignOptUInt64Var
			Id16Gen implMySqlUpdateTableAssignOptInt16Var
			Id32Gen implMySqlUpdateTableAssignOptInt32Var
			Id64Gen implMySqlUpdateTableAssignOptInt64Var
			FloatDef implMySqlUpdateTableAssignOptFloatVar
			DoubleDef implMySqlUpdateTableAssignOptDoubleVar
			NumberDef implMySqlUpdateTableAssignOptNumberVar
			StringDef implMySqlUpdateTableAssignOptStringVar
			TokenDef implMySqlUpdateTableAssignOptTokenVar
			NmTokenDef implMySqlUpdateTableAssignOptNmTokenVar
			NmTokensDef implMySqlUpdateTableAssignOptNmTokensVar
			TextDef implMySqlUpdateTableAssignOptTextVar
			DateDef implMySqlUpdateTableAssignOptDateVar
			TimeDef implMySqlUpdateTableAssignOptTimeVar
			TimestampDef implMySqlUpdateTableAssignOptTimestampVar
			TZDateDef implMySqlUpdateTableAssignOptTZDateVar
			TZTimeDef implMySqlUpdateTableAssignOptTZTimeVar
			TZTimestampDef implMySqlUpdateTableAssignOptTZTimestampVar
			UuidDef implMySqlUpdateTableAssignOptUuidVar
			UuidGen implMySqlUpdateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlUpdateTableAssignReqBlobVar
			BoolDef implMySqlUpdateTableAssignReqBoolVar
			EnumDef implMySqlUpdateTableAssignReqEnumVar
			Int16Def implMySqlUpdateTableAssignReqInt16Var
			Int32Def implMySqlUpdateTableAssignReqInt32Var
			Int64Def implMySqlUpdateTableAssignReqInt64Var
			UInt16Def implMySqlUpdateTableAssignReqUInt16Var
			UInt32Def implMySqlUpdateTableAssignReqUInt32Var
			UInt64Def implMySqlUpdateTableAssignReqUInt64Var
			Id16Gen implMySqlUpdateTableAssignReqInt16Var
			Id32Gen implMySqlUpdateTableAssignReqInt32Var
			Id64Gen implMySqlUpdateTableAssignReqInt64Var
			FloatDef implMySqlUpdateTableAssignReqFloatVar
			DoubleDef implMySqlUpdateTableAssignReqDoubleVar
			NumberDef implMySqlUpdateTableAssignReqNumberVar
			StringDef implMySqlUpdateTableAssignReqStringVar
			TokenDef implMySqlUpdateTableAssignReqTokenVar
			NmTokenDef implMySqlUpdateTableAssignReqNmTokenVar
			NmTokensDef implMySqlUpdateTableAssignReqNmTokensVar
			TextDef implMySqlUpdateTableAssignReqTextVar
			DateDef implMySqlUpdateTableAssignReqDateVar
			TimeDef implMySqlUpdateTableAssignReqTimeVar
			TimestampDef implMySqlUpdateTableAssignReqTimestampVar
			TZDateDef implMySqlUpdateTableAssignReqTZDateVar
			TZTimeDef implMySqlUpdateTableAssignReqTZTimeVar
			TZTimestampDef implMySqlUpdateTableAssignReqTZTimestampVar
			UuidDef implMySqlUpdateTableAssignReqUuidVar
			UuidGen implMySqlUpdateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqBlobVar">
				stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqBoolVar">
				stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqEnumVar">
				stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqInt16Var">
				stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqInt32Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqInt64Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqUInt16Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqUInt32Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqUInt64Var">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqFloatVar">
				stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqDoubleVar">
				stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqNumberVar">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqStringVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqNmTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqNmTokensVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqTextVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqTZDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqTZTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqTZTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignReqUuidVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleDoUpdate">
			String sql =
					"UPDATE " + schema.getLowerDbSchemaName() + ".$DbTableName$ "
				+	"SET "$popto Table iterate Columns( each implMySqlUpdateTableValuesVarComma last implMySqlUpdateTableValuesVar )
$$switch HasSuperClassRelation no implUpdateTableOldStyleOptSetClause default empty$$switch HasSuperClassRelation no implUpdateTableSqlFragUpdateRevision default empty$
				+	"WHERE "
$reference PrimaryKeyIndex iterate Columns( first implMySqlUpdateIndexColumnWhereFragValuesVar each implMySqlUpdateIndexColumnWhereAndFragValuesVar )$$switch HasSuperClassRelation no implMySqlUpdateTableSqlFragWhereAndRevision default empty$;
			if( stmtUpdateByPKey == null ) {
				stmtUpdateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
$popto Table iterate Columns( each implMySqlUpdateTableBindVar )$$switch HasSuperClassRelation no implMySqlUpdateTableBindOptAuditColumns default empty$$switch HasSuperClassRelation no implMySqlUpdateTableBindUpdatedRevision default empty$$reference PrimaryKeyIndex iterate Columns( each implMySqlUpdateTableBindVar )$$switch HasSuperClassRelation no implMySqlUpdateTableBindOldRevision default empty$;
			int rowsAffected = stmtUpdateByPKey.executeUpdate();
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by update, not " + rowsAffected );
			}$switch HasSuperClassRelation no implMySqlUpdateSetRevision default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleOptSetClause"
		>$switch HasAuditColumns yes implUpdateTableOldStyleSetClause default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleSetClause"> + ", "
				+		"updatedby = ?, "
				+		"updatedat = now() "</GenRule>

	<GenRule GenDef="Table" Name="implMySqlUpdateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implMySqlUpdateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlUpdateTableBindAuditColumns">
			stmtUpdateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOldRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindUpdatedRevision">
			stmtUpdateByPKey.setInt( argIdx++, newRevision );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindClassCode">
			stmtUpdateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindConstClassCode">
			stmtUpdateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesVarComma"
		>$implMySqlUpdateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlUpdateTableValuesGenericVar
			BoolDef implMySqlUpdateTableValuesGenericVar
			EnumDef implMySqlUpdateTableValuesGenericVar
			Int16Def implMySqlUpdateTableValuesGenericVar
			Int32Def implMySqlUpdateTableValuesGenericVar
			Int64Def implMySqlUpdateTableValuesGenericVar
			UInt16Def implMySqlUpdateTableValuesGenericVar
			UInt32Def implMySqlUpdateTableValuesGenericVar
			UInt64Def implMySqlUpdateTableValuesGenericVar
			Id16Gen implMySqlUpdateTableValuesGenericVar
			Id32Gen implMySqlUpdateTableValuesGenericVar
			Id64Gen implMySqlUpdateTableValuesGenericVar
			FloatDef implMySqlUpdateTableValuesFloatVar
			DoubleDef implMySqlUpdateTableValuesGenericVar
			NumberDef implMySqlUpdateTableValuesGenericVar
			StringDef implMySqlUpdateTableValuesGenericVar
			TokenDef implMySqlUpdateTableValuesGenericVar
			NmTokenDef implMySqlUpdateTableValuesGenericVar
			NmTokensDef implMySqlUpdateTableValuesGenericVar
			TextDef implMySqlUpdateTableValuesTextVar
			DateDef implMySqlUpdateTableValuesDateVar
			TimeDef implMySqlUpdateTableValuesTimeVar
			TimestampDef implMySqlUpdateTableValuesTimestampVar
			TZDateDef implMySqlUpdateTableValuesTZDateVar
			TZTimeDef implMySqlUpdateTableValuesTZTimeVar
			TZTimestampDef implMySqlUpdateTableValuesTZTimestampVar
			UuidDef implMySqlUpdateTableValuesGenericVar
			UuidGen implMySqlUpdateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesGenericVar">
				+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesFloatVar">
				+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesTextVar">
				+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesDateVar">
				+		"$DbColumnName$ = date( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesTimeVar">
				+		"$DbColumnName$ = time( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesTimestampVar">
				+		"$DbColumnName$ = timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesTZDateVar">
				+		"$DbColumnName$ = timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesTZTimeVar">
				+		"$DbColumnName$ = timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableValuesTZTimestampVar">
				+		"$DbColumnName$ = timestamp( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindVarComma"
		>$implMySqlUpdateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindVar"
		>$switch IsNullable yes implMySqlUpdateTableBindOptVar
			default implMySqlUpdateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlUpdateTableBindOptBlobVar
			BoolDef implMySqlUpdateTableBindOptBoolVar
			EnumDef implMySqlUpdateTableBindOptEnumVar
			Int16Def implMySqlUpdateTableBindOptInt16Var
			Int32Def implMySqlUpdateTableBindOptInt32Var
			Int64Def implMySqlUpdateTableBindOptInt64Var
			UInt16Def implMySqlUpdateTableBindOptUInt16Var
			UInt32Def implMySqlUpdateTableBindOptUInt32Var
			UInt64Def implMySqlUpdateTableBindOptUInt64Var
			Id16Gen implMySqlUpdateTableBindOptInt16Var
			Id32Gen implMySqlUpdateTableBindOptInt32Var
			Id64Gen implMySqlUpdateTableBindOptInt64Var
			FloatDef implMySqlUpdateTableBindOptFloatVar
			DoubleDef implMySqlUpdateTableBindOptDoubleVar
			NumberDef implMySqlUpdateTableBindOptNumberVar
			StringDef implMySqlUpdateTableBindOptStringVar
			TokenDef implMySqlUpdateTableBindOptTokenVar
			NmTokenDef implMySqlUpdateTableBindOptNmTokenVar
			NmTokensDef implMySqlUpdateTableBindOptNmTokensVar
			TextDef implMySqlUpdateTableBindOptTextVar
			DateDef implMySqlUpdateTableBindOptDateVar
			TimeDef implMySqlUpdateTableBindOptTimeVar
			TimestampDef implMySqlUpdateTableBindOptTimestampVar
			TZDateDef implMySqlUpdateTableBindOptTZDateVar
			TZTimeDef implMySqlUpdateTableBindOptTZTimeVar
			TZTimestampDef implMySqlUpdateTableBindOptTZTimestampVar
			UuidDef implMySqlUpdateTableBindOptUuidVar
			UuidGen implMySqlUpdateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlUpdateTableBindReqBlobVar
			BoolDef implMySqlUpdateTableBindReqBoolVar
			EnumDef implMySqlUpdateTableBindReqEnumVar
			Int16Def implMySqlUpdateTableBindReqInt16Var
			Int32Def implMySqlUpdateTableBindReqInt32Var
			Int64Def implMySqlUpdateTableBindReqInt64Var
			UInt16Def implMySqlUpdateTableBindReqUInt16Var
			UInt32Def implMySqlUpdateTableBindReqUInt32Var
			UInt64Def implMySqlUpdateTableBindReqUInt64Var
			Id16Gen implMySqlUpdateTableBindReqInt16Var
			Id32Gen implMySqlUpdateTableBindReqInt32Var
			Id64Gen implMySqlUpdateTableBindReqInt64Var
			FloatDef implMySqlUpdateTableBindReqFloatVar
			DoubleDef implMySqlUpdateTableBindReqDoubleVar
			NumberDef implMySqlUpdateTableBindReqNumberVar
			StringDef implMySqlUpdateTableBindReqStringVar
			TokenDef implMySqlUpdateTableBindReqTokenVar
			NmTokenDef implMySqlUpdateTableBindReqNmTokenVar
			NmTokensDef implMySqlUpdateTableBindReqNmTokensVar
			TextDef implMySqlUpdateTableBindReqTextVar
			DateDef implMySqlUpdateTableBindReqDateVar
			TimeDef implMySqlUpdateTableBindReqTimeVar
			TimestampDef implMySqlUpdateTableBindReqTimestampVar
			TZDateDef implMySqlUpdateTableBindReqTZDateVar
			TZTimeDef implMySqlUpdateTableBindReqTZTimeVar
			TZTimestampDef implMySqlUpdateTableBindReqTZTimestampVar
			UuidDef implMySqlUpdateTableBindReqUuidVar
			UuidGen implMySqlUpdateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqBlobVar">
			stmtUpdateByPKey.setBytes( argIdx++, Buff.get$OptionalOrRequired$$Name$() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqBoolVar">
			stmtUpdateByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptBoolVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqEnumVar">
			stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqInt16Var">
			stmtUpdateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqInt32Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqInt64Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqUInt16Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqUInt32Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqUInt64Var">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqFloatVar">
			stmtUpdateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqDoubleVar">
			stmtUpdateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqNumberVar">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqStringVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqNmTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqNmTokensVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqTextVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqTZDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqTZTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqTZTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindReqUuidVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMySqlUpdateSetRevision">
			Buff.setRequiredRevision( newRevision );</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implMySqlUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implMySqlUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule GenDef="Atom" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>
	<GenRule GenDef="TableCol" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameLast"
		>$switch HasSuperClassRelation no implMySqlTableColumnUpdateFragDbNameComma default implMySqlTableColumnUpdateFragDbNameSpace$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameSpace"
		>$implMySqlTableColumnUpdateFragDbName$ + " "</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameComma"
		>$implMySqlTableColumnUpdateFragDbName$ + ", "
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbName"
>				+		"$switch IsNullable yes implMySqlTableColumnUpdateFragOptDbName
								default implMySqlTableColumnUpdateFragReqDbName$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragOptDbName"
		>$switch BaseModelAtomClass
			BlobDef implMySqlTableColumnUpdateFragDbNameOptBlob
			BoolDef implMySqlTableColumnUpdateFragDbNameOptBool
			EnumDef implMySqlTableColumnUpdateFragDbNameOptEnum
			Int16Def implMySqlTableColumnUpdateFragDbNameOptInt16
			Int32Def implMySqlTableColumnUpdateFragDbNameOptInt32
			Int64Def implMySqlTableColumnUpdateFragDbNameOptInt64
			UInt16Def implMySqlTableColumnUpdateFragDbNameOptUInt16
			UInt32Def implMySqlTableColumnUpdateFragDbNameOptUInt32
			UInt64Def implMySqlTableColumnUpdateFragDbNameOptUInt64
			Id16Gen implMySqlTableColumnUpdateFragDbNameOptInt16
			Id32Gen implMySqlTableColumnUpdateFragDbNameOptInt32
			Id64Gen implMySqlTableColumnUpdateFragDbNameOptInt64
			FloatDef implMySqlTableColumnUpdateFragDbNameOptFloat
			DoubleDef implMySqlTableColumnUpdateFragDbNameOptDouble
			NumberDef implMySqlTableColumnUpdateFragDbNameOptNumber
			StringDef implMySqlTableColumnUpdateFragDbNameOptString
			TokenDef implMySqlTableColumnUpdateFragDbNameOptToken
			NmTokenDef implMySqlTableColumnUpdateFragDbNameOptNmToken
			NmTokensDef implMySqlTableColumnUpdateFragDbNameOptNmTokens
			TextDef implMySqlTableColumnUpdateFragDbNameOptText
			DateDef implMySqlTableColumnUpdateFragDbNameOptDate
			TimeDef implMySqlTableColumnUpdateFragDbNameOptTime
			TimestampDef implMySqlTableColumnUpdateFragDbNameOptTimestamp
			TZDateDef implMySqlTableColumnUpdateFragDbNameOptTZDate
			TZTimeDef implMySqlTableColumnUpdateFragDbNameOptTZTime
			TZTimestampDef implMySqlTableColumnUpdateFragDbNameOptTZTimestamp
			UuidDef implMySqlTableColumnUpdateFragDbNameOptUuid
			UuidGen implMySqlTableColumnUpdateFragDbNameOptUuid
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragReqDbName"
		>$switch BaseModelAtomClass
			BlobDef implMySqlTableColumnUpdateFragDbNameReqBlob
			BoolDef implMySqlTableColumnUpdateFragDbNameReqBool
			EnumDef implMySqlTableColumnUpdateFragDbNameReqEnum
			Int16Def implMySqlTableColumnUpdateFragDbNameReqInt16
			Int32Def implMySqlTableColumnUpdateFragDbNameReqInt32
			Int64Def implMySqlTableColumnUpdateFragDbNameReqInt64
			UInt16Def implMySqlTableColumnUpdateFragDbNameReqUInt16
			UInt32Def implMySqlTableColumnUpdateFragDbNameReqUInt32
			UInt64Def implMySqlTableColumnUpdateFragDbNameReqUInt64
			Id16Gen implMySqlTableColumnUpdateFragDbNameReqInt16
			Id32Gen implMySqlTableColumnUpdateFragDbNameReqInt32
			Id64Gen implMySqlTableColumnUpdateFragDbNameReqInt64
			FloatDef implMySqlTableColumnUpdateFragDbNameReqFloat
			DoubleDef implMySqlTableColumnUpdateFragDbNameReqDouble
			NumberDef implMySqlTableColumnUpdateFragDbNameReqNumber
			StringDef implMySqlTableColumnUpdateFragDbNameReqString
			TokenDef implMySqlTableColumnUpdateFragDbNameReqToken
			NmTokenDef implMySqlTableColumnUpdateFragDbNameReqNmToken
			NmTokensDef implMySqlTableColumnUpdateFragDbNameReqNmTokens
			TextDef implMySqlTableColumnUpdateFragDbNameReqText
			DateDef implMySqlTableColumnUpdateFragDbNameReqDate
			TimeDef implMySqlTableColumnUpdateFragDbNameReqTime
			TimestampDef implMySqlTableColumnUpdateFragDbNameReqTimestamp
			TZDateDef implMySqlTableColumnUpdateFragDbNameReqTZDate
			TZTimeDef implMySqlTableColumnUpdateFragDbNameReqTZTime
			TZTimestampDef implMySqlTableColumnUpdateFragDbNameReqTZTimestamp
			UuidDef implMySqlTableColumnUpdateFragDbNameReqUuid
			UuidGen implMySqlTableColumnUpdateFragDbNameReqUuid
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptBlob"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getBlobString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptBool"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getBoolString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptEnum"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getInt32String( $ColumnName$.ordinal() ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptInt16"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptInt32"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptInt64"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptUInt16"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getUInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptUInt32"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getUInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptUInt64"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getUInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptFloat"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getFloatString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptDouble"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getDoubleString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptNumber"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getNumberString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptString"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptToken"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptNmToken"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptNmTokens"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptText"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptDate"
		>$DbColumnName$ = date( " + ( ( $ColumnName$ != null )
									?	$SchemaName$MySqlSchema.getDateString( $ColumnName$ )
									:	"null" )
					+			" ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptTime"
		>$DbColumnName$ = time( " + ( ( $ColumnName$ != null )
									?	$SchemaName$MySqlSchema.getTimeString( $ColumnName$ )
									:	"null" )
					+			" ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptTimestamp"
		>$DbColumnName$ = timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$MySqlSchema.getTimestampString( $ColumnName$ )
									:	"null" )
					+			" ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptTZDate"
		>$DbColumnName$ = timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$MySqlSchema.getTZDateString( $ColumnName$ )
									:	"null" )
					+			" ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptTZTime"
		>$DbColumnName$ = timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$MySqlSchema.getTZTimeString( $ColumnName$ )
									:	"null" )
					+			" ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptTZTimestamp"
		>$DbColumnName$ = timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$MySqlSchema.getTZTimestampString( $ColumnName$ )
									:	"null" )
					+			" ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameOptUuid"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MySqlSchema.getQuotedString( $ColumnName$.toString() ) : "null" )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqBlob"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getBlobString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqBool"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getBoolString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqEnum"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getInt32String( $ColumnName$.ordinal() )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqInt16"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqInt32"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqInt64"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqUInt16"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getUInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqUInt32"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getUInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqUInt64"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getUInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqFloat"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getFloatString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqDouble"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getDoubleString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqNumber"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getNumberString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqString"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqToken"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqNmToken"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqNmTokens"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqText"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqDate"
		>$DbColumnName$ = date( + $SchemaName$MySqlSchema.getDateString( $ColumnName$ ) + " ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqTime"
		>$DbColumnName$ = time( " + $SchemaName$MySqlSchema.getTimeString( $ColumnName$ ) + " )"</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqTimestamp"
		>$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTimestampString( $ColumnName$ ) + " )"</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqTZDate"
		>$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTZDateString( $ColumnName$ ) + " ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqTZTime"
		>$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTZTimeString( $ColumnName$ ) + " ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqTZTimestamp"
		>$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTZTimestampString( $ColumnName$ ) + " ) "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlTableColumnUpdateFragDbNameReqUuid"
		>$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $ColumnName$.toString() )</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlUpdateTablePassReadArg"
>				$reference Column Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implMySqlUpdateTablePassReadArgComma"
		>$implMySqlUpdateTablePassReadArg$,
</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlUpdateIndexColumnWhereAndFragValuesVar">
				+	"AND "
$implMySqlUpdateIndexColumnWhereFragValuesVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlUpdateIndexColumnWhereFragValuesVar"
>				+		"$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlUpdateIndexColumnWhereAndFragBindVar">
				+	"AND "
$implMySqlUpdateIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlUpdateIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implMySqlUpdateIndexColumnWhereFragBindOptVar
			default implMySqlUpdateIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlUpdateIndexColumnWhereFragBindOptBlobVar
			BoolDef implMySqlUpdateIndexColumnWhereFragBindOptBoolVar
			EnumDef implMySqlUpdateIndexColumnWhereFragBindOptEnumVar
			Int16Def implMySqlUpdateIndexColumnWhereFragBindOptInt16Var
			Int32Def implMySqlUpdateIndexColumnWhereFragBindOptInt32Var
			Int64Def implMySqlUpdateIndexColumnWhereFragBindOptInt64Var
			UInt16Def implMySqlUpdateIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implMySqlUpdateIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implMySqlUpdateIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implMySqlUpdateIndexColumnWhereFragBindOptInt16Var
			Id32Gen implMySqlUpdateIndexColumnWhereFragBindOptInt32Var
			Id64Gen implMySqlUpdateIndexColumnWhereFragBindOptInt64Var
			FloatDef implMySqlUpdateIndexColumnWhereFragBindOptFloatVar
			DoubleDef implMySqlUpdateIndexColumnWhereFragBindOptDoubleVar
			NumberDef implMySqlUpdateIndexColumnWhereFragBindOptNumberVar
			StringDef implMySqlUpdateIndexColumnWhereFragBindOptStringVar
			TokenDef implMySqlUpdateIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implMySqlUpdateIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implMySqlUpdateIndexColumnWhereFragBindOptNmTokensVar
			TextDef implMySqlUpdateIndexColumnWhereFragBindOptTextVar
			DateDef implMySqlUpdateIndexColumnWhereFragBindOptDateVar
			TimeDef implMySqlUpdateIndexColumnWhereFragBindOptTimeVar
			TimestampDef implMySqlUpdateIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implMySqlUpdateIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implMySqlUpdateIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implMySqlUpdateIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implMySqlUpdateIndexColumnWhereFragBindOptUuidVar
			UuidGen implMySqlUpdateIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlUpdateIndexColumnWhereFragBindReqBlobVar
			BoolDef implMySqlUpdateIndexColumnWhereFragBindReqBoolVar
			EnumDef implMySqlUpdateIndexColumnWhereFragBindReqEnumVar
			Int16Def implMySqlUpdateIndexColumnWhereFragBindReqInt16Var
			Int32Def implMySqlUpdateIndexColumnWhereFragBindReqInt32Var
			Int64Def implMySqlUpdateIndexColumnWhereFragBindReqInt64Var
			UInt16Def implMySqlUpdateIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implMySqlUpdateIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implMySqlUpdateIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implMySqlUpdateIndexColumnWhereFragBindReqInt16Var
			Id32Gen implMySqlUpdateIndexColumnWhereFragBindReqInt32Var
			Id64Gen implMySqlUpdateIndexColumnWhereFragBindReqInt64Var
			FloatDef implMySqlUpdateIndexColumnWhereFragBindReqFloatVar
			DoubleDef implMySqlUpdateIndexColumnWhereFragBindReqDoubleVar
			NumberDef implMySqlUpdateIndexColumnWhereFragBindReqNumberVar
			StringDef implMySqlUpdateIndexColumnWhereFragBindReqStringVar
			TokenDef implMySqlUpdateIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implMySqlUpdateIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implMySqlUpdateIndexColumnWhereFragBindReqNmTokensVar
			TextDef implMySqlUpdateIndexColumnWhereFragBindReqTextVar
			DateDef implMySqlUpdateIndexColumnWhereFragBindReqDateVar
			TimeDef implMySqlUpdateIndexColumnWhereFragBindReqTimeVar
			TimestampDef implMySqlUpdateIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implMySqlUpdateIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implMySqlUpdateIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implMySqlUpdateIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implMySqlUpdateIndexColumnWhereFragBindReqUuidVar
			UuidGen implMySqlUpdateIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqBlobVar"
>				+		"$DbColumnName$ = " + $SchemaName$MySqlSchema.getBlobString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptBlobVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$MySqlSchema.getBlobString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqBoolVar"
>				+		( $Name$ ? "$DbColumnName$ = true " : "$DbColumnName$ = false " )</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptBoolVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null " :
							( $Name$ ? "true, " : "false, " ) )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqEnumVar"
>				+		"$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptEnumVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqInt16Var"
>				+		"$DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptInt16Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqInt32Var"
>				+		"$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptInt32Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqInt64Var"
>				+		"$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptInt64Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqUInt16Var"
>				+		"$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptUInt16Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqUInt32Var"
>				+		"$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptUInt32Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqUInt64Var"
>				+		"$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptUInt64Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqFloatVar"
>				+		"$DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptFloatVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqDoubleVar"
>				+		"$DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptDoubleVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqNumberVar"
>				+		"$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptNumberVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqStringVar"
>				+		"$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptStringVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqTokenVar"
>				+		"$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptTokenVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqNmTokenVar"
>				+		"$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptNmTokenVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqNmTokensVar"
>				+		"$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptNmTokensVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqTextVar"
>				+		"$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptTextVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqDateVar"
>				+		"date( + $SchemaName$MySqlSchema.getDateString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptDateVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = date( + $SchemaName$MySqlSchema.getDateString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqTimeVar"
>				+		"time( " + $SchemaName$MySqlSchema.getTimeString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptTimeVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = time( " + $SchemaName$MySqlSchema.getTimeString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqTimestampVar"
>				+		"timestamp( " + $SchemaName$MySqlSchema.getTimestampString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptTimestampVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTimestampString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqTZDateVar"
>				+		"timestamp( " + $SchemaName$MySqlSchema.getTZDateString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptTZDateVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTZDateString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqTZTimeVar"
>				+		"timestamp( " + $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptTZTimeVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqTZTimestampVar"
>				+		"timestamp( " + $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptTZTimestampVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = timestamp( " + $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindReqUuidVar"
>				+		"$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$.toString() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMySqlUpdateIndexColumnWhereFragBindOptUuidVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$MySqlSchema.getQuotedString( $Name$.toString() ) + " " )</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTableSqlFragWhereAndRevision">
				+	"AND "
				+		"Revision = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlDeleteTableCopyColumn"
		>$reference Column implMySqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTable">
	public void delete$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "delete$TableName$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
$reference PrimaryKeyIndex iterate Columns( each implMySqlDeleteTableCopyColumn empty empty )$
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_delete_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$$implMySqlCommaArgRevision$ + " )";
			if( stmtDeleteByPKey == null ) {
				stmtDeleteByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference PrimaryKeyIndex iterate Columns( each implMySqlDeleteTableBindVar )$$implMySqlDeleteTableBindRevision$;
			stmtDeleteByPKey.executeUpdate();
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
$implMySqlDeleteTableByInheritedIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlDeleteTableByInheritedIndexes"
		>$switch HasSuperClassRelation yes implMySqlDeleteTableByInhIndexes default implMySqlDeleteTableByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlDeleteTableByInhIndexes"
		>$reference SuperClassRelation reference ToTable implMySqlDeleteTableByInheritedIndexes$$iterate Index( each implMySqlDeleteTableByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlDeleteTableByBaseIndexes"
		>$iterate Index( each implMySqlDeleteTableBySpecialIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implMySqlDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlDeleteTableBySpecialIndex"
		>$switch IsPrimaryIndex yes implMySqlDeleteTableByPrimaryIndex default implMySqlDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implMySqlDeleteTableByIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_delete_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtDeleteBy$Suffix$ == null ) {
				stmtDeleteBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMySqlDeleteTableBindSuffixVar )$
			stmtDeleteBy$Suffix$.executeUpdate();
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$By$Suffix$Key argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implMySqlDeleteCommaPassArgColumn )$ );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implMySqlDeleteTableByPrimaryIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_delete_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMySqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtDeleteBy$Suffix$ == null ) {
				stmtDeleteBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMySqlDeleteTableBindSuffixVar )$
			stmtDeleteBy$Suffix$.executeUpdate();
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$poptop Table reference BaseClass DefSchemaName$$poptop Table reference BaseClass TableName$PKey argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implMySqlDeleteCommaPassArgColumn )$ );
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlDeleteCommaPassArgColumn">,
			argKey.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindRevision">
			stmtDeleteByPKey.setInt( argIdx++, Buff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindVar"
		>$switch IsNullable yes implMySqlDeleteTableBindOptVar
			default implMySqlDeleteTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlDeleteTableBindOptBlobVar
			BoolDef implMySqlDeleteTableBindOptBoolVar
			EnumDef implMySqlDeleteTableBindOptEnumVar
			Int16Def implMySqlDeleteTableBindOptInt16Var
			Int32Def implMySqlDeleteTableBindOptInt32Var
			Int64Def implMySqlDeleteTableBindOptInt64Var
			UInt16Def implMySqlDeleteTableBindOptUInt16Var
			UInt32Def implMySqlDeleteTableBindOptUInt32Var
			UInt64Def implMySqlDeleteTableBindOptUInt64Var
			Id16Gen implMySqlDeleteTableBindOptInt16Var
			Id32Gen implMySqlDeleteTableBindOptInt32Var
			Id64Gen implMySqlDeleteTableBindOptInt64Var
			FloatDef implMySqlDeleteTableBindOptFloatVar
			DoubleDef implMySqlDeleteTableBindOptDoubleVar
			NumberDef implMySqlDeleteTableBindOptNumberVar
			StringDef implMySqlDeleteTableBindOptStringVar
			TokenDef implMySqlDeleteTableBindOptTokenVar
			NmTokenDef implMySqlDeleteTableBindOptNmTokenVar
			NmTokensDef implMySqlDeleteTableBindOptNmTokensVar
			TextDef implMySqlDeleteTableBindOptTextVar
			DateDef implMySqlDeleteTableBindOptDateVar
			TimeDef implMySqlDeleteTableBindOptTimeVar
			TimestampDef implMySqlDeleteTableBindOptTimestampVar
			TZDateDef implMySqlDeleteTableBindOptTZDateVar
			TZTimeDef implMySqlDeleteTableBindOptTZTimeVar
			TZTimestampDef implMySqlDeleteTableBindOptTZTimestampVar
			UuidDef implMySqlDeleteTableBindOptUuidVar
			UuidGen implMySqlDeleteTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlDeleteTableBindReqBlobVar
			BoolDef implMySqlDeleteTableBindReqBoolVar
			EnumDef implMySqlDeleteTableBindReqEnumVar
			Int16Def implMySqlDeleteTableBindReqInt16Var
			Int32Def implMySqlDeleteTableBindReqInt32Var
			Int64Def implMySqlDeleteTableBindReqInt64Var
			UInt16Def implMySqlDeleteTableBindReqUInt16Var
			UInt32Def implMySqlDeleteTableBindReqUInt32Var
			UInt64Def implMySqlDeleteTableBindReqUInt64Var
			Id16Gen implMySqlDeleteTableBindReqInt16Var
			Id32Gen implMySqlDeleteTableBindReqInt32Var
			Id64Gen implMySqlDeleteTableBindReqInt64Var
			FloatDef implMySqlDeleteTableBindReqFloatVar
			DoubleDef implMySqlDeleteTableBindReqDoubleVar
			NumberDef implMySqlDeleteTableBindReqNumberVar
			StringDef implMySqlDeleteTableBindReqStringVar
			TokenDef implMySqlDeleteTableBindReqTokenVar
			NmTokenDef implMySqlDeleteTableBindReqNmTokenVar
			NmTokensDef implMySqlDeleteTableBindReqNmTokensVar
			TextDef implMySqlDeleteTableBindReqTextVar
			DateDef implMySqlDeleteTableBindReqDateVar
			TimeDef implMySqlDeleteTableBindReqTimeVar
			TimestampDef implMySqlDeleteTableBindReqTimestampVar
			TZDateDef implMySqlDeleteTableBindReqTZDateVar
			TZTimeDef implMySqlDeleteTableBindReqTZTimeVar
			TZTimestampDef implMySqlDeleteTableBindReqTZTimestampVar
			UuidDef implMySqlDeleteTableBindReqUuidVar
			UuidGen implMySqlDeleteTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqBlobVar">
			stmtDeleteByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqBoolVar">
			stmtDeleteByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptBoolVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqEnumVar">
			stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqInt16Var">
			stmtDeleteByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqInt32Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqInt64Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqUInt16Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqUInt32Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqUInt64Var">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqFloatVar">
			stmtDeleteByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqDoubleVar">
			stmtDeleteByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqNumberVar">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqStringVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqNmTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqNmTokensVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqTextVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqTZDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqTZTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqTZTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindReqUuidVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implCommaColumnArg">,
		$implColumnArg$</GenRule>

	<GenRule GenDef="TableCol" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="Atom" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implColumnArg"
		>$reference Column implColumnArg$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlFragRestrictWhereClassCode"
		>$switch BaseHasSubClasses yes implMySqlFragDoRestrictWhere default implMySqlFragDoRestrictSecScope$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlFragDoRestrictWhere">
				+		"WHERE "
				+			"$lower reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'"$switch SecScope None empty System empty Cluster implCacheOpenCursorByIndexRestrictCluster Tenant implCacheOpenCursorByIndexRestrictTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implCacheOpenCursorByIndexRestrictCluster">
			+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " AND $lower reference ClusterIdColumn reference Table ClassCode$.$reference ClusterIdColumn DbColumnName$ = " + Authorization.getSecClusterId() ) )</GenRule>

	<GenRule GenDef="Table" Name="implCacheOpenCursorByIndexRestrictTenant">
			+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " AND $lower reference TenantIdColumn reference Table ClassCode$.$reference TenantIdColumn DbColumnName$ = " + Authorization.getSecTenantId() ) )</GenRule>

	<GenRule GenDef="Table" Name="implMySqlFragDoRestrictSecScope"
		>$switch SecScope None empty System empty Cluster implCacheOpenCursorByIndexRestrictWhereCluster Tenant implCacheOpenCursorByIndexRestrictWhereTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implCacheOpenCursorByIndexRestrictWhereCluster">
				+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " WHERE $lower reference ClusterIdColumn reference Table ClassCode$.$reference ClusterIdColumn DbColumnName$ = " + Authorization.getSecClusterId() ) )</GenRule>

	<GenRule GenDef="Table" Name="implCacheOpenCursorByIndexRestrictWhereTenant">
				+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " WHERE $lower reference TenantIdColumn reference Table ClassCode$.$reference TenantIdColumn DbColumnName$ = " + Authorization.getSecTenantId() ) )</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTable">
	public $DefSchemaName$$TableName$Buff[] readAll$TableName$( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAll$TableName$";
		ResultSet resultSet = null;
		Statement stmt = null;
		try {$implReadAllTableTryBody$
		}$implReadAllTableCatchFinally$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableTryBody">
			Connection cnx = schema.getCnx();
			String sql = "call " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_all$( ?, ?, ?, ?, ? )";
			if( stmtReadBuffAll == null ) {
				stmtReadBuffAll = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
					ResultSet.CONCUR_READ_ONLY )
			}
			int argIdx = 1;
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffAll.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffAll.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			try {
				resultSet = stmtReadBuffAll.executeQuery();
			}
			catch( SQLException e ) {
				if( e.getErrorCode() != 1329 ) {
					throw e;
				}
				resultSet = null;
			}$implReadAllTableTryBody2$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableTryBody2">
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			int idx = 0;
			while( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();
				int idxcol = 1;
$popto Table switch HasClassCode yes implMySqlTableColumnFetchClassCode default empty$$popto Table iterate Columns( each implMySqlTableColumnFetchColumn )
$				buff.setRequiredRevision( resultSet.getInt( idxcol ) );
				buffList.add( buff );
				idx ++;
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableBindSecClusterId">
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableBindSecTenantId">
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableCatchFinally">
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}
		}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixVar"
		>$switch IsNullable yes implMySqlDeleteTableBindSuffixOptVar
			default implMySqlDeleteTableBindSuffixReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlDeleteTableBindSuffixOptBlobVar
			BoolDef implMySqlDeleteTableBindSuffixOptBoolVar
			EnumDef implMySqlDeleteTableBindSuffixOptEnumVar
			Int16Def implMySqlDeleteTableBindSuffixOptInt16Var
			Int32Def implMySqlDeleteTableBindSuffixOptInt32Var
			Int64Def implMySqlDeleteTableBindSuffixOptInt64Var
			UInt16Def implMySqlDeleteTableBindSuffixOptUInt16Var
			UInt32Def implMySqlDeleteTableBindSuffixOptUInt32Var
			UInt64Def implMySqlDeleteTableBindSuffixOptUInt64Var
			Id16Gen implMySqlDeleteTableBindSuffixOptInt16Var
			Id32Gen implMySqlDeleteTableBindSuffixOptInt32Var
			Id64Gen implMySqlDeleteTableBindSuffixOptInt64Var
			FloatDef implMySqlDeleteTableBindSuffixOptFloatVar
			DoubleDef implMySqlDeleteTableBindSuffixOptDoubleVar
			NumberDef implMySqlDeleteTableBindSuffixOptNumberVar
			StringDef implMySqlDeleteTableBindSuffixOptStringVar
			TokenDef implMySqlDeleteTableBindSuffixOptTokenVar
			NmTokenDef implMySqlDeleteTableBindSuffixOptNmTokenVar
			NmTokensDef implMySqlDeleteTableBindSuffixOptNmTokensVar
			TextDef implMySqlDeleteTableBindSuffixOptTextVar
			DateDef implMySqlDeleteTableBindSuffixOptDateVar
			TimeDef implMySqlDeleteTableBindSuffixOptTimeVar
			TimestampDef implMySqlDeleteTableBindSuffixOptTimestampVar
			TZDateDef implMySqlDeleteTableBindSuffixOptTZDateVar
			TZTimeDef implMySqlDeleteTableBindSuffixOptTZTimeVar
			TZTimestampDef implMySqlDeleteTableBindSuffixOptTZTimestampVar
			UuidDef implMySqlDeleteTableBindSuffixOptUuidVar
			UuidGen implMySqlDeleteTableBindSuffixOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMySqlDeleteTableBindSuffixReqBlobVar
			BoolDef implMySqlDeleteTableBindSuffixReqBoolVar
			EnumDef implMySqlDeleteTableBindSuffixReqEnumVar
			Int16Def implMySqlDeleteTableBindSuffixReqInt16Var
			Int32Def implMySqlDeleteTableBindSuffixReqInt32Var
			Int64Def implMySqlDeleteTableBindSuffixReqInt64Var
			UInt16Def implMySqlDeleteTableBindSuffixReqUInt16Var
			UInt32Def implMySqlDeleteTableBindSuffixReqUInt32Var
			UInt64Def implMySqlDeleteTableBindSuffixReqUInt64Var
			Id16Gen implMySqlDeleteTableBindSuffixReqInt16Var
			Id32Gen implMySqlDeleteTableBindSuffixReqInt32Var
			Id64Gen implMySqlDeleteTableBindSuffixReqInt64Var
			FloatDef implMySqlDeleteTableBindSuffixReqFloatVar
			DoubleDef implMySqlDeleteTableBindSuffixReqDoubleVar
			NumberDef implMySqlDeleteTableBindSuffixReqNumberVar
			StringDef implMySqlDeleteTableBindSuffixReqStringVar
			TokenDef implMySqlDeleteTableBindSuffixReqTokenVar
			NmTokenDef implMySqlDeleteTableBindSuffixReqNmTokenVar
			NmTokensDef implMySqlDeleteTableBindSuffixReqNmTokensVar
			TextDef implMySqlDeleteTableBindSuffixReqTextVar
			DateDef implMySqlDeleteTableBindSuffixReqDateVar
			TimeDef implMySqlDeleteTableBindSuffixReqTimeVar
			TimestampDef implMySqlDeleteTableBindSuffixReqTimestampVar
			TZDateDef implMySqlDeleteTableBindSuffixReqTZDateVar
			TZTimeDef implMySqlDeleteTableBindSuffixReqTZTimeVar
			TZTimestampDef implMySqlDeleteTableBindSuffixReqTZTimestampVar
			UuidDef implMySqlDeleteTableBindSuffixReqUuidVar
			UuidGen implMySqlDeleteTableBindSuffixReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqBlobVar">
			stmtDeleteBy$Suffix$.setBytes( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptBlobVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setBytes( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqBoolVar">
			stmtDeleteBy$Suffix$.setBoolean( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptBoolVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setBoolean( argIdx++, arg$Name$.booleanValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqEnumVar">
			stmtDeleteBy$Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptEnumVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqInt16Var">
			stmtDeleteBy$Suffix$.setShort( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptInt16Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setShort( argIdx++, arg$Name$.shortValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqInt32Var">
			stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptInt32Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$.intValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqInt64Var">
			stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptInt64Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$.longValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqUInt16Var">
			stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptUInt16Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$.intValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqUInt32Var">
			stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptUInt32Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$.longValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqUInt64Var">
			stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptUInt64Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqFloatVar">
			stmtDeleteBy$Suffix$.setFloat( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptFloatVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setFloat( argIdx++, arg$Name$.floatValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqDoubleVar">
			stmtDeleteBy$Suffix$.setDouble( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptDoubleVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setDouble( argIdx++, arg$Name$.doubleValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqNumberVar">
			stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptNumberVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqStringVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptStringVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqTokenVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptTokenVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqNmTokenVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptNmTokenVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqNmTokensVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptNmTokensVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqTextVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptTextVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqDateVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptDateVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getDateString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqTimeVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptTimeVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimeString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqTimestampVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptTimestampVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTimestampString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqTZDateVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptTZDateVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZDateString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqTZTimeVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptTZTimeVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimeString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqTZTimestampVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptTZTimestampVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MySqlSchema.getTZTimestampString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixReqUuidVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMySqlDeleteTableBindSuffixOptUuidVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$.toString() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

</RuleSet>
