<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+jee"
	Name="src/SchemaSMWar/SchemaSMWarSetSystemPasswordHtml.java"
	Revision="2.13"
	Descr="Java 11 Sec Manager Set System Password Servlet">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSMWarSetSystemPasswordHtmlJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$SMWar"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$smwar.src"
		SubPackageName="$lower JavaPackage$.$SchemaName$SMWar"
		ExpansionClassName="$SchemaName$SMWarSetSystemPasswordHtmlJava"
		ExpansionKeyName="$SchemaName$SMWarSetSystemPasswordHtmlJava"
		ExpansionFileName="$SchemaName$SMWarSetSystemPasswordHtml.java">
// Description: Java 11 Sec Manager Set System Password Servlet

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$SMWar;

import java.io.IOException;
import java.io.PrintWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Calendar;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.codec.binary.Base64;

import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$

/**
 * Servlet implementation class $SchemaName$SMWarSetSystemPasswordHtml
 */
@WebServlet("/$SchemaName$SMWarSetSystemPasswordHtml")
public class $SchemaName$SMWarSetSystemPasswordHtml extends HttpServlet {$SchemaSMWarSetSystemPasswordPart01$$SchemaSMWarSetSystemPasswordPart02$$SchemaSMWarSetSystemPasswordPart03$$SchemaSMWarSetSystemPasswordPart04$$SchemaSMWarSetSystemPasswordPart05$$SchemaSMWarSetSystemPasswordPart06$$SchemaSMWarSetSystemPasswordPart07$$SchemaSMWarSetSystemPasswordPart08$$SchemaSMWarSetSystemPasswordPart09$$SchemaSMWarSetSystemPasswordPart10$$SchemaSMWarSetSystemPasswordPart11$$SchemaSMWarSetSystemPasswordPart12$$SchemaSMWarSetSystemPasswordPart13$
}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart01">
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public $SchemaName$SMWarSetSystemPasswordHtml() {
		super();
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		final String S_ProcName="doGet";
		I$SchemaName$SchemaObj schemaObj;
		HttpSession sess = request.getSession( false );
		if( sess == null ) {
			sess = request.getSession( true );
			schemaObj = new $SchemaName$SchemaPooledObj();
			sess.setAttribute( "SchemaObj", schemaObj );
		}
		else {
			schemaObj = (I$SchemaName$SchemaObj)sess.getAttribute( "SchemaObj" );
			if( schemaObj == null ) {
				response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
				return;
			}
		}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart02">
		I$SchemaName$Schema dbSchema = null;
		try {
			$SecSchemaName$Authorization auth = schemaObj.getAuthorization();
			if( auth != null ) {
				response.sendRedirect( "$SchemaName$SMWarSecMainHtml" );
			}
			else {
				dbSchema = (I$SchemaName$Schema)$SchemaName$SchemaPool.getSchemaPool().getInstance();
				schemaObj.setBackingStore( dbSchema );
				schemaObj.beginTransaction();
				I$SecSchemaName$SecUserObj systemUser = schemaObj.getSecUserTableObj().readSecUserByULoginIdx( "system" );
				String passwordHash = systemUser.getRequiredPasswordHash();
				if( ( passwordHash != null ) &amp;&amp; ( passwordHash.length() > 0 ) &amp;&amp; ( ! passwordHash.equals( "bootstrap" ) ) ) {
					response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
				}
				else {
					I$SecSchemaName$ClusterObj resolvedCluster;
					String resolvedClusterDescription;
					I$SecSchemaName$SysClusterObj sysCluster = schemaObj.getSysClusterTableObj().readSysClusterByIdIdx( 1, false );
					if( sysCluster == null ) {
						resolvedCluster = null;
						resolvedClusterDescription = null;
					}
					else {
						resolvedCluster = sysCluster.getRequiredContainerCluster();
						if( resolvedCluster == null ) {
							throw new CFLibNullArgumentException( getClass(),
								S_ProcName,
								"resolvedCluster" );
						}
						resolvedClusterDescription = resolvedCluster.getRequiredDescription();
					}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart03">
					response.setContentType( "text/html" );
					PrintWriter out = response.getWriter();
					out.println( "&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"&gt;" );
					out.println( "&lt;HTML&gt;" );
					out.println( "&lt;BODY&gt;" );
					out.println( "&lt;form method=\"post\" formaction=\"$SchemaName$SMWarSetSystemPasswordHtml\"&gt;" );
					out.println( "&lt;H1 style=\"text-align:center\"&gt;" + (( resolvedClusterDescription == null ) ? "" : resolvedClusterDescription ) + " Sec Manager&lt;/H1&gt;" );
					out.println( "&lt;H2 style=\"text-align:center\"&gt;Please initialize the \"system\" password and cluster details.&lt;/H2&gt;" );
					out.println( "&lt;p&gt;" );
					out.println( "&lt;center&gt;" );
					out.println( "&lt;table style=\"width:60%\"&gt;" );
					out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Password:&lt;/th&gt;&lt;td&gt;&lt;input type=\"password\" name=\"Password\"/&gt;&lt;/td&gt;&lt;/tr&gt;");
					out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Confirm Password:&lt;/th&gt;&lt;td&gt;&lt;input type=\"password\" name=\"ConfirmPassword\"/&gt;&lt;/td&gt;&lt;/tr&gt;");
					out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Cluster Domain Name:&lt;/th&gt;&lt;td&gt;&lt;input name=\"ClusterDomName\"/&gt;&lt;/td&gt;&lt;/tr&gt;" );
					out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Cluster Description:&lt;/th&gt;&lt;td&gt;&lt;input name=\"ClusterDescription\"/&gt;&lt;/td&gt;&lt;/tr&gt;" );
					out.println( "&lt;tr&gt;&lt;td colspan=\"2\" style=\"text-align:center\"&gt;&lt;button type=\"submit\" name=\"Ok\"\"&gt;Ok&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;" );
					out.println( "&lt;/table&gt;" );
					out.println( "&lt;/center&gt;" );
					out.println( "&lt;/form&gt;" );
					out.println( "&lt;/BODY&gt;" );
					out.println( "&lt;/HTML&gt;" );
				}
			}
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart04">
		catch( RuntimeException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught RuntimeException -- " + e.getMessage(),
				e );
		}
		finally {
			if( dbSchema != null ) {
				try {
					if( schemaObj.isTransactionOpen() ) { 
						schemaObj.rollback();
					}
				}
				catch( RuntimeException e ) {
				}
				schemaObj.setBackingStore( null );
				$SchemaName$SchemaPool.getSchemaPool().releaseInstance( dbSchema );
			}
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart05">
	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		final String S_ProcName = "doPost";

		I$SchemaName$SchemaObj schemaObj;
		HttpSession sess = request.getSession( false );
		if( sess == null ) {
			sess = request.getSession( true );
			schemaObj = new $SchemaName$SchemaPooledObj();
			sess.setAttribute( "SchemaObj", schemaObj );
		}
		else {
			schemaObj = (I$SchemaName$SchemaObj)sess.getAttribute( "SchemaObj" );
			if( schemaObj == null ) {
				response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
				return;
			}
		}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart06">
		I$SchemaName$Schema dbSchema = null;
		try {
			$SecSchemaName$Authorization auth = schemaObj.getAuthorization();
			if( auth != null ) {
				response.sendRedirect( "$SchemaName$SMWarSecMainHtml" );
			}
			else {
				dbSchema = (I$SchemaName$Schema)$SchemaName$SchemaPool.getSchemaPool().getInstance();
				schemaObj.setBackingStore( dbSchema );
				schemaObj.beginTransaction();
				I$SecSchemaName$SecUserObj systemUser = schemaObj.getSecUserTableObj().readSecUserByULoginIdx( "system" );
				String passwordHash = systemUser.getRequiredPasswordHash();
				if( ( passwordHash != null ) &amp;&amp; ( passwordHash.length() &gt; 0 ) &amp;&amp; ( ! passwordHash.equals( "bootstrap" ) )  ) {
					response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
				}
				else {
					I$SecSchemaName$ClusterObj resolvedCluster;
					String resolvedClusterDomName;
					String resolvedClusterDescription;
					I$SecSchemaName$SysClusterObj sysCluster = schemaObj.getSysClusterTableObj().readSysClusterByIdIdx( 1, false );
					if( sysCluster == null ) {
						resolvedCluster = null;
						resolvedClusterDomName = (String)request.getParameter( "ClusterDomName" );
						resolvedClusterDescription = (String)request.getParameter( "ClusterDescription" );
					}
					else {
						resolvedCluster = sysCluster.getRequiredContainerCluster();
						if( resolvedCluster == null ) {
							throw new CFLibNullArgumentException( getClass(),
								S_ProcName,
								"resolvedCluster" );
						}
						resolvedClusterDomName = resolvedCluster.getRequiredFullDomName();
						resolvedClusterDescription = resolvedCluster.getRequiredDescription();
					}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart07">
					String password = (String)request.getParameter( "Password" );
					if( password == null ) {
						password = "";
					}
					String confirmPassword = (String)request.getParameter( "ConfirmPassword" );
					if( confirmPassword == null ) {
						confirmPassword = "";
					}
					response.setContentType( "text/html" );
					PrintWriter out = response.getWriter();
					if( password.length() &lt;= 0 ) { 
						out.println( "&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"&gt;" );
						out.println( "&lt;HTML&gt;" );
						out.println( "&lt;BODY&gt;" );
						out.println( "&lt;form method=\"post\" formaction=\"$SchemaName$SMWarSetSystemPasswordHtml\"&gt;" );
						out.println( "&lt;H1 style=\"text-align:center\"&gt;" + (( resolvedClusterDescription == null ) ? "" : resolvedClusterDescription ) + " Sec Manager&lt;/H1&gt;" );
						out.println( "&lt;H2 style=\"text-align:center\"&gt;Please initialize the \"system\" password and cluster details.&lt;/H2&gt;" );
						out.println( "&lt;p&gt;" );
						out.println( "&lt;center&gt;" );
						out.println( "&lt;table style=\"width:60%\"&gt;" );
						out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Password:&lt;/th&gt;&lt;td&gt;&lt;input type=\"password\" name=\"Password\"/&gt;&lt;/td&gt;&lt;/tr&gt;");
						out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Confirm Password:&lt;/th&gt;&lt;td&gt;&lt;input type=\"password\" name=\"ConfirmPassword\"/&gt;&lt;/td&gt;&lt;/tr&gt;");
						out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Cluster Domain Name:&lt;/th&gt;&lt;td&gt;&lt;input name=\"ClusterDomName\"/&gt;&lt;/td&gt;&lt;/tr&gt;" );
						out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Cluster Description:&lt;/th&gt;&lt;td&gt;&lt;input name=\"ClusterDescription\"/&gt;&lt;/td&gt;&lt;/tr&gt;" );
						out.println( "&lt;tr&gt;&lt;td colspan=\"2\" style=\"text-align:center\"&gt;&lt;button type=\"submit\" name=\"Ok\"\"&gt;Ok&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;" );
						out.println( "&lt;/table&gt;" );
						out.println( "&lt;/center&gt;" );
						out.println( "&lt;/form&gt;" );
						out.println( "&lt;/BODY&gt;" );
						out.println( "&lt;/HTML&gt;" );
					}</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart08">
					else if( ! password.equals( confirmPassword ) ) { 
						out.println( "&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"&gt;" );
						out.println( "&lt;HTML&gt;" );
						out.println( "&lt;BODY&gt;" );
						out.println( "&lt;form method=\"post\" formaction=\"$SchemaName$SMWarSetSystemPasswordHtml\"&gt;" );
						out.println( "&lt;H1 style=\"text-align:center\"&gt;" + (( resolvedClusterDescription == null ) ? "" : resolvedClusterDescription ) + " Sec Manager&lt;/H1&gt;" );
						out.println( "&lt;H2 style=\"text-align:center\"&gt;Please initialize the \"system\" password and cluster details.&lt;/H2&gt;" );
						out.println( "&lt;p&gt;" );
						out.println( "&lt;center&gt;" );
						out.println( "&lt;table style=\"width:60%\"&gt;" );
						out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Password:&lt;/th&gt;&lt;td&gt;&lt;input type=\"password\" name=\"Password\"/&gt;&lt;/td&gt;&lt;/tr&gt;");
						out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Confirm Password:&lt;/th&gt;&lt;td&gt;&lt;input type=\"password\" name=\"ConfirmPassword\"/&gt;&lt;/td&gt;&lt;/tr&gt;");
						out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Cluster Domain Name:&lt;/th&gt;&lt;td&gt;&lt;input name=\"ClusterDomName\"/&gt;&lt;/td&gt;&lt;/tr&gt;" );
						out.println( "&lt;tr&gt;&lt;th style=\"text-align:left\"&gt;Cluster Description:&lt;/th&gt;&lt;td&gt;&lt;input name=\"ClusterDescription\"/&gt;&lt;/td&gt;&lt;/tr&gt;" );
						out.println( "&lt;tr&gt;&lt;td colspan=\"2\" style=\"text-align:center\"&gt;&lt;button type=\"submit\" name=\"Ok\"\"&gt;Ok&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;" );
						out.println( "&lt;/table&gt;" );
						out.println( "&lt;/center&gt;" );
						out.println( "&lt;/form&gt;" );
						out.println( "&lt;/BODY&gt;" );
						out.println( "&lt;/HTML&gt;" );
					}</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart09">
					else {
						MessageDigest msgDigest = MessageDigest.getInstance( "SHA-512" );
						msgDigest.update( password.getBytes( "UTF-8" ) );
						byte[] hash = msgDigest.digest();
						byte[] encodedHash = Base64.encodeBase64( hash );
						msgDigest.update( encodedHash );
						hash = msgDigest.digest();
						encodedHash = Base64.encodeBase64( hash );
						String hashedAndEncodedPassword = new String( encodedHash );

						// Need to temporarily "log in" as system.system to set the password
						I$SecSchemaName$ClusterObj systemCluster = schemaObj.getClusterTableObj().readClusterByUDomNameIdx( "system" );
						I$SecSchemaName$TenantObj systemTenant = schemaObj.getTenantTableObj().readTenantByUNameIdx( systemCluster.getRequiredId(), "system" );
						I$SecSchemaName$SecSessionObj systemSession = schemaObj.getSecSessionTableObj().newInstance();
						I$SecSchemaName$SecSessionEditObj editSystemSession = (I$SecSchemaName$SecSessionEditObj)systemSession.beginEdit();
						editSystemSession.setRequiredContainerSecUser( systemUser );
						editSystemSession.setRequiredStart( Calendar.getInstance() );
						systemSession = editSystemSession.create();
						editSystemSession = null;
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart10">
						auth = new $SecSchemaName$Authorization();
						auth.setSecCluster( systemCluster );
						auth.setSecTenant( systemTenant );
						auth.setSecSession( systemSession );
						schemaObj.setAuthorization( auth );

						if( resolvedCluster == null ) {
							I$SecSchemaName$ClusterObj cluster = schemaObj.getClusterTableObj().newInstance();
							I$SecSchemaName$ClusterEditObj editCluster = cluster.beginEdit();
							editCluster.setRequiredFullDomName( resolvedClusterDomName );
							editCluster.setRequiredDescription( resolvedClusterDescription );
							cluster = editCluster.create();
							editCluster = null;

							resolvedCluster = cluster;
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart11">
							I$SecSchemaName$TenantObj tenant = schemaObj.getTenantTableObj().newInstance();
							I$SecSchemaName$TenantEditObj editTenant = tenant.beginEdit();
							editTenant.setRequiredContainerCluster( cluster );
							editTenant.setRequiredTenantName( "system" );
							tenant = editTenant.create();
							editTenant = null;

							sysCluster = schemaObj.getSysClusterTableObj().newInstance();
							I$SecSchemaName$SysClusterEditObj editSysCluster = sysCluster.beginEdit();
							editSysCluster.setRequiredContainerCluster( resolvedCluster );
							editSysCluster.setRequiredSingletonId( 1 );
							sysCluster = editSysCluster.create();
							editSysCluster = null;
						}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart12">
						I$SecSchemaName$SecUserEditObj editSystemUser = (I$SecSchemaName$SecUserEditObj)systemUser.beginEdit();
						editSystemUser.setRequiredPasswordHash( hashedAndEncodedPassword );
						editSystemUser.update();
						editSystemUser = null;

						editSystemSession = (I$SecSchemaName$SecSessionEditObj)systemSession.beginEdit();
						editSystemSession.setOptionalFinish( Calendar.getInstance() );
						editSystemSession.update();
						editSystemSession = null;

						schemaObj.commit();

						schemaObj.setAuthorization( null );

						out.println( "&lt;H1 style=\"text-align:center\"&gt;" + (( resolvedClusterDescription == null ) ? "" : resolvedClusterDescription ) + " Sec Manager&lt;/H1&gt;" );
						out.println( "&lt;H2 style=\"text-align:center\"&gt;Password set.&lt;/H2&gt;" );
						out.println( "&lt;p style=\"text-align:center\"&gt;" );
						out.println( "You may now &lt;A HRef=\"$SchemaName$SMWarLoginHtml\"&gt;log in to the sec manager.&lt;/A&gt;" );
					}
				}
			}
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarSetSystemPasswordPart13">
		catch( NoSuchAlgorithmException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught NoSuchAlgorithmException -- " + e.getMessage(),
				e );
		}
		catch( RuntimeException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught RuntimeException -- " + e.getMessage(),
				e );
		}
		finally {
			if( dbSchema != null ) {
				try {
					if( schemaObj.isTransactionOpen() ) { 
						schemaObj.rollback();
					}
				}
				catch( RuntimeException e ) {
				}
				schemaObj.setBackingStore( null );
				$SchemaName$SchemaPool.getSchemaPool().releaseInstance( dbSchema );
			}
		}
	}</GenRule>

</RuleSet>
