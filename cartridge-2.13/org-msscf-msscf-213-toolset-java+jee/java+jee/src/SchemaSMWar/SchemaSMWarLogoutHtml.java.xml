<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+jee"
	Name="src/SchemaSMWar/SchemaSMWarLogoutHtml.java"
	Revision="2.13"
	Descr="Java 11 Sec Manager Logout Servlet">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSMWarLogoutHtmlJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$SMWar"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$smwar.src"
		SubPackageName="$lower JavaPackage$.$SchemaName$SMWar"
		ExpansionClassName="$SchemaName$SMWarLogoutHtmlJava"
		ExpansionKeyName="$SchemaName$SMWarLogoutHtmlJava"
		ExpansionFileName="$SchemaName$SMWarLogoutHtml.java">
// Description: Java 11 Sec Manager Logout Servlet

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$SMWar;

import java.io.IOException;
import java.io.PrintWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Calendar;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;

import org.apache.commons.codec.binary.Base64;

import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$

/**
 * Servlet implementation class $SchemaName$SMWarLoginHtml
 */
@WebServlet("/$SchemaName$SMWarLogoutHtml")
public class $SchemaName$SMWarLogoutHtml extends HttpServlet {$SchemaSMWarLogoutPart01$$SchemaSMWarLogoutPart02$$SchemaSMWarLogoutPart03$$SchemaSMWarLogoutPart04$$SchemaSMWarLogoutPart05$$SchemaSMWarLogoutPart06$$SchemaSMWarLogoutPart07$$SchemaSMWarLogoutPart08$$SchemaSMWarLogoutPart09$
}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarLogoutPart01">
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public $SchemaName$SMWarLogoutHtml() {
		super();
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		final String S_ProcName="doGet";
		I$SchemaName$SchemaObj schemaObj;
		HttpSession sess = request.getSession( false );
		if( sess == null ) {
			sess = request.getSession( true );
			schemaObj = new $SchemaName$SchemaPooledObj();
			sess.setAttribute( "SchemaObj", schemaObj );
		}
		else {
			schemaObj = (I$SchemaName$SchemaObj)sess.getAttribute( "SchemaObj" );
			if( schemaObj == null ) {
				response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
				return;
			}
		}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarLogoutPart02">
		I$SchemaName$Schema dbSchema = null;
		try {
			$SecSchemaName$Authorization auth = schemaObj.getAuthorization();
			if( auth == null ) {
				response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
			}
			else {
				dbSchema = (I$SchemaName$Schema)$SchemaName$SchemaPool.getSchemaPool().getInstance();
				schemaObj.setBackingStore( dbSchema );
				schemaObj.beginTransaction();
				I$SecSchemaName$SecUserObj secUser = schemaObj.getSecUserTableObj().readSecUserByIdIdx( auth.getSecUserId() );

				I$SecSchemaName$ClusterObj secCluster = schemaObj.getClusterTableObj().readClusterByIdIdx( auth.getSecClusterId() );
				if( secCluster == null ) {
					throw new CFLibNullArgumentException( getClass(),
						S_ProcName,
						0,
						"secCluster" );
				}
				String clusterDescription = secCluster.getRequiredDescription();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarLogoutPart03">
				response.setContentType( "text/html" );
				PrintWriter out = response.getWriter();
				out.println( "&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"&gt;" );
				out.println( "&lt;HTML&gt;" );
				out.println( "&lt;BODY&gt;" );
				out.println( "&lt;form method=\"post\" formaction=\"$SchemaName$SMWarLogoutHtml\"&gt;" );
				out.println( "&lt;H1 style=\"text-align:center\"&gt;" + clusterDescription + " Sec Manager&lt;/H1&gt;" );
				out.println( "&lt;H2 style=\"text-align:center\"&gt;Are you sure you want to log out from "
						+ secUser.getRequiredEMailAddress()
						+ "?&lt;/H2&gt;" );
				out.println( "&lt;table style=\"width:60%\"&gt;" );
				out.println( "&lt;tr&gt;&lt;td style=\"text-align:center\"&gt;&lt;button type=\"submit\" name=\"Ok\"\"&gt;Yes, log out&lt;/button&gt;&lt;/td&gt;&lt;td style=\"text-align:center\"&gt;&lt;button type=\"button\" name=\"Cancel\"\" onclick=\"window.location.href='$SchemaName$SMWarSecMainHtml'\"&gt;Continue Session&lt;/button&gt;&lt;/td&gt;&lt;/tr&gt;" );
				out.println( "&lt;p&gt;" );
				out.println( "&lt;/table&gt;" );
				out.println( "&lt;/form&gt;" );
				out.println( "&lt;/BODY&gt;" );
				out.println( "&lt;/HTML&gt;" );
			}
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarLogoutPart04">
		catch( RuntimeException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught RuntimeException -- " + e.getMessage(),
				e );
		}
		finally {
			if( dbSchema != null ) {
				try {
					if( schemaObj.isTransactionOpen() ) { 
						schemaObj.rollback();
					}
				}
				catch( RuntimeException e ) {
				}
				schemaObj.setBackingStore( null );
				$SchemaName$SchemaPool.getSchemaPool().releaseInstance( dbSchema );
			}
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarLogoutPart05">
	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		final String S_ProcName = "doPost";

		I$SchemaName$SchemaObj schemaObj;
		HttpSession sess = request.getSession( false );
		if( sess == null ) {
			sess = request.getSession( true );
			schemaObj = new $SchemaName$SchemaPooledObj();
			sess.setAttribute( "SchemaObj", schemaObj );
		}
		else {
			schemaObj = (I$SchemaName$SchemaObj)sess.getAttribute( "SchemaObj" );
			if( schemaObj == null ) {
				response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
				return;
			}
		}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarLogoutPart06">
		I$SchemaName$Schema dbSchema = null;
		try {
			$SecSchemaName$Authorization auth = schemaObj.getAuthorization();
			if( auth == null ) {
				response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
			}
			else {
				dbSchema = (I$SchemaName$Schema)$SchemaName$SchemaPool.getSchemaPool().getInstance();
				schemaObj.setBackingStore( dbSchema );
				schemaObj.beginTransaction();
				I$SecSchemaName$SecSessionObj secSession = schemaObj.getSecSessionTableObj().readSecSessionByIdIdx( auth.getSecSessionId() );
				if( secSession == null ) {
					schemaObj.setAuthorization( null );
					schemaObj.minimizeMemory();
					response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
				}
				else {

					I$SecSchemaName$SecUserObj systemUser = schemaObj.getSecUserTableObj().readSecUserByULoginIdx( "system" );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarLogoutPart07">
					I$SecSchemaName$ClusterObj systemCluster = schemaObj.getClusterTableObj().readClusterByUDomNameIdx( "system" );
					I$SecSchemaName$TenantObj systemTenant = schemaObj.getTenantTableObj().readTenantByUNameIdx( systemCluster.getRequiredId(), "system" );
					I$SecSchemaName$SecSessionObj systemSession = schemaObj.getSecSessionTableObj().newInstance();
					I$SecSchemaName$SecSessionEditObj editSystemSession = (I$SecSchemaName$SecSessionEditObj)systemSession.beginEdit();
					editSystemSession.setRequiredContainerSecUser( systemUser );
					editSystemSession.setRequiredStart( Calendar.getInstance() );
					systemSession = editSystemSession.create();
					editSystemSession = null;

					auth = new $SecSchemaName$Authorization();
					auth.setSecCluster( systemCluster );
					auth.setSecTenant( systemTenant );
					auth.setSecSession( systemSession );
					schemaObj.setAuthorization( auth );

					I$SecSchemaName$SecSessionEditObj editSecSession = (I$SecSchemaName$SecSessionEditObj)secSession.beginEdit();
					if( editSecSession.getOptionalFinish() == null ) {
						editSecSession.setOptionalFinish( Calendar.getInstance() );
					}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarLogoutPart08">
					editSecSession.update();
					editSecSession = null;

					editSystemSession = systemSession.beginEdit();
					editSystemSession.setOptionalFinish( Calendar.getInstance() );
					editSystemSession.update();
					editSystemSession = null;

					schemaObj.commit();
					schemaObj.setAuthorization( null );
					schemaObj.minimizeMemory();
					response.sendRedirect( "$SchemaName$SMWarLoginHtml" );
				}
			}
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaSMWarLogoutPart09">
		catch( RuntimeException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught RuntimeException -- " + e.getMessage(),
				e );
		}
		finally {
			if( dbSchema != null ) {
				try {
					if( schemaObj.isTransactionOpen() ) { 
						schemaObj.rollback();
					}
				}
				catch( RuntimeException e ) {
				}
				schemaObj.setBackingStore( null );
				$SchemaName$SchemaPool.getSchemaPool().releaseInstance( dbSchema );
			}
			sess.setAttribute( "SchemaObj", null );
		}
	}</GenRule>

</RuleSet>
