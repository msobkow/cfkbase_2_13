<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java"
	Name="src/Schema/SchemaAuthorization.java"
	Revision="2.13"
	Descr="Java 11 $SchemaName$ Authorization Implementation.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaAuthorizationJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$/src/main"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$AuthorizationJava"
		ExpansionKeyName="$SchemaName$AuthorizationJava"
		ExpansionFileName="$SchemaName$Authorization.java"
>// Description: Java 11 $SchemaName$ Authorization Interface.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$;

import java.lang.reflect.*;
import java.io.*;
import java.net.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.msscf.msscf.cflib.CFLib.*;$iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$
import $lower JavaPackage$.$SchemaName$Obj.I$SchemaName$ClusterObj;
import $lower JavaPackage$.$SchemaName$Obj.I$SchemaName$TenantObj;
import $lower JavaPackage$.$SchemaName$Obj.I$SchemaName$SecSessionObj;

/*
 *	A $SchemaName$Authorization is an authorization ticket
 *	for the system providing services.  For example, a
 *	database layer implements an Authorization that
 *	resolves a database connection (which may be under the
 *	control of an active cursor).
 */
public class $SchemaName$Authorization$iterate SchemaRefs( first SchemaAuthorizationInheritAuthorization each empty empty empty )$
	implements Serializable
{$iterate SchemaRefs( first SchemaAuthorizationInheritBody each empty empty SchemaAuthorizationImplBody )$}
</GenFile>

	<GenRule GenDef="SchemaRef" Name="SchemaAuthorizationInheritBody"
		>$implAuthorizationInheritConstructor$</GenRule>

	<GenRule GenDef="Object" Name="SchemaAuthorizationImplBody"
		>$poptop SchemaDef implAuthorizationAttrUUID$$poptop SchemaDef implAuthorizationAttrSecId$$poptop SchemaDef implAuthorizationConstructor$$poptop SchemaDef implAuthorizationUUIDAccessors$$poptop SchemaDef implAuthorizationSecIdAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implAuthorizationAttrSecId">
	protected long secClusterId = 0L;
	protected long secTenantId = 0L;
	protected UUID secSessionId = UUID.randomUUID();
	protected UUID secUserId = UUID.randomUUID();
</GenRule>

	<GenRule GenDef="SchemaRef" Name="SchemaAuthorizationInheritAuthorization">
	extends $SecSchemaName$Authorization</GenRule>

	<GenRule GenDef="SchemaDef" Name="implAuthorizationAttrUUID">
	protected UUID authUUID;
	protected String authUUIDStr;
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implAuthorizationConstructor">
	public $SchemaName$Authorization() {
		authUUID = UUID.randomUUID();
		authUUIDStr = authUUID.toString();
	}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="implAuthorizationInheritConstructor">
	public $SchemaName$Authorization() {
		super();
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implAuthorizationSecIdAccessors">
	public long getSecClusterId() {
		return( secClusterId );
	}

	public void setSecClusterId( long clusterId ) {
		secClusterId = clusterId;
	}

	public void setSecCluster( I$SchemaName$ClusterObj value ) {
		// The cluster id is never cleared to 0 after it's been set
		if( value != null ) {
			secClusterId = value.getRequiredId();
		}
	}

	public long getSecTenantId() {
		return( secTenantId );
	}

	public void setSecTenantId( long tenantId ) {
		secTenantId = tenantId;
	}

	public void setSecTenant( I$SchemaName$TenantObj value ) {
		// The tenant id is never cleared to 0 after it's been set
		if( value != null ) {
			secTenantId = value.getRequiredId();
		}
	}

	public UUID getSecSessionId() {
		return( secSessionId );
	}

	public void setSecSessionId( UUID sessionId ) {
		secSessionId = sessionId;
	}

	public void setSecSession( I$SchemaName$SecSessionObj value )
	{
		// The session and user id are never cleared after they've been set
		if( value != null ) {
			secSessionId = value.getRequiredSecSessionId();
			secUserId = value.getRequiredSecUserId();
		}
	}

	public UUID getSecUserId() {
		return( secUserId );
	}

	public void setSecUserId( UUID userId ) {
		secUserId = userId;
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implAuthorizationUUIDAccessors">
	public UUID getAuthUUID() {
		return( authUUID );
	}

	public void setAuthUUID( UUID value ) {
		authUUID = value;
		authUUIDStr = authUUID.toString();
	}

	public String getAuthUUIDStr() {
		return( authUUIDStr );
	}
</GenRule>

</RuleSet>
