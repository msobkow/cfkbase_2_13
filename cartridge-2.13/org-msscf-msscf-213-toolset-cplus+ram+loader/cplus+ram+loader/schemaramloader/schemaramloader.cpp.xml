<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus+ram+loader"
	Name="schemaramloader/schemaramloader.cpp"
	Revision="2.13"
	Descr="C++18 Implementation of a RAM loader">

	<GenFile GenDef="SchemaDef" Name="fileschemaramloaderCPlus"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="$reference ManufacturingSchema lower PackageName$ramloader"
		SubPackageName=""
		ExpansionClassName="$SchemaName$RamLoaderCPlus"
		ExpansionKeyName="$SchemaName$RamLoaderCPlus"
		ExpansionFileName="$lower SchemaName$ramloader.cpp"
>// Description: C++18 Implementation of a RAM $SchemaName$ loader.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;
#include &lt;$lower SchemaName$obj/I$SchemaName$ObjPublic.hpp&gt;
#include &lt;$lower SchemaName$obj/$SchemaName$SchemaObj.hpp&gt;
#include &lt;$lower SchemaName$saxloader/$SchemaName$SaxLoaderPublic.hpp&gt;
#include &lt;$lower SchemaName$ram/$SchemaName$RamSchema.hpp&gt;
#include &lt;$SchemaName$RamLdr.hpp&gt;

static const std::string CLASS_NAME( "$SchemaName$RamLoader" );

int main( int argc, char* argv[] ) {

	if( argc &lt; 1 ) {
		std::cerr &lt;&lt; CLASS_NAME + " ERROR: Program name is not available\n";
		return( 1 );
	}
	std::string S_ProcName( argv[0] );
	static const std::string S_System( "system" );
	CFLIB_EXCEPTION_DECLINFO

	cflib::CFLib::init();

	int retval = 0;

	$CPlusNamespace$::I$SchemaName$Schema* $leadlower SchemaName$Schema = NULL;
	$CPlusNamespace$::I$SchemaName$SchemaObj* $leadlower SchemaName$SchemaObj = NULL;
	$CPlusNamespace$::$SchemaName$RamLdr* cli = NULL;
	$CPlusNamespace$::$SchemaName$SaxLoader* loader = NULL;
	$CPlusSecNamespace$::$SecSchemaName$Authorization* auth = NULL;
	std::string* loaderOpts = NULL;
	std::string* url = NULL;
	if( argc &gt;= 3 ) {
		try {
			$leadlower SchemaName$Schema = new $CPlusNamespace$::$SchemaName$RamSchema();
			$leadlower SchemaName$SchemaObj = new $CPlusNamespace$::$SchemaName$SchemaObj();
			$leadlower SchemaName$SchemaObj-&gt;setBackingStore( $leadlower SchemaName$Schema );
			cli = new $CPlusNamespace$::$SchemaName$RamLdr();
			loader = cli-&gt;getSaxLoader();
			loader-&gt;setSchemaObj( $leadlower SchemaName$SchemaObj );
			loaderOpts = new std::string( argv[1] );
			url = new std::string( argv[2] );
			$leadlower SchemaName$Schema-&gt;connect( S_System, S_System, S_System, S_System );
			$leadlower SchemaName$Schema-&gt;rollback();
			$leadlower SchemaName$Schema-&gt;beginTransaction();
			$leadlower SchemaName$SchemaObj-&gt;setSecCluster( $leadlower SchemaName$SchemaObj-&gt;getClusterTableObj()-&gt;getSystemCluster() );
			$leadlower SchemaName$SchemaObj-&gt;setSecTenant( $leadlower SchemaName$SchemaObj-&gt;getTenantTableObj()-&gt;getSystemTenant() );
			$leadlower SchemaName$SchemaObj-&gt;setSecSession( $leadlower SchemaName$SchemaObj-&gt;getSecSessionTableObj()-&gt;getSystemSession() );
			auth = new $CPlusSecNamespace$::$SecSchemaName$Authorization();
			auth-&gt;setSecCluster( *($leadlower SchemaName$SchemaObj-&gt;getSecCluster()) );
			auth-&gt;setSecTenant( *($leadlower SchemaName$SchemaObj-&gt;getSecTenant()) );
			auth-&gt;setSecSession( $leadlower SchemaName$SchemaObj-&gt;getSecSession() );
			$leadlower SchemaName$SchemaObj-&gt;setAuthorization( auth );
			cli-&gt;applyLoaderOptions( loader, *loaderOpts );
			cli-&gt;evaluateRemainingArgs( argc, argv, 3 );
			loader-&gt;setUseCluster( $leadlower SchemaName$SchemaObj-&gt;getSecCluster() );
			loader-&gt;setUseTenant( $leadlower SchemaName$SchemaObj-&gt;getSecTenant() );
			loader-&gt;parseFile( *url );
			$leadlower SchemaName$Schema-&gt;commit();
			$leadlower SchemaName$Schema-&gt;disconnect( true );
		}
		CFLIB_EXCEPTION_CATCH_FALLTHROUGH
		if( ! CFLIB_EXCEPTION_EMPTY ) {
			std::cerr &lt;&lt; S_ProcName + " SAXParseException : Could not parse XML file \\"" + *url + "\\": " + CFLIB_EXCEPTION_FORMATTEDMESSAGE + "\\n";
		}
		if( ( $leadlower SchemaName$Schema != NULL ) &amp;&amp; $leadlower SchemaName$Schema-&gt;isConnected() ) {
			try {
				$leadlower SchemaName$Schema-&gt;rollback();
			}
			catch ( ... ) {
			}
			try {
				$leadlower SchemaName$Schema-&gt;disconnect( false );
			}
			catch( ... ) {
			}
		}
		if( loader != NULL ) {
			loader-&gt;setSchemaObj( NULL );
			loader = NULL;
		}
		if( cli != NULL ) {
			delete cli;
			cli = NULL;
		}
		if( $leadlower SchemaName$SchemaObj != NULL ) {
			$leadlower SchemaName$SchemaObj-&gt;setBackingStore( NULL );
			try {
				delete $leadlower SchemaName$SchemaObj;
			}
			catch( ... ) {
			}
			$leadlower SchemaName$SchemaObj = NULL;
		}
		if( $leadlower SchemaName$Schema != NULL ) {
			if( $leadlower SchemaName$Schema-&gt;isConnected() ) {
				try {
					$leadlower SchemaName$Schema-&gt;rollback();
				}
				catch ( ... ) {
				}
				try {
					$leadlower SchemaName$Schema-&gt;disconnect( false );
				}
				catch( ... ) {
				}
			}
			try {
				delete $leadlower SchemaName$Schema;
			}
			catch( ... ) {
			}
			$leadlower SchemaName$Schema = NULL;
		}
	}
	else {
		std::cerr &lt;&lt; S_ProcName + " ERROR: Expected at least two argument specifying the loader options and the name of the XML file to parse.  The first argument may be empty.\n";
	}

	if( auth != NULL ) {
		delete auth;
		auth = NULL;
	}

	if( url != NULL ) {
		delete url;
		url = NULL;
	}

	if( loaderOpts != NULL ) {
		delete loaderOpts;
		loaderOpts = NULL;
	}

	try {
		cflib::CFLib::release();
	}
	catch( ... ) {
	}

	return( retval );
}
</GenFile>

</RuleSet>
