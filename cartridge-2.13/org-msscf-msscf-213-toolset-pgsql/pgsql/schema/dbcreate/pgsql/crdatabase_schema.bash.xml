<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="pgsql"
	Name="schema/dbcreate/pgsql/crdatabase_schema.bash"
	Revision="2.13"
	Descr="null">

	<GenFile GenDef="SchemaDef" Name="dbadminfile_CreateSchema"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="pgsql"
		ExpansionClassName="crdatabase_$lower DbSchemaName$"
		ExpansionKeyName="crdatabase_$lower DbSchemaName$"
		ExpansionFileName="$dbadminfilename_CreateSchema$">#!/bin/bash
#
#	@(#) $GenPackageDir$/$GenFileName$
$MssBashScriptLicense$
$parsePgSqlArgs$$validatePgSqlArgs$
echo "Dropping old schema $lower DbSchemaName$ for $${pguser}"
echo "Dropping old schema $lower DbSchemaName$ for $${pguser}" &gt;&gt;$${logfilename}

psql -h $${pghost} $${PGPORT} -U $${pguser} -a -e -c "drop schema $lower DbSchemaName$" &gt;&gt;$${logfilename} 2&gt;&amp;1

echo "Creating schema $DbSchemaName$ in database $${pgdb} for $${pguser}"
echo "Creating schema $DbSchemaName$ in database $${pgdb} for $${pguser}" &gt;&gt;$${logfilename}

psql -h $${pghost} $${PGPORT} -d $${pgdb} -U $${pguser} -a -e -c "create schema $lower DbSchemaName$" &gt;&gt;$${logfilename} 2&gt;&amp;1

$exec_CreateAllTables$$exec_CreateAllIndexes$$exec_CreateAllRelations$$exec_CreateAllSequences$$exec_CreateAllTypes$$exec_CreateAllStoredProcs$$exec_LoadAllData$$exec_CreateAllTriggers$
exit 0

</GenFile>

	<GenRule GenDef="SchemaDef" Name="exec_CreateAllTables">
#
#	Create the database tables
#
if [ -f ./$dbadminfilename_CreateAllTables$ ]; then
	echo "	Creating database tables ..."
	echo "" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	echo "#	Executing script $dbadminfilename_CreateAllTables$" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	./$dbadminfilename_CreateAllTables$ -H $${pghost} $${PASSPGPORT} -d $${pgdb} -U $${pguser} -P $${pgpwd} -L $${logfilename}
fi
</GenRule>

	<GenRule GenDef="SchemaDef" Name="exec_CreateAllIndexes">
#
#	Create the database indexes
#
if [ -f ./$dbadminfilename_CreateAllIndexes$ ]; then
	echo "	Creating database indexes ..."
	echo "#" &gt;&gt;$${logfilename}
	echo "#	Executing script $dbadminfilename_CreateAllIndexes$" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	./$dbadminfilename_CreateAllIndexes$ -H $${pghost} $${PASSPGPORT} -d $${pgdb} -U $${pguser} -P $${pgpwd} -L $${logfilename}
fi
</GenRule>

	<GenRule GenDef="SchemaDef" Name="exec_CreateAllRelations">
#
#	Create the database relations
#
if [ -f ./$dbadminfilename_CreateAllRelations$ ]; then
	echo "	Creating database relations ..."
	echo "" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	echo "#	Executing script $dbadminfilename_CreateAllRelations$" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	./$dbadminfilename_CreateAllRelations$ -H $${pghost} $${PASSPGPORT} -d $${pgdb} -U $${pguser} -P $${pgpwd} -L $${logfilename}
fi
</GenRule>

	<GenRule GenDef="SchemaDef" Name="exec_CreateAllSequences">
#
#	Create the database sequences
#
if [ -f ./$dbadminfilename_CreateAllSequences$ ]; then
	echo "	Creating database sequences..."
	echo "" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	echo "#	Executing script $dbadminfilename_CreateAllSequences$" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	./$dbadminfilename_CreateAllSequences$ -H $${pghost} $${PASSPGPORT} -d $${pgdb} -U $${pguser} -P $${pgpwd} -L $${logfilename}
fi
</GenRule>

	<GenRule GenDef="SchemaDef" Name="exec_CreateAllTypes">
#
#	Create the return record types for the stored procedures
#
if [ -f ./$dbadminfilename_CreateAllTypes$ ]; then
	echo "	Creating database types..."
	echo "" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	echo "#	Executing script $dbadminfilename_CreateAllTypes$" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	./$dbadminfilename_CreateAllTypes$ -H $${pghost} $${PASSPGPORT} -d $${pgdb} -U $${pguser} -P $${pgpwd} -L $${logfilename}
fi
</GenRule>

	<GenRule GenDef="SchemaDef" Name="exec_CreateAllStoredProcs">
#
#	Create the stored procedures
#
if [ -f ./$dbadminfilename_CreateAllStoredProcs$ ]; then
	echo "	Creating stored procedures..."
	echo "" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	echo "#	Executing script $dbadminfilename_CreateAllStoredProcs$" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	./$dbadminfilename_CreateAllStoredProcs$ -H $${pghost} $${PASSPGPORT} -d $${pgdb} -U $${pguser} -P $${pgpwd} -L $${logfilename}
fi
</GenRule>

	<GenRule GenDef="SchemaDef" Name="exec_LoadAllData">
#
#	Load initial data
#
if [ -f ./$dbadminfilename_LoadAllData$ ]; then
	echo "	Loading initial data ..."
	echo "" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	echo "#	Executing script $dbadminfilename_LoadAllData$" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	./$dbadminfilename_LoadAllData$ -H $${pghost} $${PASSPGPORT} -d $${pgdb} -U $${pguser} -P $${pgpwd} -L $${logfilename}
fi
</GenRule>

	<GenRule GenDef="SchemaDef" Name="exec_CreateAllTriggers">
#
#	Create the database triggers
#
if [ -f ./$dbadminfilename_CreateAllTriggers$ ]; then
	echo "	Creating database triggers ..."
	echo "" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	echo "#	Executing script $dbadminfilename_CreateAllTriggers$" &gt;&gt;$${logfilename}
	echo "#" &gt;&gt;$${logfilename}
	./$dbadminfilename_CreateAllTriggers$ -H $${pghost} $${PASSPGPORT} -d $${pgdb} -U $${pguser} -P $${pgpwd} -L $${logfilename}
fi
</GenRule>

</RuleSet>

