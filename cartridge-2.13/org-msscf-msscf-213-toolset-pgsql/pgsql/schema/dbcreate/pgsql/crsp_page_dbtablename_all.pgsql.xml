<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="pgsql"
	Name="schema/dbcreate/pgsql/crsp_page_dbtablename_all.pgsql"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="SchemaDef" GenDef="Table" Name="dbadminfile_CreateSPPageDbTableNameAll"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="pgsql"
		ExpansionClassName="$dbadminfilename_CreateSPPageDbTableNameAll$"
		ExpansionKeyName="$dbadminfilename_CreateSPPageDbTableNameAll$"
		ExpansionFileName="$dbadminfilename_CreateSPPageDbTableNameAll$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
create or replace function $lower DbSchemaName$.$sp_page_dbtablename_all$($implPgSqlSPStandardArgs$$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlSPSpecPriorArg )$ )
returns setof $lower DbSchemaName$.$type_dbtablename_rec$ as $$$$$switch SecScope None empty System empty Cluster implPgSqlSPReadTableDeclPermFlag Tenant implPgSqlSPReadTableDeclPermFlag default error$
begin$switch SecScope None empty System empty Cluster implPgSqlSPReadTableCheckCluster Tenant implPgSqlSPReadTableCheckTenant default error$$switch SecScope None implPgSqlSPPageTableRetSelectNormal System implPgSqlSPPageTableRetSelectNormal Cluster implPgSqlSPPageTableRetSelectRestrictCluster Tenant implPgSqlSPPageTableRetSelectRestrictTenant default error$
	return;
end;
$$$$ language plpgsql;
</GenFile>

	<GenRule GenDef="IndexCol" Name="implPgSqlSPSpecPriorArg">,
	prior$Name$ $clause_SPColType$</GenRule>

	<GenRule GenDef="Object" Name="clauseEmitWhere">
			where </GenRule>

	<GenRule GenDef="Object" Name="restrictQueryWhereBeforePrior"
		>$clauseEmitWhere$$restrictBeforePrior$</GenRule>

	<GenRule GenDef="Table" Name="restrictReadAllQueryBeforePrior"
		>$switch HasSuperClassRelation yes restrictReadQueryByClassCodeAndBeforePrior default restrictBaseReadQueryByClassCodeBeforePrior$</GenRule>

	<GenRule GenDef="Table" Name="restrictBaseReadQueryByClassCodeBeforePrior"
		>$switch IsBaseTable yes restrictReadQueryByClassCodeAndBeforePrior default restrictQueryWhereBeforePrior $</GenRule>

	<GenRule GenDef="Table" Name="restrictReadAllQueryWhereBeforePrior"
		>$switch HasSuperClassRelation yes restrictReadQueryByClassCodeAndBeforePrior default restrictBaseReadQueryByClassCodeAndBeforePrior$</GenRule>

	<GenRule GenDef="Table" Name="restrictBaseReadQueryByClassCodeAndBeforePrior"
		>$switch IsBaseTable yes restrictReadQueryByClassCodeAndBeforePrior default restrictWhereBeforePrior$</GenRule>

	<GenRule GenDef="Table" Name="restrictReadQueryByClassCodeAndBeforePrior"
		>$restrictReadQueryByClassCode$
			and $restrictBeforePrior$</GenRule>

	<GenRule GenDef="Index" Name="restrictAndBeforePrior"
		>$poptop Table restrictAndBeforePrior$</GenRule>

	<GenRule GenDef="Table" Name="restrictAndBeforePrior">
			and $restrictBeforePriorCore$</GenRule>

	<GenRule GenDef="Index" Name="restrictBeforePrior"
		>$poptop Table restrictBeforePrior$</GenRule>

	<GenRule GenDef="Table" Name="restrictBeforePrior">
			$restrictBeforePriorCore$</GenRule>

	<GenRule GenDef="Table" Name="restrictBeforePriorCore"
			>( $reference BaseClass reference PrimaryKeyIndex spread Columns( before emitLParen after emitRParen first emitPriorEquals each emitAndPriorEquals last emitAndPriorLess lone emitPriorLess between emitOr )$ )</GenRule>

	<GenRule GenDef="Object" Name="emitLParen">( </GenRule>
	<GenRule GenDef="Object" Name="emitRParen"> )</GenRule>

	<GenRule GenDef="IndexCol" Name="emitAndPriorEquals">
					and $emitPriorEquals$</GenRule>

	<GenRule GenDef="IndexCol" Name="emitAndPriorLess">
					and $emitPriorLess$</GenRule>

	<GenRule GenDef="Object" Name="emitOr">
				or </GenRule>

	<GenRule GenDef="IndexCol" Name="emitPriorEquals"
		>( $lower reference Index reference Table ClassCode$.$DbColumnName$ = prior$Name$ )</GenRule>

	<GenRule GenDef="IndexCol" Name="emitPriorLess"
		>( $lower reference Index reference Table ClassCode$.$DbColumnName$ &lt; prior$Name$ )</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlPriorNotNull"
		>( prior$Name$ is not null )</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlAndPriorNotNull"
		>and $implPgSqlPriorNotNull$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPPageTableRetSelectNormal">
	if( $reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
	then
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQueryBeforePrior default restrictQueryWhereBeforePrior$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
	else
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQuery default empty$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
	end if;
</GenRule>

	<GenRule GenDef="Object" Name="implImposeTableLimit">
			limit 25</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPPageTableRetSelectRestrictCluster">
	if( isSystemUser )
	then
		if( $reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
		then
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQueryBeforePrior default restrictQueryWhereBeforePrior$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		else
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQuery default empty$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		end if;$implPgSqlSPPageTableRetSelectRestrictClusterPart2$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPPageTableRetSelectRestrictClusterPart2">
	else
		if( $reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
		then
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQuery default empty$$switch TableInClassHierarchy yes implPgSqlSPReadTableRetSelectAndRestrictCluster default implPgSqlSPReadTableRetSelectWhereRestrictCluster$$restrictAndBeforePrior$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		else
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQuery default empty$$switch TableInClassHierarchy yes implPgSqlSPReadTableRetSelectAndRestrictCluster default implPgSqlSPReadTableRetSelectWhereRestrictCluster$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		end if;
	end if;</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPPageTableRetSelectRestrictTenant">
	if( isSystemUser )
	then
		if( $reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
		then
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQueryBeforePrior default restrictQueryWhereBeforePrior$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		else
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQuery default empty$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		end if;$implPgSqlSPPageTableRetSelectRestrictTenantPart2$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPPageTableRetSelectRestrictTenantPart2">
	else
		if( $reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
		then
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQueryBeforePrior default restrictQueryWhereBeforePrior$$switch TableInClassHierarchy yes implPgSqlSPReadTableRetSelectAndRestrictTenant default empty$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		else
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$$switch TableInClassHierarchy yes restrictReadAllQuery default empty$$switch TableInClassHierarchy yes implPgSqlSPReadTableRetSelectWhereRestrictTenant default empty$$implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		end if;
	end if;</GenRule>

</RuleSet>
