<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="pgsql"
	Name="schema/dbcreate/pgsql/crsp_page_dbtablename_by_suffix.pgsql"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="Table" GenDef="Index" Name="dbadminfile_CreateSPPageDbTableNameBySuffix"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="pgsql"
		ExpansionClassName="$dbadminfilename_CreateSPPageDbTableNameBySuffix$"
		ExpansionKeyName="$dbadminfilename_CreateSPPageDbTableNameBySuffix$"
		ExpansionFileName="$dbadminfilename_CreateSPPageDbTableNameBySuffix$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
create or replace function $poptop Table lower DbSchemaName$.$sp_page_dbtablename_by_suffix$($implPgSqlSPStandardArgs$$iterate Columns( each sparg_CommaTableCol )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlSPSpecPriorArg )$ )
returns setof $lower DbSchemaName$.$type_dbtablename_rec$ as $$$$$switch SecScope None empty System empty Cluster implPgSqlSPReadTableDeclPermFlag Tenant implPgSqlSPReadTableDeclPermFlag default error$
begin$poptop Table switch TableName Cluster empty Tenant empty SecUser empty default implPgSqlSPReadEnforceSec$$switch TopTableName Cluster implPgSqlSPPageTableRetSelectByIndexNormal Tenant implPgSqlSPPageTableRetSelectByIndexNormal SecUser implPgSqlSPPageTableRetSelectByIndexNormal default implPgSqlSPPageTableRetSelectByIndexMakeChoice$
	return;
end
$$$$ language plpgsql;
</GenFile>

	<GenRule GenDef="Index" Name="implPgSqlSPPageTableRetSelectByIndexMakeChoice"
		>$switch SecScope None implPgSqlSPPageTableRetSelectByIndexNormal System implPgSqlSPPageTableRetSelectByIndexNormal Cluster implPgSqlSPPageTableRetSelectByIndexRestrictCluster Tenant implPgSqlSPPageTableRetSelectByIndexRestrictTenant default error$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlSPPageTableRetSelectByIndexNormal">
	if( $poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
	then
		return query select
$poptop Table implPgSqlSelectTableColumns$,
			$poptop Table lower reference BaseClass ClassCode$.revision as revision
		from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
		where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$$poptop Table restrictAndBeforePrior$$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
	else
		return query select
$poptop Table implPgSqlSelectTableColumns$,
			$poptop Table lower reference BaseClass ClassCode$.revision as revision
		from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
		where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
	end if;</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlSPPageTableRetSelectByIndexRestrictCluster">
	if( isSystemUser )
	then
		if( $poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
		then
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
			where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$$poptop Table restrictAndBeforePrior$$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		else
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
			where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		end if;$implPgSqlSPPageTableRetSelectByIndexRestrictClusterPart2$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlSPPageTableRetSelectByIndexRestrictClusterPart2">
	else
		if( $poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
		then
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
			where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$
				and $lower poptop Table reference ClusterIdColumn reference Table ClassCode$.$poptop Table reference ClusterIdColumn DbColumnName$ = secClusterId$poptop Table restrictAndBeforePrior$$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		else
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
			where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$
				and $lower poptop Table reference ClusterIdColumn reference Table ClassCode$.$poptop Table reference ClusterIdColumn DbColumnName$ = secClusterId$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		end if;
	end if;</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlSPPageTableRetSelectByIndexRestrictTenant">
	if( isSystemUser )
	then
		if( $poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
		then
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
			where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$$poptop Table restrictAndBeforePrior$$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		else
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
			where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		end if;$implPgSqlSPPageTableRetSelectByIndexRestrictTenantPart2$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlSPPageTableRetSelectByIndexRestrictTenantPart2">
	else
		if( $poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlPriorNotNull each implPgSqlAndPriorNotNull )$ )
		then
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
			where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$
				and $lower poptop Table reference TenantIdColumn reference Table ClassCode$.$poptop Table reference TenantIdColumn DbColumnName$ = secTenantId$poptop Table restrictAndBeforePrior$$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		else
			return query select
$poptop Table implPgSqlSelectTableColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
			from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ as $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
			where
				$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$poptop Table restrictReadByIndexQuery$
				and $lower poptop Table reference TenantIdColumn reference Table ClassCode$.$poptop Table reference TenantIdColumn DbColumnName$ = secTenantId$switch IsUnique yes empty default implSPReadTableOrderByDescendingPKey$$implImposeTableLimit$;
		end if;
	end if;</GenRule>

</RuleSet>
