<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="pgsql"
	Name="schema/dbcreate/pgsql/crsp_audit_dbtablename.pgsql"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="SchemaDef" GenDef="Table" Name="dbadminfile_CreateSPAuditDbTableName"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="pgsql"
		ExpansionClassName="$dbadminfilename_CreateSPAuditDbTableName$"
		ExpansionKeyName="$dbadminfilename_CreateSPAuditDbTableName$"
		ExpansionFileName="$dbadminfilename_CreateSPAuditDbTableName$" >--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
create or replace function $lower DbSchemaName$.$sp_audit_dbtablename$($implPgSqlSPStandardArgs$$switch HasClassCode yes implPgSqlSPArgClassCode default empty$$implPgSqlSPAuditPKeyArgs$,
	argAuditAction integer )
returns boolean as $$$$
begin$switch HasClassCode yes implPgSqlSPAuditTableWithClassCode default implPgSqlSPAuditTableNoClassCode$
	return true;
end;
$$$$ language plpgsql;
</GenFile>

	<GenRule GenDef="Table" Name="implPgSqlSPArgClassCode">,
	argClassCode varchar(4)</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditPKeyArgs"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlSPAuditPKeyArg )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlSPAuditPKeyArg">,
	arg$reference Column Name$ $reference Column clause_SPColType$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditTableNoClassCode">
	insert into $lower DbSchemaName$.$DbTableName$_h ($reference PrimaryKeyIndex iterate Columns( each implPgSqlSPAuditInheritedIntoPKeyColumn )$
				auditclusterid,
				auditsessionid,
				auditstamp,$implPgSqlSPAuditInheritedIntoDataColumnNameComma$
				revision,
				auditaction )
		select$reference PrimaryKeyIndex iterate Columns( each implPgSqlSPAuditInheritedPKeyColumnNameComma )$
				argAuditClusterId,
				argAuditSessionId,
				now(),$implPgSqlSPAuditInheritedDataColumnNameComma$
				$lower reference BaseClass ClassCode$.revision,
				argAuditAction	
		from $lower DbSchemaName$.$DbTableName$ as $lower ClassCode$
		where
				$reference PrimaryKeyIndex iterate Columns( first implPgSqlSPAuditTableWhereAuditPKeyCol each implPgSqlSPAuditTableWhereAndAuditPKeyCol )$;
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditTableWithClassCode">
	case argClassCode
	when '$ClassCode$' then$implPgSqlSPAuditClassCodeBody$$iterate TableSubClasses( each implPgSqlSPAuditTableSubCode empty empty )$
	else
		raise exception 'Unrecognized class code attempting to audit object';
	end case;
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditTableSubCode">
	when '$ClassCode$' then$implPgSqlSPAuditClassCodeBody$$iterate TableSubClasses( each implPgSqlSPAuditTableSubCode empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditClassCodeBody">
		insert into $lower DbSchemaName$.$DbTableName$_h ($reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlSPAuditInheritedIntoPKeyColumn )$
				classcode,
				auditclusterid,
				auditsessionid,
				auditstamp,$implPgSqlSPAuditInheritedIntoDataColumnNameComma$
				revision,
				auditaction )
			select$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlSPAuditInheritedPKeyColumnNameComma )$
				$lower reference BaseClass ClassCode$.classcode,
				argAuditClusterId,
				argAuditSessionId,
				now(),$implPgSqlSPAuditInheritedDataColumnNameComma$
				$lower reference BaseClass ClassCode$.revision,
				argAuditAction	
			from $lower DbSchemaName$.$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implPgSqlClassCodeJoinSuperTable default empty$
			where
				$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlSPAuditTableWhereAuditPKeyCol each implPgSqlSPAuditTableWhereAndAuditPKeyCol )$;</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlSPAuditTableWhereAuditPKeyCol"
		>$lower reference Index reference Table ClassCode$.$DbColumnName$ = arg$Name$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlSPAuditTableWhereAndAuditPKeyCol">
				and $implPgSqlSPAuditTableWhereAuditPKeyCol$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditInheritedIntoDataColumnNameComma"
		>$switch HasSuperClassRelation yes implPgSqlSPAuditInheritedIntoDataColumnNameCommaInh default implPgSqlSPAuditInheritedIntoDataColumnNameCommaBase$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditInheritedIntoDataColumnNameCommaInh"
		>$reference SuperClassRelation reference ToTable implPgSqlSPAuditInheritedIntoDataColumnNameComma$$iterate Columns( each implPgSqlSPAuditInheritedDataColumnEmitIntoDataColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditInheritedIntoDataColumnNameCommaBase"
		>$iterate Columns( each implPgSqlSPAuditInheritedDataColumnEmitIntoDataColumn )$</GenRule>

	<GenRule GenDef="Value" Name="implPgSqlSPAuditInheritedDataColumnEmitIntoDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlSPAuditInheritedIntoDataColumnReallyEmitDataColumn$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlSPAuditInheritedIntoPKeyColumn"
		>$reference Column implPgSqlSPAuditInheritedIntoDataColumnReallyEmitDataColumn$</GenRule>

	<GenRule GenDef="Value" Name="implPgSqlSPAuditInheritedIntoDataColumnReallyEmitDataColumn">
				$DbColumnName$,</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditInheritedDataColumnNameComma"
		>$switch HasSuperClassRelation yes implPgSqlSPAuditInheritedDataColumnNameInhComma default implPgSqlSPAuditInheritedDataColumnNameBaseComma$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditInheritedDataColumnNameInhComma"
		>$reference SuperClassRelation reference ToTable implPgSqlSPAuditInheritedDataColumnNameComma$$iterate Columns( each implPgSqlSPAuditInheritedDataColumnNameComma )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSPAuditInheritedDataColumnNameBaseComma"
		>$iterate Columns( each implPgSqlSPAuditInheritedDataColumnNameComma )$</GenRule>

	<GenRule GenDef="Atom" Name="implPgSqlSPAuditInheritedDataColumnNameComma"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlSPAuditInheritedDataColumnEmitNameComma$</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlSPAuditInheritedDataColumnNameComma"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlSPAuditInheritedDataColumnEmitNameComma$</GenRule>

	<GenRule GenDef="Value" Name="implPgSqlSPAuditInheritedDataColumnEmitNameComma">
				$lower reference Table ClassCode$.$DbColumnName$,</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlSPAuditInheritedPKeyColumnNameComma">
				$lower reference Index reference Table ClassCode$.$DbColumnName$,</GenRule>

</RuleSet>
