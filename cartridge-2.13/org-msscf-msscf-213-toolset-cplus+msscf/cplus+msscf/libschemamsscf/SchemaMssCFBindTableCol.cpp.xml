<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus+msscf"
	Name="libschemamsscf/SchemaMssCFBindTableCol.cpp"
	Revision="2.13"
	Descr="C++18 SchemaMssCFBindTableCol">

	<GenFile GenDef="Value" Name="fileSchemaMssCFBindTableColCPlus"
		GenerateOnce="false"
		ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$reference ManufacturingSchema lower PackageName$msscf"
		SubPackageName=""
		ExpansionClassName="$SchemaName$MssCFBind$TableName$$Name$CPlus"
		ExpansionKeyName="$SchemaName$MssCFBind$TableName$$Name$CPlus"
		ExpansionFileName="$SchemaName$MssCFBind$TableName$$Name$.cpp">
// Description: C++18 MssCF Binding for $TableName$ Column $Name$.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;msscf/MssCFPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;
#include &lt;$lower SchemaName$obj/I$SchemaName$ObjPublic.hpp&gt;
#include &lt;$lower SchemaName$msscf/$SchemaName$MssCFBind$TableName$$Name$.hpp&gt;

namespace $CPlusNamespace$ {

	const std::string $SchemaName$MssCFBind$TableName$$Name$::CLASS_NAME( "$SchemaName$MssCFBind$TableName$$Name$" );

	$SchemaName$MssCFBind$TableName$$Name$::$SchemaName$MssCFBind$TableName$$Name$()
	: cfcore::MssCFGenBindObj()
	{
	}

	$SchemaName$MssCFBind$TableName$$Name$::$SchemaName$MssCFBind$TableName$$Name$( cfcore::MssCFEngine* argEngine )
	: cfcore::MssCFGenBindObj( argEngine, "any", NULL, "$TableName$", "$Name$" )
	{
	}

	$SchemaName$MssCFBind$TableName$$Name$::~$SchemaName$MssCFBind$TableName$$Name$()
	{
	}

	std::string $SchemaName$MssCFBind$TableName$$Name$::expandBody( cfcore::MssCFGenContext* genContext ) {
		static const std::string S_ProcName( "expandBody" );
		static const std::string S_GenContext( "genContext" );
		static const std::string S_GenContextGenDef( "genContext.getGenDef()" );
		static const std::string S_Expected( "I$DefSchemaName$$TableName$Obj" );

		if( genContext == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_GenContext );
		}

		genContext-&gt;setExpansionIsNull();

		cflib::ICFLibAnyObj* genDef = genContext-&gt;getGenDef();
		if( genDef == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_GenContextGenDef );
		}

		std::string ret;

		if( genDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$$TableName$Buff::CLASS_CODE ) ) {$switch IsNullable yes prepareOptRet default prepareReqRet$
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME,
				S_ProcName,
				S_GenContextGenDef,
				genDef,
				S_Expected );
		}

		genContext-&gt;clearExpansionIsNull();

		return( ret );
	}
}
</GenFile>

	<GenRule GenDef="Value" Name="prepareReqRet">
			$declConstReqAtomType$ $leadlower Name$ = dynamic_cast&lt;$CPlusNamespace$::I$SchemaName$$TableName$Obj*&gt;( genDef )-&gt;getRequired$Name$();$implReqInitRet$</GenRule>

	<GenRule GenDef="Value" Name="prepareOptRet">
			if( ! dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$$TableName$Obj*&gt;( genDef )-&gt;isOptional$Name$Null() ) {
				$declConstReqAtomType$ $leadlower Name$ = dynamic_cast&lt;$CPlusNamespace$::I$SchemaName$$TableName$Obj*&gt;( genDef )-&gt;getOptional$Name$Value();$implReqInitRet$
			}</GenRule>

	<GenRule GenDef="Value" Name="implReqInitRet"
		>$switch BaseModelAtomClass
			BlobDef implReqBlobInitRet
			BoolDef implReqBoolInitRet
			EnumDef implReqEnumInitRet
			Int16Def implReqInt16InitRet
			Int32Def implReqInt32InitRet
			Int64Def implReqInt64InitRet
			UInt16Def implReqUInt16InitRet
			UInt32Def implReqUInt32InitRet
			UInt64Def implReqUInt64InitRet
			FloatDef implReqFloatInitRet
			DoubleDef implReqDoubleInitRet
			NumberDef implReqNumberInitRet
			DateDef implReqDateInitRet
			TimeDef implReqTimeInitRet
			TimestampDef implReqTimestampInitRet
			TZDateDef implReqTZDateInitRet
			TZTimeDef implReqTZTimeInitRet
			TZTimestampDef implReqTZTimestampInitRet
			UuidDef implReqUuidInitRet
			UuidGen implReqUuidInitRet
			StringDef implReqStringInitRet
			TokenDef implReqTokenInitRet
			NmTokenDef implReqNmTokenInitRet
			NmTokensDef implReqNmTokensInitRet
			TextDef implReqTextInitRet
			Id16Gen implReqInt16InitRet
			Id32Gen implReqInt32InitRet
			Id64Gen implReqInt64InitRet
			default error$</GenRule>

	<GenRule GenDef="Value" Name="implReqBlobInitRet">
				ret = cflib::CFLib::base64_encode( $leadlower Name$.data(), (unsigned int)( $leadlower Name$.size() ) );</GenRule>
	<GenRule GenDef="Value" Name="implReqBoolInitRet">
				if( $leadlower Name$ ) {
					ret = "yes";
				}
				else {
					ret = "no";
				}</GenRule>
	<GenRule GenDef="Value" Name="implReqEnumInitRet">
				ret = *$lower CPlusDefNamespace$::I$DefSchemaName$Schema::to$popto TableCol reference DataType Name$String( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqInt16InitRet">
				ret = std::to_string( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqInt32InitRet">
				ret = std::to_string( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqInt64InitRet">
				ret = std::to_string( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqUInt16InitRet">
				ret = std::to_string( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqUInt32InitRet">
				ret = std::to_string( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqUInt64InitRet">
				ret = std::to_string( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqFloatInitRet">
				char buff[256] = {0};
				snprintf( &amp;buff[0], sizeof( buff ), "%1.99f", $leadlower Name$ );
				std::string::size_type len = strlen( &amp;buff[0] );
				while( ( len > 0 ) &amp;&amp; ( buff[len-1] == '0' ) ) {
					buff[len-1] = '\000';
					len --;
				}
				ret = std::string( buff  );</GenRule>
	<GenRule GenDef="Value" Name="implReqDoubleInitRet">
				char buff[256] = {0};
				snprintf( &amp;buff[0], sizeof( buff ), "%1.99lf", $leadlower Name$ );
				std::string::size_type len = strlen( &amp;buff[0] );
				while( ( len > 0 ) &amp;&amp; ( buff[len-1] == '0' ) ) {
					buff[len-1] = '\000';
					len --;
				}
				ret = std::string( buff  );</GenRule>
	<GenRule GenDef="Value" Name="implReqNumberInitRet">
				ret = $leadlower Name$.toString();</GenRule>
	<GenRule GenDef="Value" Name="implReqDateInitRet">
				ret = cflib::CFLibXmlUtil::formatDate( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqTimeInitRet">
				ret = cflib::CFLibXmlUtil::formatTime( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqTimestampInitRet">
				ret = cflib::CFLibXmlUtil::formatTimestamp( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqTZDateInitRet">
				ret = cflib::CFLibXmlUtil::formatTZDate( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqTZTimeInitRet">
				ret = cflib::CFLibXmlUtil::formatTZTime( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqTZTimestampInitRet">
				ret = cflib::CFLibXmlUtil::formatTZTimestamp( $leadlower Name$ );</GenRule>
	<GenRule GenDef="Value" Name="implReqUuidInitRet">
				char unparse[40] = {0};
				uuid_unparse( $leadlower Name$, &amp;unparse[0] );
				ret = std::string( unparse );</GenRule>
	<GenRule GenDef="Value" Name="implReqStringInitRet">
				ret = $leadlower Name$;</GenRule>
	<GenRule GenDef="Value" Name="implReqTokenInitRet">
				ret = $leadlower Name$;</GenRule>
	<GenRule GenDef="Value" Name="implReqNmTokenInitRet">
				ret = $leadlower Name$;</GenRule>
	<GenRule GenDef="Value" Name="implReqNmTokensInitRet">
				ret = $leadlower Name$;</GenRule>
	<GenRule GenDef="Value" Name="implReqTextInitRet">
				ret = $leadlower Name$;</GenRule>

</RuleSet>
