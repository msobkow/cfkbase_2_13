<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus+msscf"
	Name="libschemamsscf/SchemaMssCFBindHasTableCol.cpp"
	Revision="2.13"
	Descr="C++18 SchemaMssCFBindHasTableCol">

	<GenFile GenDef="Value" Name="fileSchemaMssCFBindHasTableColCPlus"
		GenerateOnce="false"
		ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$reference ManufacturingSchema lower PackageName$msscf"
		SubPackageName=""
		ExpansionClassName="$SchemaName$MssCFBindHas$TableName$$Name$CPlus"
		ExpansionKeyName="$SchemaName$MssCFBindHas$TableName$$Name$CPlus"
		ExpansionFileName="$SchemaName$MssCFBindHas$TableName$$Name$.cpp">
// Description: C++18 MssCF Binding for $TableName$ Column $Name$.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;msscf/MssCFPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;
#include &lt;$lower SchemaName$obj/I$SchemaName$ObjPublic.hpp&gt;
#include &lt;$lower SchemaName$msscf/$SchemaName$MssCFBindHas$TableName$$Name$.hpp&gt;

namespace $CPlusNamespace$ {

	const std::string $SchemaName$MssCFBindHas$TableName$$Name$::CLASS_NAME( "$SchemaName$MssCFBindHas$TableName$$Name$" );

	$SchemaName$MssCFBindHas$TableName$$Name$::$SchemaName$MssCFBindHas$TableName$$Name$()
	: cfcore::MssCFGenBindObj()
	{
	}

	$SchemaName$MssCFBindHas$TableName$$Name$::$SchemaName$MssCFBindHas$TableName$$Name$( cfcore::MssCFEngine* argEngine )
	: cfcore::MssCFGenBindObj( argEngine, "any", NULL, "$TableName$", "Has$Name$" )
	{
	}

	$SchemaName$MssCFBindHas$TableName$$Name$::~$SchemaName$MssCFBindHas$TableName$$Name$()
	{
	}

	std::string $SchemaName$MssCFBindHas$TableName$$Name$::expandBody( cfcore::MssCFGenContext* genContext ) {
		static const std::string S_ProcName( "expandBody" );
		static const std::string S_GenContext( "genContext" );
		static const std::string S_GenContextGenDef( "genContext.getGenDef()" );
		static const std::string S_Expected( "I$DefSchemaName$$TableName$Obj" );

		if( genContext == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_GenContext );
		}

		genContext-&gt;setExpansionIsNull();

		cflib::ICFLibAnyObj* genDef = genContext-&gt;getGenDef();
		if( genDef == NULL ) {
			throw new cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_GenContextGenDef );
		}

		if( genDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$$TableName$Buff::CLASS_CODE ) ) {
			genContext-&gt;clearExpansionIsNull();
			if( dynamic_cast&lt;$CPlusNamespace$::I$SchemaName$$TableName$Obj*&gt;( genDef )-&gt;isOptional$Name$Null() ) {
				return( std::string( "no" ) );
			}
			else {
				return( std::string( "yes" ) );
			}
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME,
				S_ProcName,
				S_GenContextGenDef,
				genDef,
				S_Expected );
		}
	}
}
</GenFile>

</RuleSet>
