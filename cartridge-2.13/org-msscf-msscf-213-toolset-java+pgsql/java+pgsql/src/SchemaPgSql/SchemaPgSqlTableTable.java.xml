<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+pgsql"
	Name="src/SchemaPgSqlTableTable.java"
	Revision="2.13"
	Descr="Java 11 PostgreSQL Jdbc DbIO implementation for Table">

	<GenRule GenDef="IndexCol" Name="DbColumnName"
		>$reference Column DbColumnName$</GenRule>

	<GenFile GenDef="Table" Name="fileSchemaPgSqlTableTableJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$PgSql"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$pgsql.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$PgSql"
		ExpansionClassName="$SchemaName$PgSql$TableName$TableJava"
		ExpansionKeyName="$SchemaName$PgSql$TableName$TableJava"
		ExpansionFileName="$SchemaName$PgSql$TableName$Table.java"
>$PgSqlTableTablePreamble$
public class $SchemaName$PgSql$TableName$Table
	implements I$SchemaName$$TableName$Table
{
	private $SchemaName$PgSqlSchema schema;$declPgSqlTableTablePStatements$$switch HasChain yes declPgSqlTableTableMovePStatements default empty$$declPgSqlDeleteTableByInheritedIndexes$$iterate DispensedId16Generators( each declPgSqlTableIdGenPStatements empty empty )$$iterate DispensedId32Generators( each declPgSqlTableIdGenPStatements empty empty )$$iterate DispensedId64Generators( each declPgSqlTableIdGenPStatements empty empty )$$JavaPgSqlTableMembers$
$implConstructPgSqlTableTable$$iterate DispensedId16Generators( each implNextIdGen empty empty )$$iterate DispensedId32Generators( each implNextIdGen empty empty )$$iterate DispensedId64Generators( each implNextIdGen empty empty )$$implCreateTable$$declSqlSelectTableDistinctClassCode$$declSqlSelectTableBuff$$implUnpackResultSetToBuff$$implReadTableDerivedByPKey$$implLockTableDerivedByPKey$$implReadAllTableDerived$$implReadTableDerivedByIndexes$$implReadTableBuffByPKey$$implLockTableBuffByPKey$$implReadAllTableBuff$$switch PageData yes implPageAllTableBuff default empty$$implReadTableBuffByIndexes$$switch PageData yes implPageTableBuffByIndexes default empty$$implUpdateTable$$implDeleteTable$$switch HasChain yes implPgSqlMoveUpTableBuff default empty$$switch HasChain yes implPgSqlMoveDownTableBuff default empty$$implPgSqlTableReleasePreparedStatements$$iterate ServerMethods( each implServerMethod empty empty )$$JavaPgSqlTableImplementation$}
</GenFile>

	<GenRule GenDef="Table" Name="implPageTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implPageTableBuffByInhIndexes default implPageTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implPageTableBuffByIndexes$$iterate Index( each implPageTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByBaseIndexes"
		>$iterate Index( each implPageTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Index" Name="PageData"
		>$poptop Table PageData$</GenRule>

	<GenRule GenDef="Table" Name="implPageAllTableBuff">
	/**
	 *	Read a page of all the specific $TableName$ buffer instances.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@return All the specific $TableName$ instances in the database accessible for the Authorization.
	 */
	public $DefSchemaName$$TableName$Buff[] pageAllBuff( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageAllBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_page_dbtablename_all$( ?, ?, ?, ?, ?$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaQuestion )$ )";
			if( stmtPageBuffAll == null ) {
				stmtPageBuffAll = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtPageBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffAll.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtPageBuffAll.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtPageBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlPageAllTableAssignOptPriorColumn )$
			resultSet = stmtPageBuffAll.executeQuery();
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			while( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptPriorColumn"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlPageAllTableAssignOptBlobPriorColumn
			BoolDef implPgSqlPageAllTableAssignOptBoolPriorColumn
			EnumDef implPgSqlPageAllTableAssignOptEnumPriorColumn
			Int16Def implPgSqlPageAllTableAssignOptInt16PriorColumn
			Int32Def implPgSqlPageAllTableAssignOptInt32PriorColumn
			Int64Def implPgSqlPageAllTableAssignOptInt64PriorColumn
			UInt16Def implPgSqlPageAllTableAssignOptUInt16PriorColumn
			UInt32Def implPgSqlPageAllTableAssignOptUInt32PriorColumn
			UInt64Def implPgSqlPageAllTableAssignOptUInt64PriorColumn
			Id16Gen implPgSqlPageAllTableAssignOptInt16PriorColumn
			Id32Gen implPgSqlPageAllTableAssignOptInt32PriorColumn
			Id64Gen implPgSqlPageAllTableAssignOptInt64PriorColumn
			FloatDef implPgSqlPageAllTableAssignOptFloatPriorColumn
			DoubleDef implPgSqlPageAllTableAssignOptDoublePriorColumn
			NumberDef implPgSqlPageAllTableAssignOptNumberPriorColumn
			StringDef implPgSqlPageAllTableAssignOptStringPriorColumn
			TokenDef implPgSqlPageAllTableAssignOptTokenPriorColumn
			NmTokenDef implPgSqlPageAllTableAssignOptNmTokenPriorColumn
			NmTokensDef implPgSqlPageAllTableAssignOptNmTokensPriorColumn
			TextDef implPgSqlPageAllTableAssignOptTextPriorColumn
			DateDef implPgSqlPageAllTableAssignOptDatePriorColumn
			TimeDef implPgSqlPageAllTableAssignOptTimePriorColumn
			TimestampDef implPgSqlPageAllTableAssignOptTimestampPriorColumn
			TZDateDef implPgSqlPageAllTableAssignOptTZDatePriorColumn
			TZTimeDef implPgSqlPageAllTableAssignOptTZTimePriorColumn
			TZTimestampDef implPgSqlPageAllTableAssignOptTZTimestampPriorColumn
			UuidDef implPgSqlPageAllTableAssignOptUuidPriorColumn
			UuidGen implPgSqlPageAllTableAssignOptUuidPriorColumn
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptBlobPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setBytes( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptBoolPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setBoolean( argIdx++, prior$Name$.booleanValue() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptEnumPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setShort( argIdx++, (short)prior$Name$.ordinal() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptInt16PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setShort( argIdx++, prior$Name$.shortValue() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptInt32PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptInt64PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptUInt16PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptUInt32PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptUInt64PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptFloatPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setFloat( argIdx++, prior$Name$.floatValue() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptDoublePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setDouble( argIdx++, prior$Name$.doubleValue() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptNumberPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptStringPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptTokenPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptNmTokenPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptNmTokensPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptTextPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptDatePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptTimePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptTimestampPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptTZDatePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptTZTimePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptTZTimestampPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageAllTableAssignOptUuidPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffAll.setString( argIdx++, prior$Name$.toString() );
			}
			else {
				stmtPageBuffAll.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="declCommaQuestion"
		>, ?</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByDuplicateIndex">
	/**
	 *	Read a page array of the specific $poptop Table TableName$ buffer instances identified by the duplicate key $Suffix$.
	 *
	 *	@param	Authorization	The session authorization information.$iterate Columns( each implCommentKeyAttr empty empty )$
	 *
	 *	@return An array of derived buffer instances for the specified key, potentially with 0 elements in the set.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	public $DefSchemaName$$poptop Table TableName$Buff[] pageBuffBy$declReadTableSuffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each declCommaColumnArg )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageBuffBy$declReadTableSuffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implPageTableBuffByReqDuplicateIndex$
			List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
			while( resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlMoveUpTableBuff">
	/**
	 *	Move the specified buffer up in the chain (i.e. to the previous position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffUp( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int argRevision )
	{
		final String S_ProcName = "moveBuffUp";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implMoveTableBuffUpTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveTableBuffUpTryBody">
			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_moveup_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + ", ? )";
			if( stmtMoveUpBuff == null ) {
				stmtMoveUpBuff = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtMoveUpBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUpBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveUpBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveUpBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUpBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlMoveUpTableAssignVar )$$implPgSqlMoveUpTableAssignRevision$
			resultSet = stmtMoveUpBuff.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignRevision">
			stmtMoveUpBuff.setInt( argIdx++, argRevision );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlMoveUpBindSecClusterId">
			stmtMoveUpBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlMoveUpBindSecTenantId">
			stmtMoveUpBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignVar"
		>$switch IsNullable yes implPgSqlMoveUpTableAssignOptVar
			default implPgSqlMoveUpTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlMoveUpTableAssignOptBlobVar
			BoolDef implPgSqlMoveUpTableAssignOptBoolVar
			EnumDef implPgSqlMoveUpTableAssignOptEnumVar
			Int16Def implPgSqlMoveUpTableAssignOptInt16Var
			Int32Def implPgSqlMoveUpTableAssignOptInt32Var
			Int64Def implPgSqlMoveUpTableAssignOptInt64Var
			UInt16Def implPgSqlMoveUpTableAssignOptUInt16Var
			UInt32Def implPgSqlMoveUpTableAssignOptUInt32Var
			UInt64Def implPgSqlMoveUpTableAssignOptUInt64Var
			Id16Gen implPgSqlMoveUpTableAssignOptInt16Var
			Id32Gen implPgSqlMoveUpTableAssignOptInt32Var
			Id64Gen implPgSqlMoveUpTableAssignOptInt64Var
			FloatDef implPgSqlMoveUpTableAssignOptFloatVar
			DoubleDef implPgSqlMoveUpTableAssignOptDoubleVar
			NumberDef implPgSqlMoveUpTableAssignOptNumberVar
			StringDef implPgSqlMoveUpTableAssignOptStringVar
			TokenDef implPgSqlMoveUpTableAssignOptTokenVar
			NmTokenDef implPgSqlMoveUpTableAssignOptNmTokenVar
			NmTokensDef implPgSqlMoveUpTableAssignOptNmTokensVar
			TextDef implPgSqlMoveUpTableAssignOptTextVar
			DateDef implPgSqlMoveUpTableAssignOptDateVar
			TimeDef implPgSqlMoveUpTableAssignOptTimeVar
			TimestampDef implPgSqlMoveUpTableAssignOptTimestampVar
			TZDateDef implPgSqlMoveUpTableAssignOptTZDateVar
			TZTimeDef implPgSqlMoveUpTableAssignOptTZTimeVar
			TZTimestampDef implPgSqlMoveUpTableAssignOptTZTimestampVar
			UuidDef implPgSqlMoveUpTableAssignOptUuidVar
			UuidGen implPgSqlMoveUpTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlMoveUpTableAssignReqBlobVar
			BoolDef implPgSqlMoveUpTableAssignReqBoolVar
			EnumDef implPgSqlMoveUpTableAssignReqEnumVar
			Int16Def implPgSqlMoveUpTableAssignReqInt16Var
			Int32Def implPgSqlMoveUpTableAssignReqInt32Var
			Int64Def implPgSqlMoveUpTableAssignReqInt64Var
			UInt16Def implPgSqlMoveUpTableAssignReqUInt16Var
			UInt32Def implPgSqlMoveUpTableAssignReqUInt32Var
			UInt64Def implPgSqlMoveUpTableAssignReqUInt64Var
			Id16Gen implPgSqlMoveUpTableAssignReqInt16Var
			Id32Gen implPgSqlMoveUpTableAssignReqInt32Var
			Id64Gen implPgSqlMoveUpTableAssignReqInt64Var
			FloatDef implPgSqlMoveUpTableAssignReqFloatVar
			DoubleDef implPgSqlMoveUpTableAssignReqDoubleVar
			NumberDef implPgSqlMoveUpTableAssignReqNumberVar
			StringDef implPgSqlMoveUpTableAssignReqStringVar
			TokenDef implPgSqlMoveUpTableAssignReqTokenVar
			NmTokenDef implPgSqlMoveUpTableAssignReqNmTokenVar
			NmTokensDef implPgSqlMoveUpTableAssignReqNmTokensVar
			TextDef implPgSqlMoveUpTableAssignReqTextVar
			DateDef implPgSqlMoveUpTableAssignReqDateVar
			TimeDef implPgSqlMoveUpTableAssignReqTimeVar
			TimestampDef implPgSqlMoveUpTableAssignReqTimestampVar
			TZDateDef implPgSqlMoveUpTableAssignReqTZDateVar
			TZTimeDef implPgSqlMoveUpTableAssignReqTZTimeVar
			TZTimestampDef implPgSqlMoveUpTableAssignReqTZTimestampVar
			UuidDef implPgSqlMoveUpTableAssignReqUuidVar
			UuidGen implPgSqlMoveUpTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqBlobVar">
			stmtMoveUpBuff.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqBoolVar">
			stmtMoveUpBuff.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqEnumVar">
			stmtMoveUpBuff.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqInt16Var">
			stmtMoveUpBuff.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqInt32Var">
			stmtMoveUpBuff.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqInt64Var">
			stmtMoveUpBuff.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqUInt16Var">
			stmtMoveUpBuff.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqUInt32Var">
			stmtMoveUpBuff.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqUInt64Var">
			stmtMoveUpBuff.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqFloatVar">
			stmtMoveUpBuff.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqDoubleVar">
			stmtMoveUpBuff.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqNumberVar">
			stmtMoveUpBuff.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqStringVar">
			stmtMoveUpBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqTokenVar">
			stmtMoveUpBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqNmTokenVar">
			stmtMoveUpBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqNmTokensVar">
			stmtMoveUpBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqTextVar">
			stmtMoveUpBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqDateVar">
			stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqTimeVar">
			stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqTimestampVar">
			stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqTZDateVar">
			stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqTZTimeVar">
			stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqTZTimestampVar">
			stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignReqUuidVar">
			stmtMoveUpBuff.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveUpTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveUpBuff.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveUpBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlMoveDownTableBuff">
	/**
	 *	Move the specified buffer down in the chain (i.e. to the next position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffDown( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int argRevision )
	{
		final String S_ProcName = "moveBuffDown";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implMoveTableBuffDownTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveTableBuffDownTryBody">
			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_movedown_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + ", ? )";
			if( stmtMoveDownBuff == null ) {
				stmtMoveDownBuff = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtMoveDownBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDownBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveDownBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveDownBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDownBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlMoveDownTableAssignVar )$$implPgSqlMoveDownTableAssignRevision$
			resultSet = stmtMoveDownBuff.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignRevision">
			stmtMoveDownBuff.setInt( argIdx++, argRevision );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlMoveDownBindSecClusterId">
			stmtMoveDownBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlMoveDownBindSecTenantId">
			stmtMoveDownBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignVar"
		>$switch IsNullable yes implPgSqlMoveDownTableAssignOptVar
			default implPgSqlMoveDownTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlMoveDownTableAssignOptBlobVar
			BoolDef implPgSqlMoveDownTableAssignOptBoolVar
			EnumDef implPgSqlMoveDownTableAssignOptEnumVar
			Int16Def implPgSqlMoveDownTableAssignOptInt16Var
			Int32Def implPgSqlMoveDownTableAssignOptInt32Var
			Int64Def implPgSqlMoveDownTableAssignOptInt64Var
			UInt16Def implPgSqlMoveDownTableAssignOptUInt16Var
			UInt32Def implPgSqlMoveDownTableAssignOptUInt32Var
			UInt64Def implPgSqlMoveDownTableAssignOptUInt64Var
			Id16Gen implPgSqlMoveDownTableAssignOptInt16Var
			Id32Gen implPgSqlMoveDownTableAssignOptInt32Var
			Id64Gen implPgSqlMoveDownTableAssignOptInt64Var
			FloatDef implPgSqlMoveDownTableAssignOptFloatVar
			DoubleDef implPgSqlMoveDownTableAssignOptDoubleVar
			NumberDef implPgSqlMoveDownTableAssignOptNumberVar
			StringDef implPgSqlMoveDownTableAssignOptStringVar
			TokenDef implPgSqlMoveDownTableAssignOptTokenVar
			NmTokenDef implPgSqlMoveDownTableAssignOptNmTokenVar
			NmTokensDef implPgSqlMoveDownTableAssignOptNmTokensVar
			TextDef implPgSqlMoveDownTableAssignOptTextVar
			DateDef implPgSqlMoveDownTableAssignOptDateVar
			TimeDef implPgSqlMoveDownTableAssignOptTimeVar
			TimestampDef implPgSqlMoveDownTableAssignOptTimestampVar
			TZDateDef implPgSqlMoveDownTableAssignOptTZDateVar
			TZTimeDef implPgSqlMoveDownTableAssignOptTZTimeVar
			TZTimestampDef implPgSqlMoveDownTableAssignOptTZTimestampVar
			UuidDef implPgSqlMoveDownTableAssignOptUuidVar
			UuidGen implPgSqlMoveDownTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlMoveDownTableAssignReqBlobVar
			BoolDef implPgSqlMoveDownTableAssignReqBoolVar
			EnumDef implPgSqlMoveDownTableAssignReqEnumVar
			Int16Def implPgSqlMoveDownTableAssignReqInt16Var
			Int32Def implPgSqlMoveDownTableAssignReqInt32Var
			Int64Def implPgSqlMoveDownTableAssignReqInt64Var
			UInt16Def implPgSqlMoveDownTableAssignReqUInt16Var
			UInt32Def implPgSqlMoveDownTableAssignReqUInt32Var
			UInt64Def implPgSqlMoveDownTableAssignReqUInt64Var
			Id16Gen implPgSqlMoveDownTableAssignReqInt16Var
			Id32Gen implPgSqlMoveDownTableAssignReqInt32Var
			Id64Gen implPgSqlMoveDownTableAssignReqInt64Var
			FloatDef implPgSqlMoveDownTableAssignReqFloatVar
			DoubleDef implPgSqlMoveDownTableAssignReqDoubleVar
			NumberDef implPgSqlMoveDownTableAssignReqNumberVar
			StringDef implPgSqlMoveDownTableAssignReqStringVar
			TokenDef implPgSqlMoveDownTableAssignReqTokenVar
			NmTokenDef implPgSqlMoveDownTableAssignReqNmTokenVar
			NmTokensDef implPgSqlMoveDownTableAssignReqNmTokensVar
			TextDef implPgSqlMoveDownTableAssignReqTextVar
			DateDef implPgSqlMoveDownTableAssignReqDateVar
			TimeDef implPgSqlMoveDownTableAssignReqTimeVar
			TimestampDef implPgSqlMoveDownTableAssignReqTimestampVar
			TZDateDef implPgSqlMoveDownTableAssignReqTZDateVar
			TZTimeDef implPgSqlMoveDownTableAssignReqTZTimeVar
			TZTimestampDef implPgSqlMoveDownTableAssignReqTZTimestampVar
			UuidDef implPgSqlMoveDownTableAssignReqUuidVar
			UuidGen implPgSqlMoveDownTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqBlobVar">
			stmtMoveDownBuff.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqBoolVar">
			stmtMoveDownBuff.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqEnumVar">
			stmtMoveDownBuff.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqInt16Var">
			stmtMoveDownBuff.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqInt32Var">
			stmtMoveDownBuff.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqInt64Var">
			stmtMoveDownBuff.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqUInt16Var">
			stmtMoveDownBuff.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqUInt32Var">
			stmtMoveDownBuff.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqUInt64Var">
			stmtMoveDownBuff.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqFloatVar">
			stmtMoveDownBuff.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqDoubleVar">
			stmtMoveDownBuff.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqNumberVar">
			stmtMoveDownBuff.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqStringVar">
			stmtMoveDownBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqTokenVar">
			stmtMoveDownBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqNmTokenVar">
			stmtMoveDownBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqNmTokensVar">
			stmtMoveDownBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqTextVar">
			stmtMoveDownBuff.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqDateVar">
			stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqTimeVar">
			stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqTimestampVar">
			stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqTZDateVar">
			stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqTZTimeVar">
			stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqTZTimestampVar">
			stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignReqUuidVar">
			stmtMoveDownBuff.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlMoveDownTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveDownBuff.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveDownBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="declPgSqlTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="declPgSqlTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="declPgSqlTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="PgSqlTableTablePreamble"
>// Description: Java 11 PostgreSQL Jdbc DbIO implementation for $TableName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$PgSql;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$$JavaPgSqlTableImport$

/*
 *	$SchemaName$PgSql$TableName$Table PostgreSQL Jdbc DbIO implementation
 *	for $TableName$.
 */</GenRule>

	<GenRule GenDef="IndexCol" Name="Suffix"
		>$popto Index Suffix$</GenRule>
	<GenRule GenDef="Value" Name="Suffix"
		>$popto Index Suffix$</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTablePStatements"
		>$switch HasSuperClassRelation yes declPgSqlTableTableInhPStatements default declPgSqlTableTableBasePStatements$</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTableInhPStatements"
		>$reference SuperClassRelation reference ToTable declPgSqlTableTablePStatements$$iterate Index( each declPgSqlTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTableBasePStatements"
		>$declPgSqlTableTablePStmtEmitForPKey$$reference PrimaryKeyIndex declPgSqlTableTablePStmtEmitReadTableBuffByIndex$$iterate Index( each declPgSqlTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$$iterate Index( each declPgSqlTableTablePStmtPageTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTableBaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex declPgSqlTableTablePStmtEmitReadClassCodeByIndex$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasSubClasses"
		>$poptop Table HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="declPgSqlTableTablePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declPgSqlTableTablePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declPgSqlTableTablePStmtReadTableBuffByIndex"
		>$declPgSqlTableTablePStmtEmitReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declPgSqlTableTablePStmtPageTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default ifpagedata_declPgSqlTableTablePStmtEmitPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="ifpagedata_declPgSqlTableTablePStmtEmitPageTableBuffByIndex"
		>$switch PageData yes maybe_declPgSqlTableTablePStmtEmitPageTableBuffByIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="maybe_declPgSqlTableTablePStmtEmitPageTableBuffByIndex"
		>$switch IsUnique yes empty default declPgSqlTableTablePStmtEmitPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declPgSqlTableTablePStmtEmitReadTableBuffByIndex"
		>$switch TopTableHasSubClasses yes declPgSqlTableTablePStmtEmitReadClassCodeByIndex default empty$
	protected PreparedStatement stmtReadBuffBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declPgSqlTableTablePStmtEmitPageTableBuffByIndex">
	protected PreparedStatement stmtPageBuffBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declPgSqlTableTablePStmtEmitReadClassCodeByIndex">
	protected PreparedStatement stmtReadClassCodeBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTablePStmtEmitForPKey">
	protected PreparedStatement stmtReadBuffByPKey = null;
	protected PreparedStatement stmtReadBuffAll = null;$switch PageData yes declPgSqlTableTablePStmtEmitPageForPKey default empty$
	protected PreparedStatement stmtLockBuffByPKey = null;
	protected PreparedStatement stmtCreateByPKey = null;
	protected PreparedStatement stmtUpdateByPKey = null;
	protected PreparedStatement stmtDeleteByPKey = null;$poptop Table switch BaseHasHistory yes declPgSqlTableTablePStmtEmitForPKeyAudit default empty$
	protected PreparedStatement stmtReadAllBuff = null;$switch TopTableHasSubClasses yes declPgSqlTableTablePStmtReadClassCodes default empty$</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTableMovePStatements">
	protected PreparedStatement stmtMoveUpBuff = null;
	protected PreparedStatement stmtMoveDownBuff = null;</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTablePStmtEmitPageForPKey">
	protected PreparedStatement stmtPageBuffAll = null;</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTablePStmtEmitForPKeyAudit"
		>$switch InheritsBlob yes declPgSqlTableTablePStmtEmitForPKeyReallyAudit default empty$</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTablePStmtEmitForPKeyReallyAudit">
	protected PreparedStatement stmtAuditCreatedByPKey = null;
	protected PreparedStatement stmtAuditUpdatedByPKey = null;</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlTableTablePStmtReadClassCodes">
	protected PreparedStatement stmtReadDerivedClassCode = null;
	protected PreparedStatement stmtLockDerivedClassCode = null;
	protected PreparedStatement stmtReadAllClassCode = null;</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlDeleteTableByInheritedIndexes"
		>$switch HasSuperClassRelation yes declPgSqlDeleteTableByInhIndexes default declPgSqlDeleteTableByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlDeleteTableByInhIndexes"
		>$reference SuperClassRelation reference ToTable declPgSqlDeleteTableByInheritedIndexes$$iterate Index( each declPgSqlDeleteTableByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declPgSqlDeleteTableByBaseIndexes"
		>$iterate Index( each declPgSqlDeleteTableByIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="declPgSqlDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declPgSqlDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declPgSqlDeleteTableByIndex">
	protected PreparedStatement stmtDeleteBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleasePreparedStatements">
	/**
	 *	Release the prepared statements.
	 *	&lt;p&gt;
	 *	When the schema changes connections, the prepared statements
	 *	have to be released because they contain connection-specific
	 *	information for most databases.
	 */
	public void releasePreparedStatements() {
		final String S_ProcName = "releasePreparedStatements";
		S_sqlSelect$TableName$DistinctClassCode = null;
		S_sqlSelect$TableName$Buff = null;
$implReleaseStmtReadBuffByPKey$$implReleaseStmtReadBuffAll$$switch PageData yes implReleaseStmtPageBuffAll default empty$$implReleaseStmtLockBuffByPKey$$implReleaseStmtCreateByPKey$$implReleaseStmtUpdateByPKey$$implReleaseStmtDeleteByPKey$$switch PageData yes implPgSqlTableReleasePageByInheritedIndexes default empty$$implPgSqlTableReleaseDeleteByInheritedIndexes$$poptop Table switch BaseHasHistory yes implPgSqlTableReleasePStmtEmitForPKeyAudit default empty$$implReleaseStmtReadAllBuff$$switch TopTableHasSubClasses yes implPgSqlTableReleasePStmtReadClassCodes default empty$$implPgSqlTableReleasePStatements$$iterate DispensedId16Generators( each implPgSqlTableIdGenReleasePStatements empty empty )$$iterate DispensedId32Generators( each implPgSqlTableIdGenReleasePStatements empty empty )$$iterate DispensedId64Generators( each implPgSqlTableIdGenReleasePStatements empty empty )$$switch HasChain yes implReleaseMoveStmts default empty$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReleaseMoveStmts">
		if( stmtMoveUpBuff != null ) {
			try {
				stmtMoveUpBuff.close();
			}
			catch( SQLException e ) {
			}
			stmtMoveUpBuff = null;
		}
		if( stmtMoveDownBuff != null ) {
			try {
				stmtMoveDownBuff.close();
			}
			catch( SQLException e ) {
			}
			stmtMoveDownBuff = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleasePageByInheritedIndexes"
		>$switch HasSuperClassRelation yes implPgSqlTableReleasePageByInhIndexes default implPgSqlTableReleasePageByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleasePageByInhIndexes"
		>$reference SuperClassRelation reference ToTable implPgSqlTableReleasePageByInheritedIndexes$$iterate Index( each implPgSqlTableReleasePageByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleasePageByBaseIndexes"
		>$iterate Index( each implPgSqlTableReleasePageByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlTableReleasePageByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implPgSqlTableReleasePageByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlTableReleasePageByDuplicateIndex"
		>$switch IsUnique yes empty default implPgSqlTableReleasePageByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlTableReleasePageByIndex">
		if( stmtPageBuffBy$Suffix$ != null ) {
			try {
				stmtPageBuffBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtPageBuffBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleaseDeleteByInheritedIndexes"
		>$switch HasSuperClassRelation yes implPgSqlTableReleaseDeleteByInhIndexes default implPgSqlTableReleaseDeleteByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleaseDeleteByInhIndexes"
		>$reference SuperClassRelation reference ToTable implPgSqlTableReleaseDeleteByInheritedIndexes$$iterate Index( each implPgSqlTableReleaseDeleteByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleaseDeleteByBaseIndexes"
		>$iterate Index( each implPgSqlTableReleaseDeleteByIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlTableReleaseDeleteByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implPgSqlTableReleaseDeleteByIndex$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleasePStmtEmitForPKeyAudit"
		>$switch InheritsBlob yes implPgSqlTableReleasePStmtEmitForPKeyReallyAudit default empty$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleasePStmtEmitForPKeyReallyAudit">
		if( stmtAuditCreatedByPKey != null ) {
			try {
				stmtAuditCreatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditCreatedByPKey = null;
		}
		if( stmtAuditUpdatedByPKey != null ) {
			try {
				stmtAuditUpdatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditUpdatedByPKey = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlTableReleaseDeleteByIndex">
		if( stmtDeleteBy$Suffix$ != null ) {
			try {
				stmtDeleteBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtDeleteBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtReadBuffByPKey">
		if( stmtReadBuffByPKey != null ) {
			try {
				stmtReadBuffByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtReadBuffByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtReadBuffAll">
		if( stmtReadBuffAll != null ) {
			try {
				stmtReadBuffAll.close();
			}
			catch( SQLException e ) {
			}
			stmtReadBuffAll = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtPageBuffAll">
		if( stmtPageBuffAll != null ) {
			try {
				stmtPageBuffAll.close();
			}
			catch( SQLException e ) {
			}
			stmtPageBuffAll = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtLockBuffByPKey">
		if( stmtLockBuffByPKey != null ) {
			try {
				stmtLockBuffByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtLockBuffByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtCreateByPKey">
		if( stmtCreateByPKey != null ) {
			try {
				stmtCreateByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtCreateByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtUpdateByPKey">
		if( stmtUpdateByPKey != null ) {
			try {
				stmtUpdateByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtUpdateByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtDeleteByPKey">
		if( stmtDeleteByPKey != null ) {
			try {
				stmtDeleteByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtDeleteByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtReadAllBuff">
		if( stmtReadAllBuff != null ) {
			try {
				stmtReadAllBuff.close();
			}
			catch( SQLException e ) {
			}
			stmtReadAllBuff = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleasePStmtReadClassCodes">
		if( stmtReadDerivedClassCode != null ) {
			try {
				stmtReadDerivedClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtReadDerivedClassCode = null;
		}
		if( stmtLockDerivedClassCode != null ) {
			try {
				stmtLockDerivedClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtLockDerivedClassCode = null;
		}
		if( stmtReadAllClassCode != null ) {
			try {
				stmtReadAllClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtReadAllClassCode = null;
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implPgSqlTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implPgSqlTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implPgSqlTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleasePStatements"
		>$switch HasSuperClassRelation yes implPgSqlTableReleaseInhPStatements default implPgSqlTableReleaseBasePStatements$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleaseInhPStatements"
		>$reference SuperClassRelation reference ToTable implPgSqlTableReleasePStatements$$iterate Index( each implPgSqlTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleaseBasePStatements"
		>$reference PrimaryKeyIndex implPgSqlTableReleasePStmtReadTableBuffByIndex$$iterate Index( each implPgSqlTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlTableReleaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex implPgSqlTableReleasePStmtDerivedClassCodeBySuffix$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlTableReleasePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implPgSqlTableReleasePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlTableReleasePStmtReadTableBuffByIndex"
		>$implPgSqlTableReleasePStmtEmitReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlTableReleasePStmtDerivedClassCodeBySuffix">
		if( stmtReadClassCodeBy$Suffix$ != null ) {
			try {
				stmtReadClassCodeBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtReadClassCodeBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlTableReleasePStmtEmitReadTableBuffByIndex"
>$switch TopTableHasSubClasses yes implPgSqlTableReleasePStmtDerivedClassCodeBySuffix default empty$
		if( stmtReadBuffBy$Suffix$ != null ) {
			try {
				stmtReadBuffBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtReadBuffBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implConstructPgSqlTableTable">
	public $SchemaName$PgSql$TableName$Table( $SchemaName$PgSqlSchema argSchema ) {
		schema = argSchema;
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlIndexColumnNameComma">$DbColumnName$, </GenRule>
	<GenRule GenDef="IndexCol" Name="implPgSqlIndexColumnName">$DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlIndexColumnBindVar">?</GenRule>
	<GenRule GenDef="IndexCol" Name="implPgSqlIndexCommaColumnBindVar">, ?</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGen">
	public short next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		String sqlSelectNext =
				"SELECT " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$("
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlNextIdGenSPArg each implPgSqlNextIdGenCommaSPArg )$ + " ) as Next$Name$";
$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenViaAttributes">
	public short next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		short retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenViaAttributesSetKeyValue">
		pkey.set$OptionalOrRequired$$Name$( arg$Name$ );</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenDeclAttr">,
		$implJavaAtomType$ arg$Name$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNext );
			}
			short nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlNextIdGen16SelectAssignVar )$
			rsSelect = stmtSelectNext$Name$.executeQuery();
			if( rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 result row to be returned by $sp_next_tableidgen$(), not 0" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getShort( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Next$Name$ cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlNextIdGenCommaSPArg"> + ", "
$implPgSqlNextIdGenSPArg$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArg"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlNextIdGenSPArgValueGenericVar
			BoolDef implPgSqlNextIdGenSPArgValueBoolVar
			EnumDef implPgSqlNextIdGenSPArgValueGenericVar
			Int16Def implPgSqlNextIdGenSPArgValueGenericVar
			Int32Def implPgSqlNextIdGenSPArgValueGenericVar
			Int64Def implPgSqlNextIdGenSPArgValueGenericVar
			UInt16Def implPgSqlNextIdGenSPArgValueGenericVar
			UInt32Def implPgSqlNextIdGenSPArgValueGenericVar
			UInt64Def implPgSqlNextIdGenSPArgValueGenericVar
			Id16Gen implPgSqlNextIdGenSPArgValueGenericVar
			Id32Gen implPgSqlNextIdGenSPArgValueGenericVar
			Id64Gen implPgSqlNextIdGenSPArgValueGenericVar
			FloatDef implPgSqlNextIdGenSPArgValueGenericVar
			DoubleDef implPgSqlNextIdGenSPArgValueGenericVar
			NumberDef implPgSqlNextIdGenSPArgValueGenericVar
			StringDef implPgSqlNextIdGenSPArgValueGenericVar
			TokenDef implPgSqlNextIdGenSPArgValueGenericVar
			NmTokenDef implPgSqlNextIdGenSPArgValueGenericVar
			NmTokensDef implPgSqlNextIdGenSPArgValueGenericVar
			TextDef implPgSqlNextIdGenSPArgValueGenericVar
			DateDef implPgSqlNextIdGenSPArgValueDateVar
			TimeDef implPgSqlNextIdGenSPArgValueTimeVar
			TimestampDef implPgSqlNextIdGenSPArgValueTimestampVar
			TZDateDef implPgSqlNextIdGenSPArgValueTZDateVar
			TZTimeDef implPgSqlNextIdGenSPArgValueTZTimeVar
			TZTimestampDef implPgSqlNextIdGenSPArgValueTZTimestampVar
			UuidDef implPgSqlNextIdGenSPArgValueGenericVar
			UuidGen implPgSqlNextIdGenSPArgValueGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArgValueGenericVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArgValueBoolVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArgValueDateVar"
>			+		"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArgValueTimeVar"
>			+		"cast( to_timestamp( ?, 'HH24:MI:SS' ) as time )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArgValueTimestampVar"
>			+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArgValueTZDateVar"
>			+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArgValueTZTimeVar"
>			+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArgValueTZTimestampVar"
>			+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGenSPArgValueUuidVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignVar"
		>$switch IsNullable yes implPgSqlNextIdGen16SelectAssignOptVar
			default implPgSqlNextIdGen16SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlNextIdGen16SelectAssignOptBlobVar
			BoolDef implPgSqlNextIdGen16SelectAssignOptBoolVar
			EnumDef implPgSqlNextIdGen16SelectAssignOptEnumVar
			Int16Def implPgSqlNextIdGen16SelectAssignOptInt16Var
			Int32Def implPgSqlNextIdGen16SelectAssignOptInt32Var
			Int64Def implPgSqlNextIdGen16SelectAssignOptInt64Var
			UInt16Def implPgSqlNextIdGen16SelectAssignOptUInt16Var
			UInt32Def implPgSqlNextIdGen16SelectAssignOptUInt32Var
			UInt64Def implPgSqlNextIdGen16SelectAssignOptUInt64Var
			Id16Gen implPgSqlNextIdGen16SelectAssignOptInt16Var
			Id32Gen implPgSqlNextIdGen16SelectAssignOptInt32Var
			Id64Gen implPgSqlNextIdGen16SelectAssignOptInt64Var
			FloatDef implPgSqlNextIdGen16SelectAssignOptFloatVar
			DoubleDef implPgSqlNextIdGen16SelectAssignOptDoubleVar
			NumberDef implPgSqlNextIdGen16SelectAssignOptNumberVar
			StringDef implPgSqlNextIdGen16SelectAssignOptStringVar
			TokenDef implPgSqlNextIdGen16SelectAssignOptTokenVar
			NmTokenDef implPgSqlNextIdGen16SelectAssignOptNmTokenVar
			NmTokensDef implPgSqlNextIdGen16SelectAssignOptNmTokensVar
			TextDef implPgSqlNextIdGen16SelectAssignOptTextVar
			DateDef implPgSqlNextIdGen16SelectAssignOptDateVar
			TimeDef implPgSqlNextIdGen16SelectAssignOptTimeVar
			TimestampDef implPgSqlNextIdGen16SelectAssignOptTimestampVar
			TZDateDef implPgSqlNextIdGen16SelectAssignOptTZDateVar
			TZTimeDef implPgSqlNextIdGen16SelectAssignOptTZTimeVar
			TZTimestampDef implPgSqlNextIdGen16SelectAssignOptTZTimestampVar
			UuidDef implPgSqlNextIdGen16SelectAssignOptUuidVar
			UuidGen implPgSqlNextIdGen16SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlNextIdGen16SelectAssignReqBlobVar
			BoolDef implPgSqlNextIdGen16SelectAssignReqBoolVar
			EnumDef implPgSqlNextIdGen16SelectAssignReqEnumVar
			Int16Def implPgSqlNextIdGen16SelectAssignReqInt16Var
			Int32Def implPgSqlNextIdGen16SelectAssignReqInt32Var
			Int64Def implPgSqlNextIdGen16SelectAssignReqInt64Var
			UInt16Def implPgSqlNextIdGen16SelectAssignReqUInt16Var
			UInt32Def implPgSqlNextIdGen16SelectAssignReqUInt32Var
			UInt64Def implPgSqlNextIdGen16SelectAssignReqUInt64Var
			Id16Gen implPgSqlNextIdGen16SelectAssignReqInt16Var
			Id32Gen implPgSqlNextIdGen16SelectAssignReqInt32Var
			Id64Gen implPgSqlNextIdGen16SelectAssignReqInt64Var
			FloatDef implPgSqlNextIdGen16SelectAssignReqFloatVar
			DoubleDef implPgSqlNextIdGen16SelectAssignReqDoubleVar
			NumberDef implPgSqlNextIdGen16SelectAssignReqNumberVar
			StringDef implPgSqlNextIdGen16SelectAssignReqStringVar
			TokenDef implPgSqlNextIdGen16SelectAssignReqTokenVar
			NmTokenDef implPgSqlNextIdGen16SelectAssignReqNmTokenVar
			NmTokensDef implPgSqlNextIdGen16SelectAssignReqNmTokensVar
			TextDef implPgSqlNextIdGen16SelectAssignReqTextVar
			DateDef implPgSqlNextIdGen16SelectAssignReqDateVar
			TimeDef implPgSqlNextIdGen16SelectAssignReqTimeVar
			TimestampDef implPgSqlNextIdGen16SelectAssignReqTimestampVar
			TZDateDef implPgSqlNextIdGen16SelectAssignReqTZDateVar
			TZTimeDef implPgSqlNextIdGen16SelectAssignReqTZTimeVar
			TZTimestampDef implPgSqlNextIdGen16SelectAssignReqTZTimestampVar
			UuidDef implPgSqlNextIdGen16SelectAssignReqUuidVar
			UuidGen implPgSqlNextIdGen16SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqBlobVar">
			stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqBoolVar">
			stmtSelectNext$popto Id16Gen Name$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqEnumVar">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqFloatVar">
			stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqNumberVar">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqStringVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqTextVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignReqUuidVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen16SelectAssignClassCode">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGen">
	public int next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		String sqlSelectNext =
				"SELECT " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$("
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlNextIdGenSPArg each implPgSqlNextIdGenCommaSPArg )$ + " ) as Next$Name$";
$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenViaAttributes">
	public int next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		int retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNext );
			}
			int nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlNextIdGen32SelectAssignVar )$
			rsSelect = stmtSelectNext$Name$.executeQuery();
			if( rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 result row to be returned by $sp_next_tableidgen$(), not 0" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getInt( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Next$Name$ cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignVar"
		>$switch IsNullable yes implPgSqlNextIdGen32SelectAssignOptVar
			default implPgSqlNextIdGen32SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlNextIdGen32SelectAssignOptBlobVar
			BoolDef implPgSqlNextIdGen32SelectAssignOptBoolVar
			EnumDef implPgSqlNextIdGen32SelectAssignOptEnumVar
			Int16Def implPgSqlNextIdGen32SelectAssignOptInt16Var
			Int32Def implPgSqlNextIdGen32SelectAssignOptInt32Var
			Int64Def implPgSqlNextIdGen32SelectAssignOptInt64Var
			UInt16Def implPgSqlNextIdGen32SelectAssignOptUInt16Var
			UInt32Def implPgSqlNextIdGen32SelectAssignOptUInt32Var
			UInt64Def implPgSqlNextIdGen32SelectAssignOptUInt64Var
			Id16Gen implPgSqlNextIdGen32SelectAssignOptInt16Var
			Id32Gen implPgSqlNextIdGen32SelectAssignOptInt32Var
			Id64Gen implPgSqlNextIdGen32SelectAssignOptInt64Var
			FloatDef implPgSqlNextIdGen32SelectAssignOptFloatVar
			DoubleDef implPgSqlNextIdGen32SelectAssignOptDoubleVar
			NumberDef implPgSqlNextIdGen32SelectAssignOptNumberVar
			StringDef implPgSqlNextIdGen32SelectAssignOptStringVar
			TokenDef implPgSqlNextIdGen32SelectAssignOptTokenVar
			NmTokenDef implPgSqlNextIdGen32SelectAssignOptNmTokenVar
			NmTokensDef implPgSqlNextIdGen32SelectAssignOptNmTokensVar
			TextDef implPgSqlNextIdGen32SelectAssignOptTextVar
			DateDef implPgSqlNextIdGen32SelectAssignOptDateVar
			TimeDef implPgSqlNextIdGen32SelectAssignOptTimeVar
			TimestampDef implPgSqlNextIdGen32SelectAssignOptTimestampVar
			TZDateDef implPgSqlNextIdGen32SelectAssignOptTZDateVar
			TZTimeDef implPgSqlNextIdGen32SelectAssignOptTZTimeVar
			TZTimestampDef implPgSqlNextIdGen32SelectAssignOptTZTimestampVar
			UuidDef implPgSqlNextIdGen32SelectAssignOptUuidVar
			UuidGen implPgSqlNextIdGen32SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlNextIdGen32SelectAssignReqBlobVar
			BoolDef implPgSqlNextIdGen32SelectAssignReqBoolVar
			EnumDef implPgSqlNextIdGen32SelectAssignReqEnumVar
			Int16Def implPgSqlNextIdGen32SelectAssignReqInt16Var
			Int32Def implPgSqlNextIdGen32SelectAssignReqInt32Var
			Int64Def implPgSqlNextIdGen32SelectAssignReqInt64Var
			UInt16Def implPgSqlNextIdGen32SelectAssignReqUInt16Var
			UInt32Def implPgSqlNextIdGen32SelectAssignReqUInt32Var
			UInt64Def implPgSqlNextIdGen32SelectAssignReqUInt64Var
			Id16Gen implPgSqlNextIdGen32SelectAssignReqInt16Var
			Id32Gen implPgSqlNextIdGen32SelectAssignReqInt32Var
			Id64Gen implPgSqlNextIdGen32SelectAssignReqInt64Var
			FloatDef implPgSqlNextIdGen32SelectAssignReqFloatVar
			DoubleDef implPgSqlNextIdGen32SelectAssignReqDoubleVar
			NumberDef implPgSqlNextIdGen32SelectAssignReqNumberVar
			StringDef implPgSqlNextIdGen32SelectAssignReqStringVar
			TokenDef implPgSqlNextIdGen32SelectAssignReqTokenVar
			NmTokenDef implPgSqlNextIdGen32SelectAssignReqNmTokenVar
			NmTokensDef implPgSqlNextIdGen32SelectAssignReqNmTokensVar
			TextDef implPgSqlNextIdGen32SelectAssignReqTextVar
			DateDef implPgSqlNextIdGen32SelectAssignReqDateVar
			TimeDef implPgSqlNextIdGen32SelectAssignReqTimeVar
			TimestampDef implPgSqlNextIdGen32SelectAssignReqTimestampVar
			TZDateDef implPgSqlNextIdGen32SelectAssignReqTZDateVar
			TZTimeDef implPgSqlNextIdGen32SelectAssignReqTZTimeVar
			TZTimestampDef implPgSqlNextIdGen32SelectAssignReqTZTimestampVar
			UuidDef implPgSqlNextIdGen32SelectAssignReqUuidVar
			UuidGen implPgSqlNextIdGen32SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqBlobVar">
			stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqBoolVar">
			stmtSelectNext$popto Id32Gen Name$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqEnumVar">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqFloatVar">
			stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqNumberVar">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqStringVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqTextVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignReqUuidVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen32SelectAssignClassCode">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGen">
	public long next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		String sqlSelectNext =
				"SELECT " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$("
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implPgSqlNextIdGenSPArg each implPgSqlNextIdGenCommaSPArg )$ + " ) as Next$Name$";
$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenViaAttributes">
	public long next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		long retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNext );
			}
			long nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlNextIdGen64SelectAssignVar )$
			rsSelect = stmtSelectNext$Name$.executeQuery();
			if( rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 result row to be returned by $sp_next_tableidgen$(), not 0" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getLong( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Next$Name$ cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>


	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignVar"
		>$switch IsNullable yes implPgSqlNextIdGen64SelectAssignOptVar
			default implPgSqlNextIdGen64SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlNextIdGen64SelectAssignOptBlobVar
			BoolDef implPgSqlNextIdGen64SelectAssignOptBoolVar
			EnumDef implPgSqlNextIdGen64SelectAssignOptEnumVar
			Int16Def implPgSqlNextIdGen64SelectAssignOptInt16Var
			Int32Def implPgSqlNextIdGen64SelectAssignOptInt32Var
			Int64Def implPgSqlNextIdGen64SelectAssignOptInt64Var
			UInt16Def implPgSqlNextIdGen64SelectAssignOptUInt16Var
			UInt32Def implPgSqlNextIdGen64SelectAssignOptUInt32Var
			UInt64Def implPgSqlNextIdGen64SelectAssignOptUInt64Var
			Id16Gen implPgSqlNextIdGen64SelectAssignOptInt16Var
			Id32Gen implPgSqlNextIdGen64SelectAssignOptInt32Var
			Id64Gen implPgSqlNextIdGen64SelectAssignOptInt64Var
			FloatDef implPgSqlNextIdGen64SelectAssignOptFloatVar
			DoubleDef implPgSqlNextIdGen64SelectAssignOptDoubleVar
			NumberDef implPgSqlNextIdGen64SelectAssignOptNumberVar
			StringDef implPgSqlNextIdGen64SelectAssignOptStringVar
			TokenDef implPgSqlNextIdGen64SelectAssignOptTokenVar
			NmTokenDef implPgSqlNextIdGen64SelectAssignOptNmTokenVar
			NmTokensDef implPgSqlNextIdGen64SelectAssignOptNmTokensVar
			TextDef implPgSqlNextIdGen64SelectAssignOptTextVar
			DateDef implPgSqlNextIdGen64SelectAssignOptDateVar
			TimeDef implPgSqlNextIdGen64SelectAssignOptTimeVar
			TimestampDef implPgSqlNextIdGen64SelectAssignOptTimestampVar
			TZDateDef implPgSqlNextIdGen64SelectAssignOptTZDateVar
			TZTimeDef implPgSqlNextIdGen64SelectAssignOptTZTimeVar
			TZTimestampDef implPgSqlNextIdGen64SelectAssignOptTZTimestampVar
			UuidDef implPgSqlNextIdGen64SelectAssignOptUuidVar
			UuidGen implPgSqlNextIdGen64SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlNextIdGen64SelectAssignReqBlobVar
			BoolDef implPgSqlNextIdGen64SelectAssignReqBoolVar
			EnumDef implPgSqlNextIdGen64SelectAssignReqEnumVar
			Int16Def implPgSqlNextIdGen64SelectAssignReqInt16Var
			Int32Def implPgSqlNextIdGen64SelectAssignReqInt32Var
			Int64Def implPgSqlNextIdGen64SelectAssignReqInt64Var
			UInt16Def implPgSqlNextIdGen64SelectAssignReqUInt16Var
			UInt32Def implPgSqlNextIdGen64SelectAssignReqUInt32Var
			UInt64Def implPgSqlNextIdGen64SelectAssignReqUInt64Var
			Id16Gen implPgSqlNextIdGen64SelectAssignReqInt16Var
			Id32Gen implPgSqlNextIdGen64SelectAssignReqInt32Var
			Id64Gen implPgSqlNextIdGen64SelectAssignReqInt64Var
			FloatDef implPgSqlNextIdGen64SelectAssignReqFloatVar
			DoubleDef implPgSqlNextIdGen64SelectAssignReqDoubleVar
			NumberDef implPgSqlNextIdGen64SelectAssignReqNumberVar
			StringDef implPgSqlNextIdGen64SelectAssignReqStringVar
			TokenDef implPgSqlNextIdGen64SelectAssignReqTokenVar
			NmTokenDef implPgSqlNextIdGen64SelectAssignReqNmTokenVar
			NmTokensDef implPgSqlNextIdGen64SelectAssignReqNmTokensVar
			TextDef implPgSqlNextIdGen64SelectAssignReqTextVar
			DateDef implPgSqlNextIdGen64SelectAssignReqDateVar
			TimeDef implPgSqlNextIdGen64SelectAssignReqTimeVar
			TimestampDef implPgSqlNextIdGen64SelectAssignReqTimestampVar
			TZDateDef implPgSqlNextIdGen64SelectAssignReqTZDateVar
			TZTimeDef implPgSqlNextIdGen64SelectAssignReqTZTimeVar
			TZTimestampDef implPgSqlNextIdGen64SelectAssignReqTZTimestampVar
			UuidDef implPgSqlNextIdGen64SelectAssignReqUuidVar
			UuidGen implPgSqlNextIdGen64SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqBlobVar">
			stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqBoolVar">
			stmtSelectNext$popto Id64Gen Name$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqEnumVar">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqFloatVar">
			stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqNumberVar">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqStringVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqTextVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignReqUuidVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlNextIdGen64SelectAssignClassCode">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="UuidGen" Name="implNextIdGen">
	public UUID next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey )
	{
		UUID retval = UUID.randomUUID();
		return( retval );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevision">
				+		", revision )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevision"
		> + " )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevisionValue"> + ", "
				+		"1 )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevisionValue"> + " )"</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableSetBuffPKey"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlCreateTableSetBuffPKeyGeneratedAttr )$
			Buff.setRequiredRevision( Revision );</GenRule>

	<GenRule GenDef="IndexCol" Name="GenerateId"
		>$reference Column GenerateId$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlCreateTableSetBuffPKeyGeneratedAttr"
		>$switch GenerateId yes implPgSqlCreateTableSetBuffPKeyAttr default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlCreateTableSetBuffPKeyAttr">
			Buff.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableGenKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlCreateTableKeys empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableCopyKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlCreateTableKeysCopyId empty empty )$</GenRule>

	<GenRule GenDef="Object" Name="implCheckOpenTransaction"
		>$popto Table implCheckOpenTransaction$</GenRule>

	<GenRule GenDef="Table" Name="implCheckOpenTransaction">
		if( ! schema.isTransactionOpen() ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"Transaction not open" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTable"
		>$switch InheritsBlob yes implCreateTableOldStyle default implCreateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="BaseDefIsBaseTable"
		>$reference BaseClass IsBaseTable$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implCreateTableSPCopyInhColumns default implCreateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implCreateTableSPCopyColumns$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableCopyDataColumn"
		>$reference Column implCreateTableCopyDataColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implCreateTableCopyDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Atom" Name="implCreateTableCopyDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implPgSqlCreateTableCopyClassCode default empty$$iterate Columns( each implPgSqlCreateTableCopyNonGenColumn empty empty )$</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlCreateTableCopyNonGenColumn"
		>$switch GenerateId yes empty default implPgSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Atom" Name="implPgSqlCreateTableCopyNonGenColumn"
		>$switch GenerateId yes empty default implPgSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSP">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implCreateTableSPTryBody$
		}$implCreateTableSPCatchBlock$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPTryBody">
$implCreateTableSPCopyColumns$$reference PrimaryKeyIndex iterate Columns( each implCreateTableSPMaybeInitGeneratedUuid )$			Connection cnx = schema.getCnx();
			String sql =
				"select * from " + schema.getLowerDbSchemaName() + ".$sp_create_dbtablename$( ?, ?, ?, ?, ?, ?"$implCreateTableSPPassArgs$ + " )";
			if( stmtCreateByPKey == null ) {
				stmtCreateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implPgSqlCreateTableBindClassCode default implPgSqlCreateTableBindConstClassCode$$implCreateTableSPBindArgs$
			resultSet = stmtCreateByPKey.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff createdBuff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}$implPgSqlCreateTableApplyBuff$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCatchBlock">
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPMaybeInitGeneratedUuid"
		>$switch GenerateId yes implCreateTableSPCheckIfGeneratingUuid default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPCheckIfGeneratingUuid"
		>$switch BaseModelAtomClass
			UuidDef implCreateTableSPInitGeneratedUuid
			UuidGen implCreateTableSPInitGeneratedUuid
			default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPInitGeneratedUuid">
			UUID $Name$ = UUID.randomUUID();</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableApplyBuff"
		>$switch HasSuperClassRelation yes implPgSqlCreateTableApplyInhBuff default implPgSqlCreateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implPgSqlCreateTableApplyBuff$$iterate Columns( each implPgSqlCreateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableApplyBaseBuff"
		>$iterate Columns( each implPgSqlCreateTableApplyCol )$$implPgSqlCreateTableApplyRevision$$switch HasAuditColumns yes implPgSqlCreateTableApplyAuditColumns default empty$</GenRule>

	<GenRule GenDef="Value" Name="implPgSqlCreateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlCreateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implPgSqlCreateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( createdBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableApplyRevision">
				Buff.setRequiredRevision( createdBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableApplyAuditColumns">
				Buff.setCreatedByUserId( createdBuff.getCreatedByUserId() );
				Buff.setCreatedAt( createdBuff.getCreatedAt() );
				Buff.setUpdatedByUserId( createdBuff.getUpdatedByUserId() );
				Buff.setUpdatedAt( createdBuff.getUpdatedAt() );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPBindInhArgs default implCreateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPBindArgs$$iterate Columns( each implCreateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindBaseArgs"
		>$iterate Columns( each implCreateTableSPBindNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPBindForceUuidArg default implPgSqlCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindForceUuidArg"
		>$switch BaseModelAtomClass
			UuidDef implPgSqlCreateTableBindVar
			UuidGen implPgSqlCreateTableBindVar
			default empty$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPPassInhArgs default implCreateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPPassArgs$$iterate Columns( each implCreateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassBaseArgs"
		>$iterate Columns( each implCreateTableSPPassNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPForceUuidArg default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPForceUuidArg"
		>$switch BaseModelAtomClass
			UuidGen implCreateTableSPPassAnArg
			UuidDef implCreateTableSPPassAnArg
			default empty$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlCreateTableSPPassGenericVar
			BoolDef implPgSqlCreateTableSPPassGenericVar
			EnumDef implPgSqlCreateTableSPPassGenericVar
			Int16Def implPgSqlCreateTableSPPassGenericVar
			Int32Def implPgSqlCreateTableSPPassGenericVar
			Int64Def implPgSqlCreateTableSPPassGenericVar
			UInt16Def implPgSqlCreateTableSPPassGenericVar
			UInt32Def implPgSqlCreateTableSPPassGenericVar
			UInt64Def implPgSqlCreateTableSPPassGenericVar
			Id16Gen implPgSqlCreateTableSPPassGenericVar
			Id32Gen implPgSqlCreateTableSPPassGenericVar
			Id64Gen implPgSqlCreateTableSPPassGenericVar
			FloatDef implPgSqlCreateTableSPPassFloatVar
			DoubleDef implPgSqlCreateTableSPPassGenericVar
			NumberDef implPgSqlCreateTableSPPassGenericVar
			StringDef implPgSqlCreateTableSPPassGenericVar
			TokenDef implPgSqlCreateTableSPPassGenericVar
			NmTokenDef implPgSqlCreateTableSPPassGenericVar
			NmTokensDef implPgSqlCreateTableSPPassGenericVar
			TextDef implPgSqlCreateTableSPPassTextVar
			DateDef implPgSqlCreateTableSPPassDateVar
			TimeDef implPgSqlCreateTableSPPassTimeVar
			TimestampDef implPgSqlCreateTableSPPassTimestampVar
			TZDateDef implPgSqlCreateTableSPPassTZDateVar
			TZTimeDef implPgSqlCreateTableSPPassTZTimeVar
			TZTimestampDef implPgSqlCreateTableSPPassTZTimestampVar
			UuidDef implPgSqlCreateTableSPPassGenericVar
			UuidGen implPgSqlCreateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableSPPassGenericVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableSPPassFloatVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableSPPassTextVar"> + ", "
				+		"cast( ? as text )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableSPPassDateVar"> + ", "
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableSPPassTimeVar"> + ", "
				+		"cast( to_timestamp( ?, 'HH24:MI:SS' ) as time )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableSPPassTimestampVar"> + ", "
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableSPPassTZDateVar"> + ", "
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableSPPassTZTimeVar"> + ", "
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableSPPassTZTimestampVar"> + ", "
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableInvokeSuperCreate">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().create$reference SuperClassRelation reference ToTable TableName$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyle">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$switch SecScope None empty System implCreateTableOSCheckSystem Cluster implCreateTableOSCheckCluster Tenant implCreateTableOSCheckTenant default error$$switch HasSuperClassRelation yes implCreateTableInvokeSuperCreate default implCheckOpenTransaction$
		try {
			Connection cnx = schema.getCnx();
$switch IsBaseTable yes implPgSqlCreateClassCodeKey default empty$$switch HasSuperClassRelation no implPgSqlCreateTableGenKeys default implPgSqlCreateTableCopyKeys$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$$switch HasSuperClassRelation no implPgSqlCreateTableInitRevision default empty$<!--
-->			String sql =
					"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$( "$switch IsBaseTable yes implPgSqlCreateTableInsertClassCode default empty$$switch HasSuperClassRelation no implPgSqlCreateTableInsertOptAuditColumns default empty$$iterate Columns( each implPgSqlCreateTableInsertColumnComma last implPgSqlCreateTableInsertColumn )$$switch HasSuperClassRelation no implCreateTableSqlFragRevision default implCreateTableSqlFragNoRevision$
				+	"VALUES ( "$switch IsBaseTable yes implPgSqlCreateTableValuesClassCode default empty$$switch HasSuperClassRelation no implPgSqlCreateTableValuesOptAuditColumns default empty$$iterate Columns( each implPgSqlCreateTableValuesVarComma last implPgSqlCreateTableValuesVar )$$switch HasSuperClassRelation no implCreateTableSqlFragRevisionValue default implCreateTableSqlFragNoRevisionValue$;$implCreateTableOldStylePartTwo$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableValuesOptAuditColumns"
		>$switch HasAuditColumns yes implPgSqlCreateTableValuesAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableValuesAuditColumns">
				+		" ?, "
				+		" to_timestamp( ?, 'YYYY.MM.DD HH24:MI:SS' ), "
				+		" ?, "
				+		" to_timestamp( ?, 'YYYY.MM.DD HH24:MI:SS' ), "</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableInsertOptAuditColumns"
		>$switch HasAuditColumns yes implPgSqlCreateTableInsertAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableInsertAuditColumns">
				+		"createdby, "
				+		"createdat, "
				+		"updatedby, "
				+		"updatedat, "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStylePartTwo">
			if( stmtCreateByPKey == null ) {
				stmtCreateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;$switch IsBaseTable yes implPgSqlCreateTableBindClassCode default empty$$switch HasSuperClassRelation no implPgSqlCreateTableBindOptAuditColumns default empty$$iterate Columns( each implPgSqlCreateTableBindVar )$
			int rowsAffected = stmtCreateByPKey.executeUpdate();
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by insert, not " + rowsAffected );
			}$switch HasSuperClassRelation no implPgSqlCreateTableSetBuffPKey default empty$$poptop Table switch BaseHasHistory yes implCreateTableOldStyleAuditCreated default empty$$switch HasChain yes implCreateTableOldStyleRereadCreated default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implPgSqlCreateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableBindAuditColumns">
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( Calendar.getInstance() ) );
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( Calendar.getInstance() ) );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleRereadCreated"
		>$switch BaseHasClassCode yes implCreateTableOldStyleRereadCreatedWithCC default implCreateTableOldStyleRereadCreatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleRereadCreatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey key = schema.getFactory$reference BaseClass TableName$().newPKey();$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleRereadCreatedCopyBuffToKey )$
				$DefSchemaName$$TableName$Buff reread = readBuff( Authorization, key );
				Buff.set( reread );
			}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleRereadCreatedNoCC">
			{
				$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey key = schema.getFactory$reference BaseClass TableName$().newPKey();$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleRereadCreatedCopyBuffToKey )$
				$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey key = schema.getFactory$reference BaseClass TableName$().newPKey();
				$DefSchemaName$$TableName$Buff reread = readBuff( Authorization, key );
				Buff.set( reread );
			}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleRereadCreatedCopyBuffToKey">
				key.set$OptionalOrRequired$$Name$( Buff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreated"
		>$switch BaseHasClassCode yes implCreateTableOldStyleAuditCreatedWithCC default implCreateTableOldStyleAuditCreatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid,"
					+		" auditstamp,"
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, now(), $lower reference BaseClass ClassCode$.classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 0 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditCreatedByPKey == null ) {
					stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
				}
				argIdx = 1;
				stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlCreateTableAssignVar )$
				int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedValInh default implCreateTableOldStyleAuditCreatedValBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedVal$$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValBase"
		>$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditCreatedReallyVal$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedReallyVal"
> + ", "
					+		"$lower reference Table ClassCode$.$DbColumnName$"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignVar"
		>$switch IsNullable yes implPgSqlCreateTableAssignOptVar
			default implPgSqlCreateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlCreateTableAssignOptBlobVar
			BoolDef implPgSqlCreateTableAssignOptBoolVar
			EnumDef implPgSqlCreateTableAssignOptEnumVar
			Int16Def implPgSqlCreateTableAssignOptInt16Var
			Int32Def implPgSqlCreateTableAssignOptInt32Var
			Int64Def implPgSqlCreateTableAssignOptInt64Var
			UInt16Def implPgSqlCreateTableAssignOptUInt16Var
			UInt32Def implPgSqlCreateTableAssignOptUInt32Var
			UInt64Def implPgSqlCreateTableAssignOptUInt64Var
			Id16Gen implPgSqlCreateTableAssignOptInt16Var
			Id32Gen implPgSqlCreateTableAssignOptInt32Var
			Id64Gen implPgSqlCreateTableAssignOptInt64Var
			FloatDef implPgSqlCreateTableAssignOptFloatVar
			DoubleDef implPgSqlCreateTableAssignOptDoubleVar
			NumberDef implPgSqlCreateTableAssignOptNumberVar
			StringDef implPgSqlCreateTableAssignOptStringVar
			TokenDef implPgSqlCreateTableAssignOptTokenVar
			NmTokenDef implPgSqlCreateTableAssignOptNmTokenVar
			NmTokensDef implPgSqlCreateTableAssignOptNmTokensVar
			TextDef implPgSqlCreateTableAssignOptTextVar
			DateDef implPgSqlCreateTableAssignOptDateVar
			TimeDef implPgSqlCreateTableAssignOptTimeVar
			TimestampDef implPgSqlCreateTableAssignOptTimestampVar
			TZDateDef implPgSqlCreateTableAssignOptTZDateVar
			TZTimeDef implPgSqlCreateTableAssignOptTZTimeVar
			TZTimestampDef implPgSqlCreateTableAssignOptTZTimestampVar
			UuidDef implPgSqlCreateTableAssignOptUuidVar
			UuidGen implPgSqlCreateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlCreateTableAssignReqBlobVar
			BoolDef implPgSqlCreateTableAssignReqBoolVar
			EnumDef implPgSqlCreateTableAssignReqEnumVar
			Int16Def implPgSqlCreateTableAssignReqInt16Var
			Int32Def implPgSqlCreateTableAssignReqInt32Var
			Int64Def implPgSqlCreateTableAssignReqInt64Var
			UInt16Def implPgSqlCreateTableAssignReqUInt16Var
			UInt32Def implPgSqlCreateTableAssignReqUInt32Var
			UInt64Def implPgSqlCreateTableAssignReqUInt64Var
			Id16Gen implPgSqlCreateTableAssignReqInt16Var
			Id32Gen implPgSqlCreateTableAssignReqInt32Var
			Id64Gen implPgSqlCreateTableAssignReqInt64Var
			FloatDef implPgSqlCreateTableAssignReqFloatVar
			DoubleDef implPgSqlCreateTableAssignReqDoubleVar
			NumberDef implPgSqlCreateTableAssignReqNumberVar
			StringDef implPgSqlCreateTableAssignReqStringVar
			TokenDef implPgSqlCreateTableAssignReqTokenVar
			NmTokenDef implPgSqlCreateTableAssignReqNmTokenVar
			NmTokensDef implPgSqlCreateTableAssignReqNmTokensVar
			TextDef implPgSqlCreateTableAssignReqTextVar
			DateDef implPgSqlCreateTableAssignReqDateVar
			TimeDef implPgSqlCreateTableAssignReqTimeVar
			TimestampDef implPgSqlCreateTableAssignReqTimestampVar
			TZDateDef implPgSqlCreateTableAssignReqTZDateVar
			TZTimeDef implPgSqlCreateTableAssignReqTZTimeVar
			TZTimestampDef implPgSqlCreateTableAssignReqTZTimestampVar
			UuidDef implPgSqlCreateTableAssignReqUuidVar
			UuidGen implPgSqlCreateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqBlobVar">
				stmtAuditCreatedByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqBoolVar">
				stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqEnumVar">
				stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqInt16Var">
				stmtAuditCreatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqInt32Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqInt64Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqUInt16Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqUInt32Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqUInt64Var">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqFloatVar">
				stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqDoubleVar">
				stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqNumberVar">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqStringVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqNmTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqNmTokensVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqTextVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqTZDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqTZTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqTZTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignReqUuidVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereIndexCol">
					+				"$lower reference Index reference Table reference BaseClass ClassCode$.$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereAndIndexCol">
					+			"AND $lower reference Index reference Table reference BaseClass ClassCode$.$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedData"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedDataInh default implCreateTableOldStyleAuditCreatedDataBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedData$$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataBase"
		>$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgNonPKeyColumn"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgColumnName"> + ", "
					+		"$DbColumnName$"</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgFirstColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgFirstColumnName">
					+		"$DbColumnName$"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedNoCC">
			String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, now()"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName )$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 0"
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditCreatedByPKey == null ) {
				stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
			}
			argIdx = 1;
			stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlCreateTableAssignVar )$
			int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateClassCodeKey"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implPgSqlCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implPgSqlCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implPgSqlCreateTableInsertColumnComma">
				+		"$lower DbColumnName$, "</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implPgSqlCreateTableInsertColumn">
				+		"$lower DbColumnName$"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableInsertClassCode">
				+		"classcode, "</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesClassCode">
				+		"?, "</GenRule>

	<GenRule GenDef="Object" Name="implCreateTableOldStyleAuditValIndexColName"
		> + ", "$implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditValFirstIndexColName">
					+		"$lower reference Table ClassCode$.$DbColumnName$" </GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditValFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindClassCode">
			stmtCreateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindConstClassCode">
			stmtCreateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesVarComma"
		>$implPgSqlCreateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlCreateTableValuesGenericVar
			BoolDef implPgSqlCreateTableValuesGenericVar
			EnumDef implPgSqlCreateTableValuesGenericVar
			Int16Def implPgSqlCreateTableValuesGenericVar
			Int32Def implPgSqlCreateTableValuesGenericVar
			Int64Def implPgSqlCreateTableValuesGenericVar
			UInt16Def implPgSqlCreateTableValuesGenericVar
			UInt32Def implPgSqlCreateTableValuesGenericVar
			UInt64Def implPgSqlCreateTableValuesGenericVar
			Id16Gen implPgSqlCreateTableValuesGenericVar
			Id32Gen implPgSqlCreateTableValuesGenericVar
			Id64Gen implPgSqlCreateTableValuesGenericVar
			FloatDef implPgSqlCreateTableValuesFloatVar
			DoubleDef implPgSqlCreateTableValuesGenericVar
			NumberDef implPgSqlCreateTableValuesGenericVar
			StringDef implPgSqlCreateTableValuesGenericVar
			TokenDef implPgSqlCreateTableValuesGenericVar
			NmTokenDef implPgSqlCreateTableValuesGenericVar
			NmTokensDef implPgSqlCreateTableValuesGenericVar
			TextDef implPgSqlCreateTableValuesTextVar
			DateDef implPgSqlCreateTableValuesDateVar
			TimeDef implPgSqlCreateTableValuesTimeVar
			TimestampDef implPgSqlCreateTableValuesTimestampVar
			TZDateDef implPgSqlCreateTableValuesTZDateVar
			TZTimeDef implPgSqlCreateTableValuesTZTimeVar
			TZTimestampDef implPgSqlCreateTableValuesTZTimestampVar
			UuidDef implPgSqlCreateTableValuesGenericVar
			UuidGen implPgSqlCreateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesGenericVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesTextVar">
				+		"cast( ? as text )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesFloatVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesDateVar">
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesTimeVar">
				+		"cast( to_timestamp( ?, 'HH24:MI:SS' ) as time )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesTimestampVar">
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesTZDateVar">
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesTZTimeVar">
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableValuesTZTimestampVar">
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindVarComma"
		>$implPgSqlCreateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindVar"
		>$switch IsNullable yes implPgSqlCreateTableBindOptVar
			default implPgSqlCreateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlCreateTableBindOptBlobVar
			BoolDef implPgSqlCreateTableBindOptBoolVar
			EnumDef implPgSqlCreateTableBindOptEnumVar
			Int16Def implPgSqlCreateTableBindOptInt16Var
			Int32Def implPgSqlCreateTableBindOptInt32Var
			Int64Def implPgSqlCreateTableBindOptInt64Var
			UInt16Def implPgSqlCreateTableBindOptUInt16Var
			UInt32Def implPgSqlCreateTableBindOptUInt32Var
			UInt64Def implPgSqlCreateTableBindOptUInt64Var
			Id16Gen implPgSqlCreateTableBindOptInt16Var
			Id32Gen implPgSqlCreateTableBindOptInt32Var
			Id64Gen implPgSqlCreateTableBindOptInt64Var
			FloatDef implPgSqlCreateTableBindOptFloatVar
			DoubleDef implPgSqlCreateTableBindOptDoubleVar
			NumberDef implPgSqlCreateTableBindOptNumberVar
			StringDef implPgSqlCreateTableBindOptStringVar
			TokenDef implPgSqlCreateTableBindOptTokenVar
			NmTokenDef implPgSqlCreateTableBindOptNmTokenVar
			NmTokensDef implPgSqlCreateTableBindOptNmTokensVar
			TextDef implPgSqlCreateTableBindOptTextVar
			DateDef implPgSqlCreateTableBindOptDateVar
			TimeDef implPgSqlCreateTableBindOptTimeVar
			TimestampDef implPgSqlCreateTableBindOptTimestampVar
			TZDateDef implPgSqlCreateTableBindOptTZDateVar
			TZTimeDef implPgSqlCreateTableBindOptTZTimeVar
			TZTimestampDef implPgSqlCreateTableBindOptTZTimestampVar
			UuidDef implPgSqlCreateTableBindOptUuidVar
			UuidGen implPgSqlCreateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlCreateTableBindReqBlobVar
			BoolDef implPgSqlCreateTableBindReqBoolVar
			EnumDef implPgSqlCreateTableBindReqEnumVar
			Int16Def implPgSqlCreateTableBindReqInt16Var
			Int32Def implPgSqlCreateTableBindReqInt32Var
			Int64Def implPgSqlCreateTableBindReqInt64Var
			UInt16Def implPgSqlCreateTableBindReqUInt16Var
			UInt32Def implPgSqlCreateTableBindReqUInt32Var
			UInt64Def implPgSqlCreateTableBindReqUInt64Var
			Id16Gen implPgSqlCreateTableBindReqInt16Var
			Id32Gen implPgSqlCreateTableBindReqInt32Var
			Id64Gen implPgSqlCreateTableBindReqInt64Var
			FloatDef implPgSqlCreateTableBindReqFloatVar
			DoubleDef implPgSqlCreateTableBindReqDoubleVar
			NumberDef implPgSqlCreateTableBindReqNumberVar
			StringDef implPgSqlCreateTableBindReqStringVar
			TokenDef implPgSqlCreateTableBindReqTokenVar
			NmTokenDef implPgSqlCreateTableBindReqNmTokenVar
			NmTokensDef implPgSqlCreateTableBindReqNmTokensVar
			TextDef implPgSqlCreateTableBindReqTextVar
			DateDef implPgSqlCreateTableBindReqDateVar
			TimeDef implPgSqlCreateTableBindReqTimeVar
			TimestampDef implPgSqlCreateTableBindReqTimestampVar
			TZDateDef implPgSqlCreateTableBindReqTZDateVar
			TZTimeDef implPgSqlCreateTableBindReqTZTimeVar
			TZTimestampDef implPgSqlCreateTableBindReqTZTimestampVar
			UuidDef implPgSqlCreateTableBindReqUuidVar
			UuidGen implPgSqlCreateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqBlobVar">
			stmtCreateByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqBoolVar">
			stmtCreateByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptBoolVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqEnumVar">
			stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqInt16Var">
			stmtCreateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqInt32Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqInt64Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqUInt16Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqUInt32Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqUInt64Var">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqFloatVar">
			stmtCreateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqDoubleVar">
			stmtCreateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqNumberVar">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqStringVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqNmTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqNmTokensVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqTextVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqTZDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqTZTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqTZTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindReqUuidVar">
			stmtCreateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlCreateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Table" Name="implPgSqlCreateTableInitRevision"
>			int Revision = 1;
</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlCreateTableCopyData"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Atom" Name="implPgSqlCreateTableCopyData"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlCreateTableCopyColumn"
		>$reference Column implPgSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlCreateTableCopyColumn"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Atom" Name="implPgSqlCreateTableCopyColumn"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlCreateTableCopyClassCode"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implPgSqlCreateTableRetBuffAttrComma"
>$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$ = $Name$,
		</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlCreateTableKeys"
		>$switch GenerateId yes implPgSqlCreateTableKeysGenId default implPgSqlCreateTableKeysCopyId$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlCreateTableKeysGenId"
		>$reference Column implPgSqlCreateTableKeysGenId$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlCreateTableKeysCopyId"
		>$reference Column implPgSqlCreateTableKeysCopyId$</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlCreateTableKeysGenId"
		>$switch HasDispenser no implPgSqlCreateTableKeysGenSchemaId default implPgSqlCreateTableKeysGenTableId$</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlCreateTableKeysGenSchemaId"
>			$implJavaAtomType$ $Name$ = schema.next$reference DataType Name$();
</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlCreateTableKeysGenTableId"
>			$implJavaAtomType$ $Name$ = ((I$reference DataType reference Dispenser SchemaName$$reference DataType reference Dispenser TableName$Table)schema.getTable$reference DataType reference Dispenser TableName$()).next$reference DataType Name$( Authorization$popto Table iterate OnlyOwnerRelations( first implPgSqlCreateTableKeysGenTableIdPassArgs each empty )$ );
</GenRule>

	<GenRule GenDef="Relation" Name="implPgSqlCreateTableKeysGenTableIdPassArgs"
		>$reference FromIndex iterate Columns( each implPgSqlCreateTableKeysGenTableIdCommaArg )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlCreateTableKeysGenTableIdCommaArg">,
				Buff.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Atom" Name="implPgSqlCreateTableKeys"
		></GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implPgSqlCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlClassCodeSelectFragDbNameComma"
>					+		"$lower reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSelectDistinctClassCodeFrag"
>					+		"DISTINCT $lower reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlClassCodeJoinBaseTable"
>					+	"INNER JOIN $lower reference BaseClass DbSchemaName$.$reference BaseClass DbTableName$ $lower reference BaseClass ClassCode$ ON "
$reference PrimaryKeyIndex iterate Columns( first implPgSqlClassCodeJoinBaseTableColumn each implPgSqlClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlClassCodeJoinBaseTableColumn">
					+		"$lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>
	<GenRule GenDef="IndexCol" Name="implPgSqlClassCodeAndJoinBaseTableColumn">
					+		"AND $lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLocalizeClassCodeKey"
>			String ClassCode = PKey.getClassCode();
</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlTableColumnFetchColumn"
		>$switch IsNullable yes implPgSqlTableColumnFetchOptAttr default implPgSqlTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implPgSqlTableColumnFetchColumn"
		>$switch IsNullable yes implPgSqlTableColumnFetchOptAttr default implPgSqlTableColumnFetchReqAttr$</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlTableColumnFetchBlobOptAttr
			UInt64Def implPgSqlTableColumnFetchUInt64OptAttr
			NumberDef implPgSqlTableColumnFetchNumberOptAttr
			DateDef implPgSqlTableColumnFetchDateOptAttr
			TimeDef implPgSqlTableColumnFetchTimeOptAttr
			TimestampDef implPgSqlTableColumnFetchTimestampOptAttr
			TZDateDef implPgSqlTableColumnFetchTZDateOptAttr
			TZTimeDef implPgSqlTableColumnFetchTZTimeOptAttr
			TZTimestampDef implPgSqlTableColumnFetchTZTimestampOptAttr
			default implPgSqlTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implPgSqlTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass BlobDef implPgSqlTableColumnFetchBlobOptAttr default implPgSqlTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchBlobOptAttr"
>				{
					byte colVal[] = resultSet.getBytes( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchUInt64OptAttr"
>				{
					String strval = resultSet.getString( idxcol );
					if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						BigDecimal bival = new BigDecimal( strval );
						buff.setOptional$Name$( bival );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchNumberOptAttr"
>				{
					BigDecimal value = resultSet.getBigDecimal( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( value );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$PgSqlSchema.convertDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$PgSqlSchema.convertTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$PgSqlSchema.convertTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchTZDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$PgSqlSchema.convertTZDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchTZTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$PgSqlSchema.convertTZTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchTZTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$PgSqlSchema.convertTZTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implPgSqlAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implPgSqlTableColumnFetchGenOptAttr"
		>$implPgSqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implPgSqlTableColumnFetchGenOptAttr"
		>$implPgSqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implPgSqlTableColumnFetchGenOptAttr"
		>$implPgSqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implPgSqlTableColumnFetchGenOptAttr"
		>$implPgSqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implPgSqlTableColumnFetchGenOptAttr"
		>$implPgSqlTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchOptStringAttr"
>				{
					$implJavaReqAtomType$ colVal = $implPgSqlAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implPgSqlTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implPgSqlAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchReqAttr"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlTableColumnFetchBlobReqAttr
			UInt64Def implPgSqlTableColumnFetchUInt64ReqAttr
			NumberDef implPgSqlTableColumnFetchNumberReqAttr
			default implPgSqlTableColumnFetchGenReqAttr$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchBlobReqAttr"
>				{
					byte colVal[] = resultSet.getBytes( idxcol );
					buff.setRequired$Name$( colVal );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchUInt64ReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnFetchNumberReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implPgSqlAtomFetchReqColumn$ );
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implPgSqlTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implPgSqlAtomFetchReqColumn$ );
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlAtomFetchReqColumn"
		>$reference DataType implPgSqlAtomFetchReqColumn$</GenRule>

	<GenRule GenDef="BlobDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getBytes( idxcol ) )</GenRule>

	<GenRule GenDef="BoolDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getBoolean( idxcol )</GenRule>

	<GenRule GenDef="EnumDef" Name="implPgSqlAtomFetchReqColumn"
		>$EffSchemaName$Schema.ordinalTo$Name$( resultSet.getShort( idxcol ) )</GenRule>

	<GenRule GenDef="Int16Def" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getShort( idxcol )</GenRule>

	<GenRule GenDef="Int32Def" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="Int64Def" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt16Def" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="UInt32Def" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt64Def" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="FloatDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getFloat( idxcol )</GenRule>

	<GenRule GenDef="DoubleDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getDouble( idxcol )</GenRule>

	<GenRule GenDef="NumberDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="StringDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TokenDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokenDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokensDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TextDef" Name="implPgSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="DateDef" Name="implPgSqlAtomFetchReqColumn"
		>$SchemaName$PgSqlSchema.convertDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimeDef" Name="implPgSqlAtomFetchReqColumn"
		>$SchemaName$PgSqlSchema.convertTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimestampDef" Name="implPgSqlAtomFetchReqColumn"
		>$SchemaName$PgSqlSchema.convertTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZDateDef" Name="implPgSqlAtomFetchReqColumn"
		>$SchemaName$PgSqlSchema.convertTZDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimeDef" Name="implPgSqlAtomFetchReqColumn"
		>$SchemaName$PgSqlSchema.convertTZTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimestampDef" Name="implPgSqlAtomFetchReqColumn"
		>$SchemaName$PgSqlSchema.convertTZTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidDef" Name="implPgSqlAtomFetchReqColumn"
		>$SchemaName$PgSqlSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidGen" Name="implPgSqlAtomFetchReqColumn"
		>$SchemaName$PgSqlSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlLocalizeTableKeys"
		>$reference Column implPgSqlCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="TableCol" Name="implPgSqlLocalizeTableKeys"
		>$implPgSqlCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="Atom" Name="implPgSqlLocalizeTableKeys"
		>$implPgSqlCreateTableKeysLocalizeId$</GenRule>

	<GenRule GenDef="TableCol" Name="implPgSqlCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implPgSqlCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlClassCodeSelectFragDbNameComma"
>					+		"$lower popto Table reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlSelectDistinctClassCodeFrag"
>					+		"DISTINCT $lower popto Table reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlInhTableColumnSelectFrags"
		>$switch HasSuperClassRelation yes implPgSqlChainTableColumnSelectFrags default empty$$iterate Columns( each implPgSqlTableDataColumnSelectFrag )$</GenRule>

	<GenRule GenDef="Value" Name="implPgSqlTableDataColumnSelectFrag"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlChainTableColumnSelectFrags"
		>$reference SuperClassRelation reference ToTable implPgSqlInhTableColumnSelectFrags$</GenRule>


	<GenRule GenDef="Object" Name="implBuffTableColumnFetchClassCode"
>				if( ! ( buff.getClassCode().equals( resultSet.getString( idxcol ) ) ) ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected ClassCode \"" + buff.getClassCode() +	"\", not \"" + resultSet.getString( idxcol ) + "\"" );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Value" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="IndexCol" Name="implBuffTableColumnFetchColumn"
		>$reference Column implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchBlobOptAttr"
>		{
			byte colVal[] = resultSet.getBytes( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchUInt64OptAttr"
>		{
			String strval = resultSet.getString( idxcol );
			if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
				buff.setOptional$Name$( null );
			}
			else {
				BigDecimal bival = new BigDecimal( strval );
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchNumberOptAttr"
>		{
			BigDecimal bival = resultSet.getBigDecimal( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implPgSqlAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchOptStringAttr"
>		{
			$implJavaReqAtomType$ colVal = $implPgSqlAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implPgSqlAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implPgSqlAtomFetchReqColumn$ );
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implPgSqlAtomFetchReqColumn$ );
		idxcol++;
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildFromHierarchy"
		>$switch HasSuperClassRelation yes implReadTableBuffBuildInhFromHierarchy default implReadTableBuffBuildBaseFromHierarchy$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildInhFromHierarchy"
>$reference SuperClassRelation reference ToTable implReadTableBuffBuildFromHierarchy$
						+	"INNER JOIN " + schema.getLowerDbSchemaName() + ".$DbTableName$ $lower ClassCode$ ON "$reference PrimaryKeyIndex iterate Columns( first implPgSqlClassCodeJoinBaseTableColumn each implPgSqlClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildBaseFromHierarchy">" + schema.getLowerDbSchemaName() + ".$DbTableName$ AS $lower ClassCode$ "</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildFetchColumns"
		>$switch HasSuperClassRelation yes implBuffTableBuildInhFetchColumns default implBuffTableBuildBaseFetchColumns$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildInhFetchColumns"
		>$reference SuperClassRelation reference ToTable implBuffTableBuildFetchColumns$$iterate Columns( each implBuffTableColumnFetchDataColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildBaseFetchColumns"
		>$iterate Columns( each implBuffTableColumnFetchColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableColumnFetchAuditColumns">
		{$implBuffTableColumnFetchAuditCreateColumns$
			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedByUserId( null );
			}
			else {
				buff.setUpdatedByUserId( UUID.fromString( colString ) );
			}
			idxcol ++;

			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedAt( null );
			}
			else {
				buff.setUpdatedAt( $SchemaName$PgSqlSchema.convertTimestampString( colString ) );
			}
			idxcol++;
		}
</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableColumnFetchAuditCreateColumns">
			String colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedByUserId( null );
			}
			else {
				buff.setCreatedByUserId( UUID.fromString( colString ) );
			}
			idxcol ++;

			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedAt( null );
			}
			else {
				buff.setCreatedAt( $SchemaName$PgSqlSchema.convertTimestampString( colString ) );
			}
			idxcol++;</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableDistinctClassCode">
	public String S_sqlSelect$TableName$DistinctClassCode = null;

	public String getSqlSelect$TableName$DistinctClassCode() {
		if( S_sqlSelect$TableName$DistinctClassCode == null ) {
			S_sqlSelect$TableName$DistinctClassCode =
					"SELECT "
$implPgSqlSelectDistinctClassCodeFrag$<!--
-->					+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$DistinctClassCode );
	}
</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableBuff">
	public String S_sqlSelect$TableName$Buff = null;

	public String getSqlSelect$TableName$Buff() {
		if( S_sqlSelect$TableName$Buff == null ) {
			S_sqlSelect$TableName$Buff =
					"SELECT "
$switch HasClassCode yes implPgSqlClassCodeSelectFragDbNameComma default empty$$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlTableColumnSelectFragDbNameComma )$$switch HasSuperClassRelation no implPgSqlSelectFragOptAuditColumns default empty$$implPgSqlInhTableColumnSelectFrags$					+		"$lower reference BaseClass ClassCode$.Revision "
				+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$Buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSelectFragOptAuditColumns"
		>$switch HasSuperClassRelation yes implPgSqlSelectFragAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSelectFragAuditColumns">
				+		"$lower ClassCode$.createdby as createdby, "
				+		"to_char( $lower ClassCode$.createdat, 'YYYY-MM-DD HH24:MI:SS' ) as createdat, "
				+		"$lower ClassCode$.updatedby as updatedby, "
				+		"to_char( $lower ClassCode$.updatedat, 'YYYY-MM-DD HH24:MI:SS' ) as updatedat, "</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetWalkClassCode">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetMapViaClassCode">
		String classCode = resultSet.getString( idxcol );
		idxcol++;
		$DefSchemaName$$TableName$Buff buff;
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Unrecognized class code \"" + classCode + "\"" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetDirectBuff">
		$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetToBuff">
	protected $DefSchemaName$$TableName$Buff unpack$TableName$ResultSetToBuff( ResultSet resultSet )
	throws SQLException
	{
		final String S_ProcName = "unpack$TableName$ResultSetToBuff";
		int idxcol = 1;$switch HasClassCode yes implUnpackResultSetMapViaClassCode default implUnpackResultSetDirectBuff$$switch HasAuditColumns yes implBuffTableColumnFetchAuditColumns default empty$$implBuffTableBuildFetchColumns$
		buff.setRequiredRevision( resultSet.getInt( idxcol ) );
		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeReadBuff">
		buff = readBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeLockBuff">
		buff = lockBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedAssembleSubClasses default implReadTableDerivedInvokeReadBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClasses">
		String classCode;
		ResultSet resultSet = null;
		try {$implReadTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = readBuff( Authorization, PKey );
		}$implReadTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClassesTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadDerivedClassCode == null ) {
				stmtReadDerivedClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlReadTableDerivedClassCodeAssignVar )$
			resultSet = stmtReadDerivedClassCode.executeQuery();
			if( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implPgSqlReadTableDerivedClassCodeAssignOptVar
			default implPgSqlReadTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlReadTableDerivedClassCodeAssignOptBlobVar
			BoolDef implPgSqlReadTableDerivedClassCodeAssignOptBoolVar
			EnumDef implPgSqlReadTableDerivedClassCodeAssignOptEnumVar
			Int16Def implPgSqlReadTableDerivedClassCodeAssignOptInt16Var
			Int32Def implPgSqlReadTableDerivedClassCodeAssignOptInt32Var
			Int64Def implPgSqlReadTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implPgSqlReadTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implPgSqlReadTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implPgSqlReadTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implPgSqlReadTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implPgSqlReadTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implPgSqlReadTableDerivedClassCodeAssignOptInt64Var
			FloatDef implPgSqlReadTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implPgSqlReadTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implPgSqlReadTableDerivedClassCodeAssignOptNumberVar
			StringDef implPgSqlReadTableDerivedClassCodeAssignOptStringVar
			TokenDef implPgSqlReadTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implPgSqlReadTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implPgSqlReadTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implPgSqlReadTableDerivedClassCodeAssignOptTextVar
			DateDef implPgSqlReadTableDerivedClassCodeAssignOptDateVar
			TimeDef implPgSqlReadTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implPgSqlReadTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implPgSqlReadTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implPgSqlReadTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implPgSqlReadTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implPgSqlReadTableDerivedClassCodeAssignOptUuidVar
			UuidGen implPgSqlReadTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlReadTableDerivedClassCodeAssignReqBlobVar
			BoolDef implPgSqlReadTableDerivedClassCodeAssignReqBoolVar
			EnumDef implPgSqlReadTableDerivedClassCodeAssignReqEnumVar
			Int16Def implPgSqlReadTableDerivedClassCodeAssignReqInt16Var
			Int32Def implPgSqlReadTableDerivedClassCodeAssignReqInt32Var
			Int64Def implPgSqlReadTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implPgSqlReadTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implPgSqlReadTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implPgSqlReadTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implPgSqlReadTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implPgSqlReadTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implPgSqlReadTableDerivedClassCodeAssignReqInt64Var
			FloatDef implPgSqlReadTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implPgSqlReadTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implPgSqlReadTableDerivedClassCodeAssignReqNumberVar
			StringDef implPgSqlReadTableDerivedClassCodeAssignReqStringVar
			TokenDef implPgSqlReadTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implPgSqlReadTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implPgSqlReadTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implPgSqlReadTableDerivedClassCodeAssignReqTextVar
			DateDef implPgSqlReadTableDerivedClassCodeAssignReqDateVar
			TimeDef implPgSqlReadTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implPgSqlReadTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implPgSqlReadTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implPgSqlReadTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implPgSqlReadTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implPgSqlReadTableDerivedClassCodeAssignReqUuidVar
			UuidGen implPgSqlReadTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqBlobVar">
			stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqBoolVar">
			stmtReadDerivedClassCode.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqEnumVar">
			stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqInt16Var">
			stmtReadDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqInt32Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqInt64Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqUInt16Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqUInt32Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqUInt64Var">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqFloatVar">
			stmtReadDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqDoubleVar">
			stmtReadDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqNumberVar">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqStringVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqNmTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqNmTokensVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqTextVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqTZDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqTZTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignReqUuidVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$reference BaseClass reference PrimaryKeyIndex Suffix$( Authorization$poptop Table reference PrimaryKeyIndex iterate Columns( each implReadTableDerivedInvokeSubClassPassPKeyArg )$ );
		}$implReadTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedInvokeSubClassPassPKeyArg">,
				PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$reference Column Name$()</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByPKey">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readDerived";$implCheckOpenTransaction$
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implReadTableDerivedInvokeReadBuff default implReadTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedByPKey">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff lockDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockDerived";$implCheckOpenTransaction$
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implLockTableDerivedInvokeLockBuff default implLockTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implLockTableDerivedAssembleSubClasses default implLockTableDerivedInvokeLockBuff$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {$implLockTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClassesTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc$( ?, ?, ?, ?, ?"$reference PrimaryKeyIndex iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtLockDerivedClassCode == null ) {
				stmtLockDerivedClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference PrimaryKeyIndex iterate Columns( each implPgSqlLockTableDerivedClassCodeAssignVar )$
			resultSet = stmtLockDerivedClassCode.executeQuery();
			if( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implPgSqlLockTableDerivedClassCodeAssignOptVar
			default implPgSqlLockTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlLockTableDerivedClassCodeAssignOptBlobVar
			BoolDef implPgSqlLockTableDerivedClassCodeAssignOptBoolVar
			EnumDef implPgSqlLockTableDerivedClassCodeAssignOptEnumVar
			Int16Def implPgSqlLockTableDerivedClassCodeAssignOptInt16Var
			Int32Def implPgSqlLockTableDerivedClassCodeAssignOptInt32Var
			Int64Def implPgSqlLockTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implPgSqlLockTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implPgSqlLockTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implPgSqlLockTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implPgSqlLockTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implPgSqlLockTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implPgSqlLockTableDerivedClassCodeAssignOptInt64Var
			FloatDef implPgSqlLockTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implPgSqlLockTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implPgSqlLockTableDerivedClassCodeAssignOptNumberVar
			StringDef implPgSqlLockTableDerivedClassCodeAssignOptStringVar
			TokenDef implPgSqlLockTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implPgSqlLockTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implPgSqlLockTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implPgSqlLockTableDerivedClassCodeAssignOptTextVar
			DateDef implPgSqlLockTableDerivedClassCodeAssignOptDateVar
			TimeDef implPgSqlLockTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implPgSqlLockTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implPgSqlLockTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implPgSqlLockTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implPgSqlLockTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implPgSqlLockTableDerivedClassCodeAssignOptUuidVar
			UuidGen implPgSqlLockTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlLockTableDerivedClassCodeAssignReqBlobVar
			BoolDef implPgSqlLockTableDerivedClassCodeAssignReqBoolVar
			EnumDef implPgSqlLockTableDerivedClassCodeAssignReqEnumVar
			Int16Def implPgSqlLockTableDerivedClassCodeAssignReqInt16Var
			Int32Def implPgSqlLockTableDerivedClassCodeAssignReqInt32Var
			Int64Def implPgSqlLockTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implPgSqlLockTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implPgSqlLockTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implPgSqlLockTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implPgSqlLockTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implPgSqlLockTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implPgSqlLockTableDerivedClassCodeAssignReqInt64Var
			FloatDef implPgSqlLockTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implPgSqlLockTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implPgSqlLockTableDerivedClassCodeAssignReqNumberVar
			StringDef implPgSqlLockTableDerivedClassCodeAssignReqStringVar
			TokenDef implPgSqlLockTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implPgSqlLockTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implPgSqlLockTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implPgSqlLockTableDerivedClassCodeAssignReqTextVar
			DateDef implPgSqlLockTableDerivedClassCodeAssignReqDateVar
			TimeDef implPgSqlLockTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implPgSqlLockTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implPgSqlLockTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implPgSqlLockTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implPgSqlLockTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implPgSqlLockTableDerivedClassCodeAssignReqUuidVar
			UuidGen implPgSqlLockTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqBlobVar">
			stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqBoolVar">
			stmtLockDerivedClassCode.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqEnumVar">
			stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqInt16Var">
			stmtLockDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqInt32Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqInt64Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqUInt16Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqUInt32Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqUInt64Var">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqFloatVar">
			stmtLockDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqDoubleVar">
			stmtLockDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqNumberVar">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqStringVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqNmTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqNmTokensVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqTextVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqTZDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqTZTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignReqUuidVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implLockTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeReadAllBuff"
>		buffArray = readAllBuff( Authorization );
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadAllTableDerivedAssembleSubClasses default implReadAllTableDerivedInvokeReadAllBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClasses"
>		String classCode;
		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		ResultSet resultSet = null;
		try {$implReadAllTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		List&lt;$DefSchemaName$$TableName$Buff&gt; resultList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
		for( int classCodeIdx = 0; classCodeIdx &lt; classCodeList.size(); classCodeIdx ++ ) {
			$DefSchemaName$$TableName$Buff[] subList;
			classCode = classCodeList.get( classCodeIdx );
			if( classCode.equals( "$ClassCode$" ) ) {
				subList = readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
			for( int idxSubList = 0; idxSubList &lt; subList.length; idxSubList ++ ) {
				resultList.add( subList[ idxSubList ] );
			}
		}
		int idx = 0;
		buffArray = new $DefSchemaName$$TableName$Buff[ resultList.size() ];
		Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			buffArray[idx++] = iter.next();
		}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClassesTryBody">
			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc_all$( ?, ?, ?, ?, ? )";
			if( stmtReadAllClassCode == null ) {
				stmtReadAllClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmtReadAllClassCode.executeQuery();
			while( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				classCodeList.add( classCode );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadAllTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				subList = schema.getTable$TableName$().readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerived">
	public $DefSchemaName$$TableName$Buff[] readAllDerived( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllDerived";
		$DefSchemaName$$TableName$Buff[] buffArray;$implCheckOpenTransaction$
$switch HasClassCode no implReadAllTableDerivedInvokeReadAllBuff default implReadAllTableDerivedCheckForSubClasses$<!--
-->		return( buffArray );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByIndexes"
		>$switch HasSuperClassRelation yes implReadTableDerivedByInhIndexes default implReadTableDerivedByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableDerivedByIndexes$$iterate Index( each implReadTableDerivedByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByBaseIndexes"
		>$iterate Index( each implReadTableDerivedByIndex )$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableDerivedByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByIndex"
		>$switch IsUnique
			yes implReadTableDerivedByUniqueIndex
			default implReadTableDerivedByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByUniqueIndexAssembleSubClasses default implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex"
>		buff = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableDerivedByUniqueIndexAssembleReqSubClasses$
			if( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$poptop Table ClassCode$" ) ) {
			buff = readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexTopWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexOptDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexOptReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleOptSubClasses">
			String sql = getSqlSelect$poptop Table TableName$DistinctClassCode()
					+	"WHERE "
$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleReqSubClasses">
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadClassCodeBy$Suffix$ == null ) {
				stmtReadClassCodeBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implPgSqlReadDerivedClassCodeBySuffixBindVar )$
			resultSet = stmtReadClassCodeBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindVar"
		>$switch IsNullable yes implPgSqlReadDerivedClassCodeBySuffixBindOptVar
			default implPgSqlReadDerivedClassCodeBySuffixBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlReadDerivedClassCodeBySuffixBindOptBlobVar
			BoolDef implPgSqlReadDerivedClassCodeBySuffixBindOptBoolVar
			EnumDef implPgSqlReadDerivedClassCodeBySuffixBindOptEnumVar
			Int16Def implPgSqlReadDerivedClassCodeBySuffixBindOptInt16Var
			Int32Def implPgSqlReadDerivedClassCodeBySuffixBindOptInt32Var
			Int64Def implPgSqlReadDerivedClassCodeBySuffixBindOptInt64Var
			UInt16Def implPgSqlReadDerivedClassCodeBySuffixBindOptUInt16Var
			UInt32Def implPgSqlReadDerivedClassCodeBySuffixBindOptUInt32Var
			UInt64Def implPgSqlReadDerivedClassCodeBySuffixBindOptUInt64Var
			Id16Gen implPgSqlReadDerivedClassCodeBySuffixBindOptInt16Var
			Id32Gen implPgSqlReadDerivedClassCodeBySuffixBindOptInt32Var
			Id64Gen implPgSqlReadDerivedClassCodeBySuffixBindOptInt64Var
			FloatDef implPgSqlReadDerivedClassCodeBySuffixBindOptFloatVar
			DoubleDef implPgSqlReadDerivedClassCodeBySuffixBindOptDoubleVar
			NumberDef implPgSqlReadDerivedClassCodeBySuffixBindOptNumberVar
			StringDef implPgSqlReadDerivedClassCodeBySuffixBindOptStringVar
			TokenDef implPgSqlReadDerivedClassCodeBySuffixBindOptTokenVar
			NmTokenDef implPgSqlReadDerivedClassCodeBySuffixBindOptNmTokenVar
			NmTokensDef implPgSqlReadDerivedClassCodeBySuffixBindOptNmTokensVar
			TextDef implPgSqlReadDerivedClassCodeBySuffixBindOptTextVar
			DateDef implPgSqlReadDerivedClassCodeBySuffixBindOptDateVar
			TimeDef implPgSqlReadDerivedClassCodeBySuffixBindOptTimeVar
			TimestampDef implPgSqlReadDerivedClassCodeBySuffixBindOptTimestampVar
			TZDateDef implPgSqlReadDerivedClassCodeBySuffixBindOptTZDateVar
			TZTimeDef implPgSqlReadDerivedClassCodeBySuffixBindOptTZTimeVar
			TZTimestampDef implPgSqlReadDerivedClassCodeBySuffixBindOptTZTimestampVar
			UuidDef implPgSqlReadDerivedClassCodeBySuffixBindOptUuidVar
			UuidGen implPgSqlReadDerivedClassCodeBySuffixBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlReadDerivedClassCodeBySuffixBindReqBlobVar
			BoolDef implPgSqlReadDerivedClassCodeBySuffixBindReqBoolVar
			EnumDef implPgSqlReadDerivedClassCodeBySuffixBindReqEnumVar
			Int16Def implPgSqlReadDerivedClassCodeBySuffixBindReqInt16Var
			Int32Def implPgSqlReadDerivedClassCodeBySuffixBindReqInt32Var
			Int64Def implPgSqlReadDerivedClassCodeBySuffixBindReqInt64Var
			UInt16Def implPgSqlReadDerivedClassCodeBySuffixBindReqUInt16Var
			UInt32Def implPgSqlReadDerivedClassCodeBySuffixBindReqUInt32Var
			UInt64Def implPgSqlReadDerivedClassCodeBySuffixBindReqUInt64Var
			Id16Gen implPgSqlReadDerivedClassCodeBySuffixBindReqInt16Var
			Id32Gen implPgSqlReadDerivedClassCodeBySuffixBindReqInt32Var
			Id64Gen implPgSqlReadDerivedClassCodeBySuffixBindReqInt64Var
			FloatDef implPgSqlReadDerivedClassCodeBySuffixBindReqFloatVar
			DoubleDef implPgSqlReadDerivedClassCodeBySuffixBindReqDoubleVar
			NumberDef implPgSqlReadDerivedClassCodeBySuffixBindReqNumberVar
			StringDef implPgSqlReadDerivedClassCodeBySuffixBindReqStringVar
			TokenDef implPgSqlReadDerivedClassCodeBySuffixBindReqTokenVar
			NmTokenDef implPgSqlReadDerivedClassCodeBySuffixBindReqNmTokenVar
			NmTokensDef implPgSqlReadDerivedClassCodeBySuffixBindReqNmTokensVar
			TextDef implPgSqlReadDerivedClassCodeBySuffixBindReqTextVar
			DateDef implPgSqlReadDerivedClassCodeBySuffixBindReqDateVar
			TimeDef implPgSqlReadDerivedClassCodeBySuffixBindReqTimeVar
			TimestampDef implPgSqlReadDerivedClassCodeBySuffixBindReqTimestampVar
			TZDateDef implPgSqlReadDerivedClassCodeBySuffixBindReqTZDateVar
			TZTimeDef implPgSqlReadDerivedClassCodeBySuffixBindReqTZTimeVar
			TZTimestampDef implPgSqlReadDerivedClassCodeBySuffixBindReqTZTimestampVar
			UuidDef implPgSqlReadDerivedClassCodeBySuffixBindReqUuidVar
			UuidGen implPgSqlReadDerivedClassCodeBySuffixBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqBlobVar">
			stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptBlobVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqBoolVar">
			stmtReadClassCodeBy$Suffix$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptBoolVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqEnumVar">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptEnumVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqInt16Var">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqInt32Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqInt64Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqUInt16Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqUInt32Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqUInt64Var">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqFloatVar">
			stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptFloatVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqDoubleVar">
			stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqNumberVar">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptNumberVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqStringVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptStringVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqNmTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqNmTokensVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqTextVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptTextVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqTZDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqTZTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqTZTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindReqUuidVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadDerivedClassCodeBySuffixBindOptUuidVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedPassArg">,
				$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasClassCode"
		>$poptop Table HasClassCode$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "$SchemaName$PgSql$poptop Table TableName$Table.readDerivedBy$Suffix$() ";
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByUniqueIndexInvokeReadBuff default implReadTableDerivedByUniqueIndexCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuff"
>		buff = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuff"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByDuplicateIndexAssembleSubClasses default implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleSubClasses"
>		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		String classCode;
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableDerivedByDuplicateIndexAssembleReqSubClasses$
			while( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				classCodeList.add( classCode );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}$implReadTableDerivedByDuplicateIndexAssembleSubClassesBuildList$
		int idx = 0;
		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ resultList.size() ];
		Iterator&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			retBuff[idx++] = iter.next();
		}
		return( retBuff );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleSubClassesBuildList">
		List&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt; resultList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt;();
		ListIterator&lt;String&gt; classCodeIter = classCodeList.listIterator();
		while( classCodeIter.hasNext() ) {
			classCode = classCodeIter.next();
			if( classCode.equals( "$poptop Table ClassCode$" ) ) {
				$poptop Table DefSchemaName$$poptop Table Name$Buff[] subList
					= readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexTopWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
		}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexOptDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexOptReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleOptSubClasses">
			String sql = getSqlSelect$poptop Table TableName$DistinctClassCode()
					+	"WHERE "
$popto Index iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleReqSubClasses">
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadClassCodeBy$Suffix$ == null ) {
				stmtReadClassCodeBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implPgSqlReadDerivedClassCodeBySuffixBindVar )$
			resultSet = stmtReadClassCodeBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedSubListPassArg">,
						$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				$DefSchemaName$$TableName$Buff[] subList
					= schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readDerivedBy$Suffix$";$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByDuplicateIndexInvokeReadBuff default implReadTableDerivedByDuplicateIndexCheckForSubClasses$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff readBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implReadTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlLocalizeTableKeys empty empty )$<!--
-->			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadBuffByPKey == null ) {
				stmtReadBuffByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlReadByPKeyTableAssignVar )$
			resultSet = stmtReadBuffByPKey.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlReadByPKeyBindSecClusterId">
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlReadByPKeyBindSecTenantId">
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignVar"
		>$switch IsNullable yes implPgSqlReadByPKeyTableAssignOptVar
			default implPgSqlReadByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlReadByPKeyTableAssignOptBlobVar
			BoolDef implPgSqlReadByPKeyTableAssignOptBoolVar
			EnumDef implPgSqlReadByPKeyTableAssignOptEnumVar
			Int16Def implPgSqlReadByPKeyTableAssignOptInt16Var
			Int32Def implPgSqlReadByPKeyTableAssignOptInt32Var
			Int64Def implPgSqlReadByPKeyTableAssignOptInt64Var
			UInt16Def implPgSqlReadByPKeyTableAssignOptUInt16Var
			UInt32Def implPgSqlReadByPKeyTableAssignOptUInt32Var
			UInt64Def implPgSqlReadByPKeyTableAssignOptUInt64Var
			Id16Gen implPgSqlReadByPKeyTableAssignOptInt16Var
			Id32Gen implPgSqlReadByPKeyTableAssignOptInt32Var
			Id64Gen implPgSqlReadByPKeyTableAssignOptInt64Var
			FloatDef implPgSqlReadByPKeyTableAssignOptFloatVar
			DoubleDef implPgSqlReadByPKeyTableAssignOptDoubleVar
			NumberDef implPgSqlReadByPKeyTableAssignOptNumberVar
			StringDef implPgSqlReadByPKeyTableAssignOptStringVar
			TokenDef implPgSqlReadByPKeyTableAssignOptTokenVar
			NmTokenDef implPgSqlReadByPKeyTableAssignOptNmTokenVar
			NmTokensDef implPgSqlReadByPKeyTableAssignOptNmTokensVar
			TextDef implPgSqlReadByPKeyTableAssignOptTextVar
			DateDef implPgSqlReadByPKeyTableAssignOptDateVar
			TimeDef implPgSqlReadByPKeyTableAssignOptTimeVar
			TimestampDef implPgSqlReadByPKeyTableAssignOptTimestampVar
			TZDateDef implPgSqlReadByPKeyTableAssignOptTZDateVar
			TZTimeDef implPgSqlReadByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implPgSqlReadByPKeyTableAssignOptTZTimestampVar
			UuidDef implPgSqlReadByPKeyTableAssignOptUuidVar
			UuidGen implPgSqlReadByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlReadByPKeyTableAssignReqBlobVar
			BoolDef implPgSqlReadByPKeyTableAssignReqBoolVar
			EnumDef implPgSqlReadByPKeyTableAssignReqEnumVar
			Int16Def implPgSqlReadByPKeyTableAssignReqInt16Var
			Int32Def implPgSqlReadByPKeyTableAssignReqInt32Var
			Int64Def implPgSqlReadByPKeyTableAssignReqInt64Var
			UInt16Def implPgSqlReadByPKeyTableAssignReqUInt16Var
			UInt32Def implPgSqlReadByPKeyTableAssignReqUInt32Var
			UInt64Def implPgSqlReadByPKeyTableAssignReqUInt64Var
			Id16Gen implPgSqlReadByPKeyTableAssignReqInt16Var
			Id32Gen implPgSqlReadByPKeyTableAssignReqInt32Var
			Id64Gen implPgSqlReadByPKeyTableAssignReqInt64Var
			FloatDef implPgSqlReadByPKeyTableAssignReqFloatVar
			DoubleDef implPgSqlReadByPKeyTableAssignReqDoubleVar
			NumberDef implPgSqlReadByPKeyTableAssignReqNumberVar
			StringDef implPgSqlReadByPKeyTableAssignReqStringVar
			TokenDef implPgSqlReadByPKeyTableAssignReqTokenVar
			NmTokenDef implPgSqlReadByPKeyTableAssignReqNmTokenVar
			NmTokensDef implPgSqlReadByPKeyTableAssignReqNmTokensVar
			TextDef implPgSqlReadByPKeyTableAssignReqTextVar
			DateDef implPgSqlReadByPKeyTableAssignReqDateVar
			TimeDef implPgSqlReadByPKeyTableAssignReqTimeVar
			TimestampDef implPgSqlReadByPKeyTableAssignReqTimestampVar
			TZDateDef implPgSqlReadByPKeyTableAssignReqTZDateVar
			TZTimeDef implPgSqlReadByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implPgSqlReadByPKeyTableAssignReqTZTimestampVar
			UuidDef implPgSqlReadByPKeyTableAssignReqUuidVar
			UuidGen implPgSqlReadByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqBlobVar">
			stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqBoolVar">
			stmtReadBuffByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqEnumVar">
			stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqInt16Var">
			stmtReadBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqInt32Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqInt64Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqUInt16Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqUInt32Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqUInt64Var">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqFloatVar">
			stmtReadBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqDoubleVar">
			stmtReadBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqNumberVar">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqStringVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqNmTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqNmTokensVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqTextVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqTZDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqTZTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqTZTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignReqUuidVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadByPKeyTableAssignClassCode">
			stmtReadBuffByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff lockBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implLockTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlLocalizeTableKeys empty empty )$<!--
-->			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_lock_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtLockBuffByPKey == null ) {
				stmtLockBuffByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlLockByPKeyTableAssignVar )$
			resultSet = stmtLockBuffByPKey.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlLockByPKeyBindSecClusterId">
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlLockByPKeyBindSecTenantId">
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignVar"
		>$switch IsNullable yes implPgSqlLockByPKeyTableAssignOptVar
			default implPgSqlLockByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlLockByPKeyTableAssignOptBlobVar
			BoolDef implPgSqlLockByPKeyTableAssignOptBoolVar
			EnumDef implPgSqlLockByPKeyTableAssignOptEnumVar
			Int16Def implPgSqlLockByPKeyTableAssignOptInt16Var
			Int32Def implPgSqlLockByPKeyTableAssignOptInt32Var
			Int64Def implPgSqlLockByPKeyTableAssignOptInt64Var
			UInt16Def implPgSqlLockByPKeyTableAssignOptUInt16Var
			UInt32Def implPgSqlLockByPKeyTableAssignOptUInt32Var
			UInt64Def implPgSqlLockByPKeyTableAssignOptUInt64Var
			Id16Gen implPgSqlLockByPKeyTableAssignOptInt16Var
			Id32Gen implPgSqlLockByPKeyTableAssignOptInt32Var
			Id64Gen implPgSqlLockByPKeyTableAssignOptInt64Var
			FloatDef implPgSqlLockByPKeyTableAssignOptFloatVar
			DoubleDef implPgSqlLockByPKeyTableAssignOptDoubleVar
			NumberDef implPgSqlLockByPKeyTableAssignOptNumberVar
			StringDef implPgSqlLockByPKeyTableAssignOptStringVar
			TokenDef implPgSqlLockByPKeyTableAssignOptTokenVar
			NmTokenDef implPgSqlLockByPKeyTableAssignOptNmTokenVar
			NmTokensDef implPgSqlLockByPKeyTableAssignOptNmTokensVar
			TextDef implPgSqlLockByPKeyTableAssignOptTextVar
			DateDef implPgSqlLockByPKeyTableAssignOptDateVar
			TimeDef implPgSqlLockByPKeyTableAssignOptTimeVar
			TimestampDef implPgSqlLockByPKeyTableAssignOptTimestampVar
			TZDateDef implPgSqlLockByPKeyTableAssignOptTZDateVar
			TZTimeDef implPgSqlLockByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implPgSqlLockByPKeyTableAssignOptTZTimestampVar
			UuidDef implPgSqlLockByPKeyTableAssignOptUuidVar
			UuidGen implPgSqlLockByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlLockByPKeyTableAssignReqBlobVar
			BoolDef implPgSqlLockByPKeyTableAssignReqBoolVar
			EnumDef implPgSqlLockByPKeyTableAssignReqEnumVar
			Int16Def implPgSqlLockByPKeyTableAssignReqInt16Var
			Int32Def implPgSqlLockByPKeyTableAssignReqInt32Var
			Int64Def implPgSqlLockByPKeyTableAssignReqInt64Var
			UInt16Def implPgSqlLockByPKeyTableAssignReqUInt16Var
			UInt32Def implPgSqlLockByPKeyTableAssignReqUInt32Var
			UInt64Def implPgSqlLockByPKeyTableAssignReqUInt64Var
			Id16Gen implPgSqlLockByPKeyTableAssignReqInt16Var
			Id32Gen implPgSqlLockByPKeyTableAssignReqInt32Var
			Id64Gen implPgSqlLockByPKeyTableAssignReqInt64Var
			FloatDef implPgSqlLockByPKeyTableAssignReqFloatVar
			DoubleDef implPgSqlLockByPKeyTableAssignReqDoubleVar
			NumberDef implPgSqlLockByPKeyTableAssignReqNumberVar
			StringDef implPgSqlLockByPKeyTableAssignReqStringVar
			TokenDef implPgSqlLockByPKeyTableAssignReqTokenVar
			NmTokenDef implPgSqlLockByPKeyTableAssignReqNmTokenVar
			NmTokensDef implPgSqlLockByPKeyTableAssignReqNmTokensVar
			TextDef implPgSqlLockByPKeyTableAssignReqTextVar
			DateDef implPgSqlLockByPKeyTableAssignReqDateVar
			TimeDef implPgSqlLockByPKeyTableAssignReqTimeVar
			TimestampDef implPgSqlLockByPKeyTableAssignReqTimestampVar
			TZDateDef implPgSqlLockByPKeyTableAssignReqTZDateVar
			TZTimeDef implPgSqlLockByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implPgSqlLockByPKeyTableAssignReqTZTimestampVar
			UuidDef implPgSqlLockByPKeyTableAssignReqUuidVar
			UuidGen implPgSqlLockByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqBlobVar">
			stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqBoolVar">
			stmtLockBuffByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqEnumVar">
			stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqInt16Var">
			stmtLockBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqInt32Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqInt64Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqUInt16Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqUInt32Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqUInt64Var">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqFloatVar">
			stmtLockBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqDoubleVar">
			stmtLockBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqNumberVar">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqStringVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqNmTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqNmTokensVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqTextVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqTZDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqTZTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqTZTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignReqUuidVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlLockByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffWhereClassCode">
					+	"WHERE "
					+		"$lower reference BaseClass ClassCode$.ClassCode = '$ClassCode$' "</GenRule>

	<GenRule GenDef="Object" Name="implBuffIndexColumnOrderBy">
					+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implBuffIndexColumnCommaOrderBy"
		>$implBuffIndexColumnOrderBy$ + ", "</GenRule>


	<GenRule GenDef="Table" Name="implReadTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implReadTableBuffByInhIndexes default implReadTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableBuffByIndexes$$iterate Index( each implReadTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByBaseIndexes"
		>$iterate Index( each implReadTableBuffByIndex )$</GenRule>


	<GenRule GenDef="Table" Name="implReadAllTableBuff">
	public $DefSchemaName$$TableName$Buff[] readAllBuff( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_all$( ?, ?, ?, ?, ? )";
			if( stmtReadAllBuff == null ) {
				stmtReadAllBuff = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmtReadAllBuff.executeQuery();
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			while( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlReadAllBindSecClusterId">
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlReadAllBindSecTenantId">
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByIndex"
		>$switch IsUnique
			yes implReadTableBuffByUniqueIndex
			default implReadTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByIndex"
		>$implPageTableBuffByNonPrimaryIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default ifunique_implPageTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="ifpagedata_implPageTableBuffByDuplicateIndex"
		>$switch PageData yes ifunique_implPageTableBuffByDuplicateIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="ifunique_implPageTableBuffByDuplicateIndex"
		>$switch IsUnique yes empty default implPageTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableBuffByReqUniqueIndex$
			if( resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}
				return( buff );
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndex">$switch SecScope None empty System empty Cluster implReadTableCheckCluster Tenant implReadTableCheckTenant default error$
			String sql = getSqlSelect$poptop Table TableName$Buff()
						+	"WHERE "
$iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$implPgSqlWhereFragRestrictClassCode$;$switch SecScope None empty System empty Cluster implReadTableOptBuffCheckCluster Tenant implReadTableOptBuffCheckTenant default error$
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableCheckCluster">
			if( ! schema.isClusterUser( Authorization,
					Authorization.getSecClusterId(),
					"Read$poptop Table Name$" ) )
			{
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Permission denied -- User not part of SecGroup Read$poptop Table Name$" );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableCheckTenant">
			if( ! schema.isTenantUser( Authorization,
					Authorization.getSecTenantId(),
					"Read$poptop Table Name$" ) )
			{
					throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Permission denied -- User not part of TSecGroup Read$poptop Table Name$" );
			}</GenRule>

	<GenRule GenDef="Object" Name="BaseHasSubClasses"
		>$poptop Table reference BaseClass HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlWhereFragRestrictClassCode"
		>$switch BaseHasSubClasses yes implPgSqlWhereFragDoRestrict default empty$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlWhereFragDoRestrict">
					+		"AND "
					+			"$lower poptop Table reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'"</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqUniqueIndex">
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadBuffBy$Suffix$ == null ) {
				stmtReadBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implPgSqlReadBuffBySuffixAssignVar )$
			resultSet = stmtReadBuffBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Index" Name="SecScope">$poptop Table SecScope$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlReadBuffBySuffixBindSecClusterId">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlReadBuffBySuffixBindSecTenantId">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignVar"
		>$switch IsNullable yes implPgSqlReadBuffBySuffixAssignOptVar
			default implPgSqlReadBuffBySuffixAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlReadBuffBySuffixAssignOptBlobVar
			BoolDef implPgSqlReadBuffBySuffixAssignOptBoolVar
			EnumDef implPgSqlReadBuffBySuffixAssignOptEnumVar
			Int16Def implPgSqlReadBuffBySuffixAssignOptInt16Var
			Int32Def implPgSqlReadBuffBySuffixAssignOptInt32Var
			Int64Def implPgSqlReadBuffBySuffixAssignOptInt64Var
			UInt16Def implPgSqlReadBuffBySuffixAssignOptUInt16Var
			UInt32Def implPgSqlReadBuffBySuffixAssignOptUInt32Var
			UInt64Def implPgSqlReadBuffBySuffixAssignOptUInt64Var
			Id16Gen implPgSqlReadBuffBySuffixAssignOptInt16Var
			Id32Gen implPgSqlReadBuffBySuffixAssignOptInt32Var
			Id64Gen implPgSqlReadBuffBySuffixAssignOptInt64Var
			FloatDef implPgSqlReadBuffBySuffixAssignOptFloatVar
			DoubleDef implPgSqlReadBuffBySuffixAssignOptDoubleVar
			NumberDef implPgSqlReadBuffBySuffixAssignOptNumberVar
			StringDef implPgSqlReadBuffBySuffixAssignOptStringVar
			TokenDef implPgSqlReadBuffBySuffixAssignOptTokenVar
			NmTokenDef implPgSqlReadBuffBySuffixAssignOptNmTokenVar
			NmTokensDef implPgSqlReadBuffBySuffixAssignOptNmTokensVar
			TextDef implPgSqlReadBuffBySuffixAssignOptTextVar
			DateDef implPgSqlReadBuffBySuffixAssignOptDateVar
			TimeDef implPgSqlReadBuffBySuffixAssignOptTimeVar
			TimestampDef implPgSqlReadBuffBySuffixAssignOptTimestampVar
			TZDateDef implPgSqlReadBuffBySuffixAssignOptTZDateVar
			TZTimeDef implPgSqlReadBuffBySuffixAssignOptTZTimeVar
			TZTimestampDef implPgSqlReadBuffBySuffixAssignOptTZTimestampVar
			UuidDef implPgSqlReadBuffBySuffixAssignOptUuidVar
			UuidGen implPgSqlReadBuffBySuffixAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlReadBuffBySuffixAssignReqBlobVar
			BoolDef implPgSqlReadBuffBySuffixAssignReqBoolVar
			EnumDef implPgSqlReadBuffBySuffixAssignReqEnumVar
			Int16Def implPgSqlReadBuffBySuffixAssignReqInt16Var
			Int32Def implPgSqlReadBuffBySuffixAssignReqInt32Var
			Int64Def implPgSqlReadBuffBySuffixAssignReqInt64Var
			UInt16Def implPgSqlReadBuffBySuffixAssignReqUInt16Var
			UInt32Def implPgSqlReadBuffBySuffixAssignReqUInt32Var
			UInt64Def implPgSqlReadBuffBySuffixAssignReqUInt64Var
			Id16Gen implPgSqlReadBuffBySuffixAssignReqInt16Var
			Id32Gen implPgSqlReadBuffBySuffixAssignReqInt32Var
			Id64Gen implPgSqlReadBuffBySuffixAssignReqInt64Var
			FloatDef implPgSqlReadBuffBySuffixAssignReqFloatVar
			DoubleDef implPgSqlReadBuffBySuffixAssignReqDoubleVar
			NumberDef implPgSqlReadBuffBySuffixAssignReqNumberVar
			StringDef implPgSqlReadBuffBySuffixAssignReqStringVar
			TokenDef implPgSqlReadBuffBySuffixAssignReqTokenVar
			NmTokenDef implPgSqlReadBuffBySuffixAssignReqNmTokenVar
			NmTokensDef implPgSqlReadBuffBySuffixAssignReqNmTokensVar
			TextDef implPgSqlReadBuffBySuffixAssignReqTextVar
			DateDef implPgSqlReadBuffBySuffixAssignReqDateVar
			TimeDef implPgSqlReadBuffBySuffixAssignReqTimeVar
			TimestampDef implPgSqlReadBuffBySuffixAssignReqTimestampVar
			TZDateDef implPgSqlReadBuffBySuffixAssignReqTZDateVar
			TZTimeDef implPgSqlReadBuffBySuffixAssignReqTZTimeVar
			TZTimestampDef implPgSqlReadBuffBySuffixAssignReqTZTimestampVar
			UuidDef implPgSqlReadBuffBySuffixAssignReqUuidVar
			UuidGen implPgSqlReadBuffBySuffixAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqBlobVar">
			stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqBoolVar">
			stmtReadBuffBy$Suffix$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqEnumVar">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqInt16Var">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqInt32Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqInt64Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqUInt16Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqUInt32Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqUInt64Var">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqFloatVar">
			stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqDoubleVar">
			stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqNumberVar">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqStringVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqNmTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqNmTokensVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqTextVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqTZDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqTZTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqTZTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignReqUuidVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlReadBuffBySuffixAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableBuffByReqDuplicateIndex$
			List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
			while( resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndex">$switch SecScope None empty System empty Cluster implReadTableCheckCluster Tenant implReadTableCheckTenant default error$
			String sql =
						getSqlSelect$poptop Table TableName$Buff()
					+	"WHERE "
$popto Index iterate Columns( first implPgSqlIndexColumnWhereFragBindVar each implPgSqlIndexColumnWhereAndFragBindVar )$$implPgSqlWhereFragRestrictClassCode$;$switch SecScope None empty System empty Cluster implReadTableOptBuffCheckCluster Tenant implReadTableOptBuffCheckTenant default error$
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableOptBuffCheckCluster">
			if( ! schema.isSystemUser( Authorization ) ) {
				sql = sql + " AND $lower reference Table reference ClusterIdColumn reference Table ClassCode$.$reference Table reference ClusterIdColumn DbColumnName$ = " + Authorization.getSecClusterId();
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableOptBuffCheckTenant">
			if( ! schema.isSystemUser( Authorization ) ) {
				sql = sql + " AND $lower reference Table reference TenantIdColumn reference Table ClassCode$.$reference Table reference TenantIdColumn DbColumnName$ = " + Authorization.getSecTenantId();
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqDuplicateIndex">
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadBuffBy$Suffix$ == null ) {
				stmtReadBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implPgSqlReadBuffBySuffixAssignVar )$
			resultSet = stmtReadBuffBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByReqDuplicateIndex">
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_page_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " )";
			if( stmtPageBuffBy$Suffix$ == null ) {
				stmtPageBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtPageBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implPgSqlPageBuffBySuffixTableAssignVar )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlPageBuffBySuffixTableAssignOptPriorColumn )$
			resultSet = stmtPageBuffBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignVar"
		>$switch IsNullable yes implPgSqlPageBuffBySuffixTableAssignOptVar
			default implPgSqlPageBuffBySuffixTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlPageBuffBySuffixTableAssignOptBlobVar
			BoolDef implPgSqlPageBuffBySuffixTableAssignOptBoolVar
			EnumDef implPgSqlPageBuffBySuffixTableAssignOptEnumVar
			Int16Def implPgSqlPageBuffBySuffixTableAssignOptInt16Var
			Int32Def implPgSqlPageBuffBySuffixTableAssignOptInt32Var
			Int64Def implPgSqlPageBuffBySuffixTableAssignOptInt64Var
			UInt16Def implPgSqlPageBuffBySuffixTableAssignOptUInt16Var
			UInt32Def implPgSqlPageBuffBySuffixTableAssignOptUInt32Var
			UInt64Def implPgSqlPageBuffBySuffixTableAssignOptUInt64Var
			Id16Gen implPgSqlPageBuffBySuffixTableAssignOptInt16Var
			Id32Gen implPgSqlPageBuffBySuffixTableAssignOptInt32Var
			Id64Gen implPgSqlPageBuffBySuffixTableAssignOptInt64Var
			FloatDef implPgSqlPageBuffBySuffixTableAssignOptFloatVar
			DoubleDef implPgSqlPageBuffBySuffixTableAssignOptDoubleVar
			NumberDef implPgSqlPageBuffBySuffixTableAssignOptNumberVar
			StringDef implPgSqlPageBuffBySuffixTableAssignOptStringVar
			TokenDef implPgSqlPageBuffBySuffixTableAssignOptTokenVar
			NmTokenDef implPgSqlPageBuffBySuffixTableAssignOptNmTokenVar
			NmTokensDef implPgSqlPageBuffBySuffixTableAssignOptNmTokensVar
			TextDef implPgSqlPageBuffBySuffixTableAssignOptTextVar
			DateDef implPgSqlPageBuffBySuffixTableAssignOptDateVar
			TimeDef implPgSqlPageBuffBySuffixTableAssignOptTimeVar
			TimestampDef implPgSqlPageBuffBySuffixTableAssignOptTimestampVar
			TZDateDef implPgSqlPageBuffBySuffixTableAssignOptTZDateVar
			TZTimeDef implPgSqlPageBuffBySuffixTableAssignOptTZTimeVar
			TZTimestampDef implPgSqlPageBuffBySuffixTableAssignOptTZTimestampVar
			UuidDef implPgSqlPageBuffBySuffixTableAssignOptUuidVar
			UuidGen implPgSqlPageBuffBySuffixTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlPageBuffBySuffixTableAssignReqBlobVar
			BoolDef implPgSqlPageBuffBySuffixTableAssignReqBoolVar
			EnumDef implPgSqlPageBuffBySuffixTableAssignReqEnumVar
			Int16Def implPgSqlPageBuffBySuffixTableAssignReqInt16Var
			Int32Def implPgSqlPageBuffBySuffixTableAssignReqInt32Var
			Int64Def implPgSqlPageBuffBySuffixTableAssignReqInt64Var
			UInt16Def implPgSqlPageBuffBySuffixTableAssignReqUInt16Var
			UInt32Def implPgSqlPageBuffBySuffixTableAssignReqUInt32Var
			UInt64Def implPgSqlPageBuffBySuffixTableAssignReqUInt64Var
			Id16Gen implPgSqlPageBuffBySuffixTableAssignReqInt16Var
			Id32Gen implPgSqlPageBuffBySuffixTableAssignReqInt32Var
			Id64Gen implPgSqlPageBuffBySuffixTableAssignReqInt64Var
			FloatDef implPgSqlPageBuffBySuffixTableAssignReqFloatVar
			DoubleDef implPgSqlPageBuffBySuffixTableAssignReqDoubleVar
			NumberDef implPgSqlPageBuffBySuffixTableAssignReqNumberVar
			StringDef implPgSqlPageBuffBySuffixTableAssignReqStringVar
			TokenDef implPgSqlPageBuffBySuffixTableAssignReqTokenVar
			NmTokenDef implPgSqlPageBuffBySuffixTableAssignReqNmTokenVar
			NmTokensDef implPgSqlPageBuffBySuffixTableAssignReqNmTokensVar
			TextDef implPgSqlPageBuffBySuffixTableAssignReqTextVar
			DateDef implPgSqlPageBuffBySuffixTableAssignReqDateVar
			TimeDef implPgSqlPageBuffBySuffixTableAssignReqTimeVar
			TimestampDef implPgSqlPageBuffBySuffixTableAssignReqTimestampVar
			TZDateDef implPgSqlPageBuffBySuffixTableAssignReqTZDateVar
			TZTimeDef implPgSqlPageBuffBySuffixTableAssignReqTZTimeVar
			TZTimestampDef implPgSqlPageBuffBySuffixTableAssignReqTZTimestampVar
			UuidDef implPgSqlPageBuffBySuffixTableAssignReqUuidVar
			UuidGen implPgSqlPageBuffBySuffixTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqBlobVar">
			stmtPageBuffBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqBoolVar">
			stmtPageBuffBy$Suffix$.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptBoolVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqEnumVar">
			stmtPageBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqInt16Var">
			stmtPageBuffBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqInt32Var">
			stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqInt64Var">
			stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqUInt16Var">
			stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqUInt32Var">
			stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqUInt64Var">
			stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqFloatVar">
			stmtPageBuffBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqDoubleVar">
			stmtPageBuffBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqNumberVar">
			stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqStringVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqTokenVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqNmTokenVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqNmTokensVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqTextVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqDateVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqTimeVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqTimestampVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqTZDateVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqTZTimeVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqTZTimestampVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignReqUuidVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignClassCode">
			stmtPageBuffBy$Suffix$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptPriorColumn"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlPageBuffBySuffixTableAssignOptBlobPriorColumn
			BoolDef implPgSqlPageBuffBySuffixTableAssignOptBoolPriorColumn
			EnumDef implPgSqlPageBuffBySuffixTableAssignOptEnumPriorColumn
			Int16Def implPgSqlPageBuffBySuffixTableAssignOptInt16PriorColumn
			Int32Def implPgSqlPageBuffBySuffixTableAssignOptInt32PriorColumn
			Int64Def implPgSqlPageBuffBySuffixTableAssignOptInt64PriorColumn
			UInt16Def implPgSqlPageBuffBySuffixTableAssignOptUInt16PriorColumn
			UInt32Def implPgSqlPageBuffBySuffixTableAssignOptUInt32PriorColumn
			UInt64Def implPgSqlPageBuffBySuffixTableAssignOptUInt64PriorColumn
			Id16Gen implPgSqlPageBuffBySuffixTableAssignOptInt16PriorColumn
			Id32Gen implPgSqlPageBuffBySuffixTableAssignOptInt32PriorColumn
			Id64Gen implPgSqlPageBuffBySuffixTableAssignOptInt64PriorColumn
			FloatDef implPgSqlPageBuffBySuffixTableAssignOptFloatPriorColumn
			DoubleDef implPgSqlPageBuffBySuffixTableAssignOptDoublePriorColumn
			NumberDef implPgSqlPageBuffBySuffixTableAssignOptNumberPriorColumn
			StringDef implPgSqlPageBuffBySuffixTableAssignOptStringPriorColumn
			TokenDef implPgSqlPageBuffBySuffixTableAssignOptTokenPriorColumn
			NmTokenDef implPgSqlPageBuffBySuffixTableAssignOptNmTokenPriorColumn
			NmTokensDef implPgSqlPageBuffBySuffixTableAssignOptNmTokensPriorColumn
			TextDef implPgSqlPageBuffBySuffixTableAssignOptTextPriorColumn
			DateDef implPgSqlPageBuffBySuffixTableAssignOptDatePriorColumn
			TimeDef implPgSqlPageBuffBySuffixTableAssignOptTimePriorColumn
			TimestampDef implPgSqlPageBuffBySuffixTableAssignOptTimestampPriorColumn
			TZDateDef implPgSqlPageBuffBySuffixTableAssignOptTZDatePriorColumn
			TZTimeDef implPgSqlPageBuffBySuffixTableAssignOptTZTimePriorColumn
			TZTimestampDef implPgSqlPageBuffBySuffixTableAssignOptTZTimestampPriorColumn
			UuidDef implPgSqlPageBuffBySuffixTableAssignOptUuidPriorColumn
			UuidGen implPgSqlPageBuffBySuffixTableAssignOptUuidPriorColumn
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptBlobPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBytes( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptBoolPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBoolean( argIdx++, prior$Name$.booleanValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptEnumPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setShort( argIdx++, (short)prior$Name$.ordinal() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptInt16PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setShort( argIdx++, prior$Name$.shortValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptInt32PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptInt64PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptUInt16PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptUInt32PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptUInt64PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptFloatPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setFloat( argIdx++, prior$Name$.floatValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptDoublePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setDouble( argIdx++, prior$Name$.doubleValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptNumberPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptStringPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTokenPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptNmTokenPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptNmTokensPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTextPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptDatePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTimePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTimestampPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTZDatePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTZTimePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptTZTimestampPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlPageBuffBySuffixTableAssignOptUuidPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$.toString() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableByIndex"
		>$switch IsUnique
			yes implReadTableByUniqueIndex
			default implReadTableByDuplicateIndex$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlIndexColumnWhereAndFragBindVar">
				+	"AND "
$implPgSqlIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implPgSqlIndexColumnWhereFragBindOptVar
			default implPgSqlIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlIndexColumnWhereFragBindOptBlobVar
			BoolDef implPgSqlIndexColumnWhereFragBindOptBoolVar
			EnumDef implPgSqlIndexColumnWhereFragBindOptEnumVar
			Int16Def implPgSqlIndexColumnWhereFragBindOptInt16Var
			Int32Def implPgSqlIndexColumnWhereFragBindOptInt32Var
			Int64Def implPgSqlIndexColumnWhereFragBindOptInt64Var
			UInt16Def implPgSqlIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implPgSqlIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implPgSqlIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implPgSqlIndexColumnWhereFragBindOptInt16Var
			Id32Gen implPgSqlIndexColumnWhereFragBindOptInt32Var
			Id64Gen implPgSqlIndexColumnWhereFragBindOptInt64Var
			FloatDef implPgSqlIndexColumnWhereFragBindOptFloatVar
			DoubleDef implPgSqlIndexColumnWhereFragBindOptDoubleVar
			NumberDef implPgSqlIndexColumnWhereFragBindOptNumberVar
			StringDef implPgSqlIndexColumnWhereFragBindOptStringVar
			TokenDef implPgSqlIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implPgSqlIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implPgSqlIndexColumnWhereFragBindOptNmTokensVar
			TextDef implPgSqlIndexColumnWhereFragBindOptTextVar
			DateDef implPgSqlIndexColumnWhereFragBindOptDateVar
			TimeDef implPgSqlIndexColumnWhereFragBindOptTimeVar
			TimestampDef implPgSqlIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implPgSqlIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implPgSqlIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implPgSqlIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implPgSqlIndexColumnWhereFragBindOptUuidVar
			UuidGen implPgSqlIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlIndexColumnWhereFragBindReqBlobVar
			BoolDef implPgSqlIndexColumnWhereFragBindReqBoolVar
			EnumDef implPgSqlIndexColumnWhereFragBindReqEnumVar
			Int16Def implPgSqlIndexColumnWhereFragBindReqInt16Var
			Int32Def implPgSqlIndexColumnWhereFragBindReqInt32Var
			Int64Def implPgSqlIndexColumnWhereFragBindReqInt64Var
			UInt16Def implPgSqlIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implPgSqlIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implPgSqlIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implPgSqlIndexColumnWhereFragBindReqInt16Var
			Id32Gen implPgSqlIndexColumnWhereFragBindReqInt32Var
			Id64Gen implPgSqlIndexColumnWhereFragBindReqInt64Var
			FloatDef implPgSqlIndexColumnWhereFragBindReqFloatVar
			DoubleDef implPgSqlIndexColumnWhereFragBindReqDoubleVar
			NumberDef implPgSqlIndexColumnWhereFragBindReqNumberVar
			StringDef implPgSqlIndexColumnWhereFragBindReqStringVar
			TokenDef implPgSqlIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implPgSqlIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implPgSqlIndexColumnWhereFragBindReqNmTokensVar
			TextDef implPgSqlIndexColumnWhereFragBindReqTextVar
			DateDef implPgSqlIndexColumnWhereFragBindReqDateVar
			TimeDef implPgSqlIndexColumnWhereFragBindReqTimeVar
			TimestampDef implPgSqlIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implPgSqlIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implPgSqlIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implPgSqlIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implPgSqlIndexColumnWhereFragBindReqUuidVar
			UuidGen implPgSqlIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqBlobVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getBlobString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptBlobVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
								: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getBlobString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqBoolVar"
>				+		( $Name$ ? "$lower ClassCode$.$DbColumnName$ = true " : "$lower ClassCode$.$DbColumnName$ = false " )
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptBoolVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null " :
									( $Name$ ? "true, " : "false, " ) )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqEnumVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptEnumVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqInt16Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqInt32Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqInt64Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqUInt16Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptUInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqUInt32Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptUInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqUInt64Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptUInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqFloatVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptFloatVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqDoubleVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptDoubleVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqNumberVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptNumberVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqStringVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptStringVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqTokenVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqNmTokenVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptNmTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqNmTokensVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptNmTokensVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqTextVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptTextVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqDateVar"
>				+		"to_timestamp( " + $SchemaName$PgSqlSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqTimeVar"
>				+		"to_timestamp( " + $SchemaName$PgSqlSchema.getTimeString( $Name$ ) + ", 'HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getTimeString( $Name$ ) + ", 'HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqTimestampVar"
>				+		"to_timestamp( " + $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqTZDateVar"
>				+		"to_timestamp( " + $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptTZDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqTZTimeVar"
>				+		"to_timestamp( " + $SchemaName$PgSqlSchema.getTimeString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptTZTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqTZTimestampVar"
>				+		"to_timestamp( " + $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptTZTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindReqUuidVar"
>				+		"$lower ClassCode$.$DbColumnName$ = '" + $Name$.toString() + "' "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragBindOptUuidVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = '" + $Name$.toString() + "' " )</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlIndexColumnWhereAndFragValueVar">
						+	"AND "
$implPgSqlIndexColumnWhereFragValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnCommaArgValueVar"> + ", "$implPgSqlIndexColumnArgValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlCommaArgRevision"> + ", "
					+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlIndexColumnArgValueWhereFragValueGeneric
			BoolDef implPgSqlIndexColumnArgValueWhereFragValueBool
			EnumDef implPgSqlIndexColumnArgValueWhereFragValueGeneric
			Int16Def implPgSqlIndexColumnArgValueWhereFragValueGeneric
			Int32Def implPgSqlIndexColumnArgValueWhereFragValueGeneric
			Int64Def implPgSqlIndexColumnArgValueWhereFragValueGeneric
			UInt16Def implPgSqlIndexColumnArgValueWhereFragValueGeneric
			UInt32Def implPgSqlIndexColumnArgValueWhereFragValueGeneric
			UInt64Def implPgSqlIndexColumnArgValueWhereFragValueGeneric
			Id16Gen implPgSqlIndexColumnArgValueWhereFragValueGeneric
			Id32Gen implPgSqlIndexColumnArgValueWhereFragValueGeneric
			Id64Gen implPgSqlIndexColumnArgValueWhereFragValueGeneric
			FloatDef implPgSqlIndexColumnArgValueWhereFragValueFloat
			DoubleDef implPgSqlIndexColumnArgValueWhereFragValueGeneric
			NumberDef implPgSqlIndexColumnArgValueWhereFragValueGeneric
			StringDef implPgSqlIndexColumnArgValueWhereFragValueGeneric
			TokenDef implPgSqlIndexColumnArgValueWhereFragValueGeneric
			NmTokenDef implPgSqlIndexColumnArgValueWhereFragValueGeneric
			NmTokensDef implPgSqlIndexColumnArgValueWhereFragValueGeneric
			TextDef implPgSqlIndexColumnArgValueWhereFragValueText
			DateDef implPgSqlIndexColumnArgValueWhereFragValueDate
			TimeDef implPgSqlIndexColumnArgValueWhereFragValueTime
			TimestampDef implPgSqlIndexColumnArgValueWhereFragValueTimestamp
			TZDateDef implPgSqlIndexColumnArgValueWhereFragValueTZDate
			TZTimeDef implPgSqlIndexColumnArgValueWhereFragValueTZTime
			TZTimestampDef implPgSqlIndexColumnArgValueWhereFragValueTZTimestamp
			UuidDef implPgSqlIndexColumnArgValueWhereFragValueGeneric
			UuidGen implPgSqlIndexColumnArgValueWhereFragValueGeneric
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueGeneric">
					+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueFloat">
					+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueText">
					+		"cast( ? as text )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueBool">
					+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueDate">
					+		"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueTime">
					+		"cast( to_timestamp( ?, 'HH24:MI:SS' ) as time )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueTimestamp">
					+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueTZDate">
					+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueTZTime">
					+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueTZTimestamp">
					+		"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnArgValueWhereFragValueUuid">
					+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlIndexColumnWhereFragValueGenericVar
			BoolDef implPgSqlIndexColumnWhereFragValueBoolVar
			EnumDef implPgSqlIndexColumnWhereFragValueGenericVar
			Int16Def implPgSqlIndexColumnWhereFragValueGenericVar
			Int32Def implPgSqlIndexColumnWhereFragValueGenericVar
			Int64Def implPgSqlIndexColumnWhereFragValueGenericVar
			UInt16Def implPgSqlIndexColumnWhereFragValueGenericVar
			UInt32Def implPgSqlIndexColumnWhereFragValueGenericVar
			UInt64Def implPgSqlIndexColumnWhereFragValueGenericVar
			Id16Gen implPgSqlIndexColumnWhereFragValueGenericVar
			Id32Gen implPgSqlIndexColumnWhereFragValueGenericVar
			Id64Gen implPgSqlIndexColumnWhereFragValueGenericVar
			FloatDef implPgSqlIndexColumnWhereFragValueFloatVar
			DoubleDef implPgSqlIndexColumnWhereFragValueGenericVar
			NumberDef implPgSqlIndexColumnWhereFragValueGenericVar
			StringDef implPgSqlIndexColumnWhereFragValueGenericVar
			TokenDef implPgSqlIndexColumnWhereFragValueGenericVar
			NmTokenDef implPgSqlIndexColumnWhereFragValueGenericVar
			NmTokensDef implPgSqlIndexColumnWhereFragValueGenericVar
			TextDef implPgSqlIndexColumnWhereFragValueTextVar
			DateDef implPgSqlIndexColumnWhereFragValueDateVar
			TimeDef implPgSqlIndexColumnWhereFragValueTimeVar
			TimestampDef implPgSqlIndexColumnWhereFragValueTimestampVar
			TZDateDef implPgSqlIndexColumnWhereFragValueTZDateVar
			TZTimeDef implPgSqlIndexColumnWhereFragValueTZTimeVar
			TZTimestampDef implPgSqlIndexColumnWhereFragValueTZTimestampVar
			UuidDef implPgSqlIndexColumnWhereFragValueGenericVar
			UuidGen implPgSqlIndexColumnWhereFragValueGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueGenericVar"
>					+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueFloatVar"
>					+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueTextVar"
>					+		"$lower ClassCode$.$DbColumnName$ = cast( ? as text )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueBoolVar"
>					+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueDateVar"
>					+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD' )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueTimeVar"
>					+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueTimestampVar"
>					+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueTZDateVar"
>					+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueTZTimeVar"
>					+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueTZTimestampVar"
>					+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnWhereFragValueUuidVar"
>					+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlTableColumnSelectFragDbNameComma"
		>$reference Column implPgSqlTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameComma"
>					+		"$switch BaseModelAtomClass
				BlobDef implPgSqlTableColumnSelectFragDbNameBlob
				BoolDef implPgSqlTableColumnSelectFragDbNameBool
				EnumDef implPgSqlTableColumnSelectFragDbNameEnum
				Int16Def implPgSqlTableColumnSelectFragDbNameInt16
				Int32Def implPgSqlTableColumnSelectFragDbNameInt32
				Int64Def implPgSqlTableColumnSelectFragDbNameInt64
				UInt16Def implPgSqlTableColumnSelectFragDbNameUInt16
				UInt32Def implPgSqlTableColumnSelectFragDbNameUInt32
				UInt64Def implPgSqlTableColumnSelectFragDbNameUInt64
				Id16Gen implPgSqlTableColumnSelectFragDbNameInt16
				Id32Gen implPgSqlTableColumnSelectFragDbNameInt32
				Id64Gen implPgSqlTableColumnSelectFragDbNameInt64
				FloatDef implPgSqlTableColumnSelectFragDbNameFloat
				DoubleDef implPgSqlTableColumnSelectFragDbNameDouble
				NumberDef implPgSqlTableColumnSelectFragDbNameNumber
				StringDef implPgSqlTableColumnSelectFragDbNameString
				TokenDef implPgSqlTableColumnSelectFragDbNameToken
				NmTokenDef implPgSqlTableColumnSelectFragDbNameNmToken
				NmTokensDef implPgSqlTableColumnSelectFragDbNameNmTokens
				TextDef implPgSqlTableColumnSelectFragDbNameText
				DateDef implPgSqlTableColumnSelectFragDbNameDate
				TimeDef implPgSqlTableColumnSelectFragDbNameTime
				TimestampDef implPgSqlTableColumnSelectFragDbNameTimestamp
				TZDateDef implPgSqlTableColumnSelectFragDbNameTZDate
				TZTimeDef implPgSqlTableColumnSelectFragDbNameTZTime
				TZTimestampDef implPgSqlTableColumnSelectFragDbNameTZTimestamp
				UuidDef implPgSqlTableColumnSelectFragDbNameUuid
				UuidGen implPgSqlTableColumnSelectFragDbNameUuid
				default empty$, "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameBlob"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameBool"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameEnum"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameInt16"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameInt32"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameInt64"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameUInt16"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameUInt32"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameUInt64"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameFloat"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameDouble"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameNumber"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameString"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameToken"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameNmToken"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameNmTokens"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameText"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameDate"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameTime"
		>to_char( $lower ClassCode$.$DbColumnName$, 'HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameTimestamp"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameTZDate"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameTZTime"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameTZTimestamp"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbNameUuid"
		>$lower ClassCode$.$DbColumnName$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnSelectFragDbName"
>			+		"$switch BaseModelAtomClass
			BlobDef implPgSqlTableColumnSelectFragDbNameBlob
			BoolDef implPgSqlTableColumnSelectFragDbNameBool
			EnumDef implPgSqlTableColumnSelectFragDbNameEnum
			Int16Def implPgSqlTableColumnSelectFragDbNameInt16
			Int32Def implPgSqlTableColumnSelectFragDbNameInt32
			Int64Def implPgSqlTableColumnSelectFragDbNameInt64
			UInt16Def implPgSqlTableColumnSelectFragDbNameUInt16
			UInt32Def implPgSqlTableColumnSelectFragDbNameUInt32
			UInt64Def implPgSqlTableColumnSelectFragDbNameUInt64
			Id16Gen implPgSqlTableColumnSelectFragDbNameInt16
			Id32Gen implPgSqlTableColumnSelectFragDbNameInt32
			Id64Gen implPgSqlTableColumnSelectFragDbNameInt64
			FloatDef implPgSqlTableColumnSelectFragDbNameFloat
			DoubleDef implPgSqlTableColumnSelectFragDbNameDouble
			NumberDef implPgSqlTableColumnSelectFragDbNameNumber
			StringDef implPgSqlTableColumnSelectFragDbNameString
			TokenDef implPgSqlTableColumnSelectFragDbNameToken
			NmTokenDef implPgSqlTableColumnSelectFragDbNameNmToken
			NmTokensDef implPgSqlTableColumnSelectFragDbNameNmTokens
			TextDef implPgSqlTableColumnSelectFragDbNameText
			DateDef implPgSqlTableColumnSelectFragDbNameDate
			TimeDef implPgSqlTableColumnSelectFragDbNameTime
			TimestampDef implPgSqlTableColumnSelectFragDbNameTimestamp
			TZDateDef implPgSqlTableColumnSelectFragDbNameTZDate
			TZTimeDef implPgSqlTableColumnSelectFragDbNameTZTime
			TZTimestampDef implPgSqlTableColumnSelectFragDbNameTZTimestamp
			UuidDef implPgSqlTableColumnSelectFragDbNameUuid
			UuidGen implPgSqlTableColumnSelectFragDbNameUuid
			default empty$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implPgSqlTableColumnSqlFragDbName"
>				+		"$lower ClassCode$.$DbColumnName$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implPgSqlTableColumnSqlFragDbName"
>				+		"$lower ClassCode$.$DbColumnName$ "
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlIndexColumnOrderBy">
				+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlIndexColumnCommaOrderBy"
		>$implPgSqlIndexColumnOrderBy$ + ", "</GenRule>

	<GenRule GenDef="IndexCol" Name="implUpdateTableCopyBuffToPKey">
			pkey.set$OptionalOrRequired$$Name$( Buff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableExtractRevision"
>			int Revision = Buff.getRequiredRevision();
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableCheckRevision"
>			int Revision = Buff.getRequiredRevision();
			$DefSchemaName$$TableName$PKey pkey = schema.getFactory$Name$().newPKey();$reference PrimaryKeyIndex iterate Columns( each implUpdateTableCopyBuffToPKey )$
			$DefSchemaName$$TableName$Buff readBuff = lockBuff( Authorization, pkey );
			if( readBuff == null ) {
				throw new CFLibStaleCacheDetectedException( getClass(),
					S_ProcName,
					"Attempted to update record which could not be locked/found",
					schema.getLowerDbSchemaName() + ".$lower DbTableName$",
					pkey );
			}
			int oldRevision = readBuff.getRequiredRevision();
			if( oldRevision != Revision ) {
				throw new CFLibCollisionDetectedException( getClass(),
					S_ProcName,
					Buff );
			}
			int newRevision = Revision + 1;</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSqlFragUpdateRevision">
					+		", Revision = ? "</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlUpdateTableSqlFragWhereAndRevision">
					+	"AND "
					+		"Revision = ? "</GenRule>


	<GenRule GenDef="Table" Name="implUpdateTable"
		>$switch InheritsBlob yes implUpdateTableOldStyle default implUpdateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableInitClassCode">
			String ClassCode = "$ClassCode$";</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractVars"
		>$switch HasSuperClassRelation yes implUpdateTableSPExtractInhVars default implUpdateTableSPExtractBaseVars$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractBaseVars"
		>$switch IsBaseTable yes implPgSqlCreateTableCopyClassCode default empty$$iterate Columns( each implPgSqlCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractInhVars"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPExtractVars$$iterate Columns( each implPgSqlCreateTableCopyData empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implUpdateTableSPCopyInhColumns default implUpdateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPCopyColumns$$iterate DataColumns( each implPgSqlCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implPgSqlCreateTableCopyClassCode default empty$$iterate Columns( each implPgSqlCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSP">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";
		ResultSet resultSet = null;
		try {$implUpdateTableSPTryBody$
		}$implUpdateTableSPCatchBlock$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPTryBody">
$implUpdateTableSPCopyColumns$			int Revision = Buff.getRequiredRevision();
			Connection cnx = schema.getCnx();
			String sql =
				"select * from " + schema.getLowerDbSchemaName() + ".$sp_update_dbtablename$( ?, ?, ?, ?, ?, ?"$implUpdateTableSPPassArgs$ + ", "
						+	"?" + " )";
			if( stmtUpdateByPKey == null ) {
				stmtUpdateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implPgSqlUpdateTableBindClassCode default implPgSqlUpdateTableBindConstClassCode$$implUpdateTableSPBindArgs$$implPgSqlUpdateTableBindRevision$
			resultSet = stmtUpdateByPKey.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff updatedBuff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}$implPgSqlUpdateTableApplyBuff$$implPgSqlUpdateTableApplyRevision$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCatchBlock">
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlUpdateTableApplyRevision">
				Buff.setRequiredRevision( updatedBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlUpdateTableApplyBuff"
		>$switch HasSuperClassRelation yes implPgSqlUpdateTableApplyInhBuff default implPgSqlUpdateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlUpdateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implPgSqlUpdateTableApplyBuff$$iterate Columns( each implPgSqlUpdateTableApplyDataCol )$</GenRule>

	<!-- Note: Updates aren't allowed to change the primary key so we don't copy back those attributes -->
	<GenRule GenDef="Table" Name="implPgSqlUpdateTableApplyBaseBuff"
		>$iterate Columns( each implPgSqlUpdateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Value" Name="implPgSqlUpdateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlUpdateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implPgSqlUpdateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( updatedBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPBindInhArgs default implUpdateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPBindArgs$$iterate Columns( each implUpdateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindBaseArgs"
		>$iterate Columns( each implPgSqlUpdateTableBindVar )$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implPgSqlUpdateTableBindVar$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPPassInhArgs default implUpdateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPPassArgs$$iterate Columns( each implUpdateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassBaseArgs"
		>$iterate Columns( each implUpdateTableSPPassAnArg )$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implUpdateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlUpdateTableSPPassGenericVar
			BoolDef implPgSqlUpdateTableSPPassGenericVar
			EnumDef implPgSqlUpdateTableSPPassGenericVar
			Int16Def implPgSqlUpdateTableSPPassGenericVar
			Int32Def implPgSqlUpdateTableSPPassGenericVar
			Int64Def implPgSqlUpdateTableSPPassGenericVar
			UInt16Def implPgSqlUpdateTableSPPassGenericVar
			UInt32Def implPgSqlUpdateTableSPPassGenericVar
			UInt64Def implPgSqlUpdateTableSPPassGenericVar
			Id16Gen implPgSqlUpdateTableSPPassGenericVar
			Id32Gen implPgSqlUpdateTableSPPassGenericVar
			Id64Gen implPgSqlUpdateTableSPPassGenericVar
			FloatDef implPgSqlUpdateTableSPPassFloatVar
			DoubleDef implPgSqlUpdateTableSPPassGenericVar
			NumberDef implPgSqlUpdateTableSPPassGenericVar
			StringDef implPgSqlUpdateTableSPPassGenericVar
			TokenDef implPgSqlUpdateTableSPPassGenericVar
			NmTokenDef implPgSqlUpdateTableSPPassGenericVar
			NmTokensDef implPgSqlUpdateTableSPPassGenericVar
			TextDef implPgSqlUpdateTableSPPassTextVar
			DateDef implPgSqlUpdateTableSPPassDateVar
			TimeDef implPgSqlUpdateTableSPPassTimeVar
			TimestampDef implPgSqlUpdateTableSPPassTimestampVar
			TZDateDef implPgSqlUpdateTableSPPassTZDateVar
			TZTimeDef implPgSqlUpdateTableSPPassTZTimeVar
			TZTimestampDef implPgSqlUpdateTableSPPassTZTimestampVar
			UuidDef implPgSqlUpdateTableSPPassGenericVar
			UuidGen implPgSqlUpdateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableSPPassGenericVar"> + ", "
						+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableSPPassFloatVar"> + ", "
						+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableSPPassTextVar"> + ", "
						+	"cast( ? as text )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableSPPassDateVar"> + ", "
						+	"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableSPPassTimeVar"> + ", "
						+	"cast( to_timestamp( ?, 'HH24:MI:SS' ) as time )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableSPPassTimestampVar"> + ", "
						+	"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableSPPassTZDateVar"> + ", "
						+	"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableSPPassTZTimeVar"> + ", "
						+	"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableSPPassTZTimestampVar"> + ", "
						+	"cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleInvokeSuper">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().update$reference SuperClassRelation reference ToTable Name$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyle">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";$switch SecScope None empty System implUpdateTableOSCheckSystem Cluster implUpdateTableOSCheckCluster Tenant implUpdateTableOSCheckTenant default error$$switch HasSuperClassRelation yes implUpdateTableOldStyleInvokeSuper default empty$
		try {
			Connection cnx = schema.getCnx();
$switch IsBaseTable yes implPgSqlCreateTableCopyClassCode default empty$$iterate Columns( each implPgSqlCreateTableCopyColumn empty empty )$$switch HasSuperClassRelation no implUpdateTableCheckRevision default implUpdateTableExtractRevision$$switch HasDataColumns yes implUpdateTableOldStyleDoUpdate default empty$$poptop Table switch BaseHasHistory yes implUpdateTableOldStyleAuditUpdated default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdated"
		>$switch BaseHasClassCode yes implUpdateTableOldStyleAuditUpdatedWithCC default implUpdateTableOldStyleAuditUpdatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp, "
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, now(), $lower reference BaseClass ClassCode$.classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditUpdatedByPKey == null ) {
					stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
				}
				argIdx = 1;
				stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlUpdateTableAssignVar )$
				int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedNoCC">
			String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, now()"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditUpdatedByPKey == null ) {
				stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
			}
			argIdx = 1;
			stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlUpdateTableAssignVar )$
			int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignVar"
		>$switch IsNullable yes implPgSqlUpdateTableAssignOptVar
			default implPgSqlUpdateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlUpdateTableAssignOptBlobVar
			BoolDef implPgSqlUpdateTableAssignOptBoolVar
			EnumDef implPgSqlUpdateTableAssignOptEnumVar
			Int16Def implPgSqlUpdateTableAssignOptInt16Var
			Int32Def implPgSqlUpdateTableAssignOptInt32Var
			Int64Def implPgSqlUpdateTableAssignOptInt64Var
			UInt16Def implPgSqlUpdateTableAssignOptUInt16Var
			UInt32Def implPgSqlUpdateTableAssignOptUInt32Var
			UInt64Def implPgSqlUpdateTableAssignOptUInt64Var
			Id16Gen implPgSqlUpdateTableAssignOptInt16Var
			Id32Gen implPgSqlUpdateTableAssignOptInt32Var
			Id64Gen implPgSqlUpdateTableAssignOptInt64Var
			FloatDef implPgSqlUpdateTableAssignOptFloatVar
			DoubleDef implPgSqlUpdateTableAssignOptDoubleVar
			NumberDef implPgSqlUpdateTableAssignOptNumberVar
			StringDef implPgSqlUpdateTableAssignOptStringVar
			TokenDef implPgSqlUpdateTableAssignOptTokenVar
			NmTokenDef implPgSqlUpdateTableAssignOptNmTokenVar
			NmTokensDef implPgSqlUpdateTableAssignOptNmTokensVar
			TextDef implPgSqlUpdateTableAssignOptTextVar
			DateDef implPgSqlUpdateTableAssignOptDateVar
			TimeDef implPgSqlUpdateTableAssignOptTimeVar
			TimestampDef implPgSqlUpdateTableAssignOptTimestampVar
			TZDateDef implPgSqlUpdateTableAssignOptTZDateVar
			TZTimeDef implPgSqlUpdateTableAssignOptTZTimeVar
			TZTimestampDef implPgSqlUpdateTableAssignOptTZTimestampVar
			UuidDef implPgSqlUpdateTableAssignOptUuidVar
			UuidGen implPgSqlUpdateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlUpdateTableAssignReqBlobVar
			BoolDef implPgSqlUpdateTableAssignReqBoolVar
			EnumDef implPgSqlUpdateTableAssignReqEnumVar
			Int16Def implPgSqlUpdateTableAssignReqInt16Var
			Int32Def implPgSqlUpdateTableAssignReqInt32Var
			Int64Def implPgSqlUpdateTableAssignReqInt64Var
			UInt16Def implPgSqlUpdateTableAssignReqUInt16Var
			UInt32Def implPgSqlUpdateTableAssignReqUInt32Var
			UInt64Def implPgSqlUpdateTableAssignReqUInt64Var
			Id16Gen implPgSqlUpdateTableAssignReqInt16Var
			Id32Gen implPgSqlUpdateTableAssignReqInt32Var
			Id64Gen implPgSqlUpdateTableAssignReqInt64Var
			FloatDef implPgSqlUpdateTableAssignReqFloatVar
			DoubleDef implPgSqlUpdateTableAssignReqDoubleVar
			NumberDef implPgSqlUpdateTableAssignReqNumberVar
			StringDef implPgSqlUpdateTableAssignReqStringVar
			TokenDef implPgSqlUpdateTableAssignReqTokenVar
			NmTokenDef implPgSqlUpdateTableAssignReqNmTokenVar
			NmTokensDef implPgSqlUpdateTableAssignReqNmTokensVar
			TextDef implPgSqlUpdateTableAssignReqTextVar
			DateDef implPgSqlUpdateTableAssignReqDateVar
			TimeDef implPgSqlUpdateTableAssignReqTimeVar
			TimestampDef implPgSqlUpdateTableAssignReqTimestampVar
			TZDateDef implPgSqlUpdateTableAssignReqTZDateVar
			TZTimeDef implPgSqlUpdateTableAssignReqTZTimeVar
			TZTimestampDef implPgSqlUpdateTableAssignReqTZTimestampVar
			UuidDef implPgSqlUpdateTableAssignReqUuidVar
			UuidGen implPgSqlUpdateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqBlobVar">
				stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqBoolVar">
				stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqEnumVar">
				stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqInt16Var">
				stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqInt32Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqInt64Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqUInt16Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqUInt32Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqUInt64Var">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqFloatVar">
				stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqDoubleVar">
				stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqNumberVar">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqStringVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqNmTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqNmTokensVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqTextVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqTZDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqTZTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqTZTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignReqUuidVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleDoUpdate">
			String sql =
					"UPDATE " + schema.getLowerDbSchemaName() + ".$DbTableName$ "
				+	"SET "$popto Table iterate Columns( each implPgSqlUpdateTableValuesVarComma last implPgSqlUpdateTableValuesVar )$$switch HasSuperClassRelation no implUpdateTableOldStyleOptSetClause default empty$$switch HasSuperClassRelation no implUpdateTableSqlFragUpdateRevision default empty$
				+	"WHERE "
$reference PrimaryKeyIndex iterate Columns( first implPgSqlUpdateIndexColumnWhereFragValuesVar each implPgSqlUpdateIndexColumnWhereAndFragValuesVar )$$switch HasSuperClassRelation no implPgSqlUpdateTableSqlFragWhereAndRevision default empty$;
			if( stmtUpdateByPKey == null ) {
				stmtUpdateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
$popto Table iterate Columns( each implPgSqlUpdateTableBindVar )$$switch HasSuperClassRelation no implPgSqlUpdateTableBindOptAuditColumns default empty$$switch HasSuperClassRelation no implPgSqlUpdateTableBindUpdatedRevision default empty$$reference PrimaryKeyIndex iterate Columns( each implPgSqlUpdateTableBindVar )$$switch HasSuperClassRelation no implPgSqlUpdateTableBindOldRevision default empty$;
			int rowsAffected = stmtUpdateByPKey.executeUpdate();
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by update, not " + rowsAffected );
			}$switch HasSuperClassRelation no implPgSqlUpdateSetRevision default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleOptSetClause"
		>$switch HasAuditColumns yes implUpdateTableOldStyleSetClause default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleSetClause"> + ", "
				+		"updatedby = ?, "
				+		"updatedat = now() "</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlUpdateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implPgSqlUpdateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlUpdateTableBindAuditColumns">
			stmtUpdateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOldRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindUpdatedRevision">
			stmtUpdateByPKey.setInt( argIdx++, newRevision );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindClassCode">
			stmtUpdateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindConstClassCode">
			stmtUpdateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesVarComma"
		>$implPgSqlUpdateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlUpdateTableValuesGenericVar
			BoolDef implPgSqlUpdateTableValuesGenericVar
			EnumDef implPgSqlUpdateTableValuesGenericVar
			Int16Def implPgSqlUpdateTableValuesGenericVar
			Int32Def implPgSqlUpdateTableValuesGenericVar
			Int64Def implPgSqlUpdateTableValuesGenericVar
			UInt16Def implPgSqlUpdateTableValuesGenericVar
			UInt32Def implPgSqlUpdateTableValuesGenericVar
			UInt64Def implPgSqlUpdateTableValuesGenericVar
			Id16Gen implPgSqlUpdateTableValuesGenericVar
			Id32Gen implPgSqlUpdateTableValuesGenericVar
			Id64Gen implPgSqlUpdateTableValuesGenericVar
			FloatDef implPgSqlUpdateTableValuesFloatVar
			DoubleDef implPgSqlUpdateTableValuesGenericVar
			NumberDef implPgSqlUpdateTableValuesGenericVar
			StringDef implPgSqlUpdateTableValuesGenericVar
			TokenDef implPgSqlUpdateTableValuesGenericVar
			NmTokenDef implPgSqlUpdateTableValuesGenericVar
			NmTokensDef implPgSqlUpdateTableValuesGenericVar
			TextDef implPgSqlUpdateTableValuesTextVar
			DateDef implPgSqlUpdateTableValuesDateVar
			TimeDef implPgSqlUpdateTableValuesTimeVar
			TimestampDef implPgSqlUpdateTableValuesTimestampVar
			TZDateDef implPgSqlUpdateTableValuesTZDateVar
			TZTimeDef implPgSqlUpdateTableValuesTZTimeVar
			TZTimestampDef implPgSqlUpdateTableValuesTZTimestampVar
			UuidDef implPgSqlUpdateTableValuesGenericVar
			UuidGen implPgSqlUpdateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesGenericVar">
					+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesFloatVar">
					+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesTextVar">
					+		"$DbColumnName$ = cast( ? as text )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesDateVar">
					+		"$DbColumnName$ = cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesTimeVar">
					+		"$DbColumnName$ = cast( to_timestamp( ?, 'HH24:MI:SS' ) as time )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesTimestampVar">
					+		"$DbColumnName$ = cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesTZDateVar">
					+		"$DbColumnName$ = cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesTZTimeVar">
					+		"$DbColumnName$ = cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableValuesTZTimestampVar">
					+		"$DbColumnName$ = cast( to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindVarComma"
		>$implPgSqlUpdateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindVar"
		>$switch IsNullable yes implPgSqlUpdateTableBindOptVar
			default implPgSqlUpdateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlUpdateTableBindOptBlobVar
			BoolDef implPgSqlUpdateTableBindOptBoolVar
			EnumDef implPgSqlUpdateTableBindOptEnumVar
			Int16Def implPgSqlUpdateTableBindOptInt16Var
			Int32Def implPgSqlUpdateTableBindOptInt32Var
			Int64Def implPgSqlUpdateTableBindOptInt64Var
			UInt16Def implPgSqlUpdateTableBindOptUInt16Var
			UInt32Def implPgSqlUpdateTableBindOptUInt32Var
			UInt64Def implPgSqlUpdateTableBindOptUInt64Var
			Id16Gen implPgSqlUpdateTableBindOptInt16Var
			Id32Gen implPgSqlUpdateTableBindOptInt32Var
			Id64Gen implPgSqlUpdateTableBindOptInt64Var
			FloatDef implPgSqlUpdateTableBindOptFloatVar
			DoubleDef implPgSqlUpdateTableBindOptDoubleVar
			NumberDef implPgSqlUpdateTableBindOptNumberVar
			StringDef implPgSqlUpdateTableBindOptStringVar
			TokenDef implPgSqlUpdateTableBindOptTokenVar
			NmTokenDef implPgSqlUpdateTableBindOptNmTokenVar
			NmTokensDef implPgSqlUpdateTableBindOptNmTokensVar
			TextDef implPgSqlUpdateTableBindOptTextVar
			DateDef implPgSqlUpdateTableBindOptDateVar
			TimeDef implPgSqlUpdateTableBindOptTimeVar
			TimestampDef implPgSqlUpdateTableBindOptTimestampVar
			TZDateDef implPgSqlUpdateTableBindOptTZDateVar
			TZTimeDef implPgSqlUpdateTableBindOptTZTimeVar
			TZTimestampDef implPgSqlUpdateTableBindOptTZTimestampVar
			UuidDef implPgSqlUpdateTableBindOptUuidVar
			UuidGen implPgSqlUpdateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlUpdateTableBindReqBlobVar
			BoolDef implPgSqlUpdateTableBindReqBoolVar
			EnumDef implPgSqlUpdateTableBindReqEnumVar
			Int16Def implPgSqlUpdateTableBindReqInt16Var
			Int32Def implPgSqlUpdateTableBindReqInt32Var
			Int64Def implPgSqlUpdateTableBindReqInt64Var
			UInt16Def implPgSqlUpdateTableBindReqUInt16Var
			UInt32Def implPgSqlUpdateTableBindReqUInt32Var
			UInt64Def implPgSqlUpdateTableBindReqUInt64Var
			Id16Gen implPgSqlUpdateTableBindReqInt16Var
			Id32Gen implPgSqlUpdateTableBindReqInt32Var
			Id64Gen implPgSqlUpdateTableBindReqInt64Var
			FloatDef implPgSqlUpdateTableBindReqFloatVar
			DoubleDef implPgSqlUpdateTableBindReqDoubleVar
			NumberDef implPgSqlUpdateTableBindReqNumberVar
			StringDef implPgSqlUpdateTableBindReqStringVar
			TokenDef implPgSqlUpdateTableBindReqTokenVar
			NmTokenDef implPgSqlUpdateTableBindReqNmTokenVar
			NmTokensDef implPgSqlUpdateTableBindReqNmTokensVar
			TextDef implPgSqlUpdateTableBindReqTextVar
			DateDef implPgSqlUpdateTableBindReqDateVar
			TimeDef implPgSqlUpdateTableBindReqTimeVar
			TimestampDef implPgSqlUpdateTableBindReqTimestampVar
			TZDateDef implPgSqlUpdateTableBindReqTZDateVar
			TZTimeDef implPgSqlUpdateTableBindReqTZTimeVar
			TZTimestampDef implPgSqlUpdateTableBindReqTZTimestampVar
			UuidDef implPgSqlUpdateTableBindReqUuidVar
			UuidGen implPgSqlUpdateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqBlobVar">
			stmtUpdateByPKey.setBytes( argIdx++, Buff.get$OptionalOrRequired$$Name$() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqBoolVar">
			stmtUpdateByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptBoolVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqEnumVar">
			stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqInt16Var">
			stmtUpdateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqInt32Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqInt64Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqUInt16Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqUInt32Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqUInt64Var">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqFloatVar">
			stmtUpdateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqDoubleVar">
			stmtUpdateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqNumberVar">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqStringVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqNmTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqNmTokensVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqTextVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqTZDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqTZTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqTZTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindReqUuidVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlUpdateSetRevision">
			Buff.setRequiredRevision( newRevision );</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implPgSqlUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implPgSqlUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule GenDef="Atom" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>
	<GenRule GenDef="TableCol" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameLast"
		>$switch HasSuperClassRelation no implPgSqlTableColumnUpdateFragDbNameComma default implPgSqlTableColumnUpdateFragDbNameSpace$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameSpace"
		>$implPgSqlTableColumnUpdateFragDbName$ + " "</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameComma"
		>$implPgSqlTableColumnUpdateFragDbName$ + ", "
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbName"
>				+		"$switch IsNullable yes implPgSqlTableColumnUpdateFragOptDbName
								default implPgSqlTableColumnUpdateFragReqDbName$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragOptDbName"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlTableColumnUpdateFragDbNameOptBlob
			BoolDef implPgSqlTableColumnUpdateFragDbNameOptBool
			EnumDef implPgSqlTableColumnUpdateFragDbNameOptEnum
			Int16Def implPgSqlTableColumnUpdateFragDbNameOptInt16
			Int32Def implPgSqlTableColumnUpdateFragDbNameOptInt32
			Int64Def implPgSqlTableColumnUpdateFragDbNameOptInt64
			UInt16Def implPgSqlTableColumnUpdateFragDbNameOptUInt16
			UInt32Def implPgSqlTableColumnUpdateFragDbNameOptUInt32
			UInt64Def implPgSqlTableColumnUpdateFragDbNameOptUInt64
			Id16Gen implPgSqlTableColumnUpdateFragDbNameOptInt16
			Id32Gen implPgSqlTableColumnUpdateFragDbNameOptInt32
			Id64Gen implPgSqlTableColumnUpdateFragDbNameOptInt64
			FloatDef implPgSqlTableColumnUpdateFragDbNameOptFloat
			DoubleDef implPgSqlTableColumnUpdateFragDbNameOptDouble
			NumberDef implPgSqlTableColumnUpdateFragDbNameOptNumber
			StringDef implPgSqlTableColumnUpdateFragDbNameOptString
			TokenDef implPgSqlTableColumnUpdateFragDbNameOptToken
			NmTokenDef implPgSqlTableColumnUpdateFragDbNameOptNmToken
			NmTokensDef implPgSqlTableColumnUpdateFragDbNameOptNmTokens
			TextDef implPgSqlTableColumnUpdateFragDbNameOptText
			DateDef implPgSqlTableColumnUpdateFragDbNameOptDate
			TimeDef implPgSqlTableColumnUpdateFragDbNameOptTime
			TimestampDef implPgSqlTableColumnUpdateFragDbNameOptTimestamp
			TZDateDef implPgSqlTableColumnUpdateFragDbNameOptTZDate
			TZTimeDef implPgSqlTableColumnUpdateFragDbNameOptTZTime
			TZTimestampDef implPgSqlTableColumnUpdateFragDbNameOptTZTimestamp
			UuidDef implPgSqlTableColumnUpdateFragDbNameOptUuid
			UuidGen implPgSqlTableColumnUpdateFragDbNameOptUuid
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragReqDbName"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlTableColumnUpdateFragDbNameReqBlob
			BoolDef implPgSqlTableColumnUpdateFragDbNameReqBool
			EnumDef implPgSqlTableColumnUpdateFragDbNameReqEnum
			Int16Def implPgSqlTableColumnUpdateFragDbNameReqInt16
			Int32Def implPgSqlTableColumnUpdateFragDbNameReqInt32
			Int64Def implPgSqlTableColumnUpdateFragDbNameReqInt64
			UInt16Def implPgSqlTableColumnUpdateFragDbNameReqUInt16
			UInt32Def implPgSqlTableColumnUpdateFragDbNameReqUInt32
			UInt64Def implPgSqlTableColumnUpdateFragDbNameReqUInt64
			Id16Gen implPgSqlTableColumnUpdateFragDbNameReqInt16
			Id32Gen implPgSqlTableColumnUpdateFragDbNameReqInt32
			Id64Gen implPgSqlTableColumnUpdateFragDbNameReqInt64
			FloatDef implPgSqlTableColumnUpdateFragDbNameReqFloat
			DoubleDef implPgSqlTableColumnUpdateFragDbNameReqDouble
			NumberDef implPgSqlTableColumnUpdateFragDbNameReqNumber
			StringDef implPgSqlTableColumnUpdateFragDbNameReqString
			TokenDef implPgSqlTableColumnUpdateFragDbNameReqToken
			NmTokenDef implPgSqlTableColumnUpdateFragDbNameReqNmToken
			NmTokensDef implPgSqlTableColumnUpdateFragDbNameReqNmTokens
			TextDef implPgSqlTableColumnUpdateFragDbNameReqText
			DateDef implPgSqlTableColumnUpdateFragDbNameReqDate
			TimeDef implPgSqlTableColumnUpdateFragDbNameReqTime
			TimestampDef implPgSqlTableColumnUpdateFragDbNameReqTimestamp
			TZDateDef implPgSqlTableColumnUpdateFragDbNameReqTZDate
			TZTimeDef implPgSqlTableColumnUpdateFragDbNameReqTZTime
			TZTimestampDef implPgSqlTableColumnUpdateFragDbNameReqTZTimestamp
			UuidDef implPgSqlTableColumnUpdateFragDbNameReqUuid
			UuidGen implPgSqlTableColumnUpdateFragDbNameReqUuid
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptBlob"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getBlobString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptBool"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getBoolString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptEnum"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getInt32String( $ColumnName$.ordinal() ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptInt16"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptInt32"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptInt64"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptUInt16"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getUInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptUInt32"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getUInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptUInt64"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getUInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptFloat"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getFloatString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptDouble"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getDoubleString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptNumber"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getNumberString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptString"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptToken"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptNmToken"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptNmTokens"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptText"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptDate"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
										?	$SchemaName$PgSqlSchema.getDateString( $ColumnName$ )
										:	"null" )
						+			", 'YYYY-MM-DD' ) "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptTime"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
										?	$SchemaName$PgSqlSchema.getTimeString( $ColumnName$ )
										:	"null" )
						+			", 'HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptTimestamp"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
										?	$SchemaName$PgSqlSchema.getTimestampString( $ColumnName$ )
										:	"null" )
						+			", 'YYYY-MM-DD HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptTZDate"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
										?	$SchemaName$PgSqlSchema.getTZDateString( $ColumnName$ )
										:	"null" )
						+			", 'YYYY-MM-DD HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptTZTime"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
										?	$SchemaName$PgSqlSchema.getTZTimeString( $ColumnName$ )
										:	"null" )
						+			", 'YYYY-MM-DD HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptTZTimestamp"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
										?	$SchemaName$PgSqlSchema.getTZTimestampString( $ColumnName$ )
										:	"null" )
						+			", 'YYYY-MM-DD HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameOptUuid"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$.toString() ) : "null" )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqBlob"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getBlobString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqBool"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getBoolString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqEnum"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getInt32String( $ColumnName$.ordinal() )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqInt16"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqInt32"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqInt64"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqUInt16"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getUInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqUInt32"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getUInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqUInt64"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getUInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqFloat"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getFloatString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqDouble"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getDoubleString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqNumber"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getNumberString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqString"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqToken"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqNmToken"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqNmTokens"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqText"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqDate"
		>$DbColumnName$ = cast( to_timestamp( " + $SchemaName$PgSqlSchema.getDateString( $ColumnName$ ) + ", 'YYYY-MM-DD' ) as date ) "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqTime"
		>$DbColumnName$ = cast( to_timestamp( " + $SchemaName$PgSqlSchema.getTimeString( $ColumnName$ ) + ", 'HH24:MI:SS' ) as time )"</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqTimestamp"
		>$DbColumnName$ = cast( to_timestamp( " + $SchemaName$PgSqlSchema.getTimestampString( $ColumnName$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqTZDate"
		>$DbColumnName$ = cast( to_timestamp( " + $SchemaName$PgSqlSchema.getTZDateString( $ColumnName$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqTZTime"
		>$DbColumnName$ = cast( to_timestamp( " + $SchemaName$PgSqlSchema.getTZTimeString( $ColumnName$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqTZTimestamp"
		>$DbColumnName$ = cast( to_timestamp( " + $SchemaName$PgSqlSchema.getTZTimestampString( $ColumnName$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) as timestamp )"</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlTableColumnUpdateFragDbNameReqUuid"
		>$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $ColumnName$.toString() )</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlUpdateTablePassReadArg"
>					$reference Column Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implPgSqlUpdateTablePassReadArgComma"
		>$implPgSqlUpdateTablePassReadArg$,
</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlUpdateIndexColumnWhereAndFragValuesVar">
					+	"AND "
$implPgSqlUpdateIndexColumnWhereFragValuesVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlUpdateIndexColumnWhereFragValuesVar"
>					+		"$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlUpdateIndexColumnWhereAndFragBindVar">
					+	"AND "
$implPgSqlUpdateIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlUpdateIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implPgSqlUpdateIndexColumnWhereFragBindOptVar
			default implPgSqlUpdateIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlUpdateIndexColumnWhereFragBindOptBlobVar
			BoolDef implPgSqlUpdateIndexColumnWhereFragBindOptBoolVar
			EnumDef implPgSqlUpdateIndexColumnWhereFragBindOptEnumVar
			Int16Def implPgSqlUpdateIndexColumnWhereFragBindOptInt16Var
			Int32Def implPgSqlUpdateIndexColumnWhereFragBindOptInt32Var
			Int64Def implPgSqlUpdateIndexColumnWhereFragBindOptInt64Var
			UInt16Def implPgSqlUpdateIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implPgSqlUpdateIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implPgSqlUpdateIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implPgSqlUpdateIndexColumnWhereFragBindOptInt16Var
			Id32Gen implPgSqlUpdateIndexColumnWhereFragBindOptInt32Var
			Id64Gen implPgSqlUpdateIndexColumnWhereFragBindOptInt64Var
			FloatDef implPgSqlUpdateIndexColumnWhereFragBindOptFloatVar
			DoubleDef implPgSqlUpdateIndexColumnWhereFragBindOptDoubleVar
			NumberDef implPgSqlUpdateIndexColumnWhereFragBindOptNumberVar
			StringDef implPgSqlUpdateIndexColumnWhereFragBindOptStringVar
			TokenDef implPgSqlUpdateIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implPgSqlUpdateIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implPgSqlUpdateIndexColumnWhereFragBindOptNmTokensVar
			TextDef implPgSqlUpdateIndexColumnWhereFragBindOptTextVar
			DateDef implPgSqlUpdateIndexColumnWhereFragBindOptDateVar
			TimeDef implPgSqlUpdateIndexColumnWhereFragBindOptTimeVar
			TimestampDef implPgSqlUpdateIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implPgSqlUpdateIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implPgSqlUpdateIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implPgSqlUpdateIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implPgSqlUpdateIndexColumnWhereFragBindOptUuidVar
			UuidGen implPgSqlUpdateIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlUpdateIndexColumnWhereFragBindReqBlobVar
			BoolDef implPgSqlUpdateIndexColumnWhereFragBindReqBoolVar
			EnumDef implPgSqlUpdateIndexColumnWhereFragBindReqEnumVar
			Int16Def implPgSqlUpdateIndexColumnWhereFragBindReqInt16Var
			Int32Def implPgSqlUpdateIndexColumnWhereFragBindReqInt32Var
			Int64Def implPgSqlUpdateIndexColumnWhereFragBindReqInt64Var
			UInt16Def implPgSqlUpdateIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implPgSqlUpdateIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implPgSqlUpdateIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implPgSqlUpdateIndexColumnWhereFragBindReqInt16Var
			Id32Gen implPgSqlUpdateIndexColumnWhereFragBindReqInt32Var
			Id64Gen implPgSqlUpdateIndexColumnWhereFragBindReqInt64Var
			FloatDef implPgSqlUpdateIndexColumnWhereFragBindReqFloatVar
			DoubleDef implPgSqlUpdateIndexColumnWhereFragBindReqDoubleVar
			NumberDef implPgSqlUpdateIndexColumnWhereFragBindReqNumberVar
			StringDef implPgSqlUpdateIndexColumnWhereFragBindReqStringVar
			TokenDef implPgSqlUpdateIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implPgSqlUpdateIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implPgSqlUpdateIndexColumnWhereFragBindReqNmTokensVar
			TextDef implPgSqlUpdateIndexColumnWhereFragBindReqTextVar
			DateDef implPgSqlUpdateIndexColumnWhereFragBindReqDateVar
			TimeDef implPgSqlUpdateIndexColumnWhereFragBindReqTimeVar
			TimestampDef implPgSqlUpdateIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implPgSqlUpdateIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implPgSqlUpdateIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implPgSqlUpdateIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implPgSqlUpdateIndexColumnWhereFragBindReqUuidVar
			UuidGen implPgSqlUpdateIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqBlobVar"
>					+		"$DbColumnName$ = " + $SchemaName$PgSqlSchema.getBlobString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptBlobVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $SchemaName$PgSqlSchema.getBlobString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqBoolVar"
>					+		( $Name$ ? "$DbColumnName$ = true " : "$DbColumnName$ = false " )</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptBoolVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null " :
								( $Name$ ? "true, " : "false, " ) )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqEnumVar"
>					+		"$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptEnumVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqInt16Var"
>					+		"$DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptInt16Var"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqInt32Var"
>					+		"$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptInt32Var"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqInt64Var"
>					+		"$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptInt64Var"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqUInt16Var"
>					+		"$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptUInt16Var"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqUInt32Var"
>					+		"$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptUInt32Var"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqUInt64Var"
>					+		"$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptUInt64Var"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqFloatVar"
>					+		"$DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptFloatVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqDoubleVar"
>					+		"$DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptDoubleVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqNumberVar"
>					+		"$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptNumberVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqStringVar"
>					+		"$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptStringVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqTokenVar"
>					+		"$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptTokenVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqNmTokenVar"
>					+		"$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptNmTokenVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqNmTokensVar"
>					+		"$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptNmTokensVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqTextVar"
>					+		"$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptTextVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqDateVar"
>					+		"cast( to_timestamp( " + $SchemaName$PgSqlSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) as date ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptDateVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = cast( to_timestamp( " + $SchemaName$PgSqlSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) as date ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqTimeVar"
>					+		"cast( to_timestamp( " + $SchemaName$PgSqlSchema.getTimeString( $Name$ ) + ", 'HH24:MI:SS' ) as time ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptTimeVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = cast( to_timestamp( " + $SchemaName$PgSqlSchema.getTimeString( $Name$ ) + ", 'HH24:MI:SS' ) as time ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqTimestampVar"
>					+		"to_timestamp( " + $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptTimestampVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqTZDateVar"
>					+		"to_timestamp( " + $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptTZDateVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqTZTimeVar"
>					+		"to_timestamp( " + $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptTZTimeVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqTZTimestampVar"
>					+		"to_timestamp( " + $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptTZTimestampVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = to_timestamp( " + $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindReqUuidVar"
>					+		"$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$.toString() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlUpdateIndexColumnWhereFragBindOptUuidVar"
>					+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
								: "$DbColumnName$ = " + $SchemaName$PgSqlSchema.getQuotedString( $Name$.toString() ) + " " )</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTableSqlFragWhereAndRevision">
					+	"AND "
					+		"Revision = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlDeleteTableCopyColumn"
		>$reference Column implPgSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTable">
	public void delete$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "delete$TableName$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
$reference PrimaryKeyIndex iterate Columns( each implPgSqlDeleteTableCopyColumn empty empty )$
			String sql = "SELECT " + schema.getLowerDbSchemaName() + ".$sp_delete_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$$implPgSqlCommaArgRevision$ + " ) as DeletedFlag";
			if( stmtDeleteByPKey == null ) {
				stmtDeleteByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference PrimaryKeyIndex iterate Columns( each implPgSqlDeleteTableBindVar )$$implPgSqlDeleteTableBindRevision$;
			resultSet = stmtDeleteByPKey.executeQuery();$implDeleteTableAnalyzeResultSet$
		}$implDeleteTableCatchBlock$
	}
$implPgSqlDeleteTableByInheritedIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTableAnalyzeResultSet">
			if( resultSet.next() ) {
				boolean deleteFlag = resultSet.getBoolean( 1 );
				if( resultSet.next() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response" );
				}
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 record result set to be returned by delete, not 0 rows" );
			}</GenRule>

	<GenRule GenDef="Object" Name="implCommaQuestion">, ?</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTableCatchBlock">
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlDeleteTableByInheritedIndexes"
		>$switch HasSuperClassRelation yes implPgSqlDeleteTableByInhIndexes default implPgSqlDeleteTableByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlDeleteTableByInhIndexes"
		>$reference SuperClassRelation reference ToTable implPgSqlDeleteTableByInheritedIndexes$$iterate Index( each implPgSqlDeleteTableByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlDeleteTableByBaseIndexes"
		>$iterate Index( each implPgSqlDeleteTableBySpecialIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implPgSqlDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableBySpecialIndex"
		>$switch IsPrimaryIndex yes implPgSqlDeleteTableByPrimaryIndex default implPgSqlDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableByIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";
		ResultSet resultSet = null;
		try {
				Connection cnx = schema.getCnx();$implPgSqlDeleteTableByReqIndex$
		}$implPgSqlDeleteTableByIndexCatchBlockPlus$
</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableByReqIndex">
				String sql = "SELECT " + schema.getLowerDbSchemaName() + ".$sp_delete_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " ) as DeletedFlag";
				if( stmtDeleteBy$Suffix$ == null ) {
					stmtDeleteBy$Suffix$ = cnx.prepareStatement( sql );
				}
				int argIdx = 1;
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
				stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
				stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implPgSqlDeleteTableBindSuffixVar )$
				resultSet = stmtDeleteBy$Suffix$.executeQuery();
				if( resultSet.next() ) {
					boolean deleteFlag = resultSet.getBoolean( 1 );
					if( resultSet.next() ) {
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response" );
					}
				}
				else {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 record result set to be returned by delete, not 0 rows" );
				}</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableByOptIndex">
			boolean allValued = true;$iterate Columns( each implPgSqlDeleteTableByOptIndexEvalCol empty empty )$
			if( allValued ) {$implPgSqlDeleteTableByReqIndex$
			}
			else {$switch TableHasSubClasses yes implPgSqlDeleteTableByOptSubIndex default implPgSqlDeleteTableByOptBaseIndex$
			}
</GenRule>

	<GenRule GenDef="Index" Name="TableHasSubClasses"
		>$poptop Table HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableByOptSubIndex">
				String classCode;
				$poptop Table DefSchemaName$$poptop Table TableName$Buff[] derivedRecs = readDerivedBy$Suffix$( Authorization$iterate Columns( each implCommaColumnPassDeleteArg )$ );
				int len = derivedRecs.length;
				$poptop Table DefSchemaName$$popto Table TableName$Buff buff;
				for( int idx = 0; idx &lt; len; idx++ ) {
					buff = derivedRecs[ idx ];
					classCode = buff.getClassCode();
					if( classCode.equals( "$poptop Table ClassCode$" ) ) {
						delete$poptop Table TableName$( Authorization, buff );
					}$poptop Table iterate TableSubClasses( each implPgSqlDeleteTableByOptIndexWalkSubClass empty empty )$
					else {
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect ClassCode \"" + classCode + "\"" );
					}
				}</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableByOptBaseIndex">
				$poptop Table DefSchemaName$$poptop Table TableName$Buff[] recs = readBuffBy$Suffix$( Authorization$iterate Columns( each implCommaColumnPassDeleteArg )$ );
				int len = recs.length;
				$poptop Table DefSchemaName$$popto Table TableName$Buff buff;
				for( int idx = 0; idx &lt; len; idx++ ) {
					buff = recs[ idx ];
					delete$poptop Table TableName$( Authorization, buff );
				}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlDeleteTableByOptIndexWalkSubClass">
					else if( classCode.equals( "$ClassCode$" ) {
						schema.getTable$Name$().delete$TableName$( Authorization, ($DefSchemaName$$TableName$Buff)buff );
					}$iterate TableSubClasses( each implPgSqlDeleteTableByOptIndexWalkSubClass empty empty )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCommaColumnPassDeleteArg">,
					arg$Name$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlDeleteTableByOptIndexEvalCol"
		>$switch IsNullable yes implPgSqlDeleteTableByOptIndexConsiderCol default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlDeleteTableByOptIndexConsiderCol">
			if( arg$Name$ == null ) {
				allValued = false;
			}</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableByIndexCatchBlockPlus">
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$By$Suffix$Key argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implPgSqlDeleteCommaPassArgColumn )$ );
	}</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableByPrimaryIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";
		ResultSet resultSet = null;
		try {
				Connection cnx = schema.getCnx();
				String sql = "SELECT " + schema.getLowerDbSchemaName() + ".$sp_delete_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implPgSqlIndexColumnCommaArgValueVar )$ + " ) as DeletedFlag";
				if( stmtDeleteBy$Suffix$ == null ) {
					stmtDeleteBy$Suffix$ = cnx.prepareStatement( sql );
				}
				int argIdx = 1;
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
				stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
				stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implPgSqlDeleteTableBindSuffixVar )$
				resultSet = stmtDeleteBy$Suffix$.executeQuery();
				if( resultSet.next() ) {
					boolean deleteFlag = resultSet.getBoolean( 1 );
					if( resultSet.next() ) {
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response" );
					}
				}
				else {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 record result set to be returned by delete, not 0 rows" );
				}
			}$implPgSqlDeleteTableByPrimaryIndexCatchBlockPlus$
</GenRule>

	<GenRule GenDef="Index" Name="implPgSqlDeleteTableByPrimaryIndexCatchBlockPlus">
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				if( resultSet != null ) {
					try {
						resultSet.close();
					}
					catch( SQLException e ) {
					}
					resultSet = null;
				}
			}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$PKey argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implPgSqlDeleteCommaPassArgColumn )$ );
	}</GenRule>

	<GenRule GenDef="IndexCol" Name="implPgSqlDeleteCommaPassArgColumn">,
			argKey.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindRevision">
			stmtDeleteByPKey.setInt( argIdx++, Buff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindVar"
		>$switch IsNullable yes implPgSqlDeleteTableBindOptVar
			default implPgSqlDeleteTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlDeleteTableBindOptBlobVar
			BoolDef implPgSqlDeleteTableBindOptBoolVar
			EnumDef implPgSqlDeleteTableBindOptEnumVar
			Int16Def implPgSqlDeleteTableBindOptInt16Var
			Int32Def implPgSqlDeleteTableBindOptInt32Var
			Int64Def implPgSqlDeleteTableBindOptInt64Var
			UInt16Def implPgSqlDeleteTableBindOptUInt16Var
			UInt32Def implPgSqlDeleteTableBindOptUInt32Var
			UInt64Def implPgSqlDeleteTableBindOptUInt64Var
			Id16Gen implPgSqlDeleteTableBindOptInt16Var
			Id32Gen implPgSqlDeleteTableBindOptInt32Var
			Id64Gen implPgSqlDeleteTableBindOptInt64Var
			FloatDef implPgSqlDeleteTableBindOptFloatVar
			DoubleDef implPgSqlDeleteTableBindOptDoubleVar
			NumberDef implPgSqlDeleteTableBindOptNumberVar
			StringDef implPgSqlDeleteTableBindOptStringVar
			TokenDef implPgSqlDeleteTableBindOptTokenVar
			NmTokenDef implPgSqlDeleteTableBindOptNmTokenVar
			NmTokensDef implPgSqlDeleteTableBindOptNmTokensVar
			TextDef implPgSqlDeleteTableBindOptTextVar
			DateDef implPgSqlDeleteTableBindOptDateVar
			TimeDef implPgSqlDeleteTableBindOptTimeVar
			TimestampDef implPgSqlDeleteTableBindOptTimestampVar
			TZDateDef implPgSqlDeleteTableBindOptTZDateVar
			TZTimeDef implPgSqlDeleteTableBindOptTZTimeVar
			TZTimestampDef implPgSqlDeleteTableBindOptTZTimestampVar
			UuidDef implPgSqlDeleteTableBindOptUuidVar
			UuidGen implPgSqlDeleteTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlDeleteTableBindReqBlobVar
			BoolDef implPgSqlDeleteTableBindReqBoolVar
			EnumDef implPgSqlDeleteTableBindReqEnumVar
			Int16Def implPgSqlDeleteTableBindReqInt16Var
			Int32Def implPgSqlDeleteTableBindReqInt32Var
			Int64Def implPgSqlDeleteTableBindReqInt64Var
			UInt16Def implPgSqlDeleteTableBindReqUInt16Var
			UInt32Def implPgSqlDeleteTableBindReqUInt32Var
			UInt64Def implPgSqlDeleteTableBindReqUInt64Var
			Id16Gen implPgSqlDeleteTableBindReqInt16Var
			Id32Gen implPgSqlDeleteTableBindReqInt32Var
			Id64Gen implPgSqlDeleteTableBindReqInt64Var
			FloatDef implPgSqlDeleteTableBindReqFloatVar
			DoubleDef implPgSqlDeleteTableBindReqDoubleVar
			NumberDef implPgSqlDeleteTableBindReqNumberVar
			StringDef implPgSqlDeleteTableBindReqStringVar
			TokenDef implPgSqlDeleteTableBindReqTokenVar
			NmTokenDef implPgSqlDeleteTableBindReqNmTokenVar
			NmTokensDef implPgSqlDeleteTableBindReqNmTokensVar
			TextDef implPgSqlDeleteTableBindReqTextVar
			DateDef implPgSqlDeleteTableBindReqDateVar
			TimeDef implPgSqlDeleteTableBindReqTimeVar
			TimestampDef implPgSqlDeleteTableBindReqTimestampVar
			TZDateDef implPgSqlDeleteTableBindReqTZDateVar
			TZTimeDef implPgSqlDeleteTableBindReqTZTimeVar
			TZTimestampDef implPgSqlDeleteTableBindReqTZTimestampVar
			UuidDef implPgSqlDeleteTableBindReqUuidVar
			UuidGen implPgSqlDeleteTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqBlobVar">
			stmtDeleteByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqBoolVar">
			stmtDeleteByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptBoolVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqEnumVar">
			stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqInt16Var">
			stmtDeleteByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqInt32Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqInt64Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqUInt16Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqUInt32Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqUInt64Var">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqFloatVar">
			stmtDeleteByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqDoubleVar">
			stmtDeleteByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqNumberVar">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqStringVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqNmTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqNmTokensVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqTextVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqTZDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqTZTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqTZTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindReqUuidVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implCacheOpenCursorByIndexRestrictCluster">
			+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " AND $lower reference Table reference ClusterIdColumn reference Table ClassCode$.$reference Table reference ClusterIdColumn DbColumnName$ = " + Authorization.getSecClusterId() ) )</GenRule>

	<GenRule GenDef="Index" Name="implCacheOpenCursorByIndexRestrictTenant">
			+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " AND $lower reference Table reference TenantIdColumn reference Table ClassCode$.$reference Table reference TenantIdColumn DbColumnName$ = " + Authorization.getSecTenantId() ) )</GenRule>

	<GenRule GenDef="Object" Name="implCommaColumnArg">,
		$implColumnArg$</GenRule>

	<GenRule GenDef="TableCol" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="Atom" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implColumnArg"
		>$reference Column implColumnArg$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlFragRestrictWhereClassCode"
		>$switch BaseHasSubClasses yes implPgSqlFragDoRestrictWhere default implPgSqlFragDoRestrictSecScope$</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlFragDoRestrictWhere">
				+		"WHERE "
				+			"$lower reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'"$switch SecScope None empty System empty Cluster implCacheOpenCursorByIndexRestrictCluster Tenant implCacheOpenCursorByIndexRestrictTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implCacheOpenCursorByIndexRestrictCluster">
			+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " AND $lower reference ClusterIdColumn reference Table ClassCode$.$reference ClusterIdColumn DbColumnName$ = " + Authorization.getSecClusterId() ) )</GenRule>

	<GenRule GenDef="Table" Name="implCacheOpenCursorByIndexRestrictTenant">
			+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " AND $lower reference TenantIdColumn reference Table ClassCode$.$reference TenantIdColumn DbColumnName$ = " + Authorization.getSecTenantId() ) )</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlFragDoRestrictSecScope"
		>$switch SecScope None empty System empty Cluster implCacheOpenCursorByIndexRestrictWhereCluster Tenant implCacheOpenCursorByIndexRestrictWhereTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implCacheOpenCursorByIndexRestrictWhereCluster">
				+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " WHERE $lower reference ClusterIdColumn reference Table ClassCode$.$reference ClusterIdColumn DbColumnName$ = " + Authorization.getSecClusterId() ) )</GenRule>

	<GenRule GenDef="Table" Name="implCacheOpenCursorByIndexRestrictWhereTenant">
				+		( ( schema.isSystemUser( Authorization ) ) ? "" : ( " WHERE $lower reference TenantIdColumn reference Table ClassCode$.$reference TenantIdColumn DbColumnName$ = " + Authorization.getSecTenantId() ) )</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTable">
	public $DefSchemaName$$TableName$Buff[] readAll$TableName$( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAll$TableName$";
		ResultSet resultSet = null;
		Statement stmt = null;
		try {
			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_all$( ?, ?, ?, ?, ? )";
			if( stmtReadBuffAll == null ) {
				stmtReadBuffAll = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffAll.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffAll.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmtReadBuffAll.executeQuery();
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			int idx = 0;
			while( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();
				int idxcol = 1;
$popto Table switch HasClassCode yes implPgSqlTableColumnFetchClassCode default empty$$popto Table iterate Columns( each implPgSqlTableColumnFetchColumn )
$				buff.setRequiredRevision( resultSet.getInt( idxcol ) );
				buffList.add( buff );
				idx ++;
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}$implReadAllTableCatchFinally$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableBindSecClusterId">
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableBindSecTenantId">
			stmtReadBuffAll.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableCatchFinally">
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixVar"
		>$switch IsNullable yes implPgSqlDeleteTableBindSuffixOptVar
			default implPgSqlDeleteTableBindSuffixReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlDeleteTableBindSuffixOptBlobVar
			BoolDef implPgSqlDeleteTableBindSuffixOptBoolVar
			EnumDef implPgSqlDeleteTableBindSuffixOptEnumVar
			Int16Def implPgSqlDeleteTableBindSuffixOptInt16Var
			Int32Def implPgSqlDeleteTableBindSuffixOptInt32Var
			Int64Def implPgSqlDeleteTableBindSuffixOptInt64Var
			UInt16Def implPgSqlDeleteTableBindSuffixOptUInt16Var
			UInt32Def implPgSqlDeleteTableBindSuffixOptUInt32Var
			UInt64Def implPgSqlDeleteTableBindSuffixOptUInt64Var
			Id16Gen implPgSqlDeleteTableBindSuffixOptInt16Var
			Id32Gen implPgSqlDeleteTableBindSuffixOptInt32Var
			Id64Gen implPgSqlDeleteTableBindSuffixOptInt64Var
			FloatDef implPgSqlDeleteTableBindSuffixOptFloatVar
			DoubleDef implPgSqlDeleteTableBindSuffixOptDoubleVar
			NumberDef implPgSqlDeleteTableBindSuffixOptNumberVar
			StringDef implPgSqlDeleteTableBindSuffixOptStringVar
			TokenDef implPgSqlDeleteTableBindSuffixOptTokenVar
			NmTokenDef implPgSqlDeleteTableBindSuffixOptNmTokenVar
			NmTokensDef implPgSqlDeleteTableBindSuffixOptNmTokensVar
			TextDef implPgSqlDeleteTableBindSuffixOptTextVar
			DateDef implPgSqlDeleteTableBindSuffixOptDateVar
			TimeDef implPgSqlDeleteTableBindSuffixOptTimeVar
			TimestampDef implPgSqlDeleteTableBindSuffixOptTimestampVar
			TZDateDef implPgSqlDeleteTableBindSuffixOptTZDateVar
			TZTimeDef implPgSqlDeleteTableBindSuffixOptTZTimeVar
			TZTimestampDef implPgSqlDeleteTableBindSuffixOptTZTimestampVar
			UuidDef implPgSqlDeleteTableBindSuffixOptUuidVar
			UuidGen implPgSqlDeleteTableBindSuffixOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqVar"
		>$switch BaseModelAtomClass
			BlobDef implPgSqlDeleteTableBindSuffixReqBlobVar
			BoolDef implPgSqlDeleteTableBindSuffixReqBoolVar
			EnumDef implPgSqlDeleteTableBindSuffixReqEnumVar
			Int16Def implPgSqlDeleteTableBindSuffixReqInt16Var
			Int32Def implPgSqlDeleteTableBindSuffixReqInt32Var
			Int64Def implPgSqlDeleteTableBindSuffixReqInt64Var
			UInt16Def implPgSqlDeleteTableBindSuffixReqUInt16Var
			UInt32Def implPgSqlDeleteTableBindSuffixReqUInt32Var
			UInt64Def implPgSqlDeleteTableBindSuffixReqUInt64Var
			Id16Gen implPgSqlDeleteTableBindSuffixReqInt16Var
			Id32Gen implPgSqlDeleteTableBindSuffixReqInt32Var
			Id64Gen implPgSqlDeleteTableBindSuffixReqInt64Var
			FloatDef implPgSqlDeleteTableBindSuffixReqFloatVar
			DoubleDef implPgSqlDeleteTableBindSuffixReqDoubleVar
			NumberDef implPgSqlDeleteTableBindSuffixReqNumberVar
			StringDef implPgSqlDeleteTableBindSuffixReqStringVar
			TokenDef implPgSqlDeleteTableBindSuffixReqTokenVar
			NmTokenDef implPgSqlDeleteTableBindSuffixReqNmTokenVar
			NmTokensDef implPgSqlDeleteTableBindSuffixReqNmTokensVar
			TextDef implPgSqlDeleteTableBindSuffixReqTextVar
			DateDef implPgSqlDeleteTableBindSuffixReqDateVar
			TimeDef implPgSqlDeleteTableBindSuffixReqTimeVar
			TimestampDef implPgSqlDeleteTableBindSuffixReqTimestampVar
			TZDateDef implPgSqlDeleteTableBindSuffixReqTZDateVar
			TZTimeDef implPgSqlDeleteTableBindSuffixReqTZTimeVar
			TZTimestampDef implPgSqlDeleteTableBindSuffixReqTZTimestampVar
			UuidDef implPgSqlDeleteTableBindSuffixReqUuidVar
			UuidGen implPgSqlDeleteTableBindSuffixReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqBlobVar">
				stmtDeleteBy$Suffix$.setBytes( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptBlobVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setBytes( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqBoolVar">
				stmtDeleteBy$Suffix$.setBoolean( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptBoolVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setBoolean( argIdx++, arg$Name$.booleanValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqEnumVar">
				stmtDeleteBy$Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptEnumVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqInt16Var">
				stmtDeleteBy$Suffix$.setShort( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptInt16Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setShort( argIdx++, arg$Name$.shortValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqInt32Var">
				stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptInt32Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$.intValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqInt64Var">
				stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptInt64Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$.longValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqUInt16Var">
				stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptUInt16Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$.intValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqUInt32Var">
				stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptUInt32Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$.longValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqUInt64Var">
				stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptUInt64Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqFloatVar">
				stmtDeleteBy$Suffix$.setFloat( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptFloatVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setFloat( argIdx++, arg$Name$.floatValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqDoubleVar">
				stmtDeleteBy$Suffix$.setDouble( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptDoubleVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setDouble( argIdx++, arg$Name$.doubleValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqNumberVar">
				stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptNumberVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqStringVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptStringVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqTokenVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptTokenVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqNmTokenVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptNmTokenVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqNmTokensVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptNmTokensVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqTextVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptTextVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqDateVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptDateVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getDateString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqTimeVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptTimeVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimeString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqTimestampVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptTimestampVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTimestampString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqTZDateVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptTZDateVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZDateString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqTZTimeVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptTZTimeVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimeString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqTZTimestampVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptTZTimestampVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$PgSqlSchema.getTZTimestampString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixReqUuidVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implPgSqlDeleteTableBindSuffixOptUuidVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$.toString() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

</RuleSet>
