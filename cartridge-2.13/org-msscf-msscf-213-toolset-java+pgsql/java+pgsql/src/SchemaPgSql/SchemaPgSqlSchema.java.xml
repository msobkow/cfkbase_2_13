<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+pgsql"
	Name="src/SchemaPgSqlSchema.java"
	Revision="2.13"
	Descr="Java 11 PostgreSQL Jdbc DbIO implementation">

	<GenFile GenDef="SchemaDef" Name="fileSchemaPgSqlSchemaJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$PgSql"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$pgsql.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$PgSql"
		ExpansionClassName="$SchemaName$PgSqlSchemaJava"
		ExpansionKeyName="$SchemaName$PgSqlSchemaJava"
		ExpansionFileName="$SchemaName$PgSqlSchema.java"
>// Description: Java 11 PostgreSQL Jdbc DbIO implementation for $SchemaName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$PgSql;

import java.lang.reflect.*;
import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import javax.naming.*;
import javax.sql.*;
import org.apache.commons.codec.binary.Base64;
import org.msscf.msscf.cflib.CFLib.*;$iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$importJavaPackageSchemaName$$iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$SaxLoader.$SchemaName$SaxLoader;$JavaPgSqlSchemaObjImport$$ReferencedJavaPgSqlSchemaObjImport$

public class $SchemaName$PgSqlSchema
	extends $SchemaName$Schema
	implements I$SchemaName$Schema
{
	protected Connection cnx;
	protected boolean inTransaction;$implSchemaPgSqlDeclStmtIsBlahUser$$iterate Id16Generators( each implSchemaPgSqlDeclStmtNext empty empty )$$iterate Id32Generators( each implSchemaPgSqlDeclStmtNext empty empty )$$iterate Id64Generators( each implSchemaPgSqlDeclStmtNext empty empty )$$JavaPgSqlSchemaObjMembers$$ReferencedJavaPgSqlSchemaObjMembers$
$implSchemaPgSqlConstructor$$implSchemaPgSqlCnxAccessors$$implSchemaPgSqlIsConnected$$implSchemaPgSqlConnect$$implSchemaPgSqlDisconnect$$implSchemaPgSqlCommitControl$$implSchemaPgSqlIsSystemUser$$implSchemaPgSqlIsClusterUser$$implSchemaPgSqlIsTenantUser$$iterate Id16Generators( each implSchemaPgSqlNextIdGen empty empty )$$iterate Id32Generators( each implSchemaPgSqlNextIdGen empty empty )$$iterate Id64Generators( each implSchemaPgSqlNextIdGen empty empty )$$iterate UuidGenerators( each implSchemaPgSqlNextIdGen empty empty )$$implPgSqlSchemaFileImport$$implSchemaPgSqlSchemaMoreMethods$$JavaPgSqlSchemaObjImpl$$ReferencedJavaPgSqlSchemaObjImpl$}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="implPgSqlSchemaFileImport">
	/**
	 *	Import the contents of the specified file name
	 *	and file contents by applying a SAX Loader parse.
	 */
	public String fileImport( $SecSchemaName$Authorization auth, String fileName, String fileContent ) {
		if( isTransactionOpen() ) {
			rollback();
		}

		try {
			beginTransaction();

			$SchemaName$SaxLoader saxLoader = new $SchemaName$SaxLoader();
			I$SchemaName$SchemaObj schemaObj = new $SchemaName$SchemaObj();
			schemaObj.setBackingStore( this );
			saxLoader.setSchemaObj( schemaObj );
			I$SecSchemaName$ClusterObj useCluster = schemaObj.getClusterTableObj().readClusterByIdIdx( auth.getSecClusterId() );
			I$SecSchemaName$TenantObj useTenant = schemaObj.getTenantTableObj().readTenantByIdIdx( auth.getSecTenantId() );
			CFLibCachedMessageLog runlog = new CFLibCachedMessageLog();
			saxLoader.setLog( runlog );
			saxLoader.setUseCluster( useCluster );
			saxLoader.setUseTenant( useTenant );
			saxLoader.parseStringContents( fileContent );
			String logFileContent = runlog.getCacheContents();
			if( logFileContent == null ) {
				logFileContent = "";
			}

			commit();

			return( logFileContent );
		}
		catch( RuntimeException e ) {
			rollback();
			throw e;
		}
		catch( Error e ) {
			rollback();
			throw e;
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="ReferencedJavaPgSqlSchemaObjImport"
		>$iterate SchemaRefs( each ApplyJavaPgSqlSchemaObjImport empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ApplyJavaPgSqlSchemaObjImport"
		>$reference RefSchema JavaPgSqlSchemaObjImport$</GenRule>

	<GenRule GenDef="SchemaDef" Name="ReferencedJavaPgSqlSchemaObjMembers"
		>$iterate SchemaRefs( each ApplyJavaPgSqlSchemaObjMembers empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ApplyJavaPgSqlSchemaObjMembers"
		>$reference RefSchema JavaPgSqlSchemaObjMembers$</GenRule>

	<GenRule GenDef="SchemaDef" Name="ReferencedJavaPgSqlSchemaObjImpl"
		>$iterate SchemaRefs( each ApplyJavaPgSqlSchemaObjImpl empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ApplyJavaPgSqlSchemaObjImpl"
		>$reference RefSchema JavaPgSqlSchemaObjImpl$</GenRule>

	<GenRule GenDef="Value" Name="implSchemaPgSqlDeclStmtNext">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlDeclStmtIsBlahUser">
	protected PreparedStatement stmtSelectIsSystemUser = null;
	protected PreparedStatement stmtSelectIsClusterUser = null;
	protected PreparedStatement stmtSelectIsTenantUser = null;</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlSchemaMoreMethods"
		>$implPgSqlSchemaReleasePreparedStatements$$implSchemaPgSqlGetQuotedString$$implSchemaPgSqlGetNullableString$$implSchemaPgSqlGetBlobString$$implSchemaPgSqlGetBoolString$$implSchemaPgSqlGetInt16String$$implSchemaPgSqlGetInt32String$$implSchemaPgSqlGetInt64String$$implSchemaPgSqlGetUInt16String$$implSchemaPgSqlGetUInt32String$$implSchemaPgSqlGetUInt64String$$implSchemaPgSqlGetFloatString$$implSchemaPgSqlGetDoubleString$$implSchemaPgSqlGetNumberString$$implSchemaPgSqlGetNullableInt32$$implSchemaPgSqlGetNullableInt16$$implSchemaPgSqlGetNullableUInt16$$implSchemaPgSqlGetNullableUInt32$$implSchemaPgSqlGetNullableUInt64$$implSchemaPgSqlGetNullableIntByte$$implSchemaPgSqlGetQuotedDateString$$implSchemaPgSqlGetQuotedTimeString$$implSchemaPgSqlGetQuotedTimestampString$$implSchemaPgSqlGetQuotedTZDateString$$implSchemaPgSqlGetQuotedTZTimeString$$implSchemaPgSqlGetQuotedTZTimestampString$$implSchemaPgSqlGetDateString$$implSchemaPgSqlGetTimeString$$implSchemaPgSqlGetTimestampString$$implSchemaPgSqlGetTZDateString$$implSchemaPgSqlGetTZTimeString$$implSchemaPgSqlGetTZTimestampString$$implSchemaPgSqlGetUuidString$$implSchemaPgSqlConvertDateString$$implSchemaPgSqlConvertTimeString$$implSchemaPgSqlConvertTimestampString$$implSchemaPgSqlConvertTZDateString$$implSchemaPgSqlConvertTZTimeString$$implSchemaPgSqlConvertTZTimestampString$$implSchemaPgSqlConvertUuidString$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implPgSqlSchemaReleasePreparedStatements">
	/**
	 *	Release the prepared statements.
	 *	&lt;p&gt;
	 *	When the schema changes connections, the prepared statements
	 *	have to be released because they contain connection-specific
	 *	information for most databases.
	 */
	public void releasePreparedStatements() {
		final String S_ProcName = "releasePreparedStatements";
$implPgSqlSchemaReleaseIsSystemUser$$implPgSqlSchemaReleaseIsClusterUser$$implPgSqlSchemaReleaseIsTenantUser$$iterate Id16Generators( each implPgSqlSchemaIdGenReleasePStatements empty empty )$$iterate Id32Generators( each implPgSqlSchemaIdGenReleasePStatements empty empty )$$iterate Id64Generators( each implPgSqlSchemaIdGenReleasePStatements empty empty )$
$iterate SchemaTables( each implPgSqlSchemaInvokeTableReleasePreparedStatements )$
	}
</GenRule>

	<GenRule GenDef="Value" Name="implPgSqlSchemaIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implPgSqlSchemaReleaseIsSystemUser">
		if( stmtSelectIsSystemUser != null ) {
			try {
				stmtSelectIsSystemUser.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectIsSystemUser = null;
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implPgSqlSchemaReleaseIsClusterUser">
		if( stmtSelectIsClusterUser != null ) {
			try {
				stmtSelectIsClusterUser.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectIsClusterUser = null;
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implPgSqlSchemaReleaseIsTenantUser">
		if( stmtSelectIsTenantUser != null ) {
			try {
				stmtSelectIsTenantUser.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectIsTenantUser = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implPgSqlSchemaInvokeTableReleasePreparedStatements">
		if( ( table$TableName$ != null ) &amp;&amp; ( table$TableName$ instanceof $SchemaName$PgSql$TableName$Table ) ) {
			$SchemaName$PgSql$TableName$Table table = ($SchemaName$PgSql$TableName$Table)table$TableName$;
			table.releasePreparedStatements();
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlNewSchema">
	public I$SchemaName$Schema newSchema() {
		return( new $SchemaName$PgSqlSchema() );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implSchemaPgSqlConstructTable">
		table$TableName$ = new $SchemaName$PgSql$TableName$Table( this );</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConstructor">
	public $SchemaName$PgSqlSchema() {
		super();
		cnx = null;
		inTransaction = false;$iterate SchemaTables( each implSchemaPgSqlConstructTable )$
	}

	public $SchemaName$PgSqlSchema( $SchemaName$ConfigurationFile conf ) {
		super( conf );
		cnx = null;
		inTransaction = false;$iterate SchemaTables( each implSchemaPgSqlConstructTable )$
		setDbSchemaName( conf.getDbDatabase() );
	}

	public $SchemaName$PgSqlSchema( String argJndiName ) {
		super( argJndiName );
		cnx = null;
		inTransaction = false;$iterate SchemaTables( each implSchemaPgSqlConstructTable )$
	}

	public $SchemaName$PgSqlSchema( Connection argCnx ) {
		super();
		cnx = argCnx;
		inTransaction = false;$iterate SchemaTables( each implSchemaPgSqlConstructTable )$
		try {
			cnx.setAutoCommit( false );
			cnx.setTransactionIsolation( Connection.TRANSACTION_REPEATABLE_READ );
			cnx.rollback();
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"$SchemaName$PgSqlSchema-constructor",
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConnect">
	public boolean connect() {
		final String S_ProcName = "connect";
		if( cnx != null ) {
			return( false );
		}
$implSchemaPgSqlConnectEnsureConfiguration$$implSchemaPgSqlConnectEstablishJNDI$
		throw new CFLibUsageException( getClass(),
			S_ProcName,
			"Neither configurationFile nor jndiName found, do not know how to connect to database" );
	}
$implSchemaPgSqlConnectUserPW$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConnectUserPW">
	public boolean connect( String username, String password ) {
		final String S_ProcName = "connect";
		if( cnx != null ) {
			return( false );
		}
		if( ( username == null ) || ( username.length() &lt;= 0 ) ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				"username" );
		}
		if( password == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				"password" );
		}
$implSchemaPgSqlConnectEnsureUserPWConfiguration$
		throw new CFLibUsageException( getClass(),
			S_ProcName,
			"configurationFile not found, do not know how to connect to database" );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConnectEnsureUserPWConfiguration">
		if( configuration != null ) {
			String dbServer = configuration.getDbServer();
			int dbPort = configuration.getDbPort();
			String dbDatabase = configuration.getDbDatabase();
			String dbUserName = username;
			String dbPassword = password;
			String url =
					"jdbc:postgresql://" + dbServer
				+	":" + Integer.toString( dbPort )
				+	"/" + dbDatabase;
			Properties props = new Properties();
			props.setProperty( "user", dbUserName );
			props.setProperty( "password", dbPassword );
			try {
				cnx = DriverManager.getConnection( url, props );
				cnx.setAutoCommit( false );
				cnx.setTransactionIsolation( Connection.TRANSACTION_REPEATABLE_READ );
				cnx.rollback();
				setDbSchemaName( dbDatabase );
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			return( true );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConnectEnsureConfiguration">
		if( configuration != null ) {
			String dbServer = configuration.getDbServer();
			int dbPort = configuration.getDbPort();
			String dbDatabase = configuration.getDbDatabase();
			String dbUserName = configuration.getDbUserName();
			String dbPassword = configuration.getDbPassword();
			String url =
					"jdbc:postgresql://" + dbServer
				+	":" + Integer.toString( dbPort )
				+	"/" + dbDatabase;
			Properties props = new Properties();
			props.setProperty( "user", dbUserName );
			props.setProperty( "password", dbPassword );
			try {
				cnx = DriverManager.getConnection( url, props );
				cnx.setAutoCommit( false );
				cnx.setTransactionIsolation( Connection.TRANSACTION_REPEATABLE_READ );
				cnx.rollback();
				setDbSchemaName( dbDatabase );
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			return( true );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConnectEstablishJNDI">
		if( jndiName != null ) {
			try {
				Context ctx = new InitialContext();
				DataSource ds = (DataSource)ctx.lookup( jndiName );
				if( ds == null ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Could not get resolve DataSource \"" + jndiName + "\"" );
				}
				cnx = ds.getConnection();
				if( cnx == null ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Could not get Connection from PooledConnection for ConnectionPoolDataSource \"" + jndiName + "\"" );
				}
				cnx.setAutoCommit( false );
				cnx.setTransactionIsolation( Connection.TRANSACTION_REPEATABLE_READ );
				cnx.rollback();
			}
			catch( NamingException e ) {
				cnx = null;
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"NamingException " + e.getMessage(),
					e );
			}
			catch( SQLException e ) {
				cnx = null;
				inTransaction = false;
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			return( true );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlIsConnected">
	public boolean isConnected() {
		final String S_ProcName = "isConnected";
		boolean retval;
		if( cnx == null ) {
			retval = false;
		}
		else {
			try {
				if( cnx.isClosed() ) {
					retval = false;
					cnx = null;
					releasePreparedStatements();
				}
				else {
					retval = true;
				}
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
		}
		return( retval );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlDisconnect">
	public void disconnect( boolean doCommit ) {
		final String S_ProcName = "disconnect";
		if( cnx != null ) {
			try {
				if( ! cnx.isClosed() ) {
					if( doCommit ) {
						cnx.commit();
					}
					else {
						cnx.rollback();
					}
					cnx.close();
				}
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				cnx = null;
			}
		}
		releasePreparedStatements();
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlCommitControl">
	public boolean isTransactionOpen() {
		return( inTransaction );
	}

	public boolean beginTransaction() {
		if( inTransaction ) {
			return( false );
		}
		try {
			String sql =
					"begin transaction";
			Statement stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY );
			stmt.execute( sql );
			inTransaction = true;
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"beginTransaction",
				e );
		}
		return( inTransaction );
	}

	public void commit() {
		try {
			cnx.commit();
			inTransaction = false;
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"commit",
				e );
		}
	}

	public void rollback() {
		try {
			if( cnx != null ) {
				cnx.rollback();
			}
			inTransaction = false;
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"rollback",
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlCnxAccessors">
	public Connection getCnx() {
		return( cnx );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetQuotedString">
	public static String getQuotedString(String val) {
		if (val == null) {
			return ("null");
		}
		else {
			char c;
			StringBuilder quoted = new StringBuilder();
			quoted.append( "'" );
			int len = val.length();
			for (int i = 0; i &lt; len; i++)
			{
				if (val.charAt( i ) == '\'')
				{
					quoted.append("''");
				}
				else if (val.charAt( i ) == '\\\\') {
					quoted.append("'||E'\\\\\\\\'||'");
				}
				else {
					c = val.charAt( i );
					if (   ( c == '0' )
						|| ( c == '1' )
						|| ( c == '2' )
						|| ( c == '3' )
						|| ( c == '4' )
						|| ( c == '5' )
						|| ( c == '6' )
						|| ( c == '7' )
						|| ( c == '8' )
						|| ( c == '9' )
						|| ( c == 'a' )
						|| ( c == 'b' )
						|| ( c == 'c' )
						|| ( c == 'd' )
						|| ( c == 'e' )
						|| ( c == 'f' )
						|| ( c == 'g' )
						|| ( c == 'h' )
						|| ( c == 'i' )
						|| ( c == 'j' )
						|| ( c == 'k' )
						|| ( c == 'l' )
						|| ( c == 'm' )
						|| ( c == 'n' )
						|| ( c == 'o' )
						|| ( c == 'p' )
						|| ( c == 'q' )
						|| ( c == 'r' )
						|| ( c == 's' )
						|| ( c == 't' )
						|| ( c == 'u' )
						|| ( c == 'v' )
						|| ( c == 'w' )
						|| ( c == 'x' )
						|| ( c == 'y' )
						|| ( c == 'z' )
						|| ( c == 'A' )
						|| ( c == 'B' )
						|| ( c == 'C' )
						|| ( c == 'D' )
						|| ( c == 'E' )
						|| ( c == 'F' )
						|| ( c == 'G' )
						|| ( c == 'H' )
						|| ( c == 'I' )
						|| ( c == 'J' )
						|| ( c == 'K' )
						|| ( c == 'L' )
						|| ( c == 'M' )
						|| ( c == 'N' )
						|| ( c == 'O' )
						|| ( c == 'P' )
						|| ( c == 'Q' )
						|| ( c == 'R' )
						|| ( c == 'S' )
						|| ( c == 'T' )
						|| ( c == 'U' )
						|| ( c == 'V' )
						|| ( c == 'W' )
						|| ( c == 'X' )
						|| ( c == 'Y' )
						|| ( c == 'Z' )
						|| ( c == ' ' )
						|| ( c == '\t' )
						|| ( c == '\r' )
						|| ( c == '\n' )
						|| ( c == '`' )
						|| ( c == '~' )
						|| ( c == '!' )
						|| ( c == '@' )
						|| ( c == '#' )
						|| ( c == '$$' )
						|| ( c == '%' )
						|| ( c == '^' )
						|| ( c == '&amp;' )
						|| ( c == '*' )
						|| ( c == '(' )
						|| ( c == ')' )
						|| ( c == '-' )
						|| ( c == '_' )
						|| ( c == '=' )
						|| ( c == '+' )
						|| ( c == '[' )
						|| ( c == ']' )
						|| ( c == '{' )
						|| ( c == '}' )
						|| ( c == '|' )
						|| ( c == ';' )
						|| ( c == ':' )
						|| ( c == '"' )
						|| ( c == '&lt;' )
						|| ( c == '&gt;' )
						|| ( c == ',' )
						|| ( c == '.' )
						|| ( c == '/' )
						|| ( c == '?' ))
					{
						quoted.append(c);
					}
					else {
//						Syslog.warn("\\t\\t\\tReplacing invalid character '" + c + "' with space");
						quoted.append( ' ' );
					}
				}
			}
			quoted.append( "'" );
			return (quoted.toString());
			}
		}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetNullableString">
	public static String getNullableString(ResultSet reader, int colidx) {
		try {
			String val = reader.getString( colidx );
			if( reader.wasNull() ) {
				return(null);
			}
			else {
				return( val );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( $SchemaName$PgSqlSchema.class,
				"getNullableString",
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetBlobString">
	public static String getBlobString(byte[] val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( "'" + new String( Base64.encodeBase64( val ) ) + "'" );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetBoolString">
	public static String getBoolString(Boolean val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			if( val ) {
				return( "true" );
			}
			else {
				return( "false" );
			}
		}
	}

	public static String getBoolString(boolean val) {
		if( val ) {
			return( "true" );
		}
		else {
			return( "false" );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetInt16String">
	public static String getInt16String(Short val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( val.toString() );
		}
	}

	public static String getInt16String(short val) {
		return( Short.toString( val ) );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetInt32String">
	public static String getInt32String(Integer val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( val.toString() );
		}
	}

	public static String getInt32String(int val) {
		return( Integer.toString( val ) );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetInt64String">
	public static String getInt64String(Long val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( val.toString() );
		}
	}

	public static String getInt64String(long val) {
		return( Long.toString( val ) );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetUInt16String">
	public static String getUInt16String(Integer val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( val.toString() );
		}
	}

	public static String getUInt16String(int val) {
		return( Integer.toString( val ) );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetUInt32String">
	public static String getUInt32String(Long val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( val.toString() );
		}
	}

	public static String getUInt32String(long val) {
		return( Long.toString( val ) );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetUInt64String">
	public static String getUInt64String(BigDecimal val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( val.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetFloatString">
	public static String getFloatString(Float val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( val.toString() );
		}
	}

	public static String getFloatString(float val) {
		return( Float.toString( val ) );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetDoubleString">
	public static String getDoubleString(Double val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( val.toString() );
		}
	}

	public static String getDoubleString(double val) {
		return( Double.toString( val ) );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetNumberString">
	public static String getNumberString(BigDecimal val) {
		if( val == null ) {
			return( "null" );
		}
		else {
			return( val.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetNullableInt32">
	public static Integer getNullableInt32(ResultSet reader, int colidx) {
		try {
			int val = reader.getInt( colidx );
			if( reader.wasNull() ) {
				return(null);
			}
			else {
				return( Integer.valueOf( val ) );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( $SchemaName$PgSqlSchema.class,
				"getNullableInt32",
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetNullableInt16">
	public static Short getNullableInt16(ResultSet reader, int colidx) {
		try {
			short val = reader.getShort( colidx );
			if( reader.wasNull() ) {
				return(null);
			}
			else {
				return( Short.valueOf( val ) );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( $SchemaName$PgSqlSchema.class,
				"getNullableInt64",
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetNullableUInt16">
	public static Integer getNullableUInt16(ResultSet reader, int colidx) {
		try {
			int val = reader.getInt( colidx );
			if( reader.wasNull() ) {
				return(null);
			}
			else {
				return( Integer.valueOf( val ) );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( $SchemaName$PgSqlSchema.class,
				"getNullableUInt16",
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetNullableUInt32">
	public static Long getNullableUInt32(ResultSet reader, int colidx) {
		try {
			long val = reader.getLong( colidx );
			if( reader.wasNull() ) {
				return(null);
			}
			else {
				return( Long.valueOf( val ) );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( $SchemaName$PgSqlSchema.class,
				"getNullableUInt32",
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetNullableUInt64">
	public static BigDecimal getNullableUInt64(ResultSet reader, int colidx) {
		try {
			String strval = reader.getString( colidx );
			if( reader.wasNull() || ( strval == null ) || ( strval.length() &lt;=0 ) ) {
				return(null);
			}
			else {
				BigDecimal retval = new BigDecimal( strval );
				return( retval );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( $SchemaName$PgSqlSchema.class,
				"getNullableUInt64",
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetNullableIntByte">
	public static Byte getNullableByte(ResultSet reader, int colidx) {
		try {
			byte val = reader.getByte( colidx );
			if( reader.wasNull() ) {
				return(null);
			}
			else {
				return( Byte.valueOf( val ) );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( $SchemaName$PgSqlSchema.class,
				"getNullableByte",
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetDateString">
	public static String getDateString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			StringBuffer buff = new StringBuffer();
			Formatter fmt = new Formatter( buff );
			Calendar db = CFLibDbUtil.getDbServerCalendar( val );
			fmt.format( "%1$$04d", db.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.DAY_OF_MONTH ) );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetTimeString">
	public static String getTimeString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			StringBuffer buff = new StringBuffer();
			Formatter fmt = new Formatter( buff );
			Calendar db = CFLibDbUtil.getDbServerCalendar( val );
			fmt.format( "%1$$02d", db.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.SECOND ) );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetTimestampString">
	public static String getTimestampString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			StringBuffer buff = new StringBuffer();
			Formatter fmt = new Formatter( buff );
			Calendar db = CFLibDbUtil.getDbServerCalendar( val );
			fmt.format( "%1$$04d", db.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.DAY_OF_MONTH ) );
			buff.append( " " );
			fmt.format( "%1$$02d", db.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.SECOND ) );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetTZDateString">
	public static String getTZDateString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			Calendar db = CFLibDbUtil.getDbServerCalendar( val );
			StringBuffer buff = new StringBuffer();
			Formatter fmt = new Formatter( buff );
			fmt.format( "%1$$04d", db.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.DAY_OF_MONTH ) );
			buff.append( " " );
			fmt.format( "%1$$02d", db.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.SECOND ) );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetTZTimeString">
	public static String getTZTimeString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			Calendar db = CFLibDbUtil.getDbServerCalendar( val );
			StringBuffer buff = new StringBuffer();
			Formatter fmt = new Formatter( buff );
			fmt.format( "%1$$04d", db.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.DAY_OF_MONTH ) );
			buff.append( " " );
			fmt.format( "%1$$02d", db.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.SECOND ) );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetTZTimestampString">
	public static String getTZTimestampString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			Calendar db = CFLibDbUtil.getDbServerCalendar( val );
			StringBuffer buff = new StringBuffer();
			Formatter fmt = new Formatter( buff );
			fmt.format( "%1$$04d", db.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.DAY_OF_MONTH ) );
			buff.append( " " );
			fmt.format( "%1$$02d", db.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.SECOND ) );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetQuotedDateString">
	public static String getQuotedDateString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			StringBuffer buff = new StringBuffer( "'" );
			Formatter fmt = new Formatter( buff );
			fmt.format( "%1$$04d", val.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", val.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", val.get( Calendar.DAY_OF_MONTH ) );
			buff.append( "'" );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetQuotedTimeString">
	public static String getQuotedTimeString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			StringBuffer buff = new StringBuffer( "'" );
			Formatter fmt = new Formatter( buff );
			fmt.format( "%1$$02d", val.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", val.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", val.get( Calendar.SECOND ) );
			buff.append( "'" );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetQuotedTimestampString">
	public static String getQuotedTimestampString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			StringBuffer buff = new StringBuffer( "'" );
			Formatter fmt = new Formatter( buff );
			fmt.format( "%1$$04d", val.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", val.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", val.get( Calendar.DAY_OF_MONTH ) );
			buff.append( " " );
			fmt.format( "%1$$02d", val.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", val.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", val.get( Calendar.SECOND ) );
			buff.append( "'" );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetQuotedTZDateString">
	public static String getQuotedTZDateString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			Calendar db = CFLibDbUtil.getDbServerCalendar( val );
			StringBuffer buff = new StringBuffer( "'" );
			Formatter fmt = new Formatter( buff );
			fmt.format( "%1$$04d", db.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.DAY_OF_MONTH ) );
			buff.append( " " );
			fmt.format( "%1$$02d", db.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.SECOND ) );
			buff.append( "'" );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetQuotedTZTimeString">
	public static String getQuotedTZTimeString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			Calendar db = CFLibDbUtil.getDbServerCalendar( val );
			StringBuffer buff = new StringBuffer( "'" );
			Formatter fmt = new Formatter( buff );
			fmt.format( "%1$$04d", db.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.DAY_OF_MONTH ) );
			buff.append( " " );
			fmt.format( "%1$$02d", db.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.SECOND ) );
			buff.append( "'" );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetQuotedTZTimestampString">
	public static String getQuotedTZTimestampString(Calendar val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			Calendar db = CFLibDbUtil.getDbServerCalendar( val );
			StringBuffer buff = new StringBuffer( "'" );
			Formatter fmt = new Formatter( buff );
			fmt.format( "%1$$04d", db.get( Calendar.YEAR ) );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.MONTH ) + 1 );
			buff.append( "-" );
			fmt.format( "%1$$02d", db.get( Calendar.DAY_OF_MONTH ) );
			buff.append( " " );
			fmt.format( "%1$$02d", db.get( Calendar.HOUR_OF_DAY ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.MINUTE ) );
			buff.append( ":" );
			fmt.format( "%1$$02d", db.get( Calendar.SECOND ) );
			buff.append( "'" );
			fmt.close();
			return( buff.toString() );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlGetUuidString">
	public static String getUuidString(UUID val) {
		if ( val == null ) {
			return ("null");
		}
		else {
			return( "'" + val.toString() + "'" );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertDateString">
	public static Calendar convertDateString(String val) {
		if( ( val == null ) || ( val.length() == 0 ) ) {
			return( null );
		}
		else if ( val.length() != 10 ) {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertDateString",
				"Value must be in YYYY-MM-DD format, \"" + val + "\" is invalid" );
		}
		else if (((val.charAt( 0 ) &gt;= '0') &amp;&amp; (val.charAt( 0 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 1 ) &gt;= '0') &amp;&amp; (val.charAt( 1 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 2 ) &gt;= '0') &amp;&amp; (val.charAt( 2 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 3 ) &gt;= '0') &amp;&amp; (val.charAt( 3 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 4 ) == '-')
			 &amp;&amp; ((val.charAt( 5 ) &gt;= '0') &amp;&amp; (val.charAt( 5 ) &lt;= '1'))
			 &amp;&amp; ((val.charAt( 6 ) &gt;= '0') &amp;&amp; (val.charAt( 6 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 7 ) == '-' )
			 &amp;&amp; ((val.charAt( 8 ) &gt;= '0') &amp;&amp; (val.charAt( 8 ) &lt;= '3'))
			 &amp;&amp; ((val.charAt( 9 ) &gt;= '0') &amp;&amp; (val.charAt( 9 ) &lt;= '9')) )
$implSchemaPgSqlConvertDateStringIfMatchElse$
	}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertDateStringIfMatchElse"
>		{
			/*
			 *	NOTE:
			 *		.Net uses substring( startcol, lengthOfSubstring )
			 *		Java uses substring( startcol, endcol ) and does not
			 *			include charAt( endcol );
			 */
			int year = Integer.parseInt( val.substring( 0, 4 ) );
			int month = Integer.parseInt( val.substring( 5, 7 ) );
			int day = Integer.parseInt( val.substring( 8, 10 ) );
			Calendar retval = new GregorianCalendar( CFLibDbUtil.getDbServerTimeZone() );
			retval.set( Calendar.YEAR, year );
			retval.set( Calendar.MONTH, month - 1 );
			retval.set( Calendar.DAY_OF_MONTH, day );
			retval.set( Calendar.HOUR_OF_DAY, 0 );
			retval.set( Calendar.MINUTE, 0 );
			retval.set( Calendar.SECOND, 0 );
			Calendar local = new GregorianCalendar();
			local.setTimeInMillis( retval.getTimeInMillis() );
			return( local );
		}
		else {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertDateString",
				"Value must be in YYYY-MM-DD format, \"" + val + "\" is invalid" );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTimeString">
	public static Calendar convertTimeString(String val) {
		if( ( val == null ) || ( val.length() == 0 ) ) {
			return( null );
		}
		else if ( val.length() != 8 ) {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTimeString",
				"Value must be in HH24:MI:SS format, \"" + val + "\" is invalid" );
		}
		else if (((val.charAt( 0 ) &gt;= '0') &amp;&amp; (val.charAt( 0 ) &lt;= '2'))
			 &amp;&amp; ((val.charAt( 1 ) &gt;= '0') &amp;&amp; (val.charAt( 1 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 2 ) == ':')
			 &amp;&amp; ((val.charAt( 3 ) &gt;= '0') &amp;&amp; (val.charAt( 3 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 4 ) &gt;= '0') &amp;&amp; (val.charAt( 4 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 5 ) == ':')
			 &amp;&amp; ((val.charAt( 6 ) &gt;= '0') &amp;&amp; (val.charAt( 6 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 7 ) &gt;= '0') &amp;&amp; (val.charAt( 7 ) &lt;= '9')) )
$implSchemaPgSqlConvertTimeStringIfMatchElse$
	}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTimeStringIfMatchElse"
>		{
			/*
			 *	NOTE:
			 *		.Net uses substring( startcol, lengthOfSubstring )
			 *		Java uses substring( startcol, endcol ) and does not
			 *			include charAt( endcol );
			 */
			int hour = Integer.parseInt( val.substring( 0, 2 ) );
			int minute = Integer.parseInt( val.substring( 3, 5 ) );
			int second = Integer.parseInt( val.substring( 6, 8 ) );
			Calendar retval = new GregorianCalendar( CFLibDbUtil.getDbServerTimeZone() );
			retval.set( Calendar.YEAR, 2000 );
			retval.set( Calendar.MONTH, 0 );
			retval.set( Calendar.DAY_OF_MONTH, 1 );
			retval.set( Calendar.HOUR_OF_DAY, hour );
			retval.set( Calendar.MINUTE, minute );
			retval.set( Calendar.SECOND, second );
			Calendar local = new GregorianCalendar();
			local.setTimeInMillis( retval.getTimeInMillis() );
			return( local );
		}
		else {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTimeString",
				"Value must be in HH24:MI:SS format \"" + val + "\" is invalid" );
		}</GenRule>


	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTimestampString">
	public static Calendar convertTimestampString(String val) {
		if( ( val == null ) || ( val.length() == 0 ) ) {
			return( null );
		}
		else if ( val.length() != 19 ) {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTimestampString",
				"Value must be in YYYY-MM-DD HH24:MI:SS format \"" + val + "\" is invalid" );
		}
		else if (((val.charAt( 0 ) &gt;= '0') &amp;&amp; (val.charAt( 0 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 1 ) &gt;= '0') &amp;&amp; (val.charAt( 1 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 2 ) &gt;= '0') &amp;&amp; (val.charAt( 2 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 3 ) &gt;= '0') &amp;&amp; (val.charAt( 3 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 4 ) == '-')
			 &amp;&amp; ((val.charAt( 5 ) &gt;= '0') &amp;&amp; (val.charAt( 5 ) &lt;= '1'))
			 &amp;&amp; ((val.charAt( 6 ) &gt;= '0') &amp;&amp; (val.charAt( 6 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 7 ) == '-' )
			 &amp;&amp; ((val.charAt( 8 ) &gt;= '0') &amp;&amp; (val.charAt( 8 ) &lt;= '3'))
			 &amp;&amp; ((val.charAt( 9 ) &gt;= '0') &amp;&amp; (val.charAt( 9 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 10 ) == ' ' )
			 &amp;&amp; ((val.charAt( 11 ) &gt;= '0') &amp;&amp; (val.charAt( 11 ) &lt;= '2'))
			 &amp;&amp; ((val.charAt( 12 ) &gt;= '0') &amp;&amp; (val.charAt( 12 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 13 ) == ':' )
			 &amp;&amp; ((val.charAt( 14 ) &gt;= '0') &amp;&amp; (val.charAt( 14 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 15 ) &gt;= '0') &amp;&amp; (val.charAt( 15 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 16 ) == ':' )
			 &amp;&amp; ((val.charAt( 17 ) &gt;= '0') &amp;&amp; (val.charAt( 17 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 18 ) &gt;= '0') &amp;&amp; (val.charAt( 18 ) &lt;= '9')) )
$implSchemaPgSqlConvertTimestampStringIfMatchElse$
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTimestampStringIfMatchElse"
>		{
			/*
			 *	NOTE:
			 *		.Net uses substring( startcol, lengthOfSubstring )
			 *		Java uses substring( startcol, endcol ) and does not
			 *			include charAt( endcol );
			 */
			int year = Integer.parseInt( val.substring( 0, 4 ) );
			int month = Integer.parseInt( val.substring( 5, 7 ) );
			int day = Integer.parseInt( val.substring( 8, 10 ) );
			int hour = Integer.parseInt( val.substring( 11, 13 ) );
			int minute = Integer.parseInt( val.substring( 14, 16 ) );
			int second = Integer.parseInt( val.substring( 17, 19 ) );
			Calendar retval = new GregorianCalendar( CFLibDbUtil.getDbServerTimeZone() );
			retval.set( Calendar.YEAR, year );
			retval.set( Calendar.MONTH, month - 1 );
			retval.set( Calendar.DAY_OF_MONTH, day );
			retval.set( Calendar.HOUR_OF_DAY, hour );
			retval.set( Calendar.MINUTE, minute );
			retval.set( Calendar.SECOND, second );
			Calendar local = new GregorianCalendar();
			local.setTimeInMillis( retval.getTimeInMillis() );
			return( local );
		}
		else {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTimestampString",
				"Value must be in YYYY-MM-DD HH24:MI:SS format \"" + val + "\" is invalid" );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTZDateString">
	public static Calendar convertTZDateString(String val) {
		if( ( val == null ) || ( val.length() == 0 ) ) {
			return( null );
		}
		else if ( val.length() != 19 ) {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTZDateString",
				"Value must be in YYYY-MM-DD HH24:MI:SS format \"" + val + "\" is invalid" );
		}
		else if (((val.charAt( 0 ) &gt;= '0') &amp;&amp; (val.charAt( 0 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 1 ) &gt;= '0') &amp;&amp; (val.charAt( 1 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 2 ) &gt;= '0') &amp;&amp; (val.charAt( 2 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 3 ) &gt;= '0') &amp;&amp; (val.charAt( 3 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 4 ) == '-')
			 &amp;&amp; ((val.charAt( 5 ) &gt;= '0') &amp;&amp; (val.charAt( 5 ) &lt;= '1'))
			 &amp;&amp; ((val.charAt( 6 ) &gt;= '0') &amp;&amp; (val.charAt( 6 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 7 ) == '-' )
			 &amp;&amp; ((val.charAt( 8 ) &gt;= '0') &amp;&amp; (val.charAt( 8 ) &lt;= '3'))
			 &amp;&amp; ((val.charAt( 9 ) &gt;= '0') &amp;&amp; (val.charAt( 9 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 10 ) == ' ' )
			 &amp;&amp; ((val.charAt( 11 ) &gt;= '0') &amp;&amp; (val.charAt( 11 ) &lt;= '2'))
			 &amp;&amp; ((val.charAt( 12 ) &gt;= '0') &amp;&amp; (val.charAt( 12 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 13 ) == ':' )
			 &amp;&amp; ((val.charAt( 14 ) &gt;= '0') &amp;&amp; (val.charAt( 14 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 15 ) &gt;= '0') &amp;&amp; (val.charAt( 15 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 16 ) == ':' )
			 &amp;&amp; ((val.charAt( 17 ) &gt;= '0') &amp;&amp; (val.charAt( 17 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 18 ) &gt;= '0') &amp;&amp; (val.charAt( 18 ) &lt;= '9')) )
$implSchemaPgSqlConvertTZDateStringIfMatchElse$
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTZDateStringIfMatchElse"
>		{
			/*
			 *	NOTE:
			 *		.Net uses substring( startcol, lengthOfSubstring )
			 *		Java uses substring( startcol, endcol ) and does not
			 *			include charAt( endcol );
			 */
			int year = Integer.parseInt( val.substring( 0, 4 ) );
			int month = Integer.parseInt( val.substring( 5, 7 ) );
			int day = Integer.parseInt( val.substring( 8, 10 ) );
			int hour = Integer.parseInt( val.substring( 11, 13 ) );
			int minute = Integer.parseInt( val.substring( 14, 16 ) );
			int second = Integer.parseInt( val.substring( 17, 19 ) );
			Calendar retval = new GregorianCalendar( CFLibDbUtil.getDbServerTimeZone() );
			retval.set( Calendar.YEAR, year );
			retval.set( Calendar.MONTH, month - 1 );
			retval.set( Calendar.DAY_OF_MONTH, day );
			retval.set( Calendar.HOUR_OF_DAY, hour );
			retval.set( Calendar.MINUTE, minute );
			retval.set( Calendar.SECOND, second );
			Calendar utc = CFLibDbUtil.getUTCCalendar( retval );
			return( utc );
		}
		else {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTZDateString",
				"Value must be in YYYY-MM-DD HH24:MI:SS format \"" + val + "\" is invalid" );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTZTimeString">
	public static Calendar convertTZTimeString(String val) {
		if( ( val == null ) || ( val.length() == 0 ) ) {
			return( null );
		}
		else if ( val.length() != 19 ) {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTZTimeString",
				"Value must be in YYYY-MM-DD HH24:MI:SS format \"" + val + "\" is invalid" );
		}
		else if (((val.charAt( 0 ) &gt;= '0') &amp;&amp; (val.charAt( 0 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 1 ) &gt;= '0') &amp;&amp; (val.charAt( 1 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 2 ) &gt;= '0') &amp;&amp; (val.charAt( 2 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 3 ) &gt;= '0') &amp;&amp; (val.charAt( 3 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 4 ) == '-')
			 &amp;&amp; ((val.charAt( 5 ) &gt;= '0') &amp;&amp; (val.charAt( 5 ) &lt;= '1'))
			 &amp;&amp; ((val.charAt( 6 ) &gt;= '0') &amp;&amp; (val.charAt( 6 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 7 ) == '-' )
			 &amp;&amp; ((val.charAt( 8 ) &gt;= '0') &amp;&amp; (val.charAt( 8 ) &lt;= '3'))
			 &amp;&amp; ((val.charAt( 9 ) &gt;= '0') &amp;&amp; (val.charAt( 9 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 10 ) == ' ' )
			 &amp;&amp; ((val.charAt( 11 ) &gt;= '0') &amp;&amp; (val.charAt( 11 ) &lt;= '2'))
			 &amp;&amp; ((val.charAt( 12 ) &gt;= '0') &amp;&amp; (val.charAt( 12 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 13 ) == ':' )
			 &amp;&amp; ((val.charAt( 14 ) &gt;= '0') &amp;&amp; (val.charAt( 14 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 15 ) &gt;= '0') &amp;&amp; (val.charAt( 15 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 16 ) == ':' )
			 &amp;&amp; ((val.charAt( 17 ) &gt;= '0') &amp;&amp; (val.charAt( 17 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 18 ) &gt;= '0') &amp;&amp; (val.charAt( 18 ) &lt;= '9')) )
$implSchemaPgSqlConvertTZTimeStringIfMatchElse$
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTZTimeStringIfMatchElse"
>		{
			/*
			 *	NOTE:
			 *		.Net uses substring( startcol, lengthOfSubstring )
			 *		Java uses substring( startcol, endcol ) and does not
			 *			include charAt( endcol );
			 */
			int year = Integer.parseInt( val.substring( 0, 4 ) );
			int month = Integer.parseInt( val.substring( 5, 7 ) );
			int day = Integer.parseInt( val.substring( 8, 10 ) );
			int hour = Integer.parseInt( val.substring( 11, 13 ) );
			int minute = Integer.parseInt( val.substring( 14, 16 ) );
			int second = Integer.parseInt( val.substring( 17, 19 ) );
			Calendar retval = new GregorianCalendar( CFLibDbUtil.getDbServerTimeZone() );
			retval.set( Calendar.YEAR, year );
			retval.set( Calendar.MONTH, month - 1 );
			retval.set( Calendar.DAY_OF_MONTH, day );
			retval.set( Calendar.HOUR_OF_DAY, hour );
			retval.set( Calendar.MINUTE, minute );
			retval.set( Calendar.SECOND, second );
			Calendar utc = CFLibDbUtil.getUTCCalendar( retval );
			return( utc );
		}
		else {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTZTimeString",
				"Value must be in YYYY-MM-DD HH24:MI:SS format \"" + val + "\" is invalid" );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTZTimestampString">
	public static Calendar convertTZTimestampString(String val) {
		if( ( val == null ) || ( val.length() == 0 ) ) {
			return( null );
		}
		else if ( val.length() != 19 ) {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTZTimestampString",
				"Value must be in YYYY-MM-DD HH24:MI:SS format \"" + val + "\" is invalid" );
		}
		else if (((val.charAt( 0 ) &gt;= '0') &amp;&amp; (val.charAt( 0 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 1 ) &gt;= '0') &amp;&amp; (val.charAt( 1 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 2 ) &gt;= '0') &amp;&amp; (val.charAt( 2 ) &lt;= '9'))
			 &amp;&amp; ((val.charAt( 3 ) &gt;= '0') &amp;&amp; (val.charAt( 3 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 4 ) == '-')
			 &amp;&amp; ((val.charAt( 5 ) &gt;= '0') &amp;&amp; (val.charAt( 5 ) &lt;= '1'))
			 &amp;&amp; ((val.charAt( 6 ) &gt;= '0') &amp;&amp; (val.charAt( 6 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 7 ) == '-' )
			 &amp;&amp; ((val.charAt( 8 ) &gt;= '0') &amp;&amp; (val.charAt( 8 ) &lt;= '3'))
			 &amp;&amp; ((val.charAt( 9 ) &gt;= '0') &amp;&amp; (val.charAt( 9 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 10 ) == ' ' )
			 &amp;&amp; ((val.charAt( 11 ) &gt;= '0') &amp;&amp; (val.charAt( 11 ) &lt;= '2'))
			 &amp;&amp; ((val.charAt( 12 ) &gt;= '0') &amp;&amp; (val.charAt( 12 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 13 ) == ':' )
			 &amp;&amp; ((val.charAt( 14 ) &gt;= '0') &amp;&amp; (val.charAt( 14 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 15 ) &gt;= '0') &amp;&amp; (val.charAt( 15 ) &lt;= '9'))
			 &amp;&amp; (val.charAt( 16 ) == ':' )
			 &amp;&amp; ((val.charAt( 17 ) &gt;= '0') &amp;&amp; (val.charAt( 17 ) &lt;= '5'))
			 &amp;&amp; ((val.charAt( 18 ) &gt;= '0') &amp;&amp; (val.charAt( 18 ) &lt;= '9')) )
$implSchemaPgSqlConvertTZTimestampStringIfMatchElse$
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertTZTimestampStringIfMatchElse"
>		{
			/*
			 *	NOTE:
			 *		.Net uses substring( startcol, lengthOfSubstring )
			 *		Java uses substring( startcol, endcol ) and does not
			 *			include charAt( endcol );
			 */
			int year = Integer.parseInt( val.substring( 0, 4 ) );
			int month = Integer.parseInt( val.substring( 5, 7 ) );
			int day = Integer.parseInt( val.substring( 8, 10 ) );
			int hour = Integer.parseInt( val.substring( 11, 13 ) );
			int minute = Integer.parseInt( val.substring( 14, 16 ) );
			int second = Integer.parseInt( val.substring( 17, 19 ) );
			Calendar retval = new GregorianCalendar( CFLibDbUtil.getDbServerTimeZone() );
			retval.set( Calendar.YEAR, year );
			retval.set( Calendar.MONTH, month - 1 );
			retval.set( Calendar.DAY_OF_MONTH, day );
			retval.set( Calendar.HOUR_OF_DAY, hour );
			retval.set( Calendar.MINUTE, minute );
			retval.set( Calendar.SECOND, second );
			Calendar utc = CFLibDbUtil.getUTCCalendar( retval );
			return( utc );
		}
		else {
			throw new CFLibUsageException( $SchemaName$PgSqlSchema.class,
				"convertTZTimestampString",
				"Value must be in YYYY-MM-DD HH24:MI:SS format \"" + val + "\" is invalid" );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlConvertUuidString">
	public static UUID convertUuidString(String val) {
		if( ( val == null ) || ( val.length() == 0 ) ) {
			return( null );
		}
		else {
			return( UUID.fromString( val ) );
		}
	}
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id16Gen" Name="implSchemaPgSqlNextIdGen">
	public short next$Name$() {
		if( ! inTransaction ) {
			throw new CFLibUsageException( getClass(),
				"next$Name$",
				"Not in a transaction" );
		}
		ResultSet resultSet = null;
		try {
			String sql = "SELECT " + lowerDbSchemaName + ".$sp_next_schemaidgen$() as Next$Name$";
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sql );
			}
			resultSet = stmtSelectNext$Name$.executeQuery();
			short nextId;
			if( resultSet.next() ) {
				nextId = resultSet.getShort( 1 );
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					"next$Name$",
					"Query of $sp_next_schemaidgen$() did not return a result row" );
			}
			resultSet.close();
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"next$Name$",
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id32Gen" Name="implSchemaPgSqlNextIdGen">
	public int next$Name$() {
		if( ! inTransaction ) {
			throw new CFLibUsageException( getClass(),
				"next$Name$",
				"Not in a transaction" );
		}
		ResultSet resultSet = null;
		try {
			String sql = "SELECT " + lowerDbSchemaName + ".$sp_next_schemaidgen$() as Next$Name$";
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sql );
			}
			resultSet = stmtSelectNext$Name$.executeQuery();
			int nextId;
			if( resultSet.next() ) {
				nextId = resultSet.getInt( 1 );
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					"next$Name$",
					"Query of $sp_next_schemaidgen$() did not return a result row" );
			}
			resultSet.close();
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"next$Name$",
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id64Gen" Name="implSchemaPgSqlNextIdGen">
	public long next$Name$() {
		if( ! inTransaction ) {
			throw new CFLibUsageException( getClass(),
				"next$Name$",
				"Not in a transaction" );
		}
		ResultSet resultSet = null;
		try {
			String sql = "SELECT " + lowerDbSchemaName + ".$sp_next_schemaidgen$() as Next$Name$";
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sql );
			}
			resultSet = stmtSelectNext$Name$.executeQuery();
			long nextId;
			if( resultSet.next() ) {
				nextId = resultSet.getLong( 1 );
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					"next$Name$",
					"Query of $sp_next_schemaidgen$() did not return a result row" );
			}
			resultSet.close();
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"next$Name$",
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="UuidGen" Name="implSchemaPgSqlNextIdGen">
	public UUID next$Name$() {
		UUID retval = UUID.randomUUID();
		return( retval );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlIsSystemUser">
	public boolean isSystemUser( $SecSchemaName$Authorization Authorization) {
		if( ! inTransaction ) {
			throw new CFLibUsageException( getClass(),
				"isSystemUser",
				"Not in a transaction" );
		}
		ResultSet resultSet = null;
		try {
			String sql = "SELECT " + lowerDbSchemaName + ".$sp_is_system_user$( ? ) as IsSystemUser";
			if( stmtSelectIsSystemUser == null ) {
				stmtSelectIsSystemUser = cnx.prepareStatement( sql );
			}
			stmtSelectIsSystemUser.setString( 1, Authorization.getSecUserId().toString() );
			resultSet = stmtSelectIsSystemUser.executeQuery();
			boolean resultFlag;
			if( resultSet.next() ) {
				resultFlag = resultSet.getBoolean( 1 );
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					"isSystemUser",
					"Query of $sp_is_system_user$() did not return a result row" );
			}
			resultSet.close();
			return( resultFlag );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"isSystemUser",
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlIsClusterUser">
	public boolean isClusterUser( $SecSchemaName$Authorization Authorization,
		long clusterId,
		String groupName )
	{
		if( ! inTransaction ) {
			throw new CFLibUsageException( getClass(),
				"isClusterUser",
				"Not in a transaction" );
		}
		ResultSet resultSet = null;
		try {
			String sql = "SELECT " + lowerDbSchemaName + ".$sp_is_cluster_user$( ?, ?, ? ) as IsClusterUser";
			if( stmtSelectIsClusterUser == null ) {
				stmtSelectIsClusterUser = cnx.prepareStatement( sql );
			}
			stmtSelectIsClusterUser.setLong( 1, clusterId );
			stmtSelectIsClusterUser.setString( 2, groupName );
			stmtSelectIsClusterUser.setString( 3, Authorization.getSecUserId().toString() );
			resultSet = stmtSelectIsClusterUser.executeQuery();
			boolean resultFlag;
			if( resultSet.next() ) {
				resultFlag = resultSet.getBoolean( 1 );
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					"isClusterUser",
					"Query of $sp_is_cluster_user$() did not return a result row" );
			}
			resultSet.close();
			return( resultFlag );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"isClusterUser",
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPgSqlIsTenantUser">
	public boolean isTenantUser( $SecSchemaName$Authorization Authorization,
		long tenantId,
		String groupName )
	{
		if( ! inTransaction ) {
			throw new CFLibUsageException( getClass(),
				"isTenantUser",
				"Not in a transaction" );
		}
		ResultSet resultSet = null;
		try {
			String sql = "SELECT " + lowerDbSchemaName + ".$sp_is_tenant_user$( ?, ?, ? ) as IsTenantUser";
			if( stmtSelectIsTenantUser == null ) {
				stmtSelectIsTenantUser = cnx.prepareStatement( sql );
			}
			stmtSelectIsTenantUser.setLong( 1, tenantId );
			stmtSelectIsTenantUser.setString( 2, groupName );
			stmtSelectIsTenantUser.setString( 3, Authorization.getSecUserId().toString() );
			resultSet = stmtSelectIsTenantUser.executeQuery();
			boolean resultFlag;
			if( resultSet.next() ) {
				resultFlag = resultSet.getBoolean( 1 );
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					"isTenantUser",
					"Query of $sp_is_tenant_user$() did not return a result row" );
			}
			resultSet.close();
			return( resultFlag );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				"isTenantUser",
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

</RuleSet>
