<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="oracle"
	Name="schema/dbcreate/oracle/crsp_audit_dbtablename.oracle"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="SchemaDef" GenDef="Table" Name="dbadminfile_CreateSPAuditDbTableName"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="oracle"
		ExpansionClassName="$dbadminfilename_CreateSPAuditDbTableName$"
		ExpansionKeyName="$dbadminfilename_CreateSPAuditDbTableName$"
		ExpansionFileName="$dbadminfilename_CreateSPAuditDbTableName$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
alter session set plsql_warnings = 'ENABLE:ALL';
/

create or replace procedure $lower DbSchemaName$.$sp_audit_dbtablename$($implOracleSPStandardArgs$$switch HasClassCode yes implOracleSPArgClassCode default empty$$implOracleSPAuditPKeyArgs$,
	argAuditAction integer ) authid definer
is
	unrecognizedClassCode exception;
	use_stamp $lower DbSchemaName$.$DbTableName$_h.auditstamp%type;
begin
	use_stamp := systimestamp;$switch HasClassCode yes implOracleSPAuditTableWithClassCode default implOracleSPAuditTableNoClassCode$
end $sp_audit_dbtablename$;
/

show errors procedure $lower DbSchemaName$.$sp_audit_dbtablename$;
</GenFile>

	<GenRule GenDef="Table" Name="implOracleSPArgClassCode">,
	argClassCode varchar</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditPKeyArgs"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleSPAuditPKeyArg )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleSPAuditPKeyArg">,
	$sparg_IndexCol$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditTableNoClassCode">
	insert into $lower DbSchemaName$.$DbTableName$_h ($reference PrimaryKeyIndex iterate Columns( each implOracleSPAuditInheritedIntoPKeyColumn )$
				auditclusterid,
				auditsessionid,
				auditstamp,$implOracleSPAuditInheritedIntoDataColumnNameComma$
				revision,
				auditaction )
		select$reference PrimaryKeyIndex iterate Columns( each implOracleSPAuditInheritedPKeyColumnNameComma )$
				argAuditClusterId,
				argAuditSessionId,
				use_stamp,$implOracleSPAuditInheritedDataColumnNameComma$
				$lower reference BaseClass ClassCode$.revision,
				argAuditAction	
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$
		where
				$reference PrimaryKeyIndex iterate Columns( first implOracleSPAuditTableWhereAuditPKeyCol each implOracleSPAuditTableWhereAndAuditPKeyCol )$;
</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditTableWithClassCode">
	case argClassCode
	when '$ClassCode$' then$implOracleSPAuditTableClassCodeBody$$iterate TableSubClasses( each implOracleSPAuditTableSubCode empty empty )$
	else
		raise unrecognizedClassCode;
	end case;
</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditTableSubCode">
	when '$ClassCode$' then$implOracleSPAuditTableClassCodeBody$$iterate TableSubClasses( each implOracleSPAuditTableSubCode empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditTableClassCodeBody">
		insert into $lower DbSchemaName$.$DbTableName$_h ($reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleSPAuditInheritedIntoPKeyColumn )$
				classcode,
				auditclusterid,
				auditsessionid,
				auditstamp,$implOracleSPAuditInheritedIntoDataColumnNameComma$
				revision,
				auditaction )
			select$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleSPAuditInheritedPKeyColumnNameComma )$
				$lower reference BaseClass ClassCode$.classcode,
				argAuditClusterId,
				argAuditSessionId,
				use_stamp,$implOracleSPAuditInheritedDataColumnNameComma$
				$lower reference BaseClass ClassCode$.revision,
				argAuditAction	
			from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
			where
				$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implOracleSPAuditTableWhereAuditPKeyCol each implOracleSPAuditTableWhereAndAuditPKeyCol )$;</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleSPAuditTableWhereAuditPKeyCol"
		>$lower reference Index reference Table ClassCode$.$DbColumnName$ = arg$DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleSPAuditTableWhereAndAuditPKeyCol">
				and $implOracleSPAuditTableWhereAuditPKeyCol$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditInheritedIntoDataColumnNameComma"
		>$switch HasSuperClassRelation yes implOracleSPAuditInheritedIntoDataColumnNameCommaInh default implOracleSPAuditInheritedIntoDataColumnNameCommaBase$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditInheritedIntoDataColumnNameCommaInh"
		>$reference SuperClassRelation reference ToTable implOracleSPAuditInheritedIntoDataColumnNameComma$$iterate Columns( each implOracleSPAuditInheritedDataColumnEmitIntoDataColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditInheritedIntoDataColumnNameCommaBase"
		>$iterate Columns( each implOracleSPAuditInheritedDataColumnEmitIntoDataColumn )$</GenRule>

	<GenRule GenDef="Value" Name="implOracleSPAuditInheritedDataColumnEmitIntoDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implOracleSPAuditInheritedIntoDataColumnReallyEmitDataColumn$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleSPAuditInheritedIntoPKeyColumn"
		>$reference Column implOracleSPAuditInheritedIntoDataColumnReallyEmitDataColumn$</GenRule>

	<GenRule GenDef="Value" Name="implOracleSPAuditInheritedIntoDataColumnReallyEmitDataColumn">
				$DbColumnName$,</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditInheritedDataColumnNameComma"
		>$switch HasSuperClassRelation yes implOracleSPAuditInheritedDataColumnNameInhComma default implOracleSPAuditInheritedDataColumnNameBaseComma$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditInheritedDataColumnNameInhComma"
		>$reference SuperClassRelation reference ToTable implOracleSPAuditInheritedDataColumnNameComma$$iterate Columns( each implOracleSPAuditInheritedDataColumnNameComma )$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPAuditInheritedDataColumnNameBaseComma"
		>$iterate Columns( each implOracleSPAuditInheritedDataColumnNameComma )$</GenRule>

	<GenRule GenDef="Atom" Name="implOracleSPAuditInheritedDataColumnNameComma"
		>$switch ColumnInPrimaryIndex yes empty default implOracleSPAuditInheritedDataColumnEmitNameComma$</GenRule>

	<GenRule GenDef="TableCol" Name="implOracleSPAuditInheritedDataColumnNameComma"
		>$switch ColumnInPrimaryIndex yes empty default implOracleSPAuditInheritedDataColumnEmitNameComma$</GenRule>

	<GenRule GenDef="Value" Name="implOracleSPAuditInheritedDataColumnEmitNameComma">
				$lower reference Table ClassCode$.$DbColumnName$,</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleSPAuditInheritedPKeyColumnNameComma">
				$lower reference Index reference Table ClassCode$.$DbColumnName$,</GenRule>

</RuleSet>
