<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="oracle"
	Name="schema/dbcreate/oracle/crsp_lock_dbtablename.oracle"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="SchemaDef" GenDef="Table" Name="dbadminfile_CreateSPLockDbTableName"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="oracle"
		ExpansionClassName="$dbadminfilename_CreateSPLockDbTableName$"
		ExpansionKeyName="$dbadminfilename_CreateSPLockDbTableName$"
		ExpansionFileName="$dbadminfilename_CreateSPLockDbTableName$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
alter session set plsql_warnings = 'ENABLE:ALL';
/

$switch HasSuperClassRelation yes implOracleLockTableHierarchyBody default implOracleLockTableBaseBody$</GenFile>

	<GenRule GenDef="Table" Name="implOracleLockTableBaseBody">
create or replace procedure $lower DbSchemaName$.$sp_lock_dbtablename$(
	retCursor out sys_refcursor,$implOracleSPStandardArgs$$reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$ ) authid definer
is$switch SecScope None empty System empty Cluster implOracleSPReadTableDeclPermFlag Tenant implOracleSPReadTableDeclPermFlag default error$
begin$switch TableName Cluster empty Tenant empty SecUser empty default implOracleSPLockEnforceSec$$switch TableName Cluster implOracleSPLockTableRetSelectByPKeyNormal Tenant implOracleSPLockTableRetSelectByPKeyNormal SecUser implOracleSPLockTableRetSelectByPKeyNormal default implOracleSPLockTableRetSelectMakeChoice$
end $sp_lock_dbtablename$;
/

show errors procedure $lower DbSchemaName$.$sp_lock_dbtablename$;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleSPLockTableDeclPermFlag">
	permissionFlag integer;
	isSystemUser integer;
	permissionDenied exception;</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPLockTableRetSelectMakeChoice"
		>$switch SecScope None implOracleSPLockTableRetSelectByPKeyNormal System implOracleSPLockTableRetSelectByPKeyNormal Cluster implOracleSPLockTableRetSelectByPKeyRestrictCluster Tenant implOracleSPLockTableRetSelectByPKeyRestrictTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPLockTableRetSelectByPKeyNormal">
	open retCursor for select
$poptop Table implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$
		for update;</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPLockTableRetSelectByPKeyRestrictCluster">
	if( isSystemUser = 1 )
	then
		open retCursor for select
$implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$
		for update;
	else
		open retCursor for select
$implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$
			and $lower reference ClusterIdColumn reference Table ClassCode$.$reference ClusterIdColumn DbColumnName$ = secClusterId
		for update;
	end if;</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPLockTableRetSelectByPKeyRestrictTenant">
	if( isSystemUser = 1 )
	then
		open retCursor for select
$implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$
		for update;
	else
		open retCursor for select
$implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$
			and $lower reference TenantIdColumn reference Table ClassCode$.$reference TenantIdColumn DbColumnName$ = secTenantId
		for update;
	end if;</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPLockEnforceSec"
		>$switch SecScope None empty System empty Cluster implOracleSPReadTableCheckCluster Tenant implOracleSPReadTableCheckTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="restrictLockPKeyQuery"
		>$switch HasSuperClassRelation yes restrictLockPKeyQueryByClassCode default restrictBaseLockPKeyQueryByClassCode$</GenRule>

	<GenRule GenDef="Table" Name="restrictBaseLockPKeyQueryByClassCode"
		>$switch IsBaseTable yes restrictLockPKeyQueryByClassCode default empty$</GenRule>

	<GenRule GenDef="Table" Name="restrictLockPKeyQueryByClassCode">
			and $lower reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'</GenRule>

	<GenRule GenDef="Table" Name="implOracleLockTableHierarchyBody">
create or replace procedure $lower DbSchemaName$.$sp_lock_dbtablename$(
	retCursor out sys_refcursor,$implOracleSPStandardArgs$$reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$ ) authid definer
is$switch SecScope None empty System empty Cluster implOracleSPLockTableDeclPermFlag Tenant implOracleSPLockTableDeclPermFlag default error$$declSPOldVars$
begin$switch TableName Cluster empty Tenant empty SecUser empty default implOracleSPLockEnforceSec$$switch TableName Cluster implOracleSPLockTableRetSubSelectByPKeyNormal Tenant implOracleSPLockTableRetSubSelectByPKeyNormal SecUser implOracleSPLockTableRetSubSelectByPKeyNormal default implOracleSPLockTableRetSubSelectMakeChoice$
end $sp_lock_dbtablename$;
/

show errors procedure $lower DbSchemaName$.$sp_lock_dbtablename$;
</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPLockTableRetSubSelectMakeChoice"
		>$switch SecScope None implOracleSPLockTableRetSubSelectByPKeyNormal System implOracleSPLockTableRetSubSelectByPKeyNormal Cluster implOracleSPLockTableRetSubSelectByPKeyRestrictCluster Tenant implOracleSPLockTableRetSubSelectByPKeyRestrictTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPLockTableRetSubSelectByPKeyNormal">$implOracleLockTables$
	open retCursor for select
$poptop Table implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$;</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPLockTableRetSubSelectByPKeyRestrictCluster">
	if( isSystemUser = 1 )
	then$implOracleLockTables$
		open retCursor for select
$implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$;
	else$implOracleLockTables$
		open retCursor for select
$implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$
			and $lower reference ClusterIdColumn reference Table ClassCode$.$reference ClusterIdColumn DbColumnName$ = secClusterId;
	end if;</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPLockTableRetSubSelectByPKeyRestrictTenant">
	if( isSystemUser = 1 )
	then$implOracleLockTables$
		open retCursor for select
$implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$;
	else$implOracleLockTables$
		open retCursor for select
$implOracleSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$
			and $lower reference TenantIdColumn reference Table ClassCode$.$reference TenantIdColumn DbColumnName$ = secTenantId;
	end if;</GenRule>

	<GenRule GenDef="Table" Name="implOracleLockTables"
		>$switch HasSuperClassRelation yes implOracleLockInhTable default implOracleLockBaseTable$</GenRule>

	<GenRule GenDef="Table" Name="implOracleLockBaseTable"
		>$switch HasSubClasses yes implOracleLockBaseCCTable default implOracleLockBaseNoCCTable$</GenRule>

	<GenRule GenDef="Table" Name="implOracleLockInhTable"
		>$reference SuperClassRelation reference ToTable implOracleLockTables$
		select
			$iterate Columns( first implOracleLockSelectCol each implOracleLockSelectCommaCol )$
		into
			$iterate Columns( first implOracleLockIntoOldVar each implOracleLockIntoCommaOldVar )$
		from $lower DbSchemaName$.$DbTableName$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleLockWhereFragBindVar each implOracleLockWhereAndFragBindVar )$
		for update;
</GenRule>

	<GenRule GenDef="Table" Name="implOracleLockBaseCCTable">
		select
			ClassCode$iterate Columns( each implOracleLockSelectCommaCol )$,
			revision
		into
			oldClassCode$iterate Columns( each implOracleLockIntoCommaOldVar )$,
			oldRevision
		from $lower DbSchemaName$.$DbTableName$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleLockWhereFragBindVar each implOracleLockWhereAndFragBindVar )$
		for update;
</GenRule>

	<GenRule GenDef="Table" Name="implOracleLockBaseNoCCTable">
		select
			$iterate Columns( first implOracleLockSelectCol each implOracleLockSelectCommaCol )$,
			revision
		into
			$iterate Columns( first implOracleLockIntoOldVar each implOracleLockIntoCommaOldVar )$,
			oldRevision
		from $lower DbSchemaName$.$DbTableName$
		where
			$reference PrimaryKeyIndex iterate Columns( first implOracleLockWhereFragBindVar each implOracleLockWhereAndFragBindVar )$
		for update;
</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleLockWhereFragBindVar"
		>$DbColumnName$ = arg$DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleLockWhereAndFragBindVar">
			and $implOracleLockWhereFragBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implOracleLockSelectCommaCol">,
			$DbColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implOracleLockSelectCol"
		>$DbColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implOracleLockIntoOldVar"
		>old$DbColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implOracleLockIntoCommaOldVar">,
			old$DbColumnName$</GenRule>

	<GenRule GenDef="Table" Name="declSPOldVars"
		>$switch HasSuperClassRelation yes declSPOldInhVars default declSPOldBaseVars$</GenRule>

	<GenRule GenDef="Table" Name="declSPOldInhVars"
		>$reference SuperClassRelation reference ToTable declSPOldVars$$iterate Columns( each declSPOldDataVar )$</GenRule>

	<GenRule GenDef="Table" Name="declSPOldBaseVars"
		>$switch HasSubClasses yes declSPOldClassCode default empty$$iterate Columns( each declSPOldVar )$
	oldRevision integer;</GenRule>

	<GenRule GenDef="Value" Name="declSPOldDataVar"
		>$switch ColumnInPrimaryIndex yes empty default declSPOldVar$</GenRule>

	<GenRule GenDef="Value" Name="declSPOldVar">
	old$DbColumnName$ $clause_SPVarType$;</GenRule>

	<GenRule GenDef="Table" Name="declSPOldClassCode">
	oldClassCode varchar2(4);</GenRule>

	<GenRule GenDef="TableCol" Name="clause_SPVarType">$reference DataType clause_SPVarType$</GenRule>

	<GenRule GenDef="BlobDef" Name="clause_SPVarType">blob</GenRule>

	<GenRule GenDef="BoolDef" Name="clause_SPVarType">char(1)</GenRule>

	<GenRule GenDef="EnumDef" Name="clause_SPVarType">smallint</GenRule>

	<GenRule GenDef="Int16Def" Name="clause_SPVarType">smallint</GenRule>

	<GenRule GenDef="Int32Def" Name="clause_SPVarType">integer</GenRule>

	<GenRule GenDef="Int64Def" Name="clause_SPVarType">numeric(22,0)</GenRule>

	<GenRule GenDef="UInt16Def" Name="clause_SPVarType">integer</GenRule>

	<GenRule GenDef="UInt32Def" Name="clause_SPVarType">numeric(22,0)</GenRule>

	<GenRule GenDef="UInt64Def" Name="clause_SPVarType">numeric(22,0)</GenRule>

	<GenRule GenDef="FloatDef" Name="clause_SPVarType">real</GenRule>

	<GenRule GenDef="DoubleDef" Name="clause_SPVarType">double precision</GenRule>

	<GenRule GenDef="NumberDef" Name="clause_SPVarType">numeric</GenRule>

	<GenRule GenDef="StringDef" Name="clause_SPVarType">varchar2($MaxLen$)</GenRule>

	<GenRule GenDef="TokenDef" Name="clause_SPVarType">varchar2($MaxLen$)</GenRule>

	<GenRule GenDef="NmTokenDef" Name="clause_SPVarType">varchar2($MaxLen$)</GenRule>

	<GenRule GenDef="NmTokensDef" Name="clause_SPVarType">varchar2($MaxLen$)</GenRule>

	<GenRule GenDef="TextDef" Name="clause_SPVarType">clob</GenRule>

	<GenRule GenDef="DateDef" Name="clause_SPVarType">date</GenRule>

	<GenRule GenDef="TimeDef" Name="clause_SPVarType">timestamp</GenRule>

	<GenRule GenDef="TimestampDef" Name="clause_SPVarType">timestamp</GenRule>

	<GenRule GenDef="TZDateDef" Name="clause_SPVarType">timestamp with time zone</GenRule>

	<GenRule GenDef="TZTimeDef" Name="clause_SPVarType">timestamp with time zone</GenRule>

	<GenRule GenDef="TZTimestampDef" Name="clause_SPVarType">timestamp with time zone</GenRule>

	<GenRule GenDef="UuidDef" Name="clause_SPVarType">varchar2(36)</GenRule>

	<GenRule GenDef="UuidGen" Name="clause_SPVarType">varchar2(36)</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldVars"
		>$switch HasSuperClassRelation yes implSPIntoOldInhVars default implSPIntoOldBaseVars$</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldInhVars"
		>$reference SuperClassRelation reference ToTable implSPIntoOldVars$$iterate Columns( each implSPIntoOldDataVar )$</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldBaseVars"
		>$switch HasSubClasses yes implSPIntoOldClassCode default implSPIntoOldNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldClassCode">
		oldClassCode$iterate Columns( each implSPCommaIntoOldVar )$</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldNoCC"
		>$iterate Columns( first implSPIntoOldVar each implSPCommaIntoOldVar )$</GenRule>

	<GenRule GenDef="Value" Name="implSPIntoOldDataVar"
		>$switch ColumnInPrimaryIndex yes empty default implSPCommaIntoOldVar$</GenRule>

	<GenRule GenDef="Value" Name="implSPIntoOldVar"
		>old$DbColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implSPCommaIntoOldVar">,
		$implSPIntoOldVar$</GenRule>

</RuleSet>
