<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="oracle"
	Name="schema/dbcreate/oracle/crsp_read_dbtablename_cc_all.oracle"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="SchemaDef" GenDef="Table" Name="dbadminfile_CreateSPReadDbTableNameCCAll"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="oracle"
		ExpansionClassName="$dbadminfilename_CreateSPReadDbTableNameCCAll$"
		ExpansionKeyName="$dbadminfilename_CreateSPReadDbTableNameCCAll$"
		ExpansionFileName="$dbadminfilename_CreateSPReadDbTableNameCCAll$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
alter session set plsql_warnings = 'ENABLE:ALL';
/

create or replace procedure $lower DbSchemaName$.$sp_read_dbtablename_cc_all$(
	retCursor out sys_refcursor,$implOracleSPStandardArgs$ ) authid definer
is$switch SecScope None empty System empty Cluster implOracleSPReadTableDeclPermFlag Tenant implOracleSPReadTableDeclPermFlag default error$
begin$poptop Table switch TableName Cluster empty Tenant empty SecUser empty default implOracleSPReadEnforceSec$$switch SecScope None implOracleSPReadTableCCAllRetSelectSystem System implOracleSPReadTableCCAllRetSelectSystem Cluster implOracleSPReadTableCCAllRetSelectRestrictCluster Tenant implOracleSPReadTableCCAllRetSelectRestrictTenant default error$
end $sp_read_dbtablename_cc_all$;
/

show errors procedure $lower DbSchemaName$.$sp_read_dbtablename_cc_all$;
</GenFile>

	<GenRule GenDef="Table" Name="implOracleSPReadTableCCAllRetSelectSystem">
	open retCursor for select
		distinct( $lower poptop Table reference BaseClass ClassCode$.ClassCode ) as ClassCode
	from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
	order by ClassCode asc;</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPReadTableCCAllRetSelectRestrictCluster">
	if( isSystemUser = 1 )
	then
		open retCursor for select
			distinct( $lower poptop Table reference BaseClass ClassCode$.ClassCode ) as ClassCode
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		order by ClassCode asc;
	else
		open retCursor for select
			distinct( $lower poptop Table reference BaseClass ClassCode$.ClassCode ) as ClassCode
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$$implOracleSPReadTableRetSelectWhereRestrictCluster$;
	end if;</GenRule>

	<GenRule GenDef="Table" Name="implOracleSPReadTableCCAllRetSelectRestrictTenant">
	if( isSystemUser = 1 )
	then
		open retCursor for select
			distinct( $lower poptop Table reference BaseClass ClassCode$.ClassCode ) as ClassCode
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$
		order by ClassCode asc;
	else
		open retCursor for select
			distinct( $lower poptop Table reference BaseClass ClassCode$.ClassCode ) as ClassCode
		from $lower DbSchemaName$.$DbTableName$ $lower ClassCode$$switch HasSuperClassRelation yes implOracleClassCodeJoinSuperTable default empty$$implOracleSPReadTableRetSelectWhereRestrictTenant$;
	end if;</GenRule>

</RuleSet>
