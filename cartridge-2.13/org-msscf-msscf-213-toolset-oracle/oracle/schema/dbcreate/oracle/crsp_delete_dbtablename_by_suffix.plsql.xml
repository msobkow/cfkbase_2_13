<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="oracle"
	Name="schema/dbcreate/oracle/crsp_delete_dbtablename_by_suffix.plsql"
	Revision="2.13"
	Descr="null">

	<GenFile GenDef="Index" Name="dbadminfile_CreateSPDeleteDbTableNameBySuffix"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="oracle"
		ExpansionClassName="$dbadminfilename_CreateSPDeleteDbTableNameBySuffix$"
		ExpansionKeyName="$dbadminfilename_CreateSPDeleteDbTableNameBySuffix$"
		ExpansionFileName="$dbadminfilename_CreateSPDeleteDbTableNameBySuffix$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
alter session set plsql_warnings = 'ENABLE:ALL';
/

create or replace procedure $lower DbSchemaName$.$sp_delete_dbtablename_by_suffix$($implOracleSPStandardArgs$$iterate Columns( each sparg_CommaIndexCol )$ ) authid definer
is$poptop Table switch HasSubClasses yes implSPDeleteDbTablenameBySuffixDeclClassCode default empty$
	unrecognizedClassCode exception;
	permissionFlag integer;$declCursorSPDeleteDbTablenameBySuffixDirectSQL$
begin$implSPDeleteDbTablenameBySuffixDirectSQL$
end $sp_delete_dbtablename_by_suffix$;
/

show errors procedure $lower DbSchemaName$.$sp_delete_dbtablename_by_suffix$;
</GenFile>

	<GenRule GenDef="Table" Name="implSPDeleteDbTablenameBySuffixDeclClassCode">
	classCode varchar(4);</GenRule>

	<GenRule GenDef="Index" Name="implSPDeleteDbTablenameBySuffixDirectSQL"
		>$switch SecScope None implSPDeleteDbTablenameBySuffixDirectNormal System implSPDeleteDbTablenameBySuffixDirectNormal Cluster implSPDeleteDbTablenameBySuffixDirectRestrictCluster Tenant implSPDeleteDbTablenameBySuffixDirectRestrictTenant default error$</GenRule>

	<GenRule GenDef="Index" Name="declCursorSPDeleteDbTablenameBySuffixDirectSQL"
		>$switch SecScope None declCursorSPDeleteDbTablenameBySuffixDirectNormal System declCursorSPDeleteDbTablenameBySuffixDirectNormal Cluster declCursorSPDeleteDbTablenameBySuffixDirectRestrictCluster Tenant declCursorSPDeleteDbTablenameBySuffixDirectRestrictTenant default error$</GenRule>

	<GenRule GenDef="Index" Name="declCursorSPDeleteDbTablenameBySuffixDirectNormal">
	cursor cursNormal is
		select
$poptop Table implOracleSelectDeleteColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
		from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implOracleClassCodeJoinDeleteSuperTable default empty$
		where
				$iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$$switch SecScope None empty System empty Cluster implSPDeleteDbTablenameBySuffixAndCluster Tenant implSPDeleteDbTablenameBySuffixAndTenant default error$;</GenRule>

	<GenRule GenDef="Index" Name="implSPDeleteDbTablenameBySuffixDirectNormal">
	for cur in cursNormal
	loop$implSPDeleteTablenameBySuffixLoopBody$
	end loop;</GenRule>

	<GenRule GenDef="Index" Name="declCursorSPDeleteDbTablenameBySuffixDirectRestrictCluster">
	cursor cursSystem is
		select
$poptop Table implOracleSelectDeleteColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
		from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implOracleClassCodeJoinDeleteSuperTable default empty$
		where
				$iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$;
	cursor cursRestrict is
		select
$poptop Table implOracleSelectDeleteColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
		from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implOracleClassCodeJoinDeleteSuperTable default empty$
		where
				$iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$
				and $lower reference Table reference ClusterIdColumn reference Table ClassCode$.$reference Table referenceClusterIdColumn DbColumnName$ = secClusterId;</GenRule>

	<GenRule GenDef="Index" Name="implSPDeleteDbTablenameBySuffixDirectRestrictCluster">
	permissionFlag := $lower DbSchemaName$.sp_is_system_user( argAuditUserId );
	if( permissionFlag = 1 )
	then
		for cur in cursSystem
		loop$implSPDeleteTablenameBySuffixLoopBody$
		end loop;
	else
		for cur in cursRestrict
		loop$implSPDeleteTablenameBySuffixLoopBody$
		end loop;
	end if;</GenRule>

	<GenRule GenDef="Index" Name="declCursorSPDeleteDbTablenameBySuffixDirectRestrictTenant">
	cursor cursSystem is
		select
$poptop Table implOracleSelectDeleteColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
		from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implOracleClassCodeJoinDeleteSuperTable default empty$
		where
				$iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$;
	cursor cursRestrict is
		select
$poptop Table implOracleSelectDeleteColumns$,
				$poptop Table lower reference BaseClass ClassCode$.revision as revision
		from $poptop Table lower DbSchemaName$.$poptop Table DbTableName$ $poptop Table lower ClassCode$$poptop Table switch HasSuperClassRelation yes implOracleClassCodeJoinDeleteSuperTable default empty$
		where
				$iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$
				and $lower reference Table reference TenantIdColumn reference Table ClassCode$.$reference Table referenceTenantIdColumn DbColumnName$ = secTenantId;</GenRule>

	<GenRule GenDef="Index" Name="implSPDeleteDbTablenameBySuffixDirectRestrictTenant">
	permissionFlag := $lower DbSchemaName$.sp_is_system_user( argAuditUserId );
	if( permissionFlag = 1 )
	then
		for cur in cursSystem
		loop$implSPDeleteTablenameBySuffixLoopBody$
		end loop;
	else
		for cur in cursRestrict
		loop$implSPDeleteTablenameBySuffixLoopBody$
		end loop;
	end if;</GenRule>

	<GenRule GenDef="Index" Name="implSPDeleteDbTablenameBySuffixDeclStmt">
	stmt varchar(2000);$iterate Columns( each implSPDeleteDbTablenameBySuffixDeclColumnWhereFrag )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implSPDeleteDbTablenameBySuffixDeclColumnWhereFrag">
	whereFrag$Name$ varchar(2000);</GenRule>

	<GenRule GenDef="Index" Name="TableHasSubClasses"
		>$poptop Table HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implSPDeleteTablenameBySuffixLoopBody"
		>$switch TableHasSubClasses yes implSPDeleteTablenameBySuffixLoopBodyEvalCC default implSPDeleteTablenameBySuffixLoopBodyInvokeDirect$</GenRule>

	<GenRule GenDef="Object" Name="delinvoke_sp_delete_dbtablename">dl_$lower DbTableName$</GenRule>

	<GenRule GenDef="Index" Name="implSPDeleteTablenameBySuffixLoopBodyEvalCC">
		select cur.classcode into classCode from dual;
		case classCode
		when '$poptop Table ClassCode$' then
			$lower poptop Table DbSchemaName$.$poptop Table sp_delete_dbtablename$( argAuditClusterId,
					argAuditUserId,
					argAuditSessionId,
					secClusterId,
					secTenantId$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implSPDeleteTablenameBySuffixCommaPassArg )$,
					cur.revision );$poptop Table iterate ReverseRelations( each implSPDeleteTablenameBySuffixChaseSubclass empty empty )$
		else
			raise unrecognizedClassCode;
		end case;</GenRule>

	<GenRule GenDef="Relation" Name="implSPDeleteTablenameBySuffixChaseSubclass"
		>$switch RelationTypeTag
			Superclass implSPDeleteTablenameBySuffixCheckSubclass
			default empty$</GenRule>

	<GenRule GenDef="Relation" Name="implSPDeleteTablenameBySuffixCheckSubclass"
		>$reference FromTable implSPDeleteTablenameBySuffixLoopBodyEvalCCLimb$</GenRule>

	<GenRule GenDef="Table" Name="implSPDeleteTablenameBySuffixLoopBodyEvalCCLimb">
		when '$ClassCode$' then
			$lower poptop Table DbSchemaName$.$delinvoke_sp_delete_dbtablename$( argAuditClusterId,
					argAuditUserId,
					argAuditSessionId,
					secClusterId,
					secTenantId$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implSPDeleteTablenameBySuffixCommaPassArg )$,
					cur.revision );$iterate ReverseRelations( each implSPDeleteTablenameBySuffixChaseSubclass empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implSPDeleteTablenameBySuffixLoopBodyInvokeDirect">
			$lower poptop Table DbSchemaName$.$poptop Table sp_delete_dbtablename$( argAuditClusterId,
					argAuditUserId,
					argAuditSessionId,
					secClusterId,
					secTenantId$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implSPDeleteTablenameBySuffixCommaPassArg )$,
					cur.revision );</GenRule>

	<GenRule GenDef="IndexCol" Name="implSPDeleteTablenameBySuffixPassArg"
		>cur.$lower DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implSPDeleteTablenameBySuffixCommaPassArg">,
					$implSPDeleteTablenameBySuffixPassArg$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSelectDeleteColumns"
		>$switch HasSuperClassRelation yes implOracleSelectSuperDelete default implOracleSelectBaseDelete$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSelectSuperDelete"
		>$reference SuperClassRelation reference ToTable implOracleSelectDeleteColumns$</GenRule>

	<GenRule GenDef="Value" Name="implOracleSelectFragCommaDataDeleteColumn"
		>$switch ColumnInPrimaryIndex yes empty default implOracleTableColumnSelectFragCommaDeleteColumn$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSelectBaseDelete"
		>$switch IsBaseTable yes implOracleSelectBaseDeleteWithCC default implOracleSelectBaseDeleteNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSelectBaseDeleteWithCC"
>			$lower ClassCode$.classcode$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleTableColumnSelectFragCommaDeleteColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSelectBaseDeleteNoCC"
>			$reference PrimaryKeyIndex iterate Columns( first implOracleTableColumnSelectFragDbColumnName each implOracleTableColumnSelectFragCommaDeleteColumn )$</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragCommaDeleteColumn">,
			$implOracleTableColumnSelectFragDbColumnName$</GenRule>

	<GenRule GenDef="Table" Name="implOracleClassCodeMaybeJoinDeleteSuperTable"
		>$switch HasSuperClassRelation yes implOracleClassCodeJoinDeleteSuperTable default empty$</GenRule>

	<GenRule GenDef="Table" Name="implOracleClassCodeJoinDeleteSuperTable">
			inner join $lower reference SuperClassRelation reference ToTable DbSchemaName$.$lower reference SuperClassRelation reference ToTable DbTableName$ $lower reference SuperClassRelation reference ToTable ClassCode$ on$reference PrimaryKeyIndex iterate Columns( first implOracleClassCodeJoinDeleteSuperTableColumn each implOracleClassCodeAndJoinDeleteSuperTableColumn )$$reference SuperClassRelation reference ToTable implOracleClassCodeMaybeJoinDeleteSuperTable$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleClassCodeJoinDeleteSuperTableColumn">
				$lower ClassCode$.$lower reference Column DbColumnName$ = $lower popto Table reference SuperClassRelation reference ToTable ClassCode$.$lower reference Column DbColumnName$</GenRule>
	<GenRule GenDef="IndexCol" Name="implOracleClassCodeAndJoinDeleteSuperTableColumn">
				and $lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference SuperClassRelation reference ToTable ClassCode$.$lower reference Column DbColumnName$</GenRule>

	<GenRule GenDef="Table" Name="implOracleClassCodeJoinDeleteBaseTable">
			inner join $lower reference BaseClass DbSchemaName$.$lower reference BaseClass DbTableName$ $lower reference BaseClass ClassCode$ on$reference PrimaryKeyIndex iterate Columns( first implOracleClassCodeJoinDeleteBaseTableColumn each implOracleClassCodeAndJoinDeleteBaseTableColumn )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleClassCodeJoinDeleteBaseTableColumn">
				$lower ClassCode$.$lower reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$lower reference Column DbColumnName$</GenRule>
	<GenRule GenDef="IndexCol" Name="implOracleClassCodeAndJoinDeleteBaseTableColumn">
				and $lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$lower reference Column DbColumnName$</GenRule>

</RuleSet>
