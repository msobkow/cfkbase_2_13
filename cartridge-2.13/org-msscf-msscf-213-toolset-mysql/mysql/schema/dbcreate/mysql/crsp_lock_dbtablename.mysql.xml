<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="mysql"
	Name="schema/dbcreate/mysql/crsp_lock_dbtablename.mysql"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="SchemaDef" GenDef="Table" Name="dbadminfile_CreateSPLockDbTableName"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="mysql"
		ExpansionClassName="$dbadminfilename_CreateSPLockDbTableName$"
		ExpansionKeyName="$dbadminfilename_CreateSPLockDbTableName$"
		ExpansionFileName="$dbadminfilename_CreateSPLockDbTableName$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
delimiter ////
$switch HasSuperClassRelation yes implMySqlLockTableHierarchyBody default implMySqlLockTableBaseBody$</GenFile>

	<GenRule GenDef="Table" Name="implMySqlLockTableBaseBody">
create procedure $lower DbSchemaName$.$sp_lock_dbtablename$($implMySqlSPStandardArgs$$reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$ )
not deterministic
reads sql data
begin
	declare done boolean default false;
	declare continue handler for not found set done = true;
	select
$implMySqlSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
	from $lower DbSchemaName$.$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implMySqlClassCodeJoinSuperTable default empty$
	where
		$reference PrimaryKeyIndex iterate Columns( first implMySqlIndexColumnWhereFragBindVar each implMySqlIndexColumnWhereAndFragBindVar )$$restrictReadPKeyQuery$
	for update;
end;////
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlLockTableHierarchyBody">
create procedure $lower DbSchemaName$.$sp_lock_dbtablename$($implMySqlSPStandardArgs$$reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$ )
begin
	declare done boolean default false;
	declare continue handler for not found set done = true;
	select
$implMySqlSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
	from $lower DbSchemaName$.$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implMySqlClassCodeJoinSuperTable default empty$
	where
		$reference PrimaryKeyIndex iterate Columns( first implMySqlIndexColumnWhereFragBindVar each implMySqlIndexColumnWhereAndFragBindVar )$$restrictReadPKeyQuery$;
end;////
</GenRule>

	<GenRule GenDef="Table" Name="implMySqlLockTables"
		>$switch HasSuperClassRelation yes implMySqlLockInhTable default implMySqlLockBaseTable$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlLockBaseTable"
		>$switch HasSubClasses yes implMySqlLockBaseCCTable default implMySqlLockBaseNoCCTable$</GenRule>

	<GenRule GenDef="Table" Name="implMySqlLockInhTable"
		>$reference SuperClassRelation reference ToTable implMySqlLockTables$
	select
			$iterate Columns( first implMySqlLockSelectCol each implMySqlLockSelectCommaCol )$
	into
		$iterate Columns( first implMySqlLockIntoOldVar each implMySqlLockIntoCommaOldVar )$
	from $lower DbSchemaName$.$DbTableName$
	where
		$reference PrimaryKeyIndex iterate Columns( first implMySqlLockWhereFragBindVar each implMySqlLockWhereAndFragBindVar )$
	for update;</GenRule>

	<GenRule GenDef="Table" Name="implMySqlLockBaseCCTable">
	select
			ClassCode$iterate Columns( each implMySqlLockSelectCommaCol )$,
			revision
	into
		oldClassCode$iterate Columns( each implMySqlLockIntoCommaOldVar )$,
		oldRevision
	from $lower DbSchemaName$.$DbTableName$
	where
		$reference PrimaryKeyIndex iterate Columns( first implMySqlLockWhereFragBindVar each implMySqlLockWhereAndFragBindVar )$
	for update;</GenRule>

	<GenRule GenDef="Table" Name="implMySqlLockBaseNoCCTable">
	select
			$iterate Columns( first implMySqlLockSelectCol each implMySqlLockSelectCommaCol )$,
			revision
	into
		$iterate Columns( first implMySqlLockIntoOldVar each implMySqlLockIntoCommaOldVar )$,
		oldRevision
	from $lower DbSchemaName$.$DbTableName$
	where
		$reference PrimaryKeyIndex iterate Columns( first implMySqlLockWhereFragBindVar each implMySqlLockWhereAndFragBindVar )$
	for update;</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlLockWhereFragBindVar"
		>$DbColumnName$ = arg$Name$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMySqlLockWhereAndFragBindVar">
		and $implMySqlLockWhereFragBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implMySqlLockSelectCommaCol">,
		$DbColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implMySqlLockSelectCol"
		>$DbColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implMySqlLockIntoOldVar"
		>old$Name$</GenRule>

	<GenRule GenDef="Value" Name="implMySqlLockIntoCommaOldVar">,
			old$Name$</GenRule>

	<GenRule GenDef="Table" Name="declSPOldVars"
		>$switch HasSuperClassRelation yes declSPOldInhVars default declSPOldBaseVars$</GenRule>

	<GenRule GenDef="Table" Name="declSPOldInhVars"
		>$reference SuperClassRelation reference ToTable declSPOldVars$$iterate Columns( each declSPOldDataVar )$</GenRule>

	<GenRule GenDef="Table" Name="declSPOldBaseVars"
		>$switch HasSubClasses yes declSPOldClassCode default empty$$iterate Columns( each declSPOldVar )$
	declare oldRevision int;</GenRule>

	<GenRule GenDef="Value" Name="declSPOldDataVar"
		>$switch ColumnInPrimaryIndex yes empty default declSPOldVar$</GenRule>

	<GenRule GenDef="Value" Name="declSPOldVar">
	declare old$Name$ $clause_SPColType$;</GenRule>

	<GenRule GenDef="Table" Name="declSPOldClassCode">
	declare oldClassCode varchar(4);</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldVars"
		>$switch HasSuperClassRelation yes implSPIntoOldInhVars default implSPIntoOldBaseVars$</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldInhVars"
		>$reference SuperClassRelation reference ToTable implSPIntoOldVars$$iterate Columns( each implSPIntoOldDataVar )$</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldBaseVars"
		>$switch HasSubClasses yes implSPIntoOldClassCode default implSPIntoOldNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldClassCode">
		oldClassCode$iterate Columns( each implSPCommaIntoOldVar )$</GenRule>

	<GenRule GenDef="Table" Name="implSPIntoOldNoCC"
		>$iterate Columns( first implSPIntoOldVar each implSPCommaIntoOldVar )$</GenRule>

	<GenRule GenDef="Value" Name="implSPIntoOldDataVar"
		>$switch ColumnInPrimaryIndex yes empty default implSPCommaIntoOldVar$</GenRule>

	<GenRule GenDef="Value" Name="implSPIntoOldVar"
		>old$Name$</GenRule>

	<GenRule GenDef="Value" Name="implSPCommaIntoOldVar">,
		$implSPIntoOldVar$</GenRule>

</RuleSet>
