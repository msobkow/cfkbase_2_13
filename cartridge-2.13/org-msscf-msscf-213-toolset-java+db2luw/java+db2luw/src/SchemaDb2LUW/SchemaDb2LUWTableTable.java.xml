<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+db2luw"
	Name="src/SchemaDb2LUWTableTable.java"
	Revision="2.13"
	Descr="Java 11 DB/2 LUW Jdbc DbIO implementation for Table">

	<GenRule GenDef="IndexCol" Name="DbColumnName"
		>$reference Column DbColumnName$</GenRule>

	<GenFile GenDef="Table" Name="fileSchemaDb2LUWTableTableJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$Db2LUW"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$db2luw.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$Db2LUW"
		ExpansionClassName="$SchemaName$Db2LUW$TableName$TableJava"
		ExpansionKeyName="$SchemaName$Db2LUW$TableName$TableJava"
		ExpansionFileName="$SchemaName$Db2LUW$TableName$Table.java"
>$Db2LUWTableTablePreamble$
public class $SchemaName$Db2LUW$TableName$Table
	implements I$SchemaName$$TableName$Table
{
	private $SchemaName$Db2LUWSchema schema;$declDb2LUWTableTablePStatements$$iterate DispensedId16Generators( each declDb2LUWTableIdGenPStatements empty empty )$$iterate DispensedId32Generators( each declDb2LUWTableIdGenPStatements empty empty )$$iterate DispensedId64Generators( each declDb2LUWTableIdGenPStatements empty empty )$$JavaDb2LUWTableMembers$
$implConstructDb2LUWTableTable$$iterate DispensedId16Generators( each implNextIdGen empty empty )$$iterate DispensedId32Generators( each implNextIdGen empty empty )$$iterate DispensedId64Generators( each implNextIdGen empty empty )$$implCreateTable$$declSqlSelectTableDistinctClassCode$$declSqlSelectTableBuff$$implUnpackResultSetToBuff$$implReadTableDerivedByPKey$$implLockTableDerivedByPKey$$implReadAllTableDerived$$implReadTableDerivedByIndexes$$implReadTableBuffByPKey$$implLockTableBuffByPKey$$implReadAllTableBuff$$switch PageData yes implPageAllTableBuff default empty$$implReadTableBuffByIndexes$$switch PageData yes implPageTableBuffByIndexes default empty$$implUpdateTable$$implDeleteTable$$switch HasChain yes implDb2LUWMoveUpTableBuff default empty$$switch HasChain yes implDb2LUWMoveDownTableBuff default empty$$implDb2LUWTableReleasePreparedStatements$$iterate ServerMethods( each implServerMethod empty empty )$$JavaDb2LUWTableImplementation$}
</GenFile>

	<GenRule GenDef="Index" Name="PageData"
		>$poptop Table PageData$</GenRule>

	<GenRule GenDef="Table" Name="implPageAllTableBuff">
	/**
	 *	Read a page of all the specific $TableName$ buffer instances.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@return All the specific $TableName$ instances in the database accessible for the Authorization.
	 */
	public $DefSchemaName$$TableName$Buff[] pageAllBuff( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageAllBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
			final String sql = "CALL $sp_page_dbtablename_all$( ?, ?, ?, ?, ?$reference BaseClass reference PrimaryKeyIndex iterate Columns( each emitCommaQuestion )$ )";
			if( stmtPageAllBuff == null ) {
				stmtPageAllBuff = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtPageAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtPageAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtPageAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWPageAllBuffTableAssignOptPriorColumn )$
			resultSet = stmtPageAllBuff.executeQuery();
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			while( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="emitCommaQuestion"
		>, ?</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptPriorColumn"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWPageAllBuffTableAssignOptBlobPriorColumn
			BoolDef implDb2LUWPageAllBuffTableAssignOptBoolPriorColumn
			EnumDef implDb2LUWPageAllBuffTableAssignOptEnumPriorColumn
			Int16Def implDb2LUWPageAllBuffTableAssignOptInt16PriorColumn
			Int32Def implDb2LUWPageAllBuffTableAssignOptInt32PriorColumn
			Int64Def implDb2LUWPageAllBuffTableAssignOptInt64PriorColumn
			UInt16Def implDb2LUWPageAllBuffTableAssignOptUInt16PriorColumn
			UInt32Def implDb2LUWPageAllBuffTableAssignOptUInt32PriorColumn
			UInt64Def implDb2LUWPageAllBuffTableAssignOptUInt64PriorColumn
			Id16Gen implDb2LUWPageAllBuffTableAssignOptInt16PriorColumn
			Id32Gen implDb2LUWPageAllBuffTableAssignOptInt32PriorColumn
			Id64Gen implDb2LUWPageAllBuffTableAssignOptInt64PriorColumn
			FloatDef implDb2LUWPageAllBuffTableAssignOptFloatPriorColumn
			DoubleDef implDb2LUWPageAllBuffTableAssignOptDoublePriorColumn
			NumberDef implDb2LUWPageAllBuffTableAssignOptNumberPriorColumn
			StringDef implDb2LUWPageAllBuffTableAssignOptStringPriorColumn
			TokenDef implDb2LUWPageAllBuffTableAssignOptTokenPriorColumn
			NmTokenDef implDb2LUWPageAllBuffTableAssignOptNmTokenPriorColumn
			NmTokensDef implDb2LUWPageAllBuffTableAssignOptNmTokensPriorColumn
			TextDef implDb2LUWPageAllBuffTableAssignOptTextPriorColumn
			DateDef implDb2LUWPageAllBuffTableAssignOptDatePriorColumn
			TimeDef implDb2LUWPageAllBuffTableAssignOptTimePriorColumn
			TimestampDef implDb2LUWPageAllBuffTableAssignOptTimestampPriorColumn
			TZDateDef implDb2LUWPageAllBuffTableAssignOptTZDatePriorColumn
			TZTimeDef implDb2LUWPageAllBuffTableAssignOptTZTimePriorColumn
			TZTimestampDef implDb2LUWPageAllBuffTableAssignOptTZTimestampPriorColumn
			UuidDef implDb2LUWPageAllBuffTableAssignOptUuidPriorColumn
			UuidGen implDb2LUWPageAllBuffTableAssignOptUuidPriorColumn
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptBlobPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBytes( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptBoolPriorColumn">
			if( prior$Name$ != null ) {
				if( prior$Name$.booleanValue() ) {
					stmtPageAllBuff.setString( argIdx++, "Y" );
				}
				else {
					stmtPageAllBuff.setString( argIdx++, "N" );
				}
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptEnumPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setShort( argIdx++, (short)prior$Name$.ordinal() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptInt16PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setShort( argIdx++, prior$Name$.shortValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptInt32PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptInt64PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptUInt16PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptUInt32PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptUInt64PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptFloatPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setFloat( argIdx++, prior$Name$.floatValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptDoublePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setDouble( argIdx++, prior$Name$.doubleValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptNumberPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptStringPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptTokenPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptNmTokenPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptNmTokensPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptTextPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptDatePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptTimePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptTimestampPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptTZDatePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptTZTimePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptTZTimestampPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageAllBuffTableAssignOptUuidPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$.toString() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByDuplicateIndex">
	/**
	 *	Read a page array of the specific $poptop Table TableName$ buffer instances identified by the duplicate key $Suffix$.
	 *
	 *	@param	Authorization	The session authorization information.$iterate Columns( each implCommentKeyAttr empty empty )$
	 *
	 *	@return An array of derived buffer instances for the specified key, potentially with 0 elements in the set.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	public $DefSchemaName$$poptop Table TableName$Buff[] pageBuffBy$declReadTableSuffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each declCommaColumnArg )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageBuffBy$declReadTableSuffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implPageTableBuffByReqDuplicateIndex$
			List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
			while( resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWMoveUpTableBuff">
	/**
	 *	Move the specified buffer up in the chain (i.e. to the previous position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffUp( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int revision )
	{
		final String S_ProcName = "moveBuffUp";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implMoveUpTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveUpTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
			final String sql = "CALL $sp_moveup_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + ", ? )";
			if( stmtMoveUp == null ) {
				stmtMoveUp = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUp.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveUp.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWMoveUpByPKeyTableAssignVar )$
			stmtMoveUp.setInt( argIdx++, revision );
			resultSet = stmtMoveUp.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignVar"
		>$switch IsNullable yes implDb2LUWMoveUpByPKeyTableAssignOptVar
			default implDb2LUWMoveUpByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWMoveUpByPKeyTableAssignOptBlobVar
			BoolDef implDb2LUWMoveUpByPKeyTableAssignOptBoolVar
			EnumDef implDb2LUWMoveUpByPKeyTableAssignOptEnumVar
			Int16Def implDb2LUWMoveUpByPKeyTableAssignOptInt16Var
			Int32Def implDb2LUWMoveUpByPKeyTableAssignOptInt32Var
			Int64Def implDb2LUWMoveUpByPKeyTableAssignOptInt64Var
			UInt16Def implDb2LUWMoveUpByPKeyTableAssignOptUInt16Var
			UInt32Def implDb2LUWMoveUpByPKeyTableAssignOptUInt32Var
			UInt64Def implDb2LUWMoveUpByPKeyTableAssignOptUInt64Var
			Id16Gen implDb2LUWMoveUpByPKeyTableAssignOptInt16Var
			Id32Gen implDb2LUWMoveUpByPKeyTableAssignOptInt32Var
			Id64Gen implDb2LUWMoveUpByPKeyTableAssignOptInt64Var
			FloatDef implDb2LUWMoveUpByPKeyTableAssignOptFloatVar
			DoubleDef implDb2LUWMoveUpByPKeyTableAssignOptDoubleVar
			NumberDef implDb2LUWMoveUpByPKeyTableAssignOptNumberVar
			StringDef implDb2LUWMoveUpByPKeyTableAssignOptStringVar
			TokenDef implDb2LUWMoveUpByPKeyTableAssignOptTokenVar
			NmTokenDef implDb2LUWMoveUpByPKeyTableAssignOptNmTokenVar
			NmTokensDef implDb2LUWMoveUpByPKeyTableAssignOptNmTokensVar
			TextDef implDb2LUWMoveUpByPKeyTableAssignOptTextVar
			DateDef implDb2LUWMoveUpByPKeyTableAssignOptDateVar
			TimeDef implDb2LUWMoveUpByPKeyTableAssignOptTimeVar
			TimestampDef implDb2LUWMoveUpByPKeyTableAssignOptTimestampVar
			TZDateDef implDb2LUWMoveUpByPKeyTableAssignOptTZDateVar
			TZTimeDef implDb2LUWMoveUpByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implDb2LUWMoveUpByPKeyTableAssignOptTZTimestampVar
			UuidDef implDb2LUWMoveUpByPKeyTableAssignOptUuidVar
			UuidGen implDb2LUWMoveUpByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWMoveUpByPKeyTableAssignReqBlobVar
			BoolDef implDb2LUWMoveUpByPKeyTableAssignReqBoolVar
			EnumDef implDb2LUWMoveUpByPKeyTableAssignReqEnumVar
			Int16Def implDb2LUWMoveUpByPKeyTableAssignReqInt16Var
			Int32Def implDb2LUWMoveUpByPKeyTableAssignReqInt32Var
			Int64Def implDb2LUWMoveUpByPKeyTableAssignReqInt64Var
			UInt16Def implDb2LUWMoveUpByPKeyTableAssignReqUInt16Var
			UInt32Def implDb2LUWMoveUpByPKeyTableAssignReqUInt32Var
			UInt64Def implDb2LUWMoveUpByPKeyTableAssignReqUInt64Var
			Id16Gen implDb2LUWMoveUpByPKeyTableAssignReqInt16Var
			Id32Gen implDb2LUWMoveUpByPKeyTableAssignReqInt32Var
			Id64Gen implDb2LUWMoveUpByPKeyTableAssignReqInt64Var
			FloatDef implDb2LUWMoveUpByPKeyTableAssignReqFloatVar
			DoubleDef implDb2LUWMoveUpByPKeyTableAssignReqDoubleVar
			NumberDef implDb2LUWMoveUpByPKeyTableAssignReqNumberVar
			StringDef implDb2LUWMoveUpByPKeyTableAssignReqStringVar
			TokenDef implDb2LUWMoveUpByPKeyTableAssignReqTokenVar
			NmTokenDef implDb2LUWMoveUpByPKeyTableAssignReqNmTokenVar
			NmTokensDef implDb2LUWMoveUpByPKeyTableAssignReqNmTokensVar
			TextDef implDb2LUWMoveUpByPKeyTableAssignReqTextVar
			DateDef implDb2LUWMoveUpByPKeyTableAssignReqDateVar
			TimeDef implDb2LUWMoveUpByPKeyTableAssignReqTimeVar
			TimestampDef implDb2LUWMoveUpByPKeyTableAssignReqTimestampVar
			TZDateDef implDb2LUWMoveUpByPKeyTableAssignReqTZDateVar
			TZTimeDef implDb2LUWMoveUpByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implDb2LUWMoveUpByPKeyTableAssignReqTZTimestampVar
			UuidDef implDb2LUWMoveUpByPKeyTableAssignReqUuidVar
			UuidGen implDb2LUWMoveUpByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqBlobVar">
				String $leadlower Name$AsClobData = new String( Base64.encodeBase64( $Name$ ) );
				stmtMoveUp.setString( argIdx++, $leadlower Name$AsClobData );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveUp.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtMoveUp.setString( argIdx++, "Y" );
			}
			else {
				stmtMoveUp.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtMoveUp.setString( argIdx++, "Y" );
				}
				else {
					stmtMoveUp.setString( argIdx++, "N" );
				}
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqEnumVar">
			stmtMoveUp.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveUp.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqInt16Var">
			stmtMoveUp.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveUp.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqInt32Var">
			stmtMoveUp.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveUp.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqInt64Var">
			stmtMoveUp.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveUp.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqUInt16Var">
			stmtMoveUp.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveUp.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqUInt32Var">
			stmtMoveUp.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveUp.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqUInt64Var">
			stmtMoveUp.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveUp.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqFloatVar">
			stmtMoveUp.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveUp.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqDoubleVar">
			stmtMoveUp.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveUp.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqNumberVar">
			stmtMoveUp.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveUp.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqStringVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqTokenVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqNmTokenVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqNmTokensVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqTextVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqDateVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqTimeVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqTimestampVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqTZDateVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqTZTimeVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqTZTimestampVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignReqUuidVar">
			stmtMoveUp.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveUpByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWMoveDownTableBuff">
	/**
	 *	Move the specified buffer down in the chain (i.e. to the next position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffDown( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int revision )
	{
		final String S_ProcName = "moveBuffDown";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implMoveDownTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveDownTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
			final String sql = "CALL $sp_movedown_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + ", ? )";
			if( stmtMoveDown == null ) {
				stmtMoveDown = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDown.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveDown.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWMoveDownByPKeyTableAssignVar )$
			stmtMoveDown.setInt( argIdx++, revision );
			resultSet = stmtMoveDown.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignVar"
		>$switch IsNullable yes implDb2LUWMoveDownByPKeyTableAssignOptVar
			default implDb2LUWMoveDownByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWMoveDownByPKeyTableAssignOptBlobVar
			BoolDef implDb2LUWMoveDownByPKeyTableAssignOptBoolVar
			EnumDef implDb2LUWMoveDownByPKeyTableAssignOptEnumVar
			Int16Def implDb2LUWMoveDownByPKeyTableAssignOptInt16Var
			Int32Def implDb2LUWMoveDownByPKeyTableAssignOptInt32Var
			Int64Def implDb2LUWMoveDownByPKeyTableAssignOptInt64Var
			UInt16Def implDb2LUWMoveDownByPKeyTableAssignOptUInt16Var
			UInt32Def implDb2LUWMoveDownByPKeyTableAssignOptUInt32Var
			UInt64Def implDb2LUWMoveDownByPKeyTableAssignOptUInt64Var
			Id16Gen implDb2LUWMoveDownByPKeyTableAssignOptInt16Var
			Id32Gen implDb2LUWMoveDownByPKeyTableAssignOptInt32Var
			Id64Gen implDb2LUWMoveDownByPKeyTableAssignOptInt64Var
			FloatDef implDb2LUWMoveDownByPKeyTableAssignOptFloatVar
			DoubleDef implDb2LUWMoveDownByPKeyTableAssignOptDoubleVar
			NumberDef implDb2LUWMoveDownByPKeyTableAssignOptNumberVar
			StringDef implDb2LUWMoveDownByPKeyTableAssignOptStringVar
			TokenDef implDb2LUWMoveDownByPKeyTableAssignOptTokenVar
			NmTokenDef implDb2LUWMoveDownByPKeyTableAssignOptNmTokenVar
			NmTokensDef implDb2LUWMoveDownByPKeyTableAssignOptNmTokensVar
			TextDef implDb2LUWMoveDownByPKeyTableAssignOptTextVar
			DateDef implDb2LUWMoveDownByPKeyTableAssignOptDateVar
			TimeDef implDb2LUWMoveDownByPKeyTableAssignOptTimeVar
			TimestampDef implDb2LUWMoveDownByPKeyTableAssignOptTimestampVar
			TZDateDef implDb2LUWMoveDownByPKeyTableAssignOptTZDateVar
			TZTimeDef implDb2LUWMoveDownByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implDb2LUWMoveDownByPKeyTableAssignOptTZTimestampVar
			UuidDef implDb2LUWMoveDownByPKeyTableAssignOptUuidVar
			UuidGen implDb2LUWMoveDownByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWMoveDownByPKeyTableAssignReqBlobVar
			BoolDef implDb2LUWMoveDownByPKeyTableAssignReqBoolVar
			EnumDef implDb2LUWMoveDownByPKeyTableAssignReqEnumVar
			Int16Def implDb2LUWMoveDownByPKeyTableAssignReqInt16Var
			Int32Def implDb2LUWMoveDownByPKeyTableAssignReqInt32Var
			Int64Def implDb2LUWMoveDownByPKeyTableAssignReqInt64Var
			UInt16Def implDb2LUWMoveDownByPKeyTableAssignReqUInt16Var
			UInt32Def implDb2LUWMoveDownByPKeyTableAssignReqUInt32Var
			UInt64Def implDb2LUWMoveDownByPKeyTableAssignReqUInt64Var
			Id16Gen implDb2LUWMoveDownByPKeyTableAssignReqInt16Var
			Id32Gen implDb2LUWMoveDownByPKeyTableAssignReqInt32Var
			Id64Gen implDb2LUWMoveDownByPKeyTableAssignReqInt64Var
			FloatDef implDb2LUWMoveDownByPKeyTableAssignReqFloatVar
			DoubleDef implDb2LUWMoveDownByPKeyTableAssignReqDoubleVar
			NumberDef implDb2LUWMoveDownByPKeyTableAssignReqNumberVar
			StringDef implDb2LUWMoveDownByPKeyTableAssignReqStringVar
			TokenDef implDb2LUWMoveDownByPKeyTableAssignReqTokenVar
			NmTokenDef implDb2LUWMoveDownByPKeyTableAssignReqNmTokenVar
			NmTokensDef implDb2LUWMoveDownByPKeyTableAssignReqNmTokensVar
			TextDef implDb2LUWMoveDownByPKeyTableAssignReqTextVar
			DateDef implDb2LUWMoveDownByPKeyTableAssignReqDateVar
			TimeDef implDb2LUWMoveDownByPKeyTableAssignReqTimeVar
			TimestampDef implDb2LUWMoveDownByPKeyTableAssignReqTimestampVar
			TZDateDef implDb2LUWMoveDownByPKeyTableAssignReqTZDateVar
			TZTimeDef implDb2LUWMoveDownByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implDb2LUWMoveDownByPKeyTableAssignReqTZTimestampVar
			UuidDef implDb2LUWMoveDownByPKeyTableAssignReqUuidVar
			UuidGen implDb2LUWMoveDownByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqBlobVar">
				String $leadlower Name$AsClobData = new String( Base64.encodeBase64( $Name$ ) );
				stmtMoveDown.setString( argIdx++, $leadlower Name$AsClobData );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveDown.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtMoveDown.setString( argIdx++, "Y" );
			}
			else {
				stmtMoveDown.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtMoveDown.setString( argIdx++, "Y" );
				}
				else {
					stmtMoveDown.setString( argIdx++, "N" );
				}
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqEnumVar">
			stmtMoveDown.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveDown.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqInt16Var">
			stmtMoveDown.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveDown.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqInt32Var">
			stmtMoveDown.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveDown.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqInt64Var">
			stmtMoveDown.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveDown.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqUInt16Var">
			stmtMoveDown.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveDown.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqUInt32Var">
			stmtMoveDown.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveDown.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqUInt64Var">
			stmtMoveDown.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveDown.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqFloatVar">
			stmtMoveDown.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveDown.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqDoubleVar">
			stmtMoveDown.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveDown.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqNumberVar">
			stmtMoveDown.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveDown.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqStringVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqTokenVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqNmTokenVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqNmTokensVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqTextVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqDateVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqTimeVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqTimestampVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqTZDateVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqTZTimeVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqTZTimestampVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignReqUuidVar">
			stmtMoveDown.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWMoveDownByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="declDb2LUWTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="declDb2LUWTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="declDb2LUWTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="Db2LUWTableTablePreamble"
>// Description: Java 11 DB/2 LUW Jdbc DbIO implementation for $TableName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$Db2LUW;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$$JavaDb2LUWTableImport$

/*
 *	$SchemaName$Db2LUW$TableName$Table DB/2 LUW Jdbc DbIO implementation
 *	for $TableName$.
 */</GenRule>

	<GenRule GenDef="IndexCol" Name="Suffix"
		>$popto Index Suffix$</GenRule>
	<GenRule GenDef="Value" Name="Suffix"
		>$popto Index Suffix$</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTablePStatements"
		>$switch HasSuperClassRelation yes declDb2LUWTableTableInhPStatements default declDb2LUWTableTableBasePStatements$</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTableInhPStatements"
		>$switch ThisHasChain yes declDb2LUWTableTablePStmtEmitMove default empty$$reference SuperClassRelation reference ToTable declDb2LUWTableTablePStatements$$iterate Index( each declDb2LUWTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$$iterate Index( each declDb2LUWTableTablePStmtPageTableBuffByNonPrimaryIndex )$$iterate Index( each declDb2LUWTableTablePStmtDeleteTableByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTableBasePStatements"
		>$declDb2LUWTableTablePStmtEmitForPKey$$switch ThisHasChain yes declDb2LUWTableTablePStmtEmitMove default empty$$reference PrimaryKeyIndex declDb2LUWTableTablePStmtEmitReadTableBuffByIndex$$iterate Index( each declDb2LUWTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$$iterate Index( each declDb2LUWTableTablePStmtPageTableBuffByNonPrimaryIndex )$$iterate Index( each declDb2LUWTableTablePStmtDeleteTableByIndex )$</GenRule>

	<GenRule GenDef="Index" Name="declDb2LUWTableTablePStmtDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declDb2LUWTableTablePStmtDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declDb2LUWTableTablePStmtDeleteTableByIndex">
	protected PreparedStatement stmtDeleteBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTableBaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex declDb2LUWTableTablePStmtEmitReadTableClassCodeByIndex$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasSubClasses"
		>$poptop Table HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="declDb2LUWTableTablePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declDb2LUWTableTablePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declDb2LUWTableTablePStmtReadTableBuffByIndex"
		>$declDb2LUWTableTablePStmtEmitReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declDb2LUWTableTablePStmtEmitReadTableBuffByIndex"
>$switch TopTableHasSubClasses yes declDb2LUWTableTablePStmtEmitReadTableClassCodeByIndex default empty$
	protected PreparedStatement stmtReadBuffBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declDb2LUWTableTablePStmtPageTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default ifpagedata_declDb2LUWTableTablePStmtPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="ifpagedata_declDb2LUWTableTablePStmtPageTableBuffByIndex"
		>$switch PageData yes ifunique_declDb2LUWTableTablePStmtEmitPageTableBuffByIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="ifunique_declDb2LUWTableTablePStmtEmitPageTableBuffByIndex"
		>$switch IsUnique yes empty default declDb2LUWTableTablePStmtEmitPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declDb2LUWTableTablePStmtEmitPageTableBuffByIndex">
	protected PreparedStatement stmtPageBuffBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declDb2LUWTableTablePStmtEmitReadTableClassCodeByIndex">
	protected PreparedStatement stmtReadClassCodeBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTablePStmtEmitForPKey">
	protected PreparedStatement stmtReadBuffByPKey = null;
	protected PreparedStatement stmtLockBuffByPKey = null;
	protected PreparedStatement stmtCreateByPKey = null;
	protected PreparedStatement stmtUpdateByPKey = null;
	protected PreparedStatement stmtDeleteByPKey = null;$poptop Table switch BaseHasHistory yes declDb2LUWTableTablePStmtEmitForPKeyAudit default empty$
	protected PreparedStatement stmtReadAllBuff = null;$switch PageData yes declDb2LUWTableTablePStmetEmitPageForPKey default empty$$switch TopTableHasSubClasses yes declDb2LUWTableTablePStmtReadClassCodes default empty$</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTablePStmetEmitPageForPKey">
	protected PreparedStatement stmtPageAllBuff = null;</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTablePStmtEmitMove">
	protected PreparedStatement stmtMoveUp = null;
	protected PreparedStatement stmtMoveDown = null;</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTablePStmtEmitForPKeyAudit"
		></GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTablePStmtEmitForPKeyReallyAudit">
	protected PreparedStatement stmtAuditCreatedByPKey = null;
	protected PreparedStatement stmtAuditUpdatedByPKey = null;</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWTableTablePStmtReadClassCodes">
	protected PreparedStatement stmtReadDerivedClassCode = null;
	protected PreparedStatement stmtLockDerivedClassCode = null;
	protected PreparedStatement stmtReadAllClassCode = null;</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleasePreparedStatements">
	/**
	 *	Release the prepared statements.
	 *	&lt;p&gt;
	 *	When the schema changes connections, the prepared statements
	 *	have to be released because they contain connection-specific
	 *	information for most databases.
	 */
	public void releasePreparedStatements() {
		final String S_ProcName = "releasePreparedStatements";
		S_sqlSelect$TableName$DistinctClassCode = null;
		S_sqlSelect$TableName$Buff = null;
$implReleaseStmtReadBuffByPKey$$implReleaseStmtReadAllBuff$$implReleaseStmtLockBuffByPKey$$implReleaseStmtCreateByPKey$$implReleaseStmtUpdateByPKey$$implReleaseStmtDeleteByPKey$$switch HasChain yes implReleaseStmtMove default empty$$implDb2LUWTableReleaseDeleteByInheritedIndexes$$poptop Table switch BaseHasHistory yes implDb2LUWTableReleasePStmtEmitForPKeyAudit default empty$$implReleaseStmtReadAllBuff$$switch PageData yes implReleaseStmtPageAllBuff default empty$$switch TopTableHasSubClasses yes implDb2LUWTableReleasePStmtReadClassCodes default empty$$implDb2LUWTableReleasePStatements$$iterate DispensedId16Generators( each implDb2LUWTableIdGenReleasePStatements empty empty )$$iterate DispensedId32Generators( each implDb2LUWTableIdGenReleasePStatements empty empty )$$iterate DispensedId64Generators( each implDb2LUWTableIdGenReleasePStatements empty empty )$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleaseDeleteByInheritedIndexes"
		>$switch HasSuperClassRelation yes implDb2LUWTableReleaseDeleteByInhIndexes default implDb2LUWTableReleaseDeleteByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleaseDeleteByInhIndexes"
		>$reference SuperClassRelation reference ToTable implDb2LUWTableReleaseDeleteByInheritedIndexes$$iterate Index( each implDb2LUWTableReleaseDeleteByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleaseDeleteByBaseIndexes"
		>$iterate Index( each implDb2LUWTableReleaseDeleteByIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWTableReleaseDeleteByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implDb2LUWTableReleaseDeleteByIndex$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleasePStmtEmitForPKeyAudit"
		></GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleasePStmtEmitForPKeyReallyAudit">
		if( stmtAuditCreatedByPKey != null ) {
			try {
				stmtAuditCreatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditCreatedByPKey = null;
		}
		if( stmtAuditUpdatedByPKey != null ) {
			try {
				stmtAuditUpdatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditUpdatedByPKey = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWTableReleaseDeleteByIndex">
		if( stmtDeleteBy$Suffix$ != null ) {
			try {
				stmtDeleteBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtDeleteBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtReadBuffByPKey">
		if( stmtReadBuffByPKey != null ) {
			try {
				stmtReadBuffByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtReadBuffByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtReadAllBuff">
		if( stmtReadAllBuff != null ) {
			try {
				stmtReadAllBuff.close();
			}
			catch( SQLException e ) {
			}
			stmtReadAllBuff = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtPageAllBuff">
		if( stmtPageAllBuff != null ) {
			try {
				stmtPageAllBuff.close();
			}
			catch( SQLException e ) {
			}
			stmtPageAllBuff = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtLockBuffByPKey">
		if( stmtLockBuffByPKey != null ) {
			try {
				stmtLockBuffByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtLockBuffByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtCreateByPKey">
		if( stmtCreateByPKey != null ) {
			try {
				stmtCreateByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtCreateByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtUpdateByPKey">
		if( stmtUpdateByPKey != null ) {
			try {
				stmtUpdateByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtUpdateByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtMove">
		if( stmtMoveUp != null ) {
			try {
				stmtMoveUp.close();
			}
			catch( SQLException e ) {
			}
			stmtMoveUp = null;
		}
		if( stmtMoveDown != null ) {
			try {
				stmtMoveDown.close();
			}
			catch( SQLException e ) {
			}
			stmtMoveDown = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtDeleteByPKey">
		if( stmtDeleteByPKey != null ) {
			try {
				stmtDeleteByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtDeleteByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleasePStmtReadClassCodes">
		if( stmtReadDerivedClassCode != null ) {
			try {
				stmtReadDerivedClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtReadDerivedClassCode = null;
		}
		if( stmtLockDerivedClassCode != null ) {
			try {
				stmtLockDerivedClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtLockDerivedClassCode = null;
		}
		if( stmtReadAllClassCode != null ) {
			try {
				stmtReadAllClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtReadAllClassCode = null;
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implDb2LUWTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implDb2LUWTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implDb2LUWTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleasePStatements"
		>$switch HasSuperClassRelation yes implDb2LUWTableReleaseInhPStatements default implDb2LUWTableReleaseBasePStatements$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleaseInhPStatements"
		>$reference SuperClassRelation reference ToTable implDb2LUWTableReleasePStatements$$iterate Index( each implDb2LUWTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$$iterate Index( each implDb2LUWTableReleasePStmtPageTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleaseBasePStatements"
		>$reference PrimaryKeyIndex implDb2LUWTableReleasePStmtReadTableBuffByIndex$$iterate Index( each implDb2LUWTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$$iterate Index( each implDb2LUWTableReleasePStmtPageTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWTableReleaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex implDb2LUWTableReleasePStmtDerivedClassCodeBySuffix$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWTableReleasePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implDb2LUWTableReleasePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWTableReleasePStmtReadTableBuffByIndex"
		>$implDb2LUWTableReleasePStmtEmitReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWTableReleasePStmtPageTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default ifpagedata_implDb2LUWTableReleasePStmtPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="ifpagedata_implDb2LUWTableReleasePStmtPageTableBuffByIndex"
		>$switch PageData yes ifduplicate_implDb2LUWTableReleasePStmtEmitPageTableBuffByIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="ifduplicate_implDb2LUWTableReleasePStmtEmitPageTableBuffByIndex"
		>$switch IsUnique yes empty default implDb2LUWTableReleasePStmtEmitPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWTableReleasePStmtDerivedClassCodeBySuffix">
		if( stmtReadClassCodeBy$Suffix$ != null ) {
			try {
				stmtReadClassCodeBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtReadClassCodeBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWTableReleasePStmtEmitReadTableBuffByIndex"
>$switch TopTableHasSubClasses yes implDb2LUWTableReleasePStmtDerivedClassCodeBySuffix default empty$
		if( stmtReadBuffBy$Suffix$ != null ) {
			try {
				stmtReadBuffBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtReadBuffBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWTableReleasePStmtEmitPageTableBuffByIndex"
>$switch TopTableHasSubClasses yes implDb2LUWTableReleasePStmtDerivedClassCodeBySuffix default empty$
		if( stmtPageBuffBy$Suffix$ != null ) {
			try {
				stmtPageBuffBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtPageBuffBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implConstructDb2LUWTableTable">
	public $SchemaName$Db2LUW$TableName$Table( $SchemaName$Db2LUWSchema argSchema ) {
		schema = argSchema;
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWIndexColumnNameComma">$DbColumnName$, </GenRule>
	<GenRule GenDef="IndexCol" Name="implDb2LUWIndexColumnName">$DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWIndexColumnBindVar">?</GenRule>
	<GenRule GenDef="IndexCol" Name="implDb2LUWIndexCommaColumnBindVar">, ?</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGen">
	public short next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		final String sqlSelectNext =
				"call $sf_next_tableidgen$("
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implDb2LUWNextIdGenSPArg each implDb2LUWNextIdGenCommaSPArg )$ + " )";
$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenViaAttributes">
	public short next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		short retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenViaAttributesSetKeyValue">
		pkey.set$OptionalOrRequired$$Name$( arg$Name$ );</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenDeclAttr">,
		$implJavaAtomType$ arg$Name$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNext );
			}
			short nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWNextIdGen16SelectAssignVar )$
			rsSelect = stmtSelectNext$Name$.executeQuery();
			if( rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 result row to be returned by $sf_next_tableidgen$(), not 0" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getShort( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Next$Name$ cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWNextIdGenCommaSPArg"> + ", "
$implDb2LUWNextIdGenSPArg$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArg"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWNextIdGenSPArgValueGenericVar
			BoolDef implDb2LUWNextIdGenSPArgValueBoolVar
			EnumDef implDb2LUWNextIdGenSPArgValueGenericVar
			Int16Def implDb2LUWNextIdGenSPArgValueGenericVar
			Int32Def implDb2LUWNextIdGenSPArgValueGenericVar
			Int64Def implDb2LUWNextIdGenSPArgValueGenericVar
			UInt16Def implDb2LUWNextIdGenSPArgValueGenericVar
			UInt32Def implDb2LUWNextIdGenSPArgValueGenericVar
			UInt64Def implDb2LUWNextIdGenSPArgValueGenericVar
			Id16Gen implDb2LUWNextIdGenSPArgValueGenericVar
			Id32Gen implDb2LUWNextIdGenSPArgValueGenericVar
			Id64Gen implDb2LUWNextIdGenSPArgValueGenericVar
			FloatDef implDb2LUWNextIdGenSPArgValueGenericVar
			DoubleDef implDb2LUWNextIdGenSPArgValueGenericVar
			NumberDef implDb2LUWNextIdGenSPArgValueGenericVar
			StringDef implDb2LUWNextIdGenSPArgValueGenericVar
			TokenDef implDb2LUWNextIdGenSPArgValueGenericVar
			NmTokenDef implDb2LUWNextIdGenSPArgValueGenericVar
			NmTokensDef implDb2LUWNextIdGenSPArgValueGenericVar
			TextDef implDb2LUWNextIdGenSPArgValueGenericVar
			DateDef implDb2LUWNextIdGenSPArgValueDateVar
			TimeDef implDb2LUWNextIdGenSPArgValueTimeVar
			TimestampDef implDb2LUWNextIdGenSPArgValueTimestampVar
			TZDateDef implDb2LUWNextIdGenSPArgValueTZDateVar
			TZTimeDef implDb2LUWNextIdGenSPArgValueTZTimeVar
			TZTimestampDef implDb2LUWNextIdGenSPArgValueTZTimestampVar
			UuidDef implDb2LUWNextIdGenSPArgValueGenericVar
			UuidGen implDb2LUWNextIdGenSPArgValueGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArgValueGenericVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArgValueBoolVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArgValueDateVar"
>			+		"TO_DATE( ?, 'YYYY-MM-DD' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArgValueTimeVar"
>			+		"TIME( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArgValueTimestampVar"
>			+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArgValueTZDateVar"
>			+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArgValueTZTimeVar"
>			+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArgValueTZTimestampVar"
>			+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGenSPArgValueUuidVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignVar"
		>$switch IsNullable yes implDb2LUWNextIdGen16SelectAssignOptVar
			default implDb2LUWNextIdGen16SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWNextIdGen16SelectAssignOptBlobVar
			BoolDef implDb2LUWNextIdGen16SelectAssignOptBoolVar
			EnumDef implDb2LUWNextIdGen16SelectAssignOptEnumVar
			Int16Def implDb2LUWNextIdGen16SelectAssignOptInt16Var
			Int32Def implDb2LUWNextIdGen16SelectAssignOptInt32Var
			Int64Def implDb2LUWNextIdGen16SelectAssignOptInt64Var
			UInt16Def implDb2LUWNextIdGen16SelectAssignOptUInt16Var
			UInt32Def implDb2LUWNextIdGen16SelectAssignOptUInt32Var
			UInt64Def implDb2LUWNextIdGen16SelectAssignOptUInt64Var
			Id16Gen implDb2LUWNextIdGen16SelectAssignOptInt16Var
			Id32Gen implDb2LUWNextIdGen16SelectAssignOptInt32Var
			Id64Gen implDb2LUWNextIdGen16SelectAssignOptInt64Var
			FloatDef implDb2LUWNextIdGen16SelectAssignOptFloatVar
			DoubleDef implDb2LUWNextIdGen16SelectAssignOptDoubleVar
			NumberDef implDb2LUWNextIdGen16SelectAssignOptNumberVar
			StringDef implDb2LUWNextIdGen16SelectAssignOptStringVar
			TokenDef implDb2LUWNextIdGen16SelectAssignOptTokenVar
			NmTokenDef implDb2LUWNextIdGen16SelectAssignOptNmTokenVar
			NmTokensDef implDb2LUWNextIdGen16SelectAssignOptNmTokensVar
			TextDef implDb2LUWNextIdGen16SelectAssignOptTextVar
			DateDef implDb2LUWNextIdGen16SelectAssignOptDateVar
			TimeDef implDb2LUWNextIdGen16SelectAssignOptTimeVar
			TimestampDef implDb2LUWNextIdGen16SelectAssignOptTimestampVar
			TZDateDef implDb2LUWNextIdGen16SelectAssignOptTZDateVar
			TZTimeDef implDb2LUWNextIdGen16SelectAssignOptTZTimeVar
			TZTimestampDef implDb2LUWNextIdGen16SelectAssignOptTZTimestampVar
			UuidDef implDb2LUWNextIdGen16SelectAssignOptUuidVar
			UuidGen implDb2LUWNextIdGen16SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWNextIdGen16SelectAssignReqBlobVar
			BoolDef implDb2LUWNextIdGen16SelectAssignReqBoolVar
			EnumDef implDb2LUWNextIdGen16SelectAssignReqEnumVar
			Int16Def implDb2LUWNextIdGen16SelectAssignReqInt16Var
			Int32Def implDb2LUWNextIdGen16SelectAssignReqInt32Var
			Int64Def implDb2LUWNextIdGen16SelectAssignReqInt64Var
			UInt16Def implDb2LUWNextIdGen16SelectAssignReqUInt16Var
			UInt32Def implDb2LUWNextIdGen16SelectAssignReqUInt32Var
			UInt64Def implDb2LUWNextIdGen16SelectAssignReqUInt64Var
			Id16Gen implDb2LUWNextIdGen16SelectAssignReqInt16Var
			Id32Gen implDb2LUWNextIdGen16SelectAssignReqInt32Var
			Id64Gen implDb2LUWNextIdGen16SelectAssignReqInt64Var
			FloatDef implDb2LUWNextIdGen16SelectAssignReqFloatVar
			DoubleDef implDb2LUWNextIdGen16SelectAssignReqDoubleVar
			NumberDef implDb2LUWNextIdGen16SelectAssignReqNumberVar
			StringDef implDb2LUWNextIdGen16SelectAssignReqStringVar
			TokenDef implDb2LUWNextIdGen16SelectAssignReqTokenVar
			NmTokenDef implDb2LUWNextIdGen16SelectAssignReqNmTokenVar
			NmTokensDef implDb2LUWNextIdGen16SelectAssignReqNmTokensVar
			TextDef implDb2LUWNextIdGen16SelectAssignReqTextVar
			DateDef implDb2LUWNextIdGen16SelectAssignReqDateVar
			TimeDef implDb2LUWNextIdGen16SelectAssignReqTimeVar
			TimestampDef implDb2LUWNextIdGen16SelectAssignReqTimestampVar
			TZDateDef implDb2LUWNextIdGen16SelectAssignReqTZDateVar
			TZTimeDef implDb2LUWNextIdGen16SelectAssignReqTZTimeVar
			TZTimestampDef implDb2LUWNextIdGen16SelectAssignReqTZTimestampVar
			UuidDef implDb2LUWNextIdGen16SelectAssignReqUuidVar
			UuidGen implDb2LUWNextIdGen16SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqBlobVar">
			stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqBoolVar">
			if( $Name$ ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "Y" );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "Y" );
				}
				else {
					stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqEnumVar">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqFloatVar">
			stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqNumberVar">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqStringVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqTextVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignReqUuidVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen16SelectAssignClassCode">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGen">
	public int next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		final String sqlSelectNext =
				"call $sf_next_tableidgen$("
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implDb2LUWNextIdGenSPArg each implDb2LUWNextIdGenCommaSPArg )$ + " )";
$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenViaAttributes">
	public int next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		int retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNext );
			}
			int nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWNextIdGen32SelectAssignVar )$
			rsSelect = stmtSelectNext$Name$.executeQuery();
			if( rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 result row to be returned by $sf_next_tableidgen$(), not 0" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getInt( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Next$Name$ cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignVar"
		>$switch IsNullable yes implDb2LUWNextIdGen32SelectAssignOptVar
			default implDb2LUWNextIdGen32SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWNextIdGen32SelectAssignOptBlobVar
			BoolDef implDb2LUWNextIdGen32SelectAssignOptBoolVar
			EnumDef implDb2LUWNextIdGen32SelectAssignOptEnumVar
			Int16Def implDb2LUWNextIdGen32SelectAssignOptInt16Var
			Int32Def implDb2LUWNextIdGen32SelectAssignOptInt32Var
			Int64Def implDb2LUWNextIdGen32SelectAssignOptInt64Var
			UInt16Def implDb2LUWNextIdGen32SelectAssignOptUInt16Var
			UInt32Def implDb2LUWNextIdGen32SelectAssignOptUInt32Var
			UInt64Def implDb2LUWNextIdGen32SelectAssignOptUInt64Var
			Id16Gen implDb2LUWNextIdGen32SelectAssignOptInt16Var
			Id32Gen implDb2LUWNextIdGen32SelectAssignOptInt32Var
			Id64Gen implDb2LUWNextIdGen32SelectAssignOptInt64Var
			FloatDef implDb2LUWNextIdGen32SelectAssignOptFloatVar
			DoubleDef implDb2LUWNextIdGen32SelectAssignOptDoubleVar
			NumberDef implDb2LUWNextIdGen32SelectAssignOptNumberVar
			StringDef implDb2LUWNextIdGen32SelectAssignOptStringVar
			TokenDef implDb2LUWNextIdGen32SelectAssignOptTokenVar
			NmTokenDef implDb2LUWNextIdGen32SelectAssignOptNmTokenVar
			NmTokensDef implDb2LUWNextIdGen32SelectAssignOptNmTokensVar
			TextDef implDb2LUWNextIdGen32SelectAssignOptTextVar
			DateDef implDb2LUWNextIdGen32SelectAssignOptDateVar
			TimeDef implDb2LUWNextIdGen32SelectAssignOptTimeVar
			TimestampDef implDb2LUWNextIdGen32SelectAssignOptTimestampVar
			TZDateDef implDb2LUWNextIdGen32SelectAssignOptTZDateVar
			TZTimeDef implDb2LUWNextIdGen32SelectAssignOptTZTimeVar
			TZTimestampDef implDb2LUWNextIdGen32SelectAssignOptTZTimestampVar
			UuidDef implDb2LUWNextIdGen32SelectAssignOptUuidVar
			UuidGen implDb2LUWNextIdGen32SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWNextIdGen32SelectAssignReqBlobVar
			BoolDef implDb2LUWNextIdGen32SelectAssignReqBoolVar
			EnumDef implDb2LUWNextIdGen32SelectAssignReqEnumVar
			Int16Def implDb2LUWNextIdGen32SelectAssignReqInt16Var
			Int32Def implDb2LUWNextIdGen32SelectAssignReqInt32Var
			Int64Def implDb2LUWNextIdGen32SelectAssignReqInt64Var
			UInt16Def implDb2LUWNextIdGen32SelectAssignReqUInt16Var
			UInt32Def implDb2LUWNextIdGen32SelectAssignReqUInt32Var
			UInt64Def implDb2LUWNextIdGen32SelectAssignReqUInt64Var
			Id16Gen implDb2LUWNextIdGen32SelectAssignReqInt16Var
			Id32Gen implDb2LUWNextIdGen32SelectAssignReqInt32Var
			Id64Gen implDb2LUWNextIdGen32SelectAssignReqInt64Var
			FloatDef implDb2LUWNextIdGen32SelectAssignReqFloatVar
			DoubleDef implDb2LUWNextIdGen32SelectAssignReqDoubleVar
			NumberDef implDb2LUWNextIdGen32SelectAssignReqNumberVar
			StringDef implDb2LUWNextIdGen32SelectAssignReqStringVar
			TokenDef implDb2LUWNextIdGen32SelectAssignReqTokenVar
			NmTokenDef implDb2LUWNextIdGen32SelectAssignReqNmTokenVar
			NmTokensDef implDb2LUWNextIdGen32SelectAssignReqNmTokensVar
			TextDef implDb2LUWNextIdGen32SelectAssignReqTextVar
			DateDef implDb2LUWNextIdGen32SelectAssignReqDateVar
			TimeDef implDb2LUWNextIdGen32SelectAssignReqTimeVar
			TimestampDef implDb2LUWNextIdGen32SelectAssignReqTimestampVar
			TZDateDef implDb2LUWNextIdGen32SelectAssignReqTZDateVar
			TZTimeDef implDb2LUWNextIdGen32SelectAssignReqTZTimeVar
			TZTimestampDef implDb2LUWNextIdGen32SelectAssignReqTZTimestampVar
			UuidDef implDb2LUWNextIdGen32SelectAssignReqUuidVar
			UuidGen implDb2LUWNextIdGen32SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqBlobVar">
			stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqBoolVar">
			if( $Name$ ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "Y" );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "Y" );
				}
				else {
					stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqEnumVar">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqFloatVar">
			stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqNumberVar">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqStringVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqTextVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignReqUuidVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen32SelectAssignClassCode">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGen">
	public long next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		final String sqlSelectNext =
				"call $sf_next_tableidgen$("
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implDb2LUWNextIdGenSPArg each implDb2LUWNextIdGenCommaSPArg )$ + " )";
$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenViaAttributes">
	public long next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		long retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNext );
			}
			long nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWNextIdGen64SelectAssignVar )$
			rsSelect = stmtSelectNext$Name$.executeQuery();
			if( rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 result row to be returned by $sf_next_tableidgen$(), not 0" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getLong( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Next$Name$ cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>


	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignVar"
		>$switch IsNullable yes implDb2LUWNextIdGen64SelectAssignOptVar
			default implDb2LUWNextIdGen64SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWNextIdGen64SelectAssignOptBlobVar
			BoolDef implDb2LUWNextIdGen64SelectAssignOptBoolVar
			EnumDef implDb2LUWNextIdGen64SelectAssignOptEnumVar
			Int16Def implDb2LUWNextIdGen64SelectAssignOptInt16Var
			Int32Def implDb2LUWNextIdGen64SelectAssignOptInt32Var
			Int64Def implDb2LUWNextIdGen64SelectAssignOptInt64Var
			UInt16Def implDb2LUWNextIdGen64SelectAssignOptUInt16Var
			UInt32Def implDb2LUWNextIdGen64SelectAssignOptUInt32Var
			UInt64Def implDb2LUWNextIdGen64SelectAssignOptUInt64Var
			Id16Gen implDb2LUWNextIdGen64SelectAssignOptInt16Var
			Id32Gen implDb2LUWNextIdGen64SelectAssignOptInt32Var
			Id64Gen implDb2LUWNextIdGen64SelectAssignOptInt64Var
			FloatDef implDb2LUWNextIdGen64SelectAssignOptFloatVar
			DoubleDef implDb2LUWNextIdGen64SelectAssignOptDoubleVar
			NumberDef implDb2LUWNextIdGen64SelectAssignOptNumberVar
			StringDef implDb2LUWNextIdGen64SelectAssignOptStringVar
			TokenDef implDb2LUWNextIdGen64SelectAssignOptTokenVar
			NmTokenDef implDb2LUWNextIdGen64SelectAssignOptNmTokenVar
			NmTokensDef implDb2LUWNextIdGen64SelectAssignOptNmTokensVar
			TextDef implDb2LUWNextIdGen64SelectAssignOptTextVar
			DateDef implDb2LUWNextIdGen64SelectAssignOptDateVar
			TimeDef implDb2LUWNextIdGen64SelectAssignOptTimeVar
			TimestampDef implDb2LUWNextIdGen64SelectAssignOptTimestampVar
			TZDateDef implDb2LUWNextIdGen64SelectAssignOptTZDateVar
			TZTimeDef implDb2LUWNextIdGen64SelectAssignOptTZTimeVar
			TZTimestampDef implDb2LUWNextIdGen64SelectAssignOptTZTimestampVar
			UuidDef implDb2LUWNextIdGen64SelectAssignOptUuidVar
			UuidGen implDb2LUWNextIdGen64SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWNextIdGen64SelectAssignReqBlobVar
			BoolDef implDb2LUWNextIdGen64SelectAssignReqBoolVar
			EnumDef implDb2LUWNextIdGen64SelectAssignReqEnumVar
			Int16Def implDb2LUWNextIdGen64SelectAssignReqInt16Var
			Int32Def implDb2LUWNextIdGen64SelectAssignReqInt32Var
			Int64Def implDb2LUWNextIdGen64SelectAssignReqInt64Var
			UInt16Def implDb2LUWNextIdGen64SelectAssignReqUInt16Var
			UInt32Def implDb2LUWNextIdGen64SelectAssignReqUInt32Var
			UInt64Def implDb2LUWNextIdGen64SelectAssignReqUInt64Var
			Id16Gen implDb2LUWNextIdGen64SelectAssignReqInt16Var
			Id32Gen implDb2LUWNextIdGen64SelectAssignReqInt32Var
			Id64Gen implDb2LUWNextIdGen64SelectAssignReqInt64Var
			FloatDef implDb2LUWNextIdGen64SelectAssignReqFloatVar
			DoubleDef implDb2LUWNextIdGen64SelectAssignReqDoubleVar
			NumberDef implDb2LUWNextIdGen64SelectAssignReqNumberVar
			StringDef implDb2LUWNextIdGen64SelectAssignReqStringVar
			TokenDef implDb2LUWNextIdGen64SelectAssignReqTokenVar
			NmTokenDef implDb2LUWNextIdGen64SelectAssignReqNmTokenVar
			NmTokensDef implDb2LUWNextIdGen64SelectAssignReqNmTokensVar
			TextDef implDb2LUWNextIdGen64SelectAssignReqTextVar
			DateDef implDb2LUWNextIdGen64SelectAssignReqDateVar
			TimeDef implDb2LUWNextIdGen64SelectAssignReqTimeVar
			TimestampDef implDb2LUWNextIdGen64SelectAssignReqTimestampVar
			TZDateDef implDb2LUWNextIdGen64SelectAssignReqTZDateVar
			TZTimeDef implDb2LUWNextIdGen64SelectAssignReqTZTimeVar
			TZTimestampDef implDb2LUWNextIdGen64SelectAssignReqTZTimestampVar
			UuidDef implDb2LUWNextIdGen64SelectAssignReqUuidVar
			UuidGen implDb2LUWNextIdGen64SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqBlobVar">
			stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqBoolVar">
			if( $Name$ ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "Y" );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "Y" );
				}
				else {
					stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqEnumVar">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqFloatVar">
			stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqNumberVar">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqStringVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqTextVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignReqUuidVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWNextIdGen64SelectAssignClassCode">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="UuidGen" Name="implNextIdGen">
	public UUID next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey )
	{
		UUID retval = UUID.randomUUID();
		return( retval );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevision">
				+		", revision )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevision"
		> + " )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevisionValue"> + ", "
				+		"1 )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevisionValue"> + " )"</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableSetBuffPKey"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWCreateTableSetBuffPKeyGeneratedAttr )$
			Buff.setRequiredRevision( Revision );</GenRule>

	<GenRule GenDef="IndexCol" Name="GenerateId"
		>$reference Column GenerateId$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWCreateTableSetBuffPKeyGeneratedAttr"
		>$switch GenerateId yes implDb2LUWCreateTableSetBuffPKeyAttr default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWCreateTableSetBuffPKeyAttr">
			Buff.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableGenKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWCreateTableKeys empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableCopyKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWCreateTableKeysCopyId empty empty )$</GenRule>

	<GenRule GenDef="Object" Name="implCheckOpenTransaction"
		>$popto Table implCheckOpenTransaction$</GenRule>

	<GenRule GenDef="Table" Name="implCheckOpenTransaction">
		if( ! schema.isTransactionOpen() ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"Transaction not open" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTable"
		>$implCreateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="BaseDefIsBaseTable"
		>$reference BaseClass IsBaseTable$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implCreateTableSPCopyInhColumns default implCreateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implCreateTableSPCopyColumns$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableCopyDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implDb2LUWCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implDb2LUWCreateTableCopyClassCode default empty$$iterate Columns( each implDb2LUWCreateTableCopyNonGenColumn empty empty )$</GenRule>

	<GenRule GenDef="Value" Name="implDb2LUWCreateTableCopyNonGenColumn"
		>$switch GenerateId yes empty default implDb2LUWCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSP">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$switch HasSuperClassRelation yes empty default implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implCreateTableSPTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPTryBody">
$implCreateTableSPCopyColumns$$reference PrimaryKeyIndex iterate Columns( each implCreateTableSPMaybeInitGeneratedUuid )$			Connection cnx = schema.getCnx();
			final String sql =
				"CALL $sp_create_dbtablename$( ?, ?, ?, ?, ?, ?"$implCreateTableSPPassArgs$ + " )";
			if( stmtCreateByPKey == null ) {
				stmtCreateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implDb2LUWCreateTableBindClassCode default implDb2LUWCreateTableBindConstClassCode$$implCreateTableSPBindArgs$
			resultSet = stmtCreateByPKey.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff createdBuff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}$implDb2LUWCreateTableApplyBuff$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPMaybeInitGeneratedUuid"
		>$switch GenerateId yes implCreateTableSPCheckIfGeneratingUuid default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPCheckIfGeneratingUuid"
		>$switch BaseModelAtomClass
			UuidDef implCreateTableSPInitGeneratedUuid
			UuidGen implCreateTableSPInitGeneratedUuid
			default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPInitGeneratedUuid">
			UUID $Name$ = UUID.randomUUID();</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableApplyBuff"
		>$switch HasSuperClassRelation yes implDb2LUWCreateTableApplyInhBuff default implDb2LUWCreateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implDb2LUWCreateTableApplyBuff$$iterate Columns( each implDb2LUWCreateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableApplyBaseBuff"
		>$iterate Columns( each implDb2LUWCreateTableApplyCol )$$implDb2LUWCreateTableApplyRevision$$switch HasAuditColumns yes implDb2LUWCreateTableApplyAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableApplyRevision">
				Buff.setRequiredRevision( createdBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableApplyAuditColumns">
				Buff.setCreatedByUserId( createdBuff.getCreatedByUserId() );
				Buff.setCreatedAt( createdBuff.getCreatedAt() );
				Buff.setUpdatedByUserId( createdBuff.getUpdatedByUserId() );
				Buff.setUpdatedAt( createdBuff.getUpdatedAt() );</GenRule>

	<GenRule GenDef="Value" Name="implDb2LUWCreateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implDb2LUWCreateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implDb2LUWCreateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( createdBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPBindInhArgs default implCreateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPBindArgs$$iterate Columns( each implCreateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindBaseArgs"
		>$iterate Columns( each implCreateTableSPBindNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implDb2LUWCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPBindForceUuidArg default implDb2LUWCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindForceUuidArg"
		>$switch BaseModelAtomClass
			UuidDef implDb2LUWCreateTableBindVar
			UuidGen implDb2LUWCreateTableBindVar
			default empty$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPPassInhArgs default implCreateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPPassArgs$$iterate Columns( each implCreateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassBaseArgs"
		>$iterate Columns( each implCreateTableSPPassNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPForceUuidArg default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPForceUuidArg"
		>$switch BaseModelAtomClass
			UuidGen implCreateTableSPPassAnArg
			UuidDef implCreateTableSPPassAnArg
			default empty$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWCreateTableSPPassGenericVar
			BoolDef implDb2LUWCreateTableSPPassGenericVar
			EnumDef implDb2LUWCreateTableSPPassGenericVar
			Int16Def implDb2LUWCreateTableSPPassGenericVar
			Int32Def implDb2LUWCreateTableSPPassGenericVar
			Int64Def implDb2LUWCreateTableSPPassGenericVar
			UInt16Def implDb2LUWCreateTableSPPassGenericVar
			UInt32Def implDb2LUWCreateTableSPPassGenericVar
			UInt64Def implDb2LUWCreateTableSPPassGenericVar
			Id16Gen implDb2LUWCreateTableSPPassGenericVar
			Id32Gen implDb2LUWCreateTableSPPassGenericVar
			Id64Gen implDb2LUWCreateTableSPPassGenericVar
			FloatDef implDb2LUWCreateTableSPPassFloatVar
			DoubleDef implDb2LUWCreateTableSPPassGenericVar
			NumberDef implDb2LUWCreateTableSPPassGenericVar
			StringDef implDb2LUWCreateTableSPPassGenericVar
			TokenDef implDb2LUWCreateTableSPPassGenericVar
			NmTokenDef implDb2LUWCreateTableSPPassGenericVar
			NmTokensDef implDb2LUWCreateTableSPPassGenericVar
			TextDef implDb2LUWCreateTableSPPassTextVar
			DateDef implDb2LUWCreateTableSPPassDateVar
			TimeDef implDb2LUWCreateTableSPPassTimeVar
			TimestampDef implDb2LUWCreateTableSPPassTimestampVar
			TZDateDef implDb2LUWCreateTableSPPassTZDateVar
			TZTimeDef implDb2LUWCreateTableSPPassTZTimeVar
			TZTimestampDef implDb2LUWCreateTableSPPassTZTimestampVar
			UuidDef implDb2LUWCreateTableSPPassGenericVar
			UuidGen implDb2LUWCreateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableSPPassGenericVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableSPPassFloatVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableSPPassTextVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableSPPassDateVar"> + ", "
				+		"TO_DATE( ?, 'YYYY-MM-DD' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableSPPassTimeVar"> + ", "
				+		"TIME( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableSPPassTimestampVar"> + ", "
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableSPPassTZDateVar"> + ", "
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableSPPassTZTimeVar"> + ", "
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableSPPassTZTimestampVar"> + ", "
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableInvokeSuperCreate">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().create$reference SuperClassRelation reference ToTable TableName$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyle">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$switch SecScope None empty System implCreateTableOSCheckSystem Cluster implCreateTableOSCheckCluster Tenant implCreateTableOSCheckTenant default error$$switch HasSuperClassRelation yes implCreateTableInvokeSuperCreate default implCheckOpenTransaction$
		try {
			Connection cnx = schema.getCnx();
$switch IsBaseTable yes implDb2LUWCreateTableClassCodeKey default empty$$switch HasSuperClassRelation no implDb2LUWCreateTableGenKeys default implDb2LUWCreateTableCopyKeys$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$$switch HasSuperClassRelation no implDb2LUWCreateTableInitRevision default empty$<!--
-->			String sql =
					"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$( "$switch IsBaseTable yes implDb2LUWCreateTableInsertClassCode default empty$$switch HasSuperClassRelation no implDb2LUWCreateTableInsertOptAuditColumns default empty$$iterate Columns( each implDb2LUWCreateTableInsertColumnComma last implDb2LUWCreateTableInsertColumn )$$switch HasSuperClassRelation no implCreateTableSqlFragRevision default implCreateTableSqlFragNoRevision$
				+	"VALUES ( "$switch IsBaseTable yes implDb2LUWCreateTableValuesClassCode default empty$$switch HasSuperClassRelation no implDb2LUWCreateTableValuesOptAuditColumns default empty$$iterate Columns( each implDb2LUWCreateTableValuesVarComma last implDb2LUWCreateTableValuesVar )$$switch HasSuperClassRelation no implCreateTableSqlFragRevisionValue default implCreateTableSqlFragNoRevisionValue$;
			if( stmtCreateByPKey == null ) {
				stmtCreateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;$switch IsBaseTable yes implDb2LUWCreateTableBindClassCode default empty$$switch HasSuperClassRelation no implDb2LUWCreateTableBindOptAuditColumns default empty$$iterate Columns( each implDb2LUWCreateTableBindVar )$
			int rowsAffected = stmtCreateByPKey.executeUpdate();
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by insert, not " + rowsAffected );
			}$switch HasSuperClassRelation no implDb2LUWCreateTableSetBuffPKey default empty$$poptop Table switch BaseHasHistory yes implCreateTableOldStyleAuditCreated default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableValuesOptAuditColumns"
		>$switch HasAuditColumns yes implDb2LUWCreateTableValuesAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableValuesAuditColumns">
				+		" ?, "
				+		" TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' ), "
				+		" ?, "
				+		" TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' ), "</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableInsertOptAuditColumns"
		>$switch HasAuditColumns yes implDb2LUWCreateTableInsertAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableInsertAuditColumns">
				+		"createdby, "
				+		"createdat, "
				+		"updatedby, "
				+		"updatedat, "</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implDb2LUWCreateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWCreateTableBindAuditColumns">
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( Calendar.getInstance() ) );
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( Calendar.getInstance() ) );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreated"
		>$switch BaseHasClassCode yes implCreateTableOldStyleAuditCreatedWithCC default implCreateTableOldStyleAuditCreatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid,"
					+		" auditstamp,"
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, CURRENT TIMESTAMP, $lower reference BaseClass ClassCode$.classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditCreatedByPKey == null ) {
					stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
				}
				argIdx = 1;
				stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWCreateTableAssignVar )$
				int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedValInh default implCreateTableOldStyleAuditCreatedValBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedVal$$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValBase"
		>$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditCreatedReallyVal$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedReallyVal"
> + ", "
					+		"$lower reference Table ClassCode$.$DbColumnName$"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignVar"
		>$switch IsNullable yes implDb2LUWCreateTableAssignOptVar
			default implDb2LUWCreateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWCreateTableAssignOptBlobVar
			BoolDef implDb2LUWCreateTableAssignOptBoolVar
			EnumDef implDb2LUWCreateTableAssignOptEnumVar
			Int16Def implDb2LUWCreateTableAssignOptInt16Var
			Int32Def implDb2LUWCreateTableAssignOptInt32Var
			Int64Def implDb2LUWCreateTableAssignOptInt64Var
			UInt16Def implDb2LUWCreateTableAssignOptUInt16Var
			UInt32Def implDb2LUWCreateTableAssignOptUInt32Var
			UInt64Def implDb2LUWCreateTableAssignOptUInt64Var
			Id16Gen implDb2LUWCreateTableAssignOptInt16Var
			Id32Gen implDb2LUWCreateTableAssignOptInt32Var
			Id64Gen implDb2LUWCreateTableAssignOptInt64Var
			FloatDef implDb2LUWCreateTableAssignOptFloatVar
			DoubleDef implDb2LUWCreateTableAssignOptDoubleVar
			NumberDef implDb2LUWCreateTableAssignOptNumberVar
			StringDef implDb2LUWCreateTableAssignOptStringVar
			TokenDef implDb2LUWCreateTableAssignOptTokenVar
			NmTokenDef implDb2LUWCreateTableAssignOptNmTokenVar
			NmTokensDef implDb2LUWCreateTableAssignOptNmTokensVar
			TextDef implDb2LUWCreateTableAssignOptTextVar
			DateDef implDb2LUWCreateTableAssignOptDateVar
			TimeDef implDb2LUWCreateTableAssignOptTimeVar
			TimestampDef implDb2LUWCreateTableAssignOptTimestampVar
			TZDateDef implDb2LUWCreateTableAssignOptTZDateVar
			TZTimeDef implDb2LUWCreateTableAssignOptTZTimeVar
			TZTimestampDef implDb2LUWCreateTableAssignOptTZTimestampVar
			UuidDef implDb2LUWCreateTableAssignOptUuidVar
			UuidGen implDb2LUWCreateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWCreateTableAssignReqBlobVar
			BoolDef implDb2LUWCreateTableAssignReqBoolVar
			EnumDef implDb2LUWCreateTableAssignReqEnumVar
			Int16Def implDb2LUWCreateTableAssignReqInt16Var
			Int32Def implDb2LUWCreateTableAssignReqInt32Var
			Int64Def implDb2LUWCreateTableAssignReqInt64Var
			UInt16Def implDb2LUWCreateTableAssignReqUInt16Var
			UInt32Def implDb2LUWCreateTableAssignReqUInt32Var
			UInt64Def implDb2LUWCreateTableAssignReqUInt64Var
			Id16Gen implDb2LUWCreateTableAssignReqInt16Var
			Id32Gen implDb2LUWCreateTableAssignReqInt32Var
			Id64Gen implDb2LUWCreateTableAssignReqInt64Var
			FloatDef implDb2LUWCreateTableAssignReqFloatVar
			DoubleDef implDb2LUWCreateTableAssignReqDoubleVar
			NumberDef implDb2LUWCreateTableAssignReqNumberVar
			StringDef implDb2LUWCreateTableAssignReqStringVar
			TokenDef implDb2LUWCreateTableAssignReqTokenVar
			NmTokenDef implDb2LUWCreateTableAssignReqNmTokenVar
			NmTokensDef implDb2LUWCreateTableAssignReqNmTokensVar
			TextDef implDb2LUWCreateTableAssignReqTextVar
			DateDef implDb2LUWCreateTableAssignReqDateVar
			TimeDef implDb2LUWCreateTableAssignReqTimeVar
			TimestampDef implDb2LUWCreateTableAssignReqTimestampVar
			TZDateDef implDb2LUWCreateTableAssignReqTZDateVar
			TZTimeDef implDb2LUWCreateTableAssignReqTZTimeVar
			TZTimestampDef implDb2LUWCreateTableAssignReqTZTimestampVar
			UuidDef implDb2LUWCreateTableAssignReqUuidVar
			UuidGen implDb2LUWCreateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqBlobVar">
				String $leadlower Name$AsClobData = new String( Base64.encodeBase64( $Name$ ) );
				stmtAuditCreatedByPKey.setString( argIdx++, $leadlower Name$AsClobData );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BLOB );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqBoolVar">
				stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqEnumVar">
				stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqInt16Var">
				stmtAuditCreatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqInt32Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqInt64Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqUInt16Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqUInt32Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqUInt64Var">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqFloatVar">
				stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqDoubleVar">
				stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqNumberVar">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqStringVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqNmTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqNmTokensVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqTextVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqTZDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqTZTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqTZTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignReqUuidVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereIndexCol">
					+				"$lower popto Table reference BaseClass ClassCode$.$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereAndIndexCol">
					+			"AND $lower popto Table reference BaseClass ClassCode$.$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedData"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedDataInh default implCreateTableOldStyleAuditCreatedDataBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedData$$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataBase"
		>$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgNonPKeyColumn"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgColumnName"> + ", "
					+		"$DbColumnName$"</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgFirstColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgFirstColumnName">
					+		"$DbColumnName$"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedNoCC">
			String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, CURRENT TIMESTAMP"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName )$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1"
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditCreatedByPKey == null ) {
				stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
			}
			argIdx = 1;
			stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWCreateTableAssignVar )$
			int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableClassCodeKey"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implDb2LUWCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implDb2LUWCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implDb2LUWCreateTableInsertColumnComma">
				+		"$lower DbColumnName$, "</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implDb2LUWCreateTableInsertColumn">
				+		"$lower DbColumnName$"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableInsertClassCode">
				+		"classcode, "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesClassCode">
				+		"?, "</GenRule>

	<GenRule GenDef="Object" Name="implCreateTableOldStyleAuditValIndexColName"
		> + ", "$implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditValFirstIndexColName">
					+		"$lower reference Table ClassCode$.$DbColumnName$" </GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditValFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindClassCode">
			stmtCreateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindConstClassCode">
			stmtCreateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesVarComma"
		>$implDb2LUWCreateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWCreateTableValuesGenericVar
			BoolDef implDb2LUWCreateTableValuesGenericVar
			EnumDef implDb2LUWCreateTableValuesGenericVar
			Int16Def implDb2LUWCreateTableValuesGenericVar
			Int32Def implDb2LUWCreateTableValuesGenericVar
			Int64Def implDb2LUWCreateTableValuesGenericVar
			UInt16Def implDb2LUWCreateTableValuesGenericVar
			UInt32Def implDb2LUWCreateTableValuesGenericVar
			UInt64Def implDb2LUWCreateTableValuesGenericVar
			Id16Gen implDb2LUWCreateTableValuesGenericVar
			Id32Gen implDb2LUWCreateTableValuesGenericVar
			Id64Gen implDb2LUWCreateTableValuesGenericVar
			FloatDef implDb2LUWCreateTableValuesGenericVar
			DoubleDef implDb2LUWCreateTableValuesGenericVar
			NumberDef implDb2LUWCreateTableValuesGenericVar
			StringDef implDb2LUWCreateTableValuesGenericVar
			TokenDef implDb2LUWCreateTableValuesGenericVar
			NmTokenDef implDb2LUWCreateTableValuesGenericVar
			NmTokensDef implDb2LUWCreateTableValuesGenericVar
			TextDef implDb2LUWCreateTableValuesGenericVar
			DateDef implDb2LUWCreateTableValuesDateVar
			TimeDef implDb2LUWCreateTableValuesTimeVar
			TimestampDef implDb2LUWCreateTableValuesTimestampVar
			TZDateDef implDb2LUWCreateTableValuesTZDateVar
			TZTimeDef implDb2LUWCreateTableValuesTZTimeVar
			TZTimestampDef implDb2LUWCreateTableValuesTZTimestampVar
			UuidDef implDb2LUWCreateTableValuesGenericVar
			UuidGen implDb2LUWCreateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesGenericVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesTextVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesFloatVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesDateVar">
				+		"TO_DATE( ?, 'YYYY-MM-DD' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesTimeVar">
				+		"TIME( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesTimestampVar">
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesTZDateVar">
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesTZTimeVar">
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableValuesTZTimestampVar">
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindVarComma"
		>$implDb2LUWCreateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindVar"
		>$switch IsNullable yes implDb2LUWCreateTableBindOptVar
			default implDb2LUWCreateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWCreateTableBindOptBlobVar
			BoolDef implDb2LUWCreateTableBindOptBoolVar
			EnumDef implDb2LUWCreateTableBindOptEnumVar
			Int16Def implDb2LUWCreateTableBindOptInt16Var
			Int32Def implDb2LUWCreateTableBindOptInt32Var
			Int64Def implDb2LUWCreateTableBindOptInt64Var
			UInt16Def implDb2LUWCreateTableBindOptUInt16Var
			UInt32Def implDb2LUWCreateTableBindOptUInt32Var
			UInt64Def implDb2LUWCreateTableBindOptUInt64Var
			Id16Gen implDb2LUWCreateTableBindOptInt16Var
			Id32Gen implDb2LUWCreateTableBindOptInt32Var
			Id64Gen implDb2LUWCreateTableBindOptInt64Var
			FloatDef implDb2LUWCreateTableBindOptFloatVar
			DoubleDef implDb2LUWCreateTableBindOptDoubleVar
			NumberDef implDb2LUWCreateTableBindOptNumberVar
			StringDef implDb2LUWCreateTableBindOptStringVar
			TokenDef implDb2LUWCreateTableBindOptTokenVar
			NmTokenDef implDb2LUWCreateTableBindOptNmTokenVar
			NmTokensDef implDb2LUWCreateTableBindOptNmTokensVar
			TextDef implDb2LUWCreateTableBindOptTextVar
			DateDef implDb2LUWCreateTableBindOptDateVar
			TimeDef implDb2LUWCreateTableBindOptTimeVar
			TimestampDef implDb2LUWCreateTableBindOptTimestampVar
			TZDateDef implDb2LUWCreateTableBindOptTZDateVar
			TZTimeDef implDb2LUWCreateTableBindOptTZTimeVar
			TZTimestampDef implDb2LUWCreateTableBindOptTZTimestampVar
			UuidDef implDb2LUWCreateTableBindOptUuidVar
			UuidGen implDb2LUWCreateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWCreateTableBindReqBlobVar
			BoolDef implDb2LUWCreateTableBindReqBoolVar
			EnumDef implDb2LUWCreateTableBindReqEnumVar
			Int16Def implDb2LUWCreateTableBindReqInt16Var
			Int32Def implDb2LUWCreateTableBindReqInt32Var
			Int64Def implDb2LUWCreateTableBindReqInt64Var
			UInt16Def implDb2LUWCreateTableBindReqUInt16Var
			UInt32Def implDb2LUWCreateTableBindReqUInt32Var
			UInt64Def implDb2LUWCreateTableBindReqUInt64Var
			Id16Gen implDb2LUWCreateTableBindReqInt16Var
			Id32Gen implDb2LUWCreateTableBindReqInt32Var
			Id64Gen implDb2LUWCreateTableBindReqInt64Var
			FloatDef implDb2LUWCreateTableBindReqFloatVar
			DoubleDef implDb2LUWCreateTableBindReqDoubleVar
			NumberDef implDb2LUWCreateTableBindReqNumberVar
			StringDef implDb2LUWCreateTableBindReqStringVar
			TokenDef implDb2LUWCreateTableBindReqTokenVar
			NmTokenDef implDb2LUWCreateTableBindReqNmTokenVar
			NmTokensDef implDb2LUWCreateTableBindReqNmTokensVar
			TextDef implDb2LUWCreateTableBindReqTextVar
			DateDef implDb2LUWCreateTableBindReqDateVar
			TimeDef implDb2LUWCreateTableBindReqTimeVar
			TimestampDef implDb2LUWCreateTableBindReqTimestampVar
			TZDateDef implDb2LUWCreateTableBindReqTZDateVar
			TZTimeDef implDb2LUWCreateTableBindReqTZTimeVar
			TZTimestampDef implDb2LUWCreateTableBindReqTZTimestampVar
			UuidDef implDb2LUWCreateTableBindReqUuidVar
			UuidGen implDb2LUWCreateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqBlobVar">
			stmtCreateByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqBoolVar">
			if( $Name$ ) {
				stmtCreateByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtCreateByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtCreateByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtCreateByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqEnumVar">
			stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqInt16Var">
			stmtCreateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqInt32Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqInt64Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqUInt16Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqUInt32Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqUInt64Var">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqFloatVar">
			stmtCreateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqDoubleVar">
			stmtCreateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqNumberVar">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqStringVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqNmTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqNmTokensVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqTextVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqTZDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqTZTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqTZTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindReqUuidVar">
			stmtCreateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWCreateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Table" Name="implDb2LUWCreateTableInitRevision"
>			int Revision = 1;
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Value" Name="implDb2LUWCreateTableCopyData"
>$switch ColumnInPrimaryIndex yes empty default implDb2LUWCreateTableCopyColumn$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Value" Name="implDb2LUWCreateTableCopyColumn"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCreateTableCopyClassCode"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implDb2LUWCreateTableRetBuffAttrComma"
>$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$ = $Name$,
		</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implDb2LUWCreateTableKeys"
		>$switch GenerateId yes implDb2LUWCreateTableKeysGenId default implDb2LUWCreateTableKeysCopyId$</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implDb2LUWCreateTableKeysGenId"
		>$reference Column implDb2LUWCreateTableKeysGenId$</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implDb2LUWCreateTableKeysCopyId"
		>$reference Column implDb2LUWCreateTableKeysCopyId$</GenRule>

	<GenRule GenDef="TableCol" Name="implDb2LUWCreateTableKeysGenId"
		>$switch HasDispenser no implDb2LUWCreateTableKeysGenSchemaId default implDb2LUWCreateTableKeysGenTableId$</GenRule>

	<GenRule GenDef="TableCol" Name="implDb2LUWCreateTableKeysGenSchemaId"
>			$implJavaAtomType$ $Name$ = schema.next$reference DataType Name$();
</GenRule>

	<GenRule GenDef="TableCol" Name="implDb2LUWCreateTableKeysGenTableId"
>			$implJavaAtomType$ $Name$ = ((I$reference DataType reference Dispenser SchemaName$$reference DataType reference Dispenser TableName$Table)schema.getTable$reference DataType reference Dispenser TableName$()).next$reference DataType Name$( Authorization$popto Table iterate OnlyOwnerRelations( first implDb2LUWCreateTableKeysGenTableIdPassArgs each empty )$ );
</GenRule>

	<GenRule GenDef="Relation" Name="implDb2LUWCreateTableKeysGenTableIdPassArgs"
		>$reference FromIndex iterate Columns( each implDb2LUWCreateTableKeysGenTableIdCommaArg )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWCreateTableKeysGenTableIdCommaArg">,
				Buff.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Atom" Name="implDb2LUWCreateTableKeys"
		></GenRule>

	<GenRule GenDef="TableCol" Name="implDb2LUWCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implDb2LUWCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWClassCodeSelectFragDbNameComma"
>				+		"$lower reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSelectDistinctClassCodeFrag"
>				+		"DISTINCT $lower reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWClassCodeJoinBaseTable"
>				+	"INNER JOIN $lower reference BaseClass DbSchemaName$.$reference BaseClass DbTableName$ $lower reference BaseClass ClassCode$ ON "
$reference PrimaryKeyIndex iterate Columns( first implDb2LUWClassCodeJoinBaseTableColumn each implDb2LUWClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWClassCodeJoinBaseTableColumn">
				+		"$lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>
	<GenRule GenDef="IndexCol" Name="implDb2LUWClassCodeAndJoinBaseTableColumn">
				+		"AND $lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLocalizeClassCodeKey"
>			String ClassCode = PKey.getClassCode();
</GenRule>

	<GenRule GenDef="TableCol" Name="implDb2LUWTableColumnFetchColumn"
		>$switch IsNullable yes implDb2LUWTableColumnFetchOptAttr default implDb2LUWTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implDb2LUWTableColumnFetchColumn"
		>$switch IsNullable yes implDb2LUWTableColumnFetchOptAttr default implDb2LUWTableColumnFetchReqAttr$</GenRule>

	<GenRule GenDef="TableCol" Name="implDb2LUWTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWTableColumnFetchBlobOptAttr
			EnumDef implDb2LUWTableColumnFetchEnumOptAttr
			UInt64Def implDb2LUWTableColumnFetchUInt64OptAttr
			NumberDef implDb2LUWTableColumnFetchNumberOptAttr
			DateDef implDb2LUWTableColumnFetchDateOptAttr
			TimeDef implDb2LUWTableColumnFetchTimeOptAttr
			TimestampDef implDb2LUWTableColumnFetchTimestampOptAttr
			TZDateDef implDb2LUWTableColumnFetchTZDateOptAttr
			TZTimeDef implDb2LUWTableColumnFetchTZTimeOptAttr
			TZTimestampDef implDb2LUWTableColumnFetchTZTimestampOptAttr
			default implDb2LUWTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implDb2LUWTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass BlobDef implDb2LUWTableColumnFetchBlobOptAttr default implDb2LUWTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchBlobOptAttr"
>				{
					byte[] colVal = stmtCreateByPKey.getBytes( idxcol ); 
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchUInt64OptAttr"
>				{
					String strval = resultSet.getString( idxcol );
					if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						BigDecimal bival = new BigDecimal( strval );
						buff.setOptional$Name$( bival );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchEnumOptAttr"
>				{
					short shortval = resultSet.getShort( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						I$reference DataType EffSchemaName$Schema.$reference DataType Name$ eval = $reference DataType EffSchemaName$Schema.ordinalTo$reference DataType Name$( shortval );
						buff.setOptional$Name$( eval );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchNumberOptAttr"
>				{
					BigDecimal value = resultSet.getBigDecimal( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( value );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$Db2LUWSchema.convertDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$Db2LUWSchema.convertTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$Db2LUWSchema.convertTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchTZDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$Db2LUWSchema.convertTZDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchTZTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$Db2LUWSchema.convertTZTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchTZTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$Db2LUWSchema.convertTZTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implDb2LUWAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implDb2LUWTableColumnFetchGenOptAttr"
		>$implDb2LUWTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implDb2LUWTableColumnFetchGenOptAttr"
		>$implDb2LUWTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implDb2LUWTableColumnFetchGenOptAttr"
		>$implDb2LUWTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implDb2LUWTableColumnFetchGenOptAttr"
		>$implDb2LUWTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implDb2LUWTableColumnFetchGenOptAttr"
		>$implDb2LUWTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchOptStringAttr"
>				{
					$implJavaReqAtomType$ colVal = $implDb2LUWAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implDb2LUWTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implDb2LUWAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchReqAttr"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWTableColumnFetchBlobReqAttr
			UInt64Def implDb2LUWTableColumnFetchUInt64ReqAttr
			EnumDef implDb2LUWTableColumnFetchEnumReqAttr
			NumberDef implDb2LUWTableColumnFetchNumberReqAttr
			default implDb2LUWTableColumnFetchGenReqAttr$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchBlobReqAttr"
>				{
					byte[] colVal = stmtCreateByPKey.getBytes( idxcol ); 
					buff.setRequired$Name$( colVal );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchUInt64ReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchEnumReqAttr"
>		{
			short shortval = resultSet.getShort( idxcol );
			I$reference DataType EffSchemaName$Schema.$reference DataType Name$ eval = $reference DataType EffSchemaName$Schema.ordinalTo$reference DataType Name$( shortval );
			buff.setRequired$Name$( eval );
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchEnumReqAttr"
>				{
					short shortval = resultSet.getShort( idxcol );
					I$reference DataType EffSchemaName$Schema.$reference DataType Name$ eval = $reference DataType EffSchemaName$Schema.ordinalTo$reference DataType Name$( shortval );
					buff.setRequired$Name$( eval );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnFetchNumberReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implDb2LUWTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implDb2LUWAtomFetchReqColumn$ );
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implDb2LUWTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implDb2LUWAtomFetchReqColumn$ );
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implDb2LUWAtomFetchReqColumn"
		>$reference DataType implDb2LUWAtomFetchReqColumn$</GenRule>

	<GenRule GenDef="BlobDef" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getBytes( idxcol )</GenRule>

	<GenRule GenDef="BoolDef" Name="implDb2LUWAtomFetchReqColumn"
		>( "Y".equals( resultSet.getString( idxcol ) ) ? true : false )</GenRule>

	<GenRule GenDef="EnumDef" Name="implDb2LUWAtomFetchReqColumn"
		>$EffSchemaName$Schema.ordinalTo$Name$( resultSet.getShort( idxcol ) )</GenRule>

	<GenRule GenDef="Int16Def" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getShort( idxcol )</GenRule>

	<GenRule GenDef="Int32Def" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="Int64Def" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt16Def" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="UInt32Def" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt64Def" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="FloatDef" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getFloat( idxcol )</GenRule>

	<GenRule GenDef="DoubleDef" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getDouble( idxcol )</GenRule>

	<GenRule GenDef="NumberDef" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="StringDef" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TokenDef" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokenDef" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokensDef" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TextDef" Name="implDb2LUWAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="DateDef" Name="implDb2LUWAtomFetchReqColumn"
		>$SchemaName$Db2LUWSchema.convertDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimeDef" Name="implDb2LUWAtomFetchReqColumn"
		>$SchemaName$Db2LUWSchema.convertTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimestampDef" Name="implDb2LUWAtomFetchReqColumn"
		>$SchemaName$Db2LUWSchema.convertTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZDateDef" Name="implDb2LUWAtomFetchReqColumn"
		>$SchemaName$Db2LUWSchema.convertTZDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimeDef" Name="implDb2LUWAtomFetchReqColumn"
		>$SchemaName$Db2LUWSchema.convertTZTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimestampDef" Name="implDb2LUWAtomFetchReqColumn"
		>$SchemaName$Db2LUWSchema.convertTZTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidDef" Name="implDb2LUWAtomFetchReqColumn"
		>$SchemaName$Db2LUWSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidGen" Name="implDb2LUWAtomFetchReqColumn"
		>$SchemaName$Db2LUWSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWLocalizeTableKeys"
		>$reference Column implDb2LUWCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="TableCol" Name="implDb2LUWLocalizeTableKeys"
		>$implDb2LUWCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="Atom" Name="implDb2LUWLocalizeTableKeys"
		>$implDb2LUWCreateTableKeysLocalizeId$</GenRule>

	<GenRule GenDef="TableCol" Name="implDb2LUWCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implDb2LUWCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWClassCodeSelectFragDbNameComma"
>				+		"$lower popto Table reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWSelectDistinctClassCodeFrag"
>				+		"DISTINCT $lower popto Table reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWInhTableColumnSelectFrags"
		>$switch HasSuperClassRelation yes implDb2LUWChainTableColumnSelectFrags default empty$$iterate Columns( each implDb2LUWTableDataColumnSelectFrag )$</GenRule>

	<GenRule GenDef="Value" Name="implDb2LUWTableDataColumnSelectFrag"
		>$switch ColumnInPrimaryIndex yes empty default implDb2LUWTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWChainTableColumnSelectFrags"
		>$reference SuperClassRelation reference ToTable implDb2LUWInhTableColumnSelectFrags$</GenRule>


	<GenRule GenDef="Object" Name="implBuffTableColumnFetchClassCode"
>				if( ! ( buff.getClassCode().equals( resultSet.getString( idxcol ) ) ) ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected ClassCode \"" + buff.getClassCode() +	"\", not \"" + resultSet.getString( idxcol ) + "\"" );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Value" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="IndexCol" Name="implBuffTableColumnFetchColumn"
		>$reference Column implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			EnumDef implBuffTableColumnFetchEnumOptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			EnumDef implBuffTableColumnFetchEnumOptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchBlobOptAttr"
>		{
			byte[] colVal = resultSet.getBytes( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchUInt64OptAttr"
>		{
			String strval = resultSet.getString( idxcol );
			if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
				buff.setOptional$Name$( null );
			}
			else {
				BigDecimal bival = new BigDecimal( strval );
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchEnumOptAttr"
>		{
			short shortval = resultSet.getShort( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				I$reference DataType EffSchemaName$Schema.$reference DataType Name$ eval = $reference DataType EffSchemaName$Schema.ordinalTo$reference DataType Name$( shortval );
				buff.setOptional$Name$( eval );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchNumberOptAttr"
>		{
			BigDecimal bival = resultSet.getBigDecimal( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implDb2LUWAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchOptStringAttr"
>		{
			$implJavaReqAtomType$ colVal = $implDb2LUWAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implDb2LUWAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implDb2LUWAtomFetchReqColumn$ );
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implDb2LUWAtomFetchReqColumn$ );
		idxcol++;
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildFromHierarchy"
		>$switch HasSuperClassRelation yes implReadTableBuffBuildInhFromHierarchy default implReadTableBuffBuildBaseFromHierarchy$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildInhFromHierarchy"
>$reference SuperClassRelation reference ToTable implReadTableBuffBuildFromHierarchy$
				+	"INNER JOIN " + schema.getLowerDbSchemaName() + ".$DbTableName$ $lower ClassCode$ ON "$reference PrimaryKeyIndex iterate Columns( first implDb2LUWClassCodeJoinBaseTableColumn each implDb2LUWClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildBaseFromHierarchy">" + schema.getLowerDbSchemaName() + ".$DbTableName$ AS $lower ClassCode$ "</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildFetchColumns"
		>$switch HasSuperClassRelation yes implBuffTableBuildInhFetchColumns default implBuffTableBuildBaseFetchColumns$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildInhFetchColumns"
		>$reference SuperClassRelation reference ToTable implBuffTableBuildFetchColumns$$iterate Columns( each implBuffTableColumnFetchDataColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildBaseFetchColumns"
		>$iterate Columns( each implBuffTableColumnFetchColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableColumnFetchAuditColumns">
		{$implBuffTableColumnFetchAuditCreateColumns$
			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedByUserId( null );
			}
			else {
				buff.setUpdatedByUserId( UUID.fromString( colString ) );
			}
			idxcol ++;

			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedAt( null );
			}
			else {
				buff.setUpdatedAt( $SchemaName$Db2LUWSchema.convertTimestampString( colString ) );
			}
			idxcol++;
		}
</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableColumnFetchAuditCreateColumns">
			String colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedByUserId( null );
			}
			else {
				buff.setCreatedByUserId( UUID.fromString( colString ) );
			}
			idxcol ++;

			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedAt( null );
			}
			else {
				buff.setCreatedAt( $SchemaName$Db2LUWSchema.convertTimestampString( colString ) );
			}
			idxcol++;</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableDistinctClassCode">
	protected static String S_sqlSelect$TableName$DistinctClassCode = null;

	public String getSqlSelect$TableName$DistinctClassCode() {
		if( S_sqlSelect$TableName$DistinctClassCode == null ) {
			S_sqlSelect$TableName$DistinctClassCode =
					"SELECT "
$implDb2LUWSelectDistinctClassCodeFrag$<!--
-->				+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$DistinctClassCode );
	}
</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableBuff">
	protected static String S_sqlSelect$TableName$Buff = null;

	public String getSqlSelect$TableName$Buff() {
		if( S_sqlSelect$TableName$Buff == null ) {
			S_sqlSelect$TableName$Buff =
					"SELECT "
$switch HasClassCode yes implDb2LUWClassCodeSelectFragDbNameComma default empty$$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWTableColumnSelectFragDbNameComma )$$switch HasSuperClassRelation no implDb2LUWSelectFragOptAuditColumns default empty$$implDb2LUWInhTableColumnSelectFrags$				+		"$lower reference BaseClass ClassCode$.Revision "
				+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$Buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSelectFragOptAuditColumns"
		>$switch HasSuperClassRelation yes implDb2LUWSelectFragAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSelectFragAuditColumns">
				+		"$lower ClassCode$.createdby as createdby, "
				+		"TO_CHAR( $lower ClassCode$.createdat, 'YYYY-MM-DD-HH24.MI.SS' ) AS createdat, "
				+		"$lower ClassCode$.updatedby as updatedby, "
				+		"TO_CHAR( $lower ClassCode$.updatedat, 'YYYY-MM-DD-HH24.MI.SS' ) AS updatedat, "</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetWalkClassCode">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetMapViaClassCode">
		String classCode = resultSet.getString( idxcol );
		idxcol++;
		$DefSchemaName$$TableName$Buff buff;
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Unrecognized class code \"" + classCode + "\"" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetDirectBuff">
		$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetToBuff">
	protected $DefSchemaName$$TableName$Buff unpack$TableName$ResultSetToBuff( ResultSet resultSet )
	throws SQLException
	{
		final String S_ProcName = "unpack$TableName$ResultSetToBuff";
		int idxcol = 1;$switch HasClassCode yes implUnpackResultSetMapViaClassCode default implUnpackResultSetDirectBuff$$switch HasAuditColumns yes implBuffTableColumnFetchAuditColumns default empty$$implBuffTableBuildFetchColumns$
		buff.setRequiredRevision( resultSet.getInt( idxcol ) );
		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeReadBuff"
>		buff = readBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeLockBuff"
>		buff = lockBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedAssembleSubClasses default implReadTableDerivedInvokeReadBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {$implReadTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = readBuff( Authorization, PKey );
		}$implReadTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClassesTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			final String sql = "CALL $sp_read_dbtablename_cc$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implDb2LUWIndexColumnArgValueVar each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadDerivedClassCode == null ) {
				stmtReadDerivedClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWReadTableDerivedClassCodeAssignVar )$
			resultSet = stmtReadDerivedClassCode.executeQuery();
			if( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implDb2LUWReadTableDerivedClassCodeAssignOptVar
			default implDb2LUWReadTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWReadTableDerivedClassCodeAssignOptBlobVar
			BoolDef implDb2LUWReadTableDerivedClassCodeAssignOptBoolVar
			EnumDef implDb2LUWReadTableDerivedClassCodeAssignOptEnumVar
			Int16Def implDb2LUWReadTableDerivedClassCodeAssignOptInt16Var
			Int32Def implDb2LUWReadTableDerivedClassCodeAssignOptInt32Var
			Int64Def implDb2LUWReadTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implDb2LUWReadTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implDb2LUWReadTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implDb2LUWReadTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implDb2LUWReadTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implDb2LUWReadTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implDb2LUWReadTableDerivedClassCodeAssignOptInt64Var
			FloatDef implDb2LUWReadTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implDb2LUWReadTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implDb2LUWReadTableDerivedClassCodeAssignOptNumberVar
			StringDef implDb2LUWReadTableDerivedClassCodeAssignOptStringVar
			TokenDef implDb2LUWReadTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implDb2LUWReadTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implDb2LUWReadTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implDb2LUWReadTableDerivedClassCodeAssignOptTextVar
			DateDef implDb2LUWReadTableDerivedClassCodeAssignOptDateVar
			TimeDef implDb2LUWReadTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implDb2LUWReadTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implDb2LUWReadTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implDb2LUWReadTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implDb2LUWReadTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implDb2LUWReadTableDerivedClassCodeAssignOptUuidVar
			UuidGen implDb2LUWReadTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWReadTableDerivedClassCodeAssignReqBlobVar
			BoolDef implDb2LUWReadTableDerivedClassCodeAssignReqBoolVar
			EnumDef implDb2LUWReadTableDerivedClassCodeAssignReqEnumVar
			Int16Def implDb2LUWReadTableDerivedClassCodeAssignReqInt16Var
			Int32Def implDb2LUWReadTableDerivedClassCodeAssignReqInt32Var
			Int64Def implDb2LUWReadTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implDb2LUWReadTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implDb2LUWReadTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implDb2LUWReadTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implDb2LUWReadTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implDb2LUWReadTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implDb2LUWReadTableDerivedClassCodeAssignReqInt64Var
			FloatDef implDb2LUWReadTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implDb2LUWReadTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implDb2LUWReadTableDerivedClassCodeAssignReqNumberVar
			StringDef implDb2LUWReadTableDerivedClassCodeAssignReqStringVar
			TokenDef implDb2LUWReadTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implDb2LUWReadTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implDb2LUWReadTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implDb2LUWReadTableDerivedClassCodeAssignReqTextVar
			DateDef implDb2LUWReadTableDerivedClassCodeAssignReqDateVar
			TimeDef implDb2LUWReadTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implDb2LUWReadTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implDb2LUWReadTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implDb2LUWReadTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implDb2LUWReadTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implDb2LUWReadTableDerivedClassCodeAssignReqUuidVar
			UuidGen implDb2LUWReadTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqBlobVar">
				stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqBoolVar">
			if( $Name$ ) {
				stmtReadDerivedClassCode.setString( argIdx++, "Y" );
			}
			else {
				stmtReadDerivedClassCode.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadDerivedClassCode.setString( argIdx++, "Y" );
				}
				else {
					stmtReadDerivedClassCode.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqEnumVar">
			stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqInt16Var">
			stmtReadDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqInt32Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqInt64Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqUInt16Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqUInt32Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqUInt64Var">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqFloatVar">
			stmtReadDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqDoubleVar">
			stmtReadDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqNumberVar">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqStringVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqNmTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqNmTokensVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqTextVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqTZDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqTZTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignReqUuidVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$reference BaseClass reference PrimaryKeyIndex Suffix$( Authorization$poptop Table reference PrimaryKeyIndex iterate Columns( each implReadTableDerivedInvokeSubClassPassPKeyArg )$ );
		}$implReadTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedInvokeSubClassPassPKeyArg">,
				PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$reference Column Name$()</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByPKey">
	public $DefSchemaName$$poptop Table TableName$Buff readDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readDerived";$implCheckOpenTransaction$
		$DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implReadTableDerivedInvokeReadBuff default implReadTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedByPKey">
	public $DefSchemaName$$poptop Table TableName$Buff lockDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockDerived";$implCheckOpenTransaction$
		$DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implLockTableDerivedInvokeLockBuff default implLockTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implLockTableDerivedAssembleSubClasses default implLockTableDerivedInvokeLockBuff$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {$implLockTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClassesTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			final String sql = "CALL $sp_read_dbtablename_cc$( ?, ?, ?, ?, ?"$reference PrimaryKeyIndex iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtLockDerivedClassCode == null ) {
				stmtLockDerivedClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference PrimaryKeyIndex iterate Columns( each implDb2LUWLockTableDerivedClassCodeAssignVar )$
			resultSet = stmtLockDerivedClassCode.executeQuery();
			if( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implDb2LUWLockTableDerivedClassCodeAssignOptVar
			default implDb2LUWLockTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWLockTableDerivedClassCodeAssignOptBlobVar
			BoolDef implDb2LUWLockTableDerivedClassCodeAssignOptBoolVar
			EnumDef implDb2LUWLockTableDerivedClassCodeAssignOptEnumVar
			Int16Def implDb2LUWLockTableDerivedClassCodeAssignOptInt16Var
			Int32Def implDb2LUWLockTableDerivedClassCodeAssignOptInt32Var
			Int64Def implDb2LUWLockTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implDb2LUWLockTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implDb2LUWLockTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implDb2LUWLockTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implDb2LUWLockTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implDb2LUWLockTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implDb2LUWLockTableDerivedClassCodeAssignOptInt64Var
			FloatDef implDb2LUWLockTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implDb2LUWLockTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implDb2LUWLockTableDerivedClassCodeAssignOptNumberVar
			StringDef implDb2LUWLockTableDerivedClassCodeAssignOptStringVar
			TokenDef implDb2LUWLockTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implDb2LUWLockTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implDb2LUWLockTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implDb2LUWLockTableDerivedClassCodeAssignOptTextVar
			DateDef implDb2LUWLockTableDerivedClassCodeAssignOptDateVar
			TimeDef implDb2LUWLockTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implDb2LUWLockTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implDb2LUWLockTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implDb2LUWLockTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implDb2LUWLockTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implDb2LUWLockTableDerivedClassCodeAssignOptUuidVar
			UuidGen implDb2LUWLockTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWLockTableDerivedClassCodeAssignReqBlobVar
			BoolDef implDb2LUWLockTableDerivedClassCodeAssignReqBoolVar
			EnumDef implDb2LUWLockTableDerivedClassCodeAssignReqEnumVar
			Int16Def implDb2LUWLockTableDerivedClassCodeAssignReqInt16Var
			Int32Def implDb2LUWLockTableDerivedClassCodeAssignReqInt32Var
			Int64Def implDb2LUWLockTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implDb2LUWLockTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implDb2LUWLockTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implDb2LUWLockTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implDb2LUWLockTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implDb2LUWLockTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implDb2LUWLockTableDerivedClassCodeAssignReqInt64Var
			FloatDef implDb2LUWLockTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implDb2LUWLockTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implDb2LUWLockTableDerivedClassCodeAssignReqNumberVar
			StringDef implDb2LUWLockTableDerivedClassCodeAssignReqStringVar
			TokenDef implDb2LUWLockTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implDb2LUWLockTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implDb2LUWLockTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implDb2LUWLockTableDerivedClassCodeAssignReqTextVar
			DateDef implDb2LUWLockTableDerivedClassCodeAssignReqDateVar
			TimeDef implDb2LUWLockTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implDb2LUWLockTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implDb2LUWLockTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implDb2LUWLockTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implDb2LUWLockTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implDb2LUWLockTableDerivedClassCodeAssignReqUuidVar
			UuidGen implDb2LUWLockTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqBlobVar">
				stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqBoolVar">
			if( $Name$ ) {
				stmtLockDerivedClassCode.setString( argIdx++, "Y" );
			}
			else {
				stmtLockDerivedClassCode.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtLockDerivedClassCode.setString( argIdx++, "Y" );
				}
				else {
					stmtLockDerivedClassCode.setString( argIdx++, "N" );
				}
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqEnumVar">
			stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqInt16Var">
			stmtLockDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqInt32Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqInt64Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqUInt16Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqUInt32Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqUInt64Var">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqFloatVar">
			stmtLockDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqDoubleVar">
			stmtLockDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqNumberVar">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqStringVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqNmTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqNmTokensVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqTextVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqTZDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqTZTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignReqUuidVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implLockTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeReadAllBuff"
>		buffArray = readAllBuff( Authorization );
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadAllTableDerivedAssembleSubClasses default implReadAllTableDerivedInvokeReadAllBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClasses"
>		String classCode;
		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		ResultSet resultSet = null;
		try {$implReadAllTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		List&lt;$DefSchemaName$$TableName$Buff&gt; resultList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
		for( int classCodeIdx = 0; classCodeIdx &lt; classCodeList.size(); classCodeIdx ++ ) {
			$DefSchemaName$$TableName$Buff[] subList;
			classCode = classCodeList.get( classCodeIdx );
			if( classCode.equals( "$ClassCode$" ) ) {
				subList = readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
			for( int idxSubList = 0; idxSubList &lt; subList.length; idxSubList ++ ) {
				resultList.add( subList[ idxSubList ] );
			}
		}
		int idx = 0;
		buffArray = new $DefSchemaName$$TableName$Buff[ resultList.size() ];
		Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			buffArray[idx++] = iter.next();
		}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClassesTryBody">
			Connection cnx = schema.getCnx();
			final String sql = "CALL $sp_read_dbtablename_cc_all$( ?, ?, ?, ?, ? )";
			if( stmtReadAllClassCode == null ) {
				stmtReadAllClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmtReadAllClassCode.executeQuery();
			while( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				classCodeList.add( classCode );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadAllTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				subList = schema.getTable$TableName$().readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerived">
	public $DefSchemaName$$TableName$Buff[] readAllDerived( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllDerived";
		$DefSchemaName$$TableName$Buff[] buffArray;$implCheckOpenTransaction$
$switch HasClassCode no implReadAllTableDerivedInvokeReadAllBuff default implReadAllTableDerivedCheckForSubClasses$<!--
-->		return( buffArray );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByIndexes"
		>$switch HasSuperClassRelation yes implReadTableDerivedByInhIndexes default implReadTableDerivedByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableDerivedByIndexes$$iterate Index( each implReadTableDerivedByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByBaseIndexes"
		>$iterate Index( each implReadTableDerivedByIndex )$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableDerivedByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByIndex"
		>$switch IsUnique
			yes implReadTableDerivedByUniqueIndex
			default implReadTableDerivedByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByUniqueIndexAssembleSubClasses default implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex"
>		buff = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableDerivedByUniqueIndexAssembleReqSubClasses$
			if( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$poptop Table ClassCode$" ) ) {
			buff = readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexTopWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleOptSubClasses">
			String sql =
					getSqlSelect$poptop Table TableName$DistinctClassCode()
				+	"WHERE "
$iterate Columns( first implDb2LUWIndexColumnWhereFragBindVar each implDb2LUWIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleReqSubClasses">
			final String sql = "CALL $sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadClassCodeBy$Suffix$ == null ) {
				stmtReadClassCodeBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implDb2LUWReadDerivedClassCodeBySuffixBindVar )$
			resultSet = stmtReadClassCodeBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindVar"
		>$switch IsNullable yes implDb2LUWReadDerivedClassCodeBySuffixBindOptVar
			default implDb2LUWReadDerivedClassCodeBySuffixBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWReadDerivedClassCodeBySuffixBindOptBlobVar
			BoolDef implDb2LUWReadDerivedClassCodeBySuffixBindOptBoolVar
			EnumDef implDb2LUWReadDerivedClassCodeBySuffixBindOptEnumVar
			Int16Def implDb2LUWReadDerivedClassCodeBySuffixBindOptInt16Var
			Int32Def implDb2LUWReadDerivedClassCodeBySuffixBindOptInt32Var
			Int64Def implDb2LUWReadDerivedClassCodeBySuffixBindOptInt64Var
			UInt16Def implDb2LUWReadDerivedClassCodeBySuffixBindOptUInt16Var
			UInt32Def implDb2LUWReadDerivedClassCodeBySuffixBindOptUInt32Var
			UInt64Def implDb2LUWReadDerivedClassCodeBySuffixBindOptUInt64Var
			Id16Gen implDb2LUWReadDerivedClassCodeBySuffixBindOptInt16Var
			Id32Gen implDb2LUWReadDerivedClassCodeBySuffixBindOptInt32Var
			Id64Gen implDb2LUWReadDerivedClassCodeBySuffixBindOptInt64Var
			FloatDef implDb2LUWReadDerivedClassCodeBySuffixBindOptFloatVar
			DoubleDef implDb2LUWReadDerivedClassCodeBySuffixBindOptDoubleVar
			NumberDef implDb2LUWReadDerivedClassCodeBySuffixBindOptNumberVar
			StringDef implDb2LUWReadDerivedClassCodeBySuffixBindOptStringVar
			TokenDef implDb2LUWReadDerivedClassCodeBySuffixBindOptTokenVar
			NmTokenDef implDb2LUWReadDerivedClassCodeBySuffixBindOptNmTokenVar
			NmTokensDef implDb2LUWReadDerivedClassCodeBySuffixBindOptNmTokensVar
			TextDef implDb2LUWReadDerivedClassCodeBySuffixBindOptTextVar
			DateDef implDb2LUWReadDerivedClassCodeBySuffixBindOptDateVar
			TimeDef implDb2LUWReadDerivedClassCodeBySuffixBindOptTimeVar
			TimestampDef implDb2LUWReadDerivedClassCodeBySuffixBindOptTimestampVar
			TZDateDef implDb2LUWReadDerivedClassCodeBySuffixBindOptTZDateVar
			TZTimeDef implDb2LUWReadDerivedClassCodeBySuffixBindOptTZTimeVar
			TZTimestampDef implDb2LUWReadDerivedClassCodeBySuffixBindOptTZTimestampVar
			UuidDef implDb2LUWReadDerivedClassCodeBySuffixBindOptUuidVar
			UuidGen implDb2LUWReadDerivedClassCodeBySuffixBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWReadDerivedClassCodeBySuffixBindReqBlobVar
			BoolDef implDb2LUWReadDerivedClassCodeBySuffixBindReqBoolVar
			EnumDef implDb2LUWReadDerivedClassCodeBySuffixBindReqEnumVar
			Int16Def implDb2LUWReadDerivedClassCodeBySuffixBindReqInt16Var
			Int32Def implDb2LUWReadDerivedClassCodeBySuffixBindReqInt32Var
			Int64Def implDb2LUWReadDerivedClassCodeBySuffixBindReqInt64Var
			UInt16Def implDb2LUWReadDerivedClassCodeBySuffixBindReqUInt16Var
			UInt32Def implDb2LUWReadDerivedClassCodeBySuffixBindReqUInt32Var
			UInt64Def implDb2LUWReadDerivedClassCodeBySuffixBindReqUInt64Var
			Id16Gen implDb2LUWReadDerivedClassCodeBySuffixBindReqInt16Var
			Id32Gen implDb2LUWReadDerivedClassCodeBySuffixBindReqInt32Var
			Id64Gen implDb2LUWReadDerivedClassCodeBySuffixBindReqInt64Var
			FloatDef implDb2LUWReadDerivedClassCodeBySuffixBindReqFloatVar
			DoubleDef implDb2LUWReadDerivedClassCodeBySuffixBindReqDoubleVar
			NumberDef implDb2LUWReadDerivedClassCodeBySuffixBindReqNumberVar
			StringDef implDb2LUWReadDerivedClassCodeBySuffixBindReqStringVar
			TokenDef implDb2LUWReadDerivedClassCodeBySuffixBindReqTokenVar
			NmTokenDef implDb2LUWReadDerivedClassCodeBySuffixBindReqNmTokenVar
			NmTokensDef implDb2LUWReadDerivedClassCodeBySuffixBindReqNmTokensVar
			TextDef implDb2LUWReadDerivedClassCodeBySuffixBindReqTextVar
			DateDef implDb2LUWReadDerivedClassCodeBySuffixBindReqDateVar
			TimeDef implDb2LUWReadDerivedClassCodeBySuffixBindReqTimeVar
			TimestampDef implDb2LUWReadDerivedClassCodeBySuffixBindReqTimestampVar
			TZDateDef implDb2LUWReadDerivedClassCodeBySuffixBindReqTZDateVar
			TZTimeDef implDb2LUWReadDerivedClassCodeBySuffixBindReqTZTimeVar
			TZTimestampDef implDb2LUWReadDerivedClassCodeBySuffixBindReqTZTimestampVar
			UuidDef implDb2LUWReadDerivedClassCodeBySuffixBindReqUuidVar
			UuidGen implDb2LUWReadDerivedClassCodeBySuffixBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqBlobVar">
				stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptBlobVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqBoolVar">
			if( $Name$ ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadClassCodeBy$Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtReadClassCodeBy$Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqEnumVar">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptEnumVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqInt16Var">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqInt32Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqInt64Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqUInt16Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqUInt32Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqUInt64Var">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqFloatVar">
			stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptFloatVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqDoubleVar">
			stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqNumberVar">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptNumberVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqStringVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptStringVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqNmTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqNmTokensVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqTextVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptTextVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqTZDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqTZTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqTZTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindReqUuidVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadDerivedClassCodeBySuffixBindOptUuidVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedPassArg">,
				$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasClassCode"
		>$poptop Table HasClassCode$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndex">
	public $DefSchemaName$$poptop Table TableName$Buff readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "$SchemaName$Db2LUW$poptop Table TableName$Table.readDerivedBy$Suffix$() ";
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByUniqueIndexInvokeReadBuff default implReadTableDerivedByUniqueIndexCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuff"
>		buff = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuff"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByDuplicateIndexAssembleSubClasses default implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleSubClasses"
>		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		String classCode;
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableDerivedByDuplicateIndexAssembleReqSubClasses$
			while( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				classCodeList.add( classCode );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}$implReadTableDerivedByDuplicateIndexAssembleResultList$
		int idx = 0;
		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ resultList.size() ];
		Iterator&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			retBuff[idx++] = iter.next();
		}
		return( retBuff );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleResultList">
		List&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt; resultList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt;();
		ListIterator&lt;String&gt; classCodeIter = classCodeList.listIterator();
		while( classCodeIter.hasNext() ) {
			classCode = classCodeIter.next();
			if( classCode.equals( "$poptop Table ClassCode$" ) ) {
				$poptop Table DefSchemaName$$poptop Table Name$Buff[] subList
					= readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexTopWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
		}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleOptSubClasses">
			String sql =
					getSqlSelect$poptop Table TableName$DistinctClassCode()
				+	"WHERE "
$popto Index iterate Columns( first implDb2LUWIndexColumnWhereFragBindVar each implDb2LUWIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleReqSubClasses">
			final String sql = "CALL $sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadClassCodeBy$Suffix$ == null ) {
				stmtReadClassCodeBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implDb2LUWReadDerivedClassCodeBySuffixBindVar )$
			resultSet = stmtReadClassCodeBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedSubListPassArg">,
						$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				$DefSchemaName$$TableName$Buff[] subList
					= schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readDerivedBy$Suffix$";$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByDuplicateIndexInvokeReadBuff default implReadTableDerivedByDuplicateIndexCheckForSubClasses$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff readBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implReadTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWLocalizeTableKeys empty empty )$<!--
-->			final String sql = "CALL $sp_read_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadBuffByPKey == null ) {
				stmtReadBuffByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWReadByPKeyTableAssignVar )$
			resultSet = stmtReadBuffByPKey.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignVar"
		>$switch IsNullable yes implDb2LUWReadByPKeyTableAssignOptVar
			default implDb2LUWReadByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWReadByPKeyTableAssignOptBlobVar
			BoolDef implDb2LUWReadByPKeyTableAssignOptBoolVar
			EnumDef implDb2LUWReadByPKeyTableAssignOptEnumVar
			Int16Def implDb2LUWReadByPKeyTableAssignOptInt16Var
			Int32Def implDb2LUWReadByPKeyTableAssignOptInt32Var
			Int64Def implDb2LUWReadByPKeyTableAssignOptInt64Var
			UInt16Def implDb2LUWReadByPKeyTableAssignOptUInt16Var
			UInt32Def implDb2LUWReadByPKeyTableAssignOptUInt32Var
			UInt64Def implDb2LUWReadByPKeyTableAssignOptUInt64Var
			Id16Gen implDb2LUWReadByPKeyTableAssignOptInt16Var
			Id32Gen implDb2LUWReadByPKeyTableAssignOptInt32Var
			Id64Gen implDb2LUWReadByPKeyTableAssignOptInt64Var
			FloatDef implDb2LUWReadByPKeyTableAssignOptFloatVar
			DoubleDef implDb2LUWReadByPKeyTableAssignOptDoubleVar
			NumberDef implDb2LUWReadByPKeyTableAssignOptNumberVar
			StringDef implDb2LUWReadByPKeyTableAssignOptStringVar
			TokenDef implDb2LUWReadByPKeyTableAssignOptTokenVar
			NmTokenDef implDb2LUWReadByPKeyTableAssignOptNmTokenVar
			NmTokensDef implDb2LUWReadByPKeyTableAssignOptNmTokensVar
			TextDef implDb2LUWReadByPKeyTableAssignOptTextVar
			DateDef implDb2LUWReadByPKeyTableAssignOptDateVar
			TimeDef implDb2LUWReadByPKeyTableAssignOptTimeVar
			TimestampDef implDb2LUWReadByPKeyTableAssignOptTimestampVar
			TZDateDef implDb2LUWReadByPKeyTableAssignOptTZDateVar
			TZTimeDef implDb2LUWReadByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implDb2LUWReadByPKeyTableAssignOptTZTimestampVar
			UuidDef implDb2LUWReadByPKeyTableAssignOptUuidVar
			UuidGen implDb2LUWReadByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWReadByPKeyTableAssignReqBlobVar
			BoolDef implDb2LUWReadByPKeyTableAssignReqBoolVar
			EnumDef implDb2LUWReadByPKeyTableAssignReqEnumVar
			Int16Def implDb2LUWReadByPKeyTableAssignReqInt16Var
			Int32Def implDb2LUWReadByPKeyTableAssignReqInt32Var
			Int64Def implDb2LUWReadByPKeyTableAssignReqInt64Var
			UInt16Def implDb2LUWReadByPKeyTableAssignReqUInt16Var
			UInt32Def implDb2LUWReadByPKeyTableAssignReqUInt32Var
			UInt64Def implDb2LUWReadByPKeyTableAssignReqUInt64Var
			Id16Gen implDb2LUWReadByPKeyTableAssignReqInt16Var
			Id32Gen implDb2LUWReadByPKeyTableAssignReqInt32Var
			Id64Gen implDb2LUWReadByPKeyTableAssignReqInt64Var
			FloatDef implDb2LUWReadByPKeyTableAssignReqFloatVar
			DoubleDef implDb2LUWReadByPKeyTableAssignReqDoubleVar
			NumberDef implDb2LUWReadByPKeyTableAssignReqNumberVar
			StringDef implDb2LUWReadByPKeyTableAssignReqStringVar
			TokenDef implDb2LUWReadByPKeyTableAssignReqTokenVar
			NmTokenDef implDb2LUWReadByPKeyTableAssignReqNmTokenVar
			NmTokensDef implDb2LUWReadByPKeyTableAssignReqNmTokensVar
			TextDef implDb2LUWReadByPKeyTableAssignReqTextVar
			DateDef implDb2LUWReadByPKeyTableAssignReqDateVar
			TimeDef implDb2LUWReadByPKeyTableAssignReqTimeVar
			TimestampDef implDb2LUWReadByPKeyTableAssignReqTimestampVar
			TZDateDef implDb2LUWReadByPKeyTableAssignReqTZDateVar
			TZTimeDef implDb2LUWReadByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implDb2LUWReadByPKeyTableAssignReqTZTimestampVar
			UuidDef implDb2LUWReadByPKeyTableAssignReqUuidVar
			UuidGen implDb2LUWReadByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqBlobVar">
			stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtReadBuffByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtReadBuffByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadBuffByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtReadBuffByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqEnumVar">
			stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqInt16Var">
			stmtReadBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqInt32Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqInt64Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqUInt16Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqUInt32Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqUInt64Var">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqFloatVar">
			stmtReadBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqDoubleVar">
			stmtReadBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqNumberVar">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqStringVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqNmTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqNmTokensVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqTextVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqTZDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqTZTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqTZTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignReqUuidVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadByPKeyTableAssignClassCode">
			stmtReadBuffByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff lockBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implLockTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWLocalizeTableKeys empty empty )$<!--
-->			final String sql = "CALL $sp_lock_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtLockBuffByPKey == null ) {
				stmtLockBuffByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWLockByPKeyTableAssignVar )$
			resultSet = stmtLockBuffByPKey.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignVar"
		>$switch IsNullable yes implDb2LUWLockByPKeyTableAssignOptVar
			default implDb2LUWLockByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWLockByPKeyTableAssignOptBlobVar
			BoolDef implDb2LUWLockByPKeyTableAssignOptBoolVar
			EnumDef implDb2LUWLockByPKeyTableAssignOptEnumVar
			Int16Def implDb2LUWLockByPKeyTableAssignOptInt16Var
			Int32Def implDb2LUWLockByPKeyTableAssignOptInt32Var
			Int64Def implDb2LUWLockByPKeyTableAssignOptInt64Var
			UInt16Def implDb2LUWLockByPKeyTableAssignOptUInt16Var
			UInt32Def implDb2LUWLockByPKeyTableAssignOptUInt32Var
			UInt64Def implDb2LUWLockByPKeyTableAssignOptUInt64Var
			Id16Gen implDb2LUWLockByPKeyTableAssignOptInt16Var
			Id32Gen implDb2LUWLockByPKeyTableAssignOptInt32Var
			Id64Gen implDb2LUWLockByPKeyTableAssignOptInt64Var
			FloatDef implDb2LUWLockByPKeyTableAssignOptFloatVar
			DoubleDef implDb2LUWLockByPKeyTableAssignOptDoubleVar
			NumberDef implDb2LUWLockByPKeyTableAssignOptNumberVar
			StringDef implDb2LUWLockByPKeyTableAssignOptStringVar
			TokenDef implDb2LUWLockByPKeyTableAssignOptTokenVar
			NmTokenDef implDb2LUWLockByPKeyTableAssignOptNmTokenVar
			NmTokensDef implDb2LUWLockByPKeyTableAssignOptNmTokensVar
			TextDef implDb2LUWLockByPKeyTableAssignOptTextVar
			DateDef implDb2LUWLockByPKeyTableAssignOptDateVar
			TimeDef implDb2LUWLockByPKeyTableAssignOptTimeVar
			TimestampDef implDb2LUWLockByPKeyTableAssignOptTimestampVar
			TZDateDef implDb2LUWLockByPKeyTableAssignOptTZDateVar
			TZTimeDef implDb2LUWLockByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implDb2LUWLockByPKeyTableAssignOptTZTimestampVar
			UuidDef implDb2LUWLockByPKeyTableAssignOptUuidVar
			UuidGen implDb2LUWLockByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWLockByPKeyTableAssignReqBlobVar
			BoolDef implDb2LUWLockByPKeyTableAssignReqBoolVar
			EnumDef implDb2LUWLockByPKeyTableAssignReqEnumVar
			Int16Def implDb2LUWLockByPKeyTableAssignReqInt16Var
			Int32Def implDb2LUWLockByPKeyTableAssignReqInt32Var
			Int64Def implDb2LUWLockByPKeyTableAssignReqInt64Var
			UInt16Def implDb2LUWLockByPKeyTableAssignReqUInt16Var
			UInt32Def implDb2LUWLockByPKeyTableAssignReqUInt32Var
			UInt64Def implDb2LUWLockByPKeyTableAssignReqUInt64Var
			Id16Gen implDb2LUWLockByPKeyTableAssignReqInt16Var
			Id32Gen implDb2LUWLockByPKeyTableAssignReqInt32Var
			Id64Gen implDb2LUWLockByPKeyTableAssignReqInt64Var
			FloatDef implDb2LUWLockByPKeyTableAssignReqFloatVar
			DoubleDef implDb2LUWLockByPKeyTableAssignReqDoubleVar
			NumberDef implDb2LUWLockByPKeyTableAssignReqNumberVar
			StringDef implDb2LUWLockByPKeyTableAssignReqStringVar
			TokenDef implDb2LUWLockByPKeyTableAssignReqTokenVar
			NmTokenDef implDb2LUWLockByPKeyTableAssignReqNmTokenVar
			NmTokensDef implDb2LUWLockByPKeyTableAssignReqNmTokensVar
			TextDef implDb2LUWLockByPKeyTableAssignReqTextVar
			DateDef implDb2LUWLockByPKeyTableAssignReqDateVar
			TimeDef implDb2LUWLockByPKeyTableAssignReqTimeVar
			TimestampDef implDb2LUWLockByPKeyTableAssignReqTimestampVar
			TZDateDef implDb2LUWLockByPKeyTableAssignReqTZDateVar
			TZTimeDef implDb2LUWLockByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implDb2LUWLockByPKeyTableAssignReqTZTimestampVar
			UuidDef implDb2LUWLockByPKeyTableAssignReqUuidVar
			UuidGen implDb2LUWLockByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqBlobVar">
				stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtLockBuffByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtLockBuffByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtLockBuffByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtLockBuffByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqEnumVar">
			stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqInt16Var">
			stmtLockBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqInt32Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqInt64Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqUInt16Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqUInt32Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqUInt64Var">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqFloatVar">
			stmtLockBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqDoubleVar">
			stmtLockBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqNumberVar">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqStringVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqNmTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqNmTokensVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqTextVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqTZDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqTZTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqTZTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignReqUuidVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWLockByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffWhereClassCode">
				+	"WHERE "
				+		"$lower reference BaseClass ClassCode$.ClassCode = '$ClassCode$' "</GenRule>

	<GenRule GenDef="Object" Name="implBuffIndexColumnOrderBy">
				+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implBuffIndexColumnCommaOrderBy"
		>$implBuffIndexColumnOrderBy$ + ", "</GenRule>


	<GenRule GenDef="Table" Name="implReadTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implReadTableBuffByInhIndexes default implReadTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableBuffByIndexes$$iterate Index( each implReadTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByBaseIndexes"
		>$iterate Index( each implReadTableBuffByIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implPageTableBuffByInhIndexes default implPageTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implPageTableBuffByIndexes$$iterate Index( each implPageTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByBaseIndexes"
		>$iterate Index( each implPageTableBuffByIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableBuff">
	public $DefSchemaName$$TableName$Buff[] readAllBuff( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
			final String sql = "CALL $sp_read_dbtablename_all$( ?, ?, ?, ?, ? )";
			if( stmtReadAllBuff == null ) {
				stmtReadAllBuff = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmtReadAllBuff.executeQuery();
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			while( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByIndex"
		>$switch IsUnique
			yes implReadTableBuffByUniqueIndex
			default implReadTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByIndex"
		>$switch PageData yes maybe_implPageTableBuffByIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="maybe_implPageTableBuffByIndex"
		>$switch IsUnique
			yes empty
			default implPageTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableBuffByReqUniqueIndex$
			if( resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndex">
			String sql =
					getSqlSelect$poptop Table TableName$Buff()
				+	"WHERE "
$iterate Columns( first implDb2LUWIndexColumnWhereFragBindVar each implDb2LUWIndexColumnWhereAndFragBindVar )$$implDb2LUWWhereFragRestrictClassCode$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );</GenRule>

	<GenRule GenDef="Object" Name="BaseHasSubClasses"
		>$poptop Table reference BaseClass HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWWhereFragRestrictClassCode"
		>$switch BaseHasSubClasses yes implDb2LUWWhereFragDoRestrict default empty$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWWhereFragDoRestrict">
				+		"AND "
				+			"$lower poptop Table reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'"</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqUniqueIndex">
			final String sql = "CALL $sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadBuffBy$Suffix$ == null ) {
				stmtReadBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implDb2LUWReadBuffBySuffixAssignVar )$
			resultSet = stmtReadBuffBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignVar"
		>$switch IsNullable yes implDb2LUWReadBuffBySuffixAssignOptVar
			default implDb2LUWReadBuffBySuffixAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWReadBuffBySuffixAssignOptBlobVar
			BoolDef implDb2LUWReadBuffBySuffixAssignOptBoolVar
			EnumDef implDb2LUWReadBuffBySuffixAssignOptEnumVar
			Int16Def implDb2LUWReadBuffBySuffixAssignOptInt16Var
			Int32Def implDb2LUWReadBuffBySuffixAssignOptInt32Var
			Int64Def implDb2LUWReadBuffBySuffixAssignOptInt64Var
			UInt16Def implDb2LUWReadBuffBySuffixAssignOptUInt16Var
			UInt32Def implDb2LUWReadBuffBySuffixAssignOptUInt32Var
			UInt64Def implDb2LUWReadBuffBySuffixAssignOptUInt64Var
			Id16Gen implDb2LUWReadBuffBySuffixAssignOptInt16Var
			Id32Gen implDb2LUWReadBuffBySuffixAssignOptInt32Var
			Id64Gen implDb2LUWReadBuffBySuffixAssignOptInt64Var
			FloatDef implDb2LUWReadBuffBySuffixAssignOptFloatVar
			DoubleDef implDb2LUWReadBuffBySuffixAssignOptDoubleVar
			NumberDef implDb2LUWReadBuffBySuffixAssignOptNumberVar
			StringDef implDb2LUWReadBuffBySuffixAssignOptStringVar
			TokenDef implDb2LUWReadBuffBySuffixAssignOptTokenVar
			NmTokenDef implDb2LUWReadBuffBySuffixAssignOptNmTokenVar
			NmTokensDef implDb2LUWReadBuffBySuffixAssignOptNmTokensVar
			TextDef implDb2LUWReadBuffBySuffixAssignOptTextVar
			DateDef implDb2LUWReadBuffBySuffixAssignOptDateVar
			TimeDef implDb2LUWReadBuffBySuffixAssignOptTimeVar
			TimestampDef implDb2LUWReadBuffBySuffixAssignOptTimestampVar
			TZDateDef implDb2LUWReadBuffBySuffixAssignOptTZDateVar
			TZTimeDef implDb2LUWReadBuffBySuffixAssignOptTZTimeVar
			TZTimestampDef implDb2LUWReadBuffBySuffixAssignOptTZTimestampVar
			UuidDef implDb2LUWReadBuffBySuffixAssignOptUuidVar
			UuidGen implDb2LUWReadBuffBySuffixAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWReadBuffBySuffixAssignReqBlobVar
			BoolDef implDb2LUWReadBuffBySuffixAssignReqBoolVar
			EnumDef implDb2LUWReadBuffBySuffixAssignReqEnumVar
			Int16Def implDb2LUWReadBuffBySuffixAssignReqInt16Var
			Int32Def implDb2LUWReadBuffBySuffixAssignReqInt32Var
			Int64Def implDb2LUWReadBuffBySuffixAssignReqInt64Var
			UInt16Def implDb2LUWReadBuffBySuffixAssignReqUInt16Var
			UInt32Def implDb2LUWReadBuffBySuffixAssignReqUInt32Var
			UInt64Def implDb2LUWReadBuffBySuffixAssignReqUInt64Var
			Id16Gen implDb2LUWReadBuffBySuffixAssignReqInt16Var
			Id32Gen implDb2LUWReadBuffBySuffixAssignReqInt32Var
			Id64Gen implDb2LUWReadBuffBySuffixAssignReqInt64Var
			FloatDef implDb2LUWReadBuffBySuffixAssignReqFloatVar
			DoubleDef implDb2LUWReadBuffBySuffixAssignReqDoubleVar
			NumberDef implDb2LUWReadBuffBySuffixAssignReqNumberVar
			StringDef implDb2LUWReadBuffBySuffixAssignReqStringVar
			TokenDef implDb2LUWReadBuffBySuffixAssignReqTokenVar
			NmTokenDef implDb2LUWReadBuffBySuffixAssignReqNmTokenVar
			NmTokensDef implDb2LUWReadBuffBySuffixAssignReqNmTokensVar
			TextDef implDb2LUWReadBuffBySuffixAssignReqTextVar
			DateDef implDb2LUWReadBuffBySuffixAssignReqDateVar
			TimeDef implDb2LUWReadBuffBySuffixAssignReqTimeVar
			TimestampDef implDb2LUWReadBuffBySuffixAssignReqTimestampVar
			TZDateDef implDb2LUWReadBuffBySuffixAssignReqTZDateVar
			TZTimeDef implDb2LUWReadBuffBySuffixAssignReqTZTimeVar
			TZTimestampDef implDb2LUWReadBuffBySuffixAssignReqTZTimestampVar
			UuidDef implDb2LUWReadBuffBySuffixAssignReqUuidVar
			UuidGen implDb2LUWReadBuffBySuffixAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqBlobVar">
			stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqBoolVar">
			if( $Name$ ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtReadBuffBy$Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadBuffBy$Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtReadBuffBy$Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqEnumVar">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqInt16Var">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqInt32Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqInt64Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqUInt16Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqUInt32Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqUInt64Var">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqFloatVar">
			stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqDoubleVar">
			stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqNumberVar">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqStringVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqNmTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqNmTokensVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqTextVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqTZDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqTZTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqTZTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignReqUuidVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWReadBuffBySuffixAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableBuffByReqDuplicateIndex$
			List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
			while( resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndex">
			String sql =
					getSqlSelect$poptop Table TableName$Buff()
				+	"WHERE "
$popto Index iterate Columns( first implDb2LUWIndexColumnWhereFragBindVar each implDb2LUWIndexColumnWhereAndFragBindVar )$$implDb2LUWWhereFragRestrictClassCode$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqDuplicateIndex">
			final String sql = "CALL $sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtReadBuffBy$Suffix$ == null ) {
				stmtReadBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implDb2LUWReadBuffBySuffixAssignVar )$
			resultSet = stmtReadBuffBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByReqDuplicateIndex">
			final String sql = "CALL $sp_page_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtPageBuffBy$Suffix$ == null ) {
				stmtPageBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtPageBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implDb2LUWPageBySuffixAssignVar )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWPageBySuffixTableAssignOptPriorColumn )$
			resultSet = stmtPageBuffBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignVar"
		>$switch IsNullable yes implDb2LUWPageBySuffixAssignOptVar
			default implDb2LUWPageBySuffixAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWPageBySuffixAssignOptBlobVar
			BoolDef implDb2LUWPageBySuffixAssignOptBoolVar
			EnumDef implDb2LUWPageBySuffixAssignOptEnumVar
			Int16Def implDb2LUWPageBySuffixAssignOptInt16Var
			Int32Def implDb2LUWPageBySuffixAssignOptInt32Var
			Int64Def implDb2LUWPageBySuffixAssignOptInt64Var
			UInt16Def implDb2LUWPageBySuffixAssignOptUInt16Var
			UInt32Def implDb2LUWPageBySuffixAssignOptUInt32Var
			UInt64Def implDb2LUWPageBySuffixAssignOptUInt64Var
			Id16Gen implDb2LUWPageBySuffixAssignOptInt16Var
			Id32Gen implDb2LUWPageBySuffixAssignOptInt32Var
			Id64Gen implDb2LUWPageBySuffixAssignOptInt64Var
			FloatDef implDb2LUWPageBySuffixAssignOptFloatVar
			DoubleDef implDb2LUWPageBySuffixAssignOptDoubleVar
			NumberDef implDb2LUWPageBySuffixAssignOptNumberVar
			StringDef implDb2LUWPageBySuffixAssignOptStringVar
			TokenDef implDb2LUWPageBySuffixAssignOptTokenVar
			NmTokenDef implDb2LUWPageBySuffixAssignOptNmTokenVar
			NmTokensDef implDb2LUWPageBySuffixAssignOptNmTokensVar
			TextDef implDb2LUWPageBySuffixAssignOptTextVar
			DateDef implDb2LUWPageBySuffixAssignOptDateVar
			TimeDef implDb2LUWPageBySuffixAssignOptTimeVar
			TimestampDef implDb2LUWPageBySuffixAssignOptTimestampVar
			TZDateDef implDb2LUWPageBySuffixAssignOptTZDateVar
			TZTimeDef implDb2LUWPageBySuffixAssignOptTZTimeVar
			TZTimestampDef implDb2LUWPageBySuffixAssignOptTZTimestampVar
			UuidDef implDb2LUWPageBySuffixAssignOptUuidVar
			UuidGen implDb2LUWPageBySuffixAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWPageBySuffixAssignReqBlobVar
			BoolDef implDb2LUWPageBySuffixAssignReqBoolVar
			EnumDef implDb2LUWPageBySuffixAssignReqEnumVar
			Int16Def implDb2LUWPageBySuffixAssignReqInt16Var
			Int32Def implDb2LUWPageBySuffixAssignReqInt32Var
			Int64Def implDb2LUWPageBySuffixAssignReqInt64Var
			UInt16Def implDb2LUWPageBySuffixAssignReqUInt16Var
			UInt32Def implDb2LUWPageBySuffixAssignReqUInt32Var
			UInt64Def implDb2LUWPageBySuffixAssignReqUInt64Var
			Id16Gen implDb2LUWPageBySuffixAssignReqInt16Var
			Id32Gen implDb2LUWPageBySuffixAssignReqInt32Var
			Id64Gen implDb2LUWPageBySuffixAssignReqInt64Var
			FloatDef implDb2LUWPageBySuffixAssignReqFloatVar
			DoubleDef implDb2LUWPageBySuffixAssignReqDoubleVar
			NumberDef implDb2LUWPageBySuffixAssignReqNumberVar
			StringDef implDb2LUWPageBySuffixAssignReqStringVar
			TokenDef implDb2LUWPageBySuffixAssignReqTokenVar
			NmTokenDef implDb2LUWPageBySuffixAssignReqNmTokenVar
			NmTokensDef implDb2LUWPageBySuffixAssignReqNmTokensVar
			TextDef implDb2LUWPageBySuffixAssignReqTextVar
			DateDef implDb2LUWPageBySuffixAssignReqDateVar
			TimeDef implDb2LUWPageBySuffixAssignReqTimeVar
			TimestampDef implDb2LUWPageBySuffixAssignReqTimestampVar
			TZDateDef implDb2LUWPageBySuffixAssignReqTZDateVar
			TZTimeDef implDb2LUWPageBySuffixAssignReqTZTimeVar
			TZTimestampDef implDb2LUWPageBySuffixAssignReqTZTimestampVar
			UuidDef implDb2LUWPageBySuffixAssignReqUuidVar
			UuidGen implDb2LUWPageBySuffixAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqBlobVar">
			stmtPageBuffBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqBoolVar">
			if( $Name$ ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtPageBuffBy$Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtPageBuffBy$Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtPageBuffBy$Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqEnumVar">
			stmtPageBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqInt16Var">
			stmtPageBuffBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqInt32Var">
			stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqInt64Var">
			stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqUInt16Var">
			stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqUInt32Var">
			stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqUInt64Var">
			stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqFloatVar">
			stmtPageBuffBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqDoubleVar">
			stmtPageBuffBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqNumberVar">
			stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqStringVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptStringVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqTokenVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqNmTokenVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqNmTokensVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqTextVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptTextVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqDateVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptDateVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqTimeVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqTimestampVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqTZDateVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqTZTimeVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqTZTimestampVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignReqUuidVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptPriorColumn"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWPageBySuffixTableAssignOptBlobPriorColumn
			BoolDef implDb2LUWPageBySuffixTableAssignOptBoolPriorColumn
			EnumDef implDb2LUWPageBySuffixTableAssignOptEnumPriorColumn
			Int16Def implDb2LUWPageBySuffixTableAssignOptInt16PriorColumn
			Int32Def implDb2LUWPageBySuffixTableAssignOptInt32PriorColumn
			Int64Def implDb2LUWPageBySuffixTableAssignOptInt64PriorColumn
			UInt16Def implDb2LUWPageBySuffixTableAssignOptUInt16PriorColumn
			UInt32Def implDb2LUWPageBySuffixTableAssignOptUInt32PriorColumn
			UInt64Def implDb2LUWPageBySuffixTableAssignOptUInt64PriorColumn
			Id16Gen implDb2LUWPageBySuffixTableAssignOptInt16PriorColumn
			Id32Gen implDb2LUWPageBySuffixTableAssignOptInt32PriorColumn
			Id64Gen implDb2LUWPageBySuffixTableAssignOptInt64PriorColumn
			FloatDef implDb2LUWPageBySuffixTableAssignOptFloatPriorColumn
			DoubleDef implDb2LUWPageBySuffixTableAssignOptDoublePriorColumn
			NumberDef implDb2LUWPageBySuffixTableAssignOptNumberPriorColumn
			StringDef implDb2LUWPageBySuffixTableAssignOptStringPriorColumn
			TokenDef implDb2LUWPageBySuffixTableAssignOptTokenPriorColumn
			NmTokenDef implDb2LUWPageBySuffixTableAssignOptNmTokenPriorColumn
			NmTokensDef implDb2LUWPageBySuffixTableAssignOptNmTokensPriorColumn
			TextDef implDb2LUWPageBySuffixTableAssignOptTextPriorColumn
			DateDef implDb2LUWPageBySuffixTableAssignOptDatePriorColumn
			TimeDef implDb2LUWPageBySuffixTableAssignOptTimePriorColumn
			TimestampDef implDb2LUWPageBySuffixTableAssignOptTimestampPriorColumn
			TZDateDef implDb2LUWPageBySuffixTableAssignOptTZDatePriorColumn
			TZTimeDef implDb2LUWPageBySuffixTableAssignOptTZTimePriorColumn
			TZTimestampDef implDb2LUWPageBySuffixTableAssignOptTZTimestampPriorColumn
			UuidDef implDb2LUWPageBySuffixTableAssignOptUuidPriorColumn
			UuidGen implDb2LUWPageBySuffixTableAssignOptUuidPriorColumn
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptBlobPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBytes( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptBoolPriorColumn">
			if( prior$Name$ != null ) {
				if( prior$Name$.booleanValue() ) {
					stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptEnumPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setShort( argIdx++, (short)prior$Name$.ordinal() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptInt16PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setShort( argIdx++, prior$Name$.shortValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptInt32PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptInt64PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptUInt16PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptUInt32PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptUInt64PriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptFloatPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setFloat( argIdx++, prior$Name$.floatValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptDoublePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setDouble( argIdx++, prior$Name$.doubleValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptNumberPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptStringPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptTokenPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptNmTokenPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptNmTokensPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptTextPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptDatePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptTimePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptTimestampPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptTZDatePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptTZTimePriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptTZTimestampPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWPageBySuffixTableAssignOptUuidPriorColumn">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$.toString() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableByIndex"
		>$switch IsUnique
			yes implReadTableByUniqueIndex
			default implReadTableByDuplicateIndex$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWIndexColumnWhereAndFragBindVar">
			+	"AND "
$implDb2LUWIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implDb2LUWIndexColumnWhereFragBindOptVar
			default implDb2LUWIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWIndexColumnWhereFragBindOptBlobVar
			BoolDef implDb2LUWIndexColumnWhereFragBindOptBoolVar
			EnumDef implDb2LUWIndexColumnWhereFragBindOptEnumVar
			Int16Def implDb2LUWIndexColumnWhereFragBindOptInt16Var
			Int32Def implDb2LUWIndexColumnWhereFragBindOptInt32Var
			Int64Def implDb2LUWIndexColumnWhereFragBindOptInt64Var
			UInt16Def implDb2LUWIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implDb2LUWIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implDb2LUWIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implDb2LUWIndexColumnWhereFragBindOptInt16Var
			Id32Gen implDb2LUWIndexColumnWhereFragBindOptInt32Var
			Id64Gen implDb2LUWIndexColumnWhereFragBindOptInt64Var
			FloatDef implDb2LUWIndexColumnWhereFragBindOptFloatVar
			DoubleDef implDb2LUWIndexColumnWhereFragBindOptDoubleVar
			NumberDef implDb2LUWIndexColumnWhereFragBindOptNumberVar
			StringDef implDb2LUWIndexColumnWhereFragBindOptStringVar
			TokenDef implDb2LUWIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implDb2LUWIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implDb2LUWIndexColumnWhereFragBindOptNmTokensVar
			TextDef implDb2LUWIndexColumnWhereFragBindOptTextVar
			DateDef implDb2LUWIndexColumnWhereFragBindOptDateVar
			TimeDef implDb2LUWIndexColumnWhereFragBindOptTimeVar
			TimestampDef implDb2LUWIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implDb2LUWIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implDb2LUWIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implDb2LUWIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implDb2LUWIndexColumnWhereFragBindOptUuidVar
			UuidGen implDb2LUWIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWIndexColumnWhereFragBindReqBlobVar
			BoolDef implDb2LUWIndexColumnWhereFragBindReqBoolVar
			EnumDef implDb2LUWIndexColumnWhereFragBindReqEnumVar
			Int16Def implDb2LUWIndexColumnWhereFragBindReqInt16Var
			Int32Def implDb2LUWIndexColumnWhereFragBindReqInt32Var
			Int64Def implDb2LUWIndexColumnWhereFragBindReqInt64Var
			UInt16Def implDb2LUWIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implDb2LUWIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implDb2LUWIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implDb2LUWIndexColumnWhereFragBindReqInt16Var
			Id32Gen implDb2LUWIndexColumnWhereFragBindReqInt32Var
			Id64Gen implDb2LUWIndexColumnWhereFragBindReqInt64Var
			FloatDef implDb2LUWIndexColumnWhereFragBindReqFloatVar
			DoubleDef implDb2LUWIndexColumnWhereFragBindReqDoubleVar
			NumberDef implDb2LUWIndexColumnWhereFragBindReqNumberVar
			StringDef implDb2LUWIndexColumnWhereFragBindReqStringVar
			TokenDef implDb2LUWIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implDb2LUWIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implDb2LUWIndexColumnWhereFragBindReqNmTokensVar
			TextDef implDb2LUWIndexColumnWhereFragBindReqTextVar
			DateDef implDb2LUWIndexColumnWhereFragBindReqDateVar
			TimeDef implDb2LUWIndexColumnWhereFragBindReqTimeVar
			TimestampDef implDb2LUWIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implDb2LUWIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implDb2LUWIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implDb2LUWIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implDb2LUWIndexColumnWhereFragBindReqUuidVar
			UuidGen implDb2LUWIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqBlobVar"></GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptBlobVar"></GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqBoolVar"
>				+		( $Name$ ? "$lower ClassCode$.$DbColumnName$ = 'Y' " : "$lower ClassCode$.$DbColumnName$ = 'N' " )
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptBoolVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null " :
								( $Name$ ? "'Y', " : "'N', " ) )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqEnumVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptEnumVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqInt16Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqInt32Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqInt64Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqUInt16Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptUInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqUInt32Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptUInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqUInt64Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptUInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqFloatVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptFloatVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqDoubleVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptDoubleVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqNumberVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptNumberVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqStringVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptStringVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqTokenVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqNmTokenVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptNmTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqNmTokensVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptNmTokensVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqTextVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptTextVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqDateVar"
>				+		"TO_DATE( " + $SchemaName$Db2LUWSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = TO_DATE( " + $SchemaName$Db2LUWSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqTimeVar"
>				+		"TIME( " + $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = TIME( " + $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqTimestampVar"
>				+		"TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqTZDateVar"
>				+		"TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptTZDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqTZTimeVar"
>				+		"TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptTZTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqTZTimestampVar"
>				+		"TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptTZTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindReqUuidVar"
>				+		"$lower ClassCode$.$DbColumnName$ = '" + $Name$.toString() + "' "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragBindOptUuidVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = '" + $Name$.toString() + "' " )</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWIndexColumnWhereAndFragValueVar">
					+	"AND "
$implDb2LUWIndexColumnWhereFragValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnCommaArgValueVar"> + ", "$implDb2LUWIndexColumnArgValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWCommaArgRevision"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			BoolDef implDb2LUWIndexColumnArgValueWhereFragValueBool
			EnumDef implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			Int16Def implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			Int32Def implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			Int64Def implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			UInt16Def implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			UInt32Def implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			UInt64Def implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			Id16Gen implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			Id32Gen implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			Id64Gen implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			FloatDef implDb2LUWIndexColumnArgValueWhereFragValueFloat
			DoubleDef implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			NumberDef implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			StringDef implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			TokenDef implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			NmTokenDef implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			NmTokensDef implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			TextDef implDb2LUWIndexColumnArgValueWhereFragValueText
			DateDef implDb2LUWIndexColumnArgValueWhereFragValueDate
			TimeDef implDb2LUWIndexColumnArgValueWhereFragValueTime
			TimestampDef implDb2LUWIndexColumnArgValueWhereFragValueTimestamp
			TZDateDef implDb2LUWIndexColumnArgValueWhereFragValueTZDate
			TZTimeDef implDb2LUWIndexColumnArgValueWhereFragValueTZTime
			TZTimestampDef implDb2LUWIndexColumnArgValueWhereFragValueTZTimestamp
			UuidDef implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			UuidGen implDb2LUWIndexColumnArgValueWhereFragValueGeneric
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueGeneric">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueFloat">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueText">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueBool">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueDate">
				+		"TO_DATE( ?, 'YYYY-MM-DD' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueTime">
				+		"TIME( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueTimestamp">
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueTZDate">
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueTZTime">
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueTZTimestamp">
				+		"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnArgValueWhereFragValueUuid">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWIndexColumnWhereFragValueGenericVar
			BoolDef implDb2LUWIndexColumnWhereFragValueBoolVar
			EnumDef implDb2LUWIndexColumnWhereFragValueGenericVar
			Int16Def implDb2LUWIndexColumnWhereFragValueGenericVar
			Int32Def implDb2LUWIndexColumnWhereFragValueGenericVar
			Int64Def implDb2LUWIndexColumnWhereFragValueGenericVar
			UInt16Def implDb2LUWIndexColumnWhereFragValueGenericVar
			UInt32Def implDb2LUWIndexColumnWhereFragValueGenericVar
			UInt64Def implDb2LUWIndexColumnWhereFragValueGenericVar
			Id16Gen implDb2LUWIndexColumnWhereFragValueGenericVar
			Id32Gen implDb2LUWIndexColumnWhereFragValueGenericVar
			Id64Gen implDb2LUWIndexColumnWhereFragValueGenericVar
			FloatDef implDb2LUWIndexColumnWhereFragValueGenericVar
			DoubleDef implDb2LUWIndexColumnWhereFragValueGenericVar
			NumberDef implDb2LUWIndexColumnWhereFragValueGenericVar
			StringDef implDb2LUWIndexColumnWhereFragValueGenericVar
			TokenDef implDb2LUWIndexColumnWhereFragValueGenericVar
			NmTokenDef implDb2LUWIndexColumnWhereFragValueGenericVar
			NmTokensDef implDb2LUWIndexColumnWhereFragValueGenericVar
			TextDef implDb2LUWIndexColumnWhereFragValueGenericVar
			DateDef implDb2LUWIndexColumnWhereFragValueDateVar
			TimeDef implDb2LUWIndexColumnWhereFragValueTimeVar
			TimestampDef implDb2LUWIndexColumnWhereFragValueTimestampVar
			TZDateDef implDb2LUWIndexColumnWhereFragValueTZDateVar
			TZTimeDef implDb2LUWIndexColumnWhereFragValueTZTimeVar
			TZTimestampDef implDb2LUWIndexColumnWhereFragValueTZTimestampVar
			UuidDef implDb2LUWIndexColumnWhereFragValueGenericVar
			UuidGen implDb2LUWIndexColumnWhereFragValueGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueGenericVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueFloatVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueTextVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueBoolVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueDateVar"
>				+		"$lower ClassCode$.$DbColumnName$ = TO_DATE( ?, 'YYYY-MM-DD' ) "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueTimeVar"
>				+		"$lower ClassCode$.$DbColumnName$ = TIME( ? ) "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueTimestampVar"
>				+		"$lower ClassCode$.$DbColumnName$ = TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueTZDateVar"
>				+		"$lower ClassCode$.$DbColumnName$ = TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueTZTimeVar"
>				+		"$lower ClassCode$.$DbColumnName$ = TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueTZTimestampVar"
>				+		"$lower ClassCode$.$DbColumnName$ = TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnWhereFragValueUuidVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWTableColumnSelectFragDbNameComma"
		>$reference Column implDb2LUWTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameComma"
>				+		"$switch BaseModelAtomClass
				BlobDef implDb2LUWTableColumnSelectFragDbNameBlob
				BoolDef implDb2LUWTableColumnSelectFragDbNameBool
				EnumDef implDb2LUWTableColumnSelectFragDbNameEnum
				Int16Def implDb2LUWTableColumnSelectFragDbNameInt16
				Int32Def implDb2LUWTableColumnSelectFragDbNameInt32
				Int64Def implDb2LUWTableColumnSelectFragDbNameInt64
				UInt16Def implDb2LUWTableColumnSelectFragDbNameUInt16
				UInt32Def implDb2LUWTableColumnSelectFragDbNameUInt32
				UInt64Def implDb2LUWTableColumnSelectFragDbNameUInt64
				Id16Gen implDb2LUWTableColumnSelectFragDbNameInt16
				Id32Gen implDb2LUWTableColumnSelectFragDbNameInt32
				Id64Gen implDb2LUWTableColumnSelectFragDbNameInt64
				FloatDef implDb2LUWTableColumnSelectFragDbNameFloat
				DoubleDef implDb2LUWTableColumnSelectFragDbNameDouble
				NumberDef implDb2LUWTableColumnSelectFragDbNameNumber
				StringDef implDb2LUWTableColumnSelectFragDbNameString
				TokenDef implDb2LUWTableColumnSelectFragDbNameToken
				NmTokenDef implDb2LUWTableColumnSelectFragDbNameNmToken
				NmTokensDef implDb2LUWTableColumnSelectFragDbNameNmTokens
				TextDef implDb2LUWTableColumnSelectFragDbNameText
				DateDef implDb2LUWTableColumnSelectFragDbNameDate
				TimeDef implDb2LUWTableColumnSelectFragDbNameTime
				TimestampDef implDb2LUWTableColumnSelectFragDbNameTimestamp
				TZDateDef implDb2LUWTableColumnSelectFragDbNameTZDate
				TZTimeDef implDb2LUWTableColumnSelectFragDbNameTZTime
				TZTimestampDef implDb2LUWTableColumnSelectFragDbNameTZTimestamp
				UuidDef implDb2LUWTableColumnSelectFragDbNameUuid
				UuidGen implDb2LUWTableColumnSelectFragDbNameUuid
				default empty$, "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameBlob"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameBool"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameEnum"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameInt16"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameInt32"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameInt64"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameUInt16"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameUInt32"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameUInt64"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameFloat"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameDouble"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameNumber"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameString"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameToken"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameNmToken"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameNmTokens"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameText"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameDate"
		>CHAR( $lower ClassCode$.$DbColumnName$, ISO ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameTime"
		>CHAR( $lower ClassCode$.$DbColumnName$, ISO ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameTimestamp"
		>TO_CHAR( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD-HH24.MI.SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameTZDate"
		>TO_CHAR( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD-HH24.MI.SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameTZTime"
		>TO_CHAR( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD-HH24.MI.SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameTZTimestamp"
		>TO_CHAR( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD-HH24.MI.SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbNameUuid"
		>$lower ClassCode$.$DbColumnName$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnSelectFragDbName"
>			+		"$switch BaseModelAtomClass
			BlobDef implDb2LUWTableColumnSelectFragDbNameBlob
			BoolDef implDb2LUWTableColumnSelectFragDbNameBool
			EnumDef implDb2LUWTableColumnSelectFragDbNameEnum
			Int16Def implDb2LUWTableColumnSelectFragDbNameInt16
			Int32Def implDb2LUWTableColumnSelectFragDbNameInt32
			Int64Def implDb2LUWTableColumnSelectFragDbNameInt64
			UInt16Def implDb2LUWTableColumnSelectFragDbNameUInt16
			UInt32Def implDb2LUWTableColumnSelectFragDbNameUInt32
			UInt64Def implDb2LUWTableColumnSelectFragDbNameUInt64
			Id16Gen implDb2LUWTableColumnSelectFragDbNameInt16
			Id32Gen implDb2LUWTableColumnSelectFragDbNameInt32
			Id64Gen implDb2LUWTableColumnSelectFragDbNameInt64
			FloatDef implDb2LUWTableColumnSelectFragDbNameFloat
			DoubleDef implDb2LUWTableColumnSelectFragDbNameDouble
			NumberDef implDb2LUWTableColumnSelectFragDbNameNumber
			StringDef implDb2LUWTableColumnSelectFragDbNameString
			TokenDef implDb2LUWTableColumnSelectFragDbNameToken
			NmTokenDef implDb2LUWTableColumnSelectFragDbNameNmToken
			NmTokensDef implDb2LUWTableColumnSelectFragDbNameNmTokens
			TextDef implDb2LUWTableColumnSelectFragDbNameText
			DateDef implDb2LUWTableColumnSelectFragDbNameDate
			TimeDef implDb2LUWTableColumnSelectFragDbNameTime
			TimestampDef implDb2LUWTableColumnSelectFragDbNameTimestamp
			TZDateDef implDb2LUWTableColumnSelectFragDbNameTZDate
			TZTimeDef implDb2LUWTableColumnSelectFragDbNameTZTime
			TZTimestampDef implDb2LUWTableColumnSelectFragDbNameTZTimestamp
			UuidDef implDb2LUWTableColumnSelectFragDbNameUuid
			UuidGen implDb2LUWTableColumnSelectFragDbNameUuid
			default empty$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implDb2LUWTableColumnSqlFragDbName"
>			+		"$lower ClassCode$.$DbColumnName$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implDb2LUWTableColumnSqlFragDbName"
>			+		"$lower ClassCode$.$DbColumnName$ "
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnOrderBy">
			+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWIndexColumnCommaOrderBy"
		>$implDb2LUWIndexColumnOrderBy$ + ", "</GenRule>

	<GenRule GenDef="IndexCol" Name="implUpdateTableCopyBuffToPKey">
			pkey.set$OptionalOrRequired$$Name$( Buff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableExtractRevision"
>			int Revision = Buff.getRequiredRevision();
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableCheckRevision"
>			int Revision = Buff.getRequiredRevision();
			$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey pkey = schema.getFactory$Name$().newPKey();$reference PrimaryKeyIndex iterate Columns( each implUpdateTableCopyBuffToPKey )$
			$DefSchemaName$$TableName$Buff readBuff = lockBuff( Authorization, pkey );
			if( readBuff == null ) {
				throw new CFLibStaleCacheDetectedException( getClass(),
					S_ProcName,
					"Attempted to update record which could not be locked/found",
					schema.getLowerDbSchemaName() + ".$lower DbTableName$",
					pkey );
			}
			int oldRevision = readBuff.getRequiredRevision();
			if( oldRevision != Revision ) {
				throw new CFLibCollisionDetectedException( getClass(),
					S_ProcName,
					Buff );
			}
			int newRevision = Revision + 1;</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSqlFragUpdateRevision">
				+		", Revision = ? "</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWUpdateTableSqlFragWhereAndRevision">
				+	"AND "
				+		"Revision = ? "</GenRule>


	<GenRule GenDef="Table" Name="implUpdateTable"
		>$implUpdateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableInitClassCode">
			String ClassCode = "$ClassCode$";</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractVars"
		>$switch HasSuperClassRelation yes implUpdateTableSPExtractInhVars default implUpdateTableSPExtractBaseVars$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractBaseVars"
		>$switch IsBaseTable yes implDb2LUWCreateTableCopyClassCode default empty$$iterate Columns( each implDb2LUWCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractInhVars"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPExtractVars$$iterate Columns( each implDb2LUWCreateTableCopyData empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implUpdateTableSPCopyInhColumns default implUpdateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPCopyColumns$$iterate DataColumns( each implDb2LUWCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implDb2LUWCreateTableCopyClassCode default empty$$iterate Columns( each implDb2LUWCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSP">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";$switch SecScope None empty System implUpdateTableOSCheckSystem Cluster implUpdateTableOSCheckCluster Tenant implUpdateTableOSCheckTenant default error$
		ResultSet resultSet = null;
		try {$implUpdateTableSPTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPTryBody">
$implUpdateTableSPCopyColumns$			int Revision = Buff.getRequiredRevision();
			Connection cnx = schema.getCnx();
			final String sql =
				"CALL $sp_update_dbtablename$( ?, ?, ?, ?, ?, ?"$implUpdateTableSPPassArgs$ + ", "
					+ "?" + " )";
			if( stmtUpdateByPKey == null ) {
				stmtUpdateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implDb2LUWUpdateTableBindClassCode default implDb2LUWUpdateTableBindConstClassCode$$implUpdateTableSPBindArgs$$implDb2LUWUpdateTableBindRevision$
			resultSet = stmtUpdateByPKey.executeQuery();
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff updatedBuff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}$implDb2LUWUpdateTableApplyBuff$$implDb2LUWUpdateTableApplyRevision$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignVar"
		>$switch IsNullable yes implDb2LUWUpdateTableAssignOptVar
			default implDb2LUWUpdateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWUpdateTableAssignOptBlobVar
			BoolDef implDb2LUWUpdateTableAssignOptBoolVar
			EnumDef implDb2LUWUpdateTableAssignOptEnumVar
			Int16Def implDb2LUWUpdateTableAssignOptInt16Var
			Int32Def implDb2LUWUpdateTableAssignOptInt32Var
			Int64Def implDb2LUWUpdateTableAssignOptInt64Var
			UInt16Def implDb2LUWUpdateTableAssignOptUInt16Var
			UInt32Def implDb2LUWUpdateTableAssignOptUInt32Var
			UInt64Def implDb2LUWUpdateTableAssignOptUInt64Var
			Id16Gen implDb2LUWUpdateTableAssignOptInt16Var
			Id32Gen implDb2LUWUpdateTableAssignOptInt32Var
			Id64Gen implDb2LUWUpdateTableAssignOptInt64Var
			FloatDef implDb2LUWUpdateTableAssignOptFloatVar
			DoubleDef implDb2LUWUpdateTableAssignOptDoubleVar
			NumberDef implDb2LUWUpdateTableAssignOptNumberVar
			StringDef implDb2LUWUpdateTableAssignOptStringVar
			TokenDef implDb2LUWUpdateTableAssignOptTokenVar
			NmTokenDef implDb2LUWUpdateTableAssignOptNmTokenVar
			NmTokensDef implDb2LUWUpdateTableAssignOptNmTokensVar
			TextDef implDb2LUWUpdateTableAssignOptTextVar
			DateDef implDb2LUWUpdateTableAssignOptDateVar
			TimeDef implDb2LUWUpdateTableAssignOptTimeVar
			TimestampDef implDb2LUWUpdateTableAssignOptTimestampVar
			TZDateDef implDb2LUWUpdateTableAssignOptTZDateVar
			TZTimeDef implDb2LUWUpdateTableAssignOptTZTimeVar
			TZTimestampDef implDb2LUWUpdateTableAssignOptTZTimestampVar
			UuidDef implDb2LUWUpdateTableAssignOptUuidVar
			UuidGen implDb2LUWUpdateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWUpdateTableAssignReqBlobVar
			BoolDef implDb2LUWUpdateTableAssignReqBoolVar
			EnumDef implDb2LUWUpdateTableAssignReqEnumVar
			Int16Def implDb2LUWUpdateTableAssignReqInt16Var
			Int32Def implDb2LUWUpdateTableAssignReqInt32Var
			Int64Def implDb2LUWUpdateTableAssignReqInt64Var
			UInt16Def implDb2LUWUpdateTableAssignReqUInt16Var
			UInt32Def implDb2LUWUpdateTableAssignReqUInt32Var
			UInt64Def implDb2LUWUpdateTableAssignReqUInt64Var
			Id16Gen implDb2LUWUpdateTableAssignReqInt16Var
			Id32Gen implDb2LUWUpdateTableAssignReqInt32Var
			Id64Gen implDb2LUWUpdateTableAssignReqInt64Var
			FloatDef implDb2LUWUpdateTableAssignReqFloatVar
			DoubleDef implDb2LUWUpdateTableAssignReqDoubleVar
			NumberDef implDb2LUWUpdateTableAssignReqNumberVar
			StringDef implDb2LUWUpdateTableAssignReqStringVar
			TokenDef implDb2LUWUpdateTableAssignReqTokenVar
			NmTokenDef implDb2LUWUpdateTableAssignReqNmTokenVar
			NmTokensDef implDb2LUWUpdateTableAssignReqNmTokensVar
			TextDef implDb2LUWUpdateTableAssignReqTextVar
			DateDef implDb2LUWUpdateTableAssignReqDateVar
			TimeDef implDb2LUWUpdateTableAssignReqTimeVar
			TimestampDef implDb2LUWUpdateTableAssignReqTimestampVar
			TZDateDef implDb2LUWUpdateTableAssignReqTZDateVar
			TZTimeDef implDb2LUWUpdateTableAssignReqTZTimeVar
			TZTimestampDef implDb2LUWUpdateTableAssignReqTZTimestampVar
			UuidDef implDb2LUWUpdateTableAssignReqUuidVar
			UuidGen implDb2LUWUpdateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqBlobVar">
				stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BLOB );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqBoolVar">
				stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqEnumVar">
				stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqInt16Var">
				stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqInt32Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqInt64Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqUInt16Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqUInt32Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqUInt64Var">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqFloatVar">
				stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqDoubleVar">
				stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqNumberVar">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqStringVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqNmTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqNmTokensVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqTextVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqTZDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqTZTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqTZTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignReqUuidVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWUpdateTableApplyRevision">
				Buff.setRequiredRevision( updatedBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWUpdateTableApplyBuff"
		>$switch HasSuperClassRelation yes implDb2LUWUpdateTableApplyInhBuff default implDb2LUWUpdateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWUpdateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implDb2LUWUpdateTableApplyBuff$$iterate Columns( each implDb2LUWUpdateTableApplyDataCol )$</GenRule>

	<!-- Note: Updates aren't allowed to change the primary key so we don't copy back those attributes -->
	<GenRule GenDef="Table" Name="implDb2LUWUpdateTableApplyBaseBuff"
		>$iterate Columns( each implDb2LUWUpdateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Value" Name="implDb2LUWUpdateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implDb2LUWUpdateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implDb2LUWUpdateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( updatedBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPBindInhArgs default implUpdateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPBindArgs$$iterate Columns( each implUpdateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindBaseArgs"
		>$iterate Columns( each implDb2LUWUpdateTableBindVar )$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implDb2LUWUpdateTableBindVar$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPPassInhArgs default implUpdateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPPassArgs$$iterate Columns( each implUpdateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassBaseArgs"
		>$iterate Columns( each implUpdateTableSPPassAnArg )$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implUpdateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWUpdateTableSPPassGenericVar
			BoolDef implDb2LUWUpdateTableSPPassGenericVar
			EnumDef implDb2LUWUpdateTableSPPassGenericVar
			Int16Def implDb2LUWUpdateTableSPPassGenericVar
			Int32Def implDb2LUWUpdateTableSPPassGenericVar
			Int64Def implDb2LUWUpdateTableSPPassGenericVar
			UInt16Def implDb2LUWUpdateTableSPPassGenericVar
			UInt32Def implDb2LUWUpdateTableSPPassGenericVar
			UInt64Def implDb2LUWUpdateTableSPPassGenericVar
			Id16Gen implDb2LUWUpdateTableSPPassGenericVar
			Id32Gen implDb2LUWUpdateTableSPPassGenericVar
			Id64Gen implDb2LUWUpdateTableSPPassGenericVar
			FloatDef implDb2LUWUpdateTableSPPassFloatVar
			DoubleDef implDb2LUWUpdateTableSPPassGenericVar
			NumberDef implDb2LUWUpdateTableSPPassGenericVar
			StringDef implDb2LUWUpdateTableSPPassGenericVar
			TokenDef implDb2LUWUpdateTableSPPassGenericVar
			NmTokenDef implDb2LUWUpdateTableSPPassGenericVar
			NmTokensDef implDb2LUWUpdateTableSPPassGenericVar
			TextDef implDb2LUWUpdateTableSPPassTextVar
			DateDef implDb2LUWUpdateTableSPPassDateVar
			TimeDef implDb2LUWUpdateTableSPPassTimeVar
			TimestampDef implDb2LUWUpdateTableSPPassTimestampVar
			TZDateDef implDb2LUWUpdateTableSPPassTZDateVar
			TZTimeDef implDb2LUWUpdateTableSPPassTZTimeVar
			TZTimestampDef implDb2LUWUpdateTableSPPassTZTimestampVar
			UuidDef implDb2LUWUpdateTableSPPassGenericVar
			UuidGen implDb2LUWUpdateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableSPPassGenericVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableSPPassFloatVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableSPPassTextVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableSPPassDateVar"> + ", "
					+	"TO_DATE( ?, 'YYYY-MM-DD' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableSPPassTimeVar"> + ", "
					+	"TIME( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableSPPassTimestampVar"> + ", "
					+	"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableSPPassTZDateVar"> + ", "
					+	"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableSPPassTZTimeVar"> + ", "
					+	"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableSPPassTZTimestampVar"> + ", "
					+	"TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleInvokeSuper">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().update$reference SuperClassRelation reference ToTable Name$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyle">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";$switch SecScope None empty System implUpdateTableOSCheckSystem Cluster implUpdateTableOSCheckCluster Tenant implUpdateTableOSCheckTenant default error$$switch HasSuperClassRelation yes implUpdateTableOldStyleInvokeSuper default empty$
		try {
			Connection cnx = schema.getCnx();
$switch IsBaseTable yes implDb2LUWCreateTableCopyClassCode default empty$$iterate Columns( each implDb2LUWCreateTableCopyColumn empty empty )$$switch HasSuperClassRelation no implUpdateTableCheckRevision default implUpdateTableExtractRevision$$switch HasDataColumns yes implUpdateTableOldStyleDoUpdate default empty$$poptop Table switch BaseHasHistory yes implUpdateTableOldStyleAuditUpdated default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdated"
		>$switch BaseHasClassCode yes implUpdateTableOldStyleAuditUpdatedWithCC default implUpdateTableOldStyleAuditUpdatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp, "
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, current timestamp, $lower reference BaseClass ClassCode$.classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 2 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditUpdatedByPKey == null ) {
					stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
				}
				argIdx = 1;
				stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWUpdateTableAssignVar )$
				int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedNoCC">
			String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, current timestamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 2 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditUpdatedByPKey == null ) {
				stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
			}
			argIdx = 1;
			stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWUpdateTableAssignVar )$
			int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleDoUpdate">
			String sql =
					"UPDATE " + schema.getLowerDbSchemaName() + ".$DbTableName$ "
				+	"SET "$popto Table iterate Columns( each implDb2LUWUpdateTableValuesVarComma last implDb2LUWUpdateTableValuesVar )$$switch HasSuperClassRelation no implUpdateTableOldStyleOptSetClause default empty$$switch HasSuperClassRelation no implUpdateTableSqlFragUpdateRevision default empty$
				+	"WHERE "
$reference PrimaryKeyIndex iterate Columns( first implDb2LUWUpdateIndexColumnWhereFragValuesVar each implDb2LUWUpdateIndexColumnWhereAndFragValuesVar )$$switch HasSuperClassRelation no implDb2LUWUpdateTableSqlFragWhereAndRevision default empty$;
			if( stmtUpdateByPKey == null ) {
				stmtUpdateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
$popto Table iterate Columns( each implDb2LUWUpdateTableBindVar )$$switch HasSuperClassRelation no implDb2LUWUpdateTableBindOptAuditColumns default empty$$switch HasSuperClassRelation no implDb2LUWUpdateTableBindUpdatedRevision default empty$$reference PrimaryKeyIndex iterate Columns( each implDb2LUWUpdateTableBindVar )$$switch HasSuperClassRelation no implDb2LUWUpdateTableBindOldRevision default empty$;
			int rowsAffected = stmtUpdateByPKey.executeUpdate();
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by update, not " + rowsAffected );
			}$switch HasSuperClassRelation no implDb2LUWUpdateSetRevision default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleOptSetClause"
		>$switch HasAuditColumns yes implUpdateTableOldStyleSetClause default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleSetClause"> + ", "
				+		"updatedby = ?, "
				+		"updatedat = CURRENT TIMESTAMP "</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWUpdateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implDb2LUWUpdateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWUpdateTableBindAuditColumns">
			stmtUpdateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOldRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindUpdatedRevision">
			stmtUpdateByPKey.setInt( argIdx++, newRevision );</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindClassCode">
			stmtUpdateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindConstClassCode">
			stmtUpdateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesVarComma"
		>$implDb2LUWUpdateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWUpdateTableValuesGenericVar
			BoolDef implDb2LUWUpdateTableValuesGenericVar
			EnumDef implDb2LUWUpdateTableValuesGenericVar
			Int16Def implDb2LUWUpdateTableValuesGenericVar
			Int32Def implDb2LUWUpdateTableValuesGenericVar
			Int64Def implDb2LUWUpdateTableValuesGenericVar
			UInt16Def implDb2LUWUpdateTableValuesGenericVar
			UInt32Def implDb2LUWUpdateTableValuesGenericVar
			UInt64Def implDb2LUWUpdateTableValuesGenericVar
			Id16Gen implDb2LUWUpdateTableValuesGenericVar
			Id32Gen implDb2LUWUpdateTableValuesGenericVar
			Id64Gen implDb2LUWUpdateTableValuesGenericVar
			FloatDef implDb2LUWUpdateTableValuesGenericVar
			DoubleDef implDb2LUWUpdateTableValuesGenericVar
			NumberDef implDb2LUWUpdateTableValuesGenericVar
			StringDef implDb2LUWUpdateTableValuesGenericVar
			TokenDef implDb2LUWUpdateTableValuesGenericVar
			NmTokenDef implDb2LUWUpdateTableValuesGenericVar
			NmTokensDef implDb2LUWUpdateTableValuesGenericVar
			TextDef implDb2LUWUpdateTableValuesGenericVar
			DateDef implDb2LUWUpdateTableValuesDateVar
			TimeDef implDb2LUWUpdateTableValuesTimeVar
			TimestampDef implDb2LUWUpdateTableValuesTimestampVar
			TZDateDef implDb2LUWUpdateTableValuesTZDateVar
			TZTimeDef implDb2LUWUpdateTableValuesTZTimeVar
			TZTimestampDef implDb2LUWUpdateTableValuesTZTimestampVar
			UuidDef implDb2LUWUpdateTableValuesGenericVar
			UuidGen implDb2LUWUpdateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesGenericVar">
				+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesFloatVar">
				+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesTextVar">
				+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesDateVar">
				+		"$DbColumnName$ = TO_DATE( ?, 'YYYY-MM-DD' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesTimeVar">
				+		"$DbColumnName$ = TIME( ? )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesTimestampVar">
				+		"$DbColumnName$ = TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesTZDateVar">
				+		"$DbColumnName$ = TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesTZTimeVar">
				+		"$DbColumnName$ = TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableValuesTZTimestampVar">
				+		"$DbColumnName$ = TIMESTAMP_FORMAT( ?, 'YYYY-MM-DD-HH24.MI.SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindVarComma"
		>$implDb2LUWUpdateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindVar"
		>$switch IsNullable yes implDb2LUWUpdateTableBindOptVar
			default implDb2LUWUpdateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWUpdateTableBindOptBlobVar
			BoolDef implDb2LUWUpdateTableBindOptBoolVar
			EnumDef implDb2LUWUpdateTableBindOptEnumVar
			Int16Def implDb2LUWUpdateTableBindOptInt16Var
			Int32Def implDb2LUWUpdateTableBindOptInt32Var
			Int64Def implDb2LUWUpdateTableBindOptInt64Var
			UInt16Def implDb2LUWUpdateTableBindOptUInt16Var
			UInt32Def implDb2LUWUpdateTableBindOptUInt32Var
			UInt64Def implDb2LUWUpdateTableBindOptUInt64Var
			Id16Gen implDb2LUWUpdateTableBindOptInt16Var
			Id32Gen implDb2LUWUpdateTableBindOptInt32Var
			Id64Gen implDb2LUWUpdateTableBindOptInt64Var
			FloatDef implDb2LUWUpdateTableBindOptFloatVar
			DoubleDef implDb2LUWUpdateTableBindOptDoubleVar
			NumberDef implDb2LUWUpdateTableBindOptNumberVar
			StringDef implDb2LUWUpdateTableBindOptStringVar
			TokenDef implDb2LUWUpdateTableBindOptTokenVar
			NmTokenDef implDb2LUWUpdateTableBindOptNmTokenVar
			NmTokensDef implDb2LUWUpdateTableBindOptNmTokensVar
			TextDef implDb2LUWUpdateTableBindOptTextVar
			DateDef implDb2LUWUpdateTableBindOptDateVar
			TimeDef implDb2LUWUpdateTableBindOptTimeVar
			TimestampDef implDb2LUWUpdateTableBindOptTimestampVar
			TZDateDef implDb2LUWUpdateTableBindOptTZDateVar
			TZTimeDef implDb2LUWUpdateTableBindOptTZTimeVar
			TZTimestampDef implDb2LUWUpdateTableBindOptTZTimestampVar
			UuidDef implDb2LUWUpdateTableBindOptUuidVar
			UuidGen implDb2LUWUpdateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWUpdateTableBindReqBlobVar
			BoolDef implDb2LUWUpdateTableBindReqBoolVar
			EnumDef implDb2LUWUpdateTableBindReqEnumVar
			Int16Def implDb2LUWUpdateTableBindReqInt16Var
			Int32Def implDb2LUWUpdateTableBindReqInt32Var
			Int64Def implDb2LUWUpdateTableBindReqInt64Var
			UInt16Def implDb2LUWUpdateTableBindReqUInt16Var
			UInt32Def implDb2LUWUpdateTableBindReqUInt32Var
			UInt64Def implDb2LUWUpdateTableBindReqUInt64Var
			Id16Gen implDb2LUWUpdateTableBindReqInt16Var
			Id32Gen implDb2LUWUpdateTableBindReqInt32Var
			Id64Gen implDb2LUWUpdateTableBindReqInt64Var
			FloatDef implDb2LUWUpdateTableBindReqFloatVar
			DoubleDef implDb2LUWUpdateTableBindReqDoubleVar
			NumberDef implDb2LUWUpdateTableBindReqNumberVar
			StringDef implDb2LUWUpdateTableBindReqStringVar
			TokenDef implDb2LUWUpdateTableBindReqTokenVar
			NmTokenDef implDb2LUWUpdateTableBindReqNmTokenVar
			NmTokensDef implDb2LUWUpdateTableBindReqNmTokensVar
			TextDef implDb2LUWUpdateTableBindReqTextVar
			DateDef implDb2LUWUpdateTableBindReqDateVar
			TimeDef implDb2LUWUpdateTableBindReqTimeVar
			TimestampDef implDb2LUWUpdateTableBindReqTimestampVar
			TZDateDef implDb2LUWUpdateTableBindReqTZDateVar
			TZTimeDef implDb2LUWUpdateTableBindReqTZTimeVar
			TZTimestampDef implDb2LUWUpdateTableBindReqTZTimestampVar
			UuidDef implDb2LUWUpdateTableBindReqUuidVar
			UuidGen implDb2LUWUpdateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqBlobVar">
				stmtUpdateByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqBoolVar">
			if( $Name$ ) {
				stmtUpdateByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtUpdateByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtUpdateByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtUpdateByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqEnumVar">
			stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqInt16Var">
			stmtUpdateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqInt32Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqInt64Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqUInt16Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqUInt32Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqUInt64Var">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqFloatVar">
			stmtUpdateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqDoubleVar">
			stmtUpdateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqNumberVar">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqStringVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqNmTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqNmTokensVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqTextVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqTZDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqTZTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqTZTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindReqUuidVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWUpdateSetRevision">
			Buff.setRequiredRevision( newRevision );</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implDb2LUWUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implDb2LUWUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule GenDef="Atom" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>
	<GenRule GenDef="TableCol" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameLast"
		>$switch HasSuperClassRelation no implDb2LUWTableColumnUpdateFragDbNameComma default implDb2LUWTableColumnUpdateFragDbNameSpace$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameSpace"
		>$implDb2LUWTableColumnUpdateFragDbName$ + " "</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameComma"
		>$implDb2LUWTableColumnUpdateFragDbName$ + ", "
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbName"
>				+		"$switch IsNullable yes implDb2LUWTableColumnUpdateFragOptDbName
								default implDb2LUWTableColumnUpdateFragReqDbName$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragOptDbName"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWTableColumnUpdateFragDbNameOptBlob
			BoolDef implDb2LUWTableColumnUpdateFragDbNameOptBool
			EnumDef implDb2LUWTableColumnUpdateFragDbNameOptEnum
			Int16Def implDb2LUWTableColumnUpdateFragDbNameOptInt16
			Int32Def implDb2LUWTableColumnUpdateFragDbNameOptInt32
			Int64Def implDb2LUWTableColumnUpdateFragDbNameOptInt64
			UInt16Def implDb2LUWTableColumnUpdateFragDbNameOptUInt16
			UInt32Def implDb2LUWTableColumnUpdateFragDbNameOptUInt32
			UInt64Def implDb2LUWTableColumnUpdateFragDbNameOptUInt64
			Id16Gen implDb2LUWTableColumnUpdateFragDbNameOptInt16
			Id32Gen implDb2LUWTableColumnUpdateFragDbNameOptInt32
			Id64Gen implDb2LUWTableColumnUpdateFragDbNameOptInt64
			FloatDef implDb2LUWTableColumnUpdateFragDbNameOptFloat
			DoubleDef implDb2LUWTableColumnUpdateFragDbNameOptDouble
			NumberDef implDb2LUWTableColumnUpdateFragDbNameOptNumber
			StringDef implDb2LUWTableColumnUpdateFragDbNameOptString
			TokenDef implDb2LUWTableColumnUpdateFragDbNameOptToken
			NmTokenDef implDb2LUWTableColumnUpdateFragDbNameOptNmToken
			NmTokensDef implDb2LUWTableColumnUpdateFragDbNameOptNmTokens
			TextDef implDb2LUWTableColumnUpdateFragDbNameOptText
			DateDef implDb2LUWTableColumnUpdateFragDbNameOptDate
			TimeDef implDb2LUWTableColumnUpdateFragDbNameOptTime
			TimestampDef implDb2LUWTableColumnUpdateFragDbNameOptTimestamp
			TZDateDef implDb2LUWTableColumnUpdateFragDbNameOptTZDate
			TZTimeDef implDb2LUWTableColumnUpdateFragDbNameOptTZTime
			TZTimestampDef implDb2LUWTableColumnUpdateFragDbNameOptTZTimestamp
			UuidDef implDb2LUWTableColumnUpdateFragDbNameOptUuid
			UuidGen implDb2LUWTableColumnUpdateFragDbNameOptUuid
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragReqDbName"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWTableColumnUpdateFragDbNameReqBlob
			BoolDef implDb2LUWTableColumnUpdateFragDbNameReqBool
			EnumDef implDb2LUWTableColumnUpdateFragDbNameReqEnum
			Int16Def implDb2LUWTableColumnUpdateFragDbNameReqInt16
			Int32Def implDb2LUWTableColumnUpdateFragDbNameReqInt32
			Int64Def implDb2LUWTableColumnUpdateFragDbNameReqInt64
			UInt16Def implDb2LUWTableColumnUpdateFragDbNameReqUInt16
			UInt32Def implDb2LUWTableColumnUpdateFragDbNameReqUInt32
			UInt64Def implDb2LUWTableColumnUpdateFragDbNameReqUInt64
			Id16Gen implDb2LUWTableColumnUpdateFragDbNameReqInt16
			Id32Gen implDb2LUWTableColumnUpdateFragDbNameReqInt32
			Id64Gen implDb2LUWTableColumnUpdateFragDbNameReqInt64
			FloatDef implDb2LUWTableColumnUpdateFragDbNameReqFloat
			DoubleDef implDb2LUWTableColumnUpdateFragDbNameReqDouble
			NumberDef implDb2LUWTableColumnUpdateFragDbNameReqNumber
			StringDef implDb2LUWTableColumnUpdateFragDbNameReqString
			TokenDef implDb2LUWTableColumnUpdateFragDbNameReqToken
			NmTokenDef implDb2LUWTableColumnUpdateFragDbNameReqNmToken
			NmTokensDef implDb2LUWTableColumnUpdateFragDbNameReqNmTokens
			TextDef implDb2LUWTableColumnUpdateFragDbNameReqText
			DateDef implDb2LUWTableColumnUpdateFragDbNameReqDate
			TimeDef implDb2LUWTableColumnUpdateFragDbNameReqTime
			TimestampDef implDb2LUWTableColumnUpdateFragDbNameReqTimestamp
			TZDateDef implDb2LUWTableColumnUpdateFragDbNameReqTZDate
			TZTimeDef implDb2LUWTableColumnUpdateFragDbNameReqTZTime
			TZTimestampDef implDb2LUWTableColumnUpdateFragDbNameReqTZTimestamp
			UuidDef implDb2LUWTableColumnUpdateFragDbNameReqUuid
			UuidGen implDb2LUWTableColumnUpdateFragDbNameReqUuid
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptBlob"></GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptBool"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getBoolString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptEnum"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getInt16String( (short)$ColumnName$.ordinal() ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptInt16"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptInt32"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptInt64"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptUInt16"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getUInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptUInt32"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getUInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptUInt64"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getUInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptFloat"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getFloatString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptDouble"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getDoubleString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptNumber"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getNumberString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptString"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptToken"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptNmToken"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptNmTokens"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptText"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptDate"
		>$DbColumnName$ = TO_DATE( " + ( ( $ColumnName$ != null )
									?	$SchemaName$Db2LUWSchema.getDateString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptTime"
		>$DbColumnName$ = TIME( " + ( ( $ColumnName$ != null )
									?	$SchemaName$Db2LUWSchema.getTimeString( $ColumnName$ )
									:	"null" )
					+			", 'HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptTimestamp"
		>$DbColumnName$ = TIMESTAMP_FORMAT( " + ( ( $ColumnName$ != null )
									?	$SchemaName$Db2LUWSchema.getTimestampString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptTZDate"
		>$DbColumnName$ = TIMESTAMP_FORMAT( " + ( ( $ColumnName$ != null )
									?	$SchemaName$Db2LUWSchema.getTZDateString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptTZTime"
		>$DbColumnName$ = TIMESTAMP_FORMAT( " + ( ( $ColumnName$ != null )
									?	$SchemaName$Db2LUWSchema.getTZTimeString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptTZTimestamp"
		>$DbColumnName$ = TIMESTAMP_FORMAT( " + ( ( $ColumnName$ != null )
									?	$SchemaName$Db2LUWSchema.getTZTimestampString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameOptUuid"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$.toString() ) : "null" )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqBlob"></GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqBool"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getBoolString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqEnum"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getInt16String( (short)$ColumnName$.ordinal() )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqInt16"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqInt32"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqInt64"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqUInt16"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getUInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqUInt32"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getUInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqUInt64"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getUInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqFloat"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getFloatString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqDouble"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getDoubleString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqNumber"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getNumberString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqString"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqToken"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqNmToken"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqNmTokens"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqText"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqDate"
		>$DbColumnName$ = TO_DATE( " + $SchemaName$Db2LUWSchema.getDateString( $ColumnName$ ) + ", 'YYYY-MM-DD' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqTime"
		>$DbColumnName$ = TIME( " + $SchemaName$Db2LUWSchema.getTimeString( $ColumnName$ ) + " ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqTimestamp"
		>$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTimestampString( $ColumnName$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqTZDate"
		>$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZDateString( $ColumnName$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqTZTime"
		>$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZTimeString( $ColumnName$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqTZTimestamp"
		>$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZTimestampString( $ColumnName$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWTableColumnUpdateFragDbNameReqUuid"
		>$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $ColumnName$.toString() )</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWUpdateTablePassReadArg"
>				$reference Column Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implDb2LUWUpdateTablePassReadArgComma"
		>$implDb2LUWUpdateTablePassReadArg$,
</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWUpdateIndexColumnWhereAndFragValuesVar">
				+	"AND "
$implDb2LUWUpdateIndexColumnWhereFragValuesVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWUpdateIndexColumnWhereFragValuesVar"
>				+		"$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWUpdateIndexColumnWhereAndFragBindVar">
				+	"AND "
$implDb2LUWUpdateIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWUpdateIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implDb2LUWUpdateIndexColumnWhereFragBindOptVar
			default implDb2LUWUpdateIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWUpdateIndexColumnWhereFragBindOptBlobVar
			BoolDef implDb2LUWUpdateIndexColumnWhereFragBindOptBoolVar
			EnumDef implDb2LUWUpdateIndexColumnWhereFragBindOptEnumVar
			Int16Def implDb2LUWUpdateIndexColumnWhereFragBindOptInt16Var
			Int32Def implDb2LUWUpdateIndexColumnWhereFragBindOptInt32Var
			Int64Def implDb2LUWUpdateIndexColumnWhereFragBindOptInt64Var
			UInt16Def implDb2LUWUpdateIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implDb2LUWUpdateIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implDb2LUWUpdateIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implDb2LUWUpdateIndexColumnWhereFragBindOptInt16Var
			Id32Gen implDb2LUWUpdateIndexColumnWhereFragBindOptInt32Var
			Id64Gen implDb2LUWUpdateIndexColumnWhereFragBindOptInt64Var
			FloatDef implDb2LUWUpdateIndexColumnWhereFragBindOptFloatVar
			DoubleDef implDb2LUWUpdateIndexColumnWhereFragBindOptDoubleVar
			NumberDef implDb2LUWUpdateIndexColumnWhereFragBindOptNumberVar
			StringDef implDb2LUWUpdateIndexColumnWhereFragBindOptStringVar
			TokenDef implDb2LUWUpdateIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implDb2LUWUpdateIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implDb2LUWUpdateIndexColumnWhereFragBindOptNmTokensVar
			TextDef implDb2LUWUpdateIndexColumnWhereFragBindOptTextVar
			DateDef implDb2LUWUpdateIndexColumnWhereFragBindOptDateVar
			TimeDef implDb2LUWUpdateIndexColumnWhereFragBindOptTimeVar
			TimestampDef implDb2LUWUpdateIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implDb2LUWUpdateIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implDb2LUWUpdateIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implDb2LUWUpdateIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implDb2LUWUpdateIndexColumnWhereFragBindOptUuidVar
			UuidGen implDb2LUWUpdateIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWUpdateIndexColumnWhereFragBindReqBlobVar
			BoolDef implDb2LUWUpdateIndexColumnWhereFragBindReqBoolVar
			EnumDef implDb2LUWUpdateIndexColumnWhereFragBindReqEnumVar
			Int16Def implDb2LUWUpdateIndexColumnWhereFragBindReqInt16Var
			Int32Def implDb2LUWUpdateIndexColumnWhereFragBindReqInt32Var
			Int64Def implDb2LUWUpdateIndexColumnWhereFragBindReqInt64Var
			UInt16Def implDb2LUWUpdateIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implDb2LUWUpdateIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implDb2LUWUpdateIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implDb2LUWUpdateIndexColumnWhereFragBindReqInt16Var
			Id32Gen implDb2LUWUpdateIndexColumnWhereFragBindReqInt32Var
			Id64Gen implDb2LUWUpdateIndexColumnWhereFragBindReqInt64Var
			FloatDef implDb2LUWUpdateIndexColumnWhereFragBindReqFloatVar
			DoubleDef implDb2LUWUpdateIndexColumnWhereFragBindReqDoubleVar
			NumberDef implDb2LUWUpdateIndexColumnWhereFragBindReqNumberVar
			StringDef implDb2LUWUpdateIndexColumnWhereFragBindReqStringVar
			TokenDef implDb2LUWUpdateIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implDb2LUWUpdateIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implDb2LUWUpdateIndexColumnWhereFragBindReqNmTokensVar
			TextDef implDb2LUWUpdateIndexColumnWhereFragBindReqTextVar
			DateDef implDb2LUWUpdateIndexColumnWhereFragBindReqDateVar
			TimeDef implDb2LUWUpdateIndexColumnWhereFragBindReqTimeVar
			TimestampDef implDb2LUWUpdateIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implDb2LUWUpdateIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implDb2LUWUpdateIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implDb2LUWUpdateIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implDb2LUWUpdateIndexColumnWhereFragBindReqUuidVar
			UuidGen implDb2LUWUpdateIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqBlobVar"></GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptBlobVar"></GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqBoolVar"
>				+		( $Name$ ? "$DbColumnName$ = 'Y' " : "$DbColumnName$ = 'N' " )</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptBoolVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null " :
							( $Name$ ? "'Y', " : "'N', " ) )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqEnumVar"
>				+		"$DbColumnName$ = " + Short.toString( (short)$Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptEnumVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqInt16Var"
>				+		"$DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptInt16Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqInt32Var"
>				+		"$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptInt32Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqInt64Var"
>				+		"$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptInt64Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqUInt16Var"
>				+		"$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptUInt16Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqUInt32Var"
>				+		"$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptUInt32Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqUInt64Var"
>				+		"$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptUInt64Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqFloatVar"
>				+		"$DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptFloatVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqDoubleVar"
>				+		"$DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptDoubleVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqNumberVar"
>				+		"$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptNumberVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqStringVar"
>				+		"$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptStringVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqTokenVar"
>				+		"$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptTokenVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqNmTokenVar"
>				+		"$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptNmTokenVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqNmTokensVar"
>				+		"$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptNmTokensVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqTextVar"
>				+		"$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptTextVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqDateVar"
>				+		"TO_DATE( " + $SchemaName$Db2LUWSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptDateVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = TO_DATE( " + $SchemaName$Db2LUWSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqTimeVar"
>				+		"TIME( " + $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) + " ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptTimeVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = TIME( " + $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) + " ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqTimestampVar"
>				+		"TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptTimestampVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqTZDateVar"
>				+		"TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptTZDateVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqTZTimeVar"
>				+		"TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptTZTimeVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqTZTimestampVar"
>				+		"TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptTZTimestampVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = TIMESTAMP_FORMAT( " + $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) + ", 'YYYY-MM-DD-HH24.MI.SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindReqUuidVar"
>				+		"$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$.toString() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWUpdateIndexColumnWhereFragBindOptUuidVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$Db2LUWSchema.getQuotedString( $Name$.toString() ) + " " )</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTableSqlFragWhereAndRevision">
				+	"AND "
				+		"Revision = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWDeleteTableCopyColumn"
		>$reference Column implDb2LUWCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTable">
	public void delete$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "delete$TableName$";
		ResultSet resultSet = null;
		try {$implDeleteTableTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
$implDb2LUWDeleteTableByInheritedIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTableTryBody">
			Connection cnx = schema.getCnx();
$reference PrimaryKeyIndex iterate Columns( each implDb2LUWDeleteTableCopyColumn empty empty )$
			final String sql = "CALL $sp_delete_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$$implDb2LUWCommaArgRevision$ + " )";
			if( stmtDeleteByPKey == null ) {
				stmtDeleteByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference PrimaryKeyIndex iterate Columns( each implDb2LUWDeleteTableBindVar )$$implDb2LUWDeleteTableBindRevision$;
			resultSet = stmtDeleteByPKey.executeQuery();
			if( resultSet.next() ) {
				int deleteFlag = resultSet.getInt( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 record result set to be returned by delete, not 0 rows" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWDeleteTableByInheritedIndexes"
		>$switch HasSuperClassRelation yes implDb2LUWDeleteTableByInhIndexes default implDb2LUWDeleteTableByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWDeleteTableByInhIndexes"
		>$iterate Index( each implDb2LUWDeleteTableByNonPrimaryIndex empty empty )$$reference SuperClassRelation reference ToTable implDb2LUWDeleteTableByInheritedIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWDeleteTableByBaseIndexes"
		>$iterate Index( each implDb2LUWDeleteTableBySpecialIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implDb2LUWDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWDeleteTableBySpecialIndex"
		>$switch IsPrimaryIndex yes implDb2LUWDeleteTableByPrimaryIndex default implDb2LUWDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWDeleteTableByIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";
		ResultSet resultSet = null;
		try {$implDb2LUWDeleteTableByIndexTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$By$Suffix$Key argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implDb2LUWDeleteCommaPassArgColumn )$ );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWDeleteTableByIndexTryBody">
			Connection cnx = schema.getCnx();
			final String sql = "CALL $sp_delete_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtDeleteBy$Suffix$ == null ) {
				stmtDeleteBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implDb2LUWDeleteTableBySuffixBindVar )$
			resultSet = stmtDeleteBy$Suffix$.executeQuery();
			if( resultSet.next() ) {
				int deleteFlag = resultSet.getInt( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 record result set to be returned by delete, not 0 rows" );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWDeleteCommaPassArgColumn">,
			argKey.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWDeleteTableByPrimaryIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";
		ResultSet resultSet = null;
		try {$implDb2LUWDeleteTableByPrimaryIndexTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$poptop Table reference BaseClass DefSchemaName$$poptop Table reference BaseClass TableName$PKey argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implDb2LUWDeleteCommaPassArgColumn )$ );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implDb2LUWDeleteTableByPrimaryIndexTryBody">
			Connection cnx = schema.getCnx();
			final String sql = "CALL $sp_delete_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implDb2LUWIndexColumnCommaArgValueVar )$ + " )";
			if( stmtDeleteBy$Suffix$ == null ) {
				stmtDeleteBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implDb2LUWDeleteTableBySuffixBindVar )$
			resultSet = stmtDeleteBy$Suffix$.executeQuery();
			if( resultSet.next() ) {
				int deleteFlag = resultSet.getInt( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 record result set to be returned by delete, not 0 rows" );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindRevision">
			stmtDeleteByPKey.setInt( argIdx++, Buff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindVar"
		>$switch IsNullable yes implDb2LUWDeleteTableBindOptVar
			default implDb2LUWDeleteTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWDeleteTableBindOptBlobVar
			BoolDef implDb2LUWDeleteTableBindOptBoolVar
			EnumDef implDb2LUWDeleteTableBindOptEnumVar
			Int16Def implDb2LUWDeleteTableBindOptInt16Var
			Int32Def implDb2LUWDeleteTableBindOptInt32Var
			Int64Def implDb2LUWDeleteTableBindOptInt64Var
			UInt16Def implDb2LUWDeleteTableBindOptUInt16Var
			UInt32Def implDb2LUWDeleteTableBindOptUInt32Var
			UInt64Def implDb2LUWDeleteTableBindOptUInt64Var
			Id16Gen implDb2LUWDeleteTableBindOptInt16Var
			Id32Gen implDb2LUWDeleteTableBindOptInt32Var
			Id64Gen implDb2LUWDeleteTableBindOptInt64Var
			FloatDef implDb2LUWDeleteTableBindOptFloatVar
			DoubleDef implDb2LUWDeleteTableBindOptDoubleVar
			NumberDef implDb2LUWDeleteTableBindOptNumberVar
			StringDef implDb2LUWDeleteTableBindOptStringVar
			TokenDef implDb2LUWDeleteTableBindOptTokenVar
			NmTokenDef implDb2LUWDeleteTableBindOptNmTokenVar
			NmTokensDef implDb2LUWDeleteTableBindOptNmTokensVar
			TextDef implDb2LUWDeleteTableBindOptTextVar
			DateDef implDb2LUWDeleteTableBindOptDateVar
			TimeDef implDb2LUWDeleteTableBindOptTimeVar
			TimestampDef implDb2LUWDeleteTableBindOptTimestampVar
			TZDateDef implDb2LUWDeleteTableBindOptTZDateVar
			TZTimeDef implDb2LUWDeleteTableBindOptTZTimeVar
			TZTimestampDef implDb2LUWDeleteTableBindOptTZTimestampVar
			UuidDef implDb2LUWDeleteTableBindOptUuidVar
			UuidGen implDb2LUWDeleteTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWDeleteTableBindReqBlobVar
			BoolDef implDb2LUWDeleteTableBindReqBoolVar
			EnumDef implDb2LUWDeleteTableBindReqEnumVar
			Int16Def implDb2LUWDeleteTableBindReqInt16Var
			Int32Def implDb2LUWDeleteTableBindReqInt32Var
			Int64Def implDb2LUWDeleteTableBindReqInt64Var
			UInt16Def implDb2LUWDeleteTableBindReqUInt16Var
			UInt32Def implDb2LUWDeleteTableBindReqUInt32Var
			UInt64Def implDb2LUWDeleteTableBindReqUInt64Var
			Id16Gen implDb2LUWDeleteTableBindReqInt16Var
			Id32Gen implDb2LUWDeleteTableBindReqInt32Var
			Id64Gen implDb2LUWDeleteTableBindReqInt64Var
			FloatDef implDb2LUWDeleteTableBindReqFloatVar
			DoubleDef implDb2LUWDeleteTableBindReqDoubleVar
			NumberDef implDb2LUWDeleteTableBindReqNumberVar
			StringDef implDb2LUWDeleteTableBindReqStringVar
			TokenDef implDb2LUWDeleteTableBindReqTokenVar
			NmTokenDef implDb2LUWDeleteTableBindReqNmTokenVar
			NmTokensDef implDb2LUWDeleteTableBindReqNmTokensVar
			TextDef implDb2LUWDeleteTableBindReqTextVar
			DateDef implDb2LUWDeleteTableBindReqDateVar
			TimeDef implDb2LUWDeleteTableBindReqTimeVar
			TimestampDef implDb2LUWDeleteTableBindReqTimestampVar
			TZDateDef implDb2LUWDeleteTableBindReqTZDateVar
			TZTimeDef implDb2LUWDeleteTableBindReqTZTimeVar
			TZTimestampDef implDb2LUWDeleteTableBindReqTZTimestampVar
			UuidDef implDb2LUWDeleteTableBindReqUuidVar
			UuidGen implDb2LUWDeleteTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqBlobVar">
			stmtDeleteByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqBoolVar">
			if( $Name$ ) {
				stmtDeleteByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtDeleteByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanvValue() ) {
					stmtDeleteByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtDeleteByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqEnumVar">
			stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqInt16Var">
			stmtDeleteByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqInt32Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqInt64Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqUInt16Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqUInt32Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqUInt64Var">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqFloatVar">
			stmtDeleteByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqDoubleVar">
			stmtDeleteByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqNumberVar">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqStringVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqNmTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqNmTokensVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqTextVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqTZDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqTZTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqTZTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindReqUuidVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindVar"
		>$switch IsNullable yes implDb2LUWDeleteTableBySuffixBindOptVar
			default implDb2LUWDeleteTableBySuffixBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWDeleteTableBySuffixBindOptBlobVar
			BoolDef implDb2LUWDeleteTableBySuffixBindOptBoolVar
			EnumDef implDb2LUWDeleteTableBySuffixBindOptEnumVar
			Int16Def implDb2LUWDeleteTableBySuffixBindOptInt16Var
			Int32Def implDb2LUWDeleteTableBySuffixBindOptInt32Var
			Int64Def implDb2LUWDeleteTableBySuffixBindOptInt64Var
			UInt16Def implDb2LUWDeleteTableBySuffixBindOptUInt16Var
			UInt32Def implDb2LUWDeleteTableBySuffixBindOptUInt32Var
			UInt64Def implDb2LUWDeleteTableBySuffixBindOptUInt64Var
			Id16Gen implDb2LUWDeleteTableBySuffixBindOptInt16Var
			Id32Gen implDb2LUWDeleteTableBySuffixBindOptInt32Var
			Id64Gen implDb2LUWDeleteTableBySuffixBindOptInt64Var
			FloatDef implDb2LUWDeleteTableBySuffixBindOptFloatVar
			DoubleDef implDb2LUWDeleteTableBySuffixBindOptDoubleVar
			NumberDef implDb2LUWDeleteTableBySuffixBindOptNumberVar
			StringDef implDb2LUWDeleteTableBySuffixBindOptStringVar
			TokenDef implDb2LUWDeleteTableBySuffixBindOptTokenVar
			NmTokenDef implDb2LUWDeleteTableBySuffixBindOptNmTokenVar
			NmTokensDef implDb2LUWDeleteTableBySuffixBindOptNmTokensVar
			TextDef implDb2LUWDeleteTableBySuffixBindOptTextVar
			DateDef implDb2LUWDeleteTableBySuffixBindOptDateVar
			TimeDef implDb2LUWDeleteTableBySuffixBindOptTimeVar
			TimestampDef implDb2LUWDeleteTableBySuffixBindOptTimestampVar
			TZDateDef implDb2LUWDeleteTableBySuffixBindOptTZDateVar
			TZTimeDef implDb2LUWDeleteTableBySuffixBindOptTZTimeVar
			TZTimestampDef implDb2LUWDeleteTableBySuffixBindOptTZTimestampVar
			UuidDef implDb2LUWDeleteTableBySuffixBindOptUuidVar
			UuidGen implDb2LUWDeleteTableBySuffixBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implDb2LUWDeleteTableBySuffixBindReqBlobVar
			BoolDef implDb2LUWDeleteTableBySuffixBindReqBoolVar
			EnumDef implDb2LUWDeleteTableBySuffixBindReqEnumVar
			Int16Def implDb2LUWDeleteTableBySuffixBindReqInt16Var
			Int32Def implDb2LUWDeleteTableBySuffixBindReqInt32Var
			Int64Def implDb2LUWDeleteTableBySuffixBindReqInt64Var
			UInt16Def implDb2LUWDeleteTableBySuffixBindReqUInt16Var
			UInt32Def implDb2LUWDeleteTableBySuffixBindReqUInt32Var
			UInt64Def implDb2LUWDeleteTableBySuffixBindReqUInt64Var
			Id16Gen implDb2LUWDeleteTableBySuffixBindReqInt16Var
			Id32Gen implDb2LUWDeleteTableBySuffixBindReqInt32Var
			Id64Gen implDb2LUWDeleteTableBySuffixBindReqInt64Var
			FloatDef implDb2LUWDeleteTableBySuffixBindReqFloatVar
			DoubleDef implDb2LUWDeleteTableBySuffixBindReqDoubleVar
			NumberDef implDb2LUWDeleteTableBySuffixBindReqNumberVar
			StringDef implDb2LUWDeleteTableBySuffixBindReqStringVar
			TokenDef implDb2LUWDeleteTableBySuffixBindReqTokenVar
			NmTokenDef implDb2LUWDeleteTableBySuffixBindReqNmTokenVar
			NmTokensDef implDb2LUWDeleteTableBySuffixBindReqNmTokensVar
			TextDef implDb2LUWDeleteTableBySuffixBindReqTextVar
			DateDef implDb2LUWDeleteTableBySuffixBindReqDateVar
			TimeDef implDb2LUWDeleteTableBySuffixBindReqTimeVar
			TimestampDef implDb2LUWDeleteTableBySuffixBindReqTimestampVar
			TZDateDef implDb2LUWDeleteTableBySuffixBindReqTZDateVar
			TZTimeDef implDb2LUWDeleteTableBySuffixBindReqTZTimeVar
			TZTimestampDef implDb2LUWDeleteTableBySuffixBindReqTZTimestampVar
			UuidDef implDb2LUWDeleteTableBySuffixBindReqUuidVar
			UuidGen implDb2LUWDeleteTableBySuffixBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqBlobVar">
			stmtDeleteBy$popto Index Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptBlobVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqBoolVar">
			if( arg$Name$ ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptBoolVar">
			if( arg$Name$ != null ) {
				if( arg$Name$.booleanvValue() ) {
					stmtDeleteBy$popto Index Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtDeleteBy$popto Index Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqEnumVar">
			stmtDeleteBy$popto Index Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptEnumVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqInt16Var">
			stmtDeleteBy$popto Index Suffix$.setShort( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptInt16Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setShort( argIdx++, arg$Name$.shortValue() );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqInt32Var">
			stmtDeleteBy$popto Index Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptInt32Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setInt( argIdx++, arg$Name$.intValue() );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqInt64Var">
			stmtDeleteBy$popto Index Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptInt64Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setLong( argIdx++, arg$Name$.longValue() );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqUInt16Var">
			stmtDeleteBy$popto Index Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptUInt16Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setInt( argIdx++, arg$Name$.intValue() );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqUInt32Var">
			stmtDeleteBy$popto Index Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptUInt32Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setLong( argIdx++, arg$Name$.longValue() );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqUInt64Var">
			stmtDeleteBy$popto Index Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptUInt64Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setBigDecimal( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqFloatVar">
			stmtDeleteBy$popto Index Suffix$.setFloat( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptFloatVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setFloat( argIdx++, arg$Name$.floatValue() );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqDoubleVar">
			stmtDeleteBy$popto Index Suffix$.setDouble( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptDoubleVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setDouble( argIdx++, arg$Name$.doubleValue() );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqNumberVar">
			stmtDeleteBy$popto Index Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptNumberVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setBigDecimal( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqStringVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptStringVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqTokenVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptTokenVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqNmTokenVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptNmTokenVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqNmTokensVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptNmTokensVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqTextVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptTextVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqDateVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptDateVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getDateString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqTimeVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptTimeVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimeString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqTimestampVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptTimestampVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTimestampString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqTZDateVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptTZDateVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZDateString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqTZTimeVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptTZTimeVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimeString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqTZTimestampVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptTZTimestampVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, $SchemaName$Db2LUWSchema.getTZTimestampString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindReqUuidVar">
			stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implDb2LUWDeleteTableBySuffixBindOptUuidVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$popto Index Suffix$.setString( argIdx++, arg$Name$.toString() );
			}
			else {
				stmtDeleteBy$popto Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implCommaColumnArg">,
		$implColumnArg$</GenRule>

	<GenRule GenDef="TableCol" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="Atom" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implColumnArg"
		>$reference Column implColumnArg$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWWhereFragRestrictAllClassCode"
		>$switch BaseHasSubClasses yes implDb2LUWWhereFragDoRestrictAll default empty$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWWhereFragDoRestrictAll">
				+		"WHERE "
				+			"$lower poptop Table reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'"</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTable">
	public $DefSchemaName$$TableName$Buff[] readAll$TableName$( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAll$TableName$";
		ResultSet resultSet = null;
		Statement stmt = null;
		try {$implReadAllTableTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableTryBody">
			Connection cnx = schema.getCnx();
			String sql = "CALL $sp_read_dbtablename_all$( ?, ?, ?, ?, ? )";
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			stmt.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmt.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmt.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmt.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmt.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmt.executeQuery( sql );
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			int idx = 0;
			while( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();
				int idxcol = 1;
$popto Table switch HasClassCode yes implDb2LUWTableColumnFetchClassCode default empty$$popto Table iterate Columns( each implDb2LUWTableColumnFetchColumn )
$				buff.setRequiredRevision( resultSet.getInt( idxcol ) );
				buffList.add( buff );
				idx ++;
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$SchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );</GenRule>

</RuleSet>
