<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="db2luw"
	Name="schema/dbcreate/db2luw/crsp_read_dbtablename.sql"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="SchemaDef" GenDef="Table" Name="dbadminfile_CreateSPReadDbTableName"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="db2luw"
		ExpansionClassName="$dbadminfilename_CreateSPReadDbTableName$"
		ExpansionKeyName="$dbadminfilename_CreateSPReadDbTableName$"
		ExpansionFileName="$dbadminfilename_CreateSPReadDbTableName$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
create or replace procedure $sp_read_dbtablename$($implDb2LUWSPStandardArgs$$reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$ )	\\
dynamic result sets 1	\\
language sql	\\
begin$implDb2LUWSPReadDeclarations$	\\
	begin$switch TableName Cluster empty Tenant empty SecUser empty SecSession empty default implDb2LUWSPReadEnforceSec$$implDb2LUWSPReadTableImplBody$	\\
	end;	\\
end
</GenFile>

	<GenRule GenDef="Index" Name="implDb2LUWSPReadEnforceSec"
		>$poptop Table implDb2LUWSPReadEnforceSec$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPReadEnforceSec"
		>$switch SecScope None empty System empty Cluster implDb2LUWSPReadTableCheckCluster Tenant implDb2LUWSPReadTableCheckTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPReadDeclarations">	\\
	declare permissionFlag integer;	\\
	declare isSystemUser integer;	\\
	declare syscurs cursor with return to client for	\\
		select$implDb2LUWSelectTableColumns$,	\\
			$lower reference BaseClass ClassCode$.revision as revision	\\
		from $lower DbSchemaName$.$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implDb2LUWClassCodeJoinSuperTable default empty$	\\
		where	\\
			$reference PrimaryKeyIndex iterate Columns( first implDb2LUWIndexColumnWhereFragBindVar each implDb2LUWIndexColumnWhereAndFragBindVar )$;	\\
	declare usercurs cursor with return to client for	\\
		select$implDb2LUWSelectTableColumns$,	\\
			$lower reference BaseClass ClassCode$.revision as revision	\\
		from $lower DbSchemaName$.$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implDb2LUWClassCodeJoinSuperTable default empty$	\\
		where	\\
			$reference PrimaryKeyIndex iterate Columns( first implDb2LUWIndexColumnWhereFragBindVar each implDb2LUWIndexColumnWhereAndFragBindVar )$$implDb2LUWReadRestrictSec$;</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPReadTableCheckPermissions"
		>$switch SecScope None empty System empty Cluster implDb2LUWSPReadTableCheckCluster Tenant implDb2LUWSPReadTableCheckTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPReadTableCheckCluster">	\\
		set( permissionFlag ) = ( sp_is_cluster_user( secClusterId,	\\
				'Read$TableName$',	\\
				argAuditUserId ) );	\\
		if( permissionFlag = 0 )	\\
		then	\\
			call raise_application_error( -20002, 'Permission denied -- User not found in cluster SecGroup for Read$TableName$' );	\\
		end if;</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPReadTableCheckTenant">	\\
		set( permissionFlag ) = ( sp_is_tenant_user( secTenantId,	\\
				'Read$TableName$',	\\
				argAuditUserId ) );	\\
		if( permissionFlag = 0 )	\\
		then	\\
			call raise_application_error( -20003, 'Permission denied -- User not found in tenant TSecGroup for Read$TableName$' );	\\
		end if;</GenRule>

	<GenRule GenDef="Table" Name="restrictReadPKeyQuery"
		>$switch HasSuperClassRelation yes restrictReadPKeyQueryByClassCode default restrictBaseReadPKeyQueryByClassCode$</GenRule>

	<GenRule GenDef="Table" Name="restrictBaseReadPKeyQueryByClassCode"
		>$switch IsBaseTable yes restrictReadPKeyQueryByClassCode default empty$</GenRule>

	<GenRule GenDef="Table" Name="restrictReadPKeyQueryByClassCode">	\\
		and $lower reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'</GenRule>

</RuleSet>
