<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="db2luw"
	Name="schema/dbcreate/db2luw/crsp_movedown_dbtablename.sql"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="SchemaDef" GenDef="Table" Name="dbadminfile_CreateSPMoveDownDbTableName"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="db2luw"
		ExpansionClassName="$dbadminfilename_CreateSPMoveDownDbTableName$"
		ExpansionKeyName="$dbadminfilename_CreateSPMoveDownDbTableName$"
		ExpansionFileName="$dbadminfilename_CreateSPMoveDownDbTableName$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
$implDb2LUWMoveDownTableBody$</GenFile>

	<GenRule GenDef="Table" Name="implDb2LUWMoveDownTableBody">
create or replace procedure $sp_movedown_dbtablename$($implDb2LUWSPStandardArgs$$reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$,	\\
	in argRevision integer )	\\
dynamic result sets 1	\\
language sql	\\
begin$declSPOldVars$	\\
	declare permissionFlag integer;	\\
	declare isSystemUser integer;$reference Chain reference Table declDb2LUWSPMoveDownTableContainerVars$$declDb2LUWSPMoveDownTableChainLinkVars$	\\
	declare retcursor cursor with return to client for	\\
		select$implDb2LUWSelectTableColumns$,	\\
			$lower reference BaseClass ClassCode$.revision as revision	\\
		from $lower DbSchemaName$.$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implDb2LUWClassCodeJoinSuperTable default empty$	\\
		where	\\
			$reference PrimaryKeyIndex iterate Columns( first implDb2LUWIndexColumnWhereFragBindVar each implDb2LUWIndexColumnWhereAndFragBindVar )$;	\\
	begin$implDb2LUWSPMoveDownBody$	\\
	end;	\\
end
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownBody"
		>$reference Chain reference Table implDb2LUWSPMoveDownTableFetchContainerKeys$$reference Chain reference Table implDb2LUWSPMoveDownTableLatchContainer$$implDb2LUWLockTables$$implDb2LUWSPMoveDownDbTablenameValidateRevision$$switch SecScope None empty System implDb2LUWSPMoveDownTableCheckSystem Cluster implDb2LUWSPMoveDownTableCheckCluster Tenant implDb2LUWSPMoveDownTableCheckTenant default error$$reference Chain reference Table implDb2LUWSPMoveDownTableChainSelectChainLinks$$reference Chain reference Table implDb2LUWSPMoveDownTableIfNextBegin$$reference Chain reference Table implDb2LUWSPMoveDownTableUpdatePrev$$reference Chain reference Table implDb2LUWSPMoveDownTableUpdateNext$$reference Chain reference Table implDb2LUWSPMoveDownTableUpdateThis$$reference Chain reference Table implDb2LUWSPMoveDownTableUpdateGNext$$reference Chain reference Table implDb2LUWSPMoveDownTableIfNextEnd$$reference Chain reference Table implDb2LUWSPMoveDownTableUnlatchContainer$	\\
		open retcursor;</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownDbTablenameValidateRevision">	\\
		if argRevision != oldRevision	\\
		then	\\
			call raise_application_error( -20002, '$sp_movedown_dbtablename$() Data collision detected' );	\\
		end if;	\\
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableIfNextBegin">	\\
		if( $reference Chain reference NextRel reference FromIndex iterate Columns( first implDb2LUWSPMoveDownTableUpdateNextIfNotNull each empty )$ )	\\
		then</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableIfNextEnd">	\\
		end if;	\\
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateTableAuditColumns4">,	\\
				updatedby = argAuditUserId,	\\
				updatedat = current timestamp</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateTableAuditColumns5">,	\\
					updatedby = argAuditUserId,	\\
					updatedat = current timestamp</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdatePrev">	\\
			if( $reference Chain reference PrevRel reference FromIndex iterate Columns( first implDb2LUWSPMoveDownTableUpdatePrevIfNotNull each empty )$ )	\\
			then$switch ChainTableHasSuperClassRelation yes implDb2LUWSPMoveDownTableUpdatePrevTwoTables default implDb2LUWSPMoveDownTableUpdatePrevOneTable$$switch BaseHasHistory yes implDb2LUWSPMoveDownTableUpdatePrevAuditUpdated default empty$	\\
			end if;</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdatePrevOneTable">	\\
				update $lower DbSchemaName$.$reference Chain reference Table DbTableName$	\\
				set	\\
					revision = revision + 1$reference Chain reference Table switch HasAuditColumns yes implDb2LUWSPMoveDownTableUpdateTableAuditColumns5 default empty$$reference Chain reference NextRel iterate Columns( each implDb2LUWSPMoveDownTableUpdatePrevWithNextCommaKey )$	\\
				where	\\
					$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWherePrevPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndPrevPKeyCol )$;	\\
</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdatePrevWithNextKey"
		>$reference FromCol DbColumnName$ = varnext$reference FromCol StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdatePrevWithNextCommaKey">,	\\
					$implDb2LUWSPMoveDownTableUpdatePrevWithNextKey$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateTableWherePrevPKeyCol"
		>$reference ToCol DbColumnName$ = varprev$reference FromCol StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateTableWhereAndPrevPKeyCol">	\\
					and $implDb2LUWSPMoveDownTableUpdateTableWherePrevPKeyCol$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdatePrevTwoTables">	\\
				update $lower DbSchemaName$.$reference Chain reference Table reference BaseClass DbTableName$	\\
				set	\\
					revision = revision + 1$reference Chain reference Table reference BaseClass switch HasAuditColumns yes implDb2LUWSPMoveDownTableUpdateTableAuditColumns5 default empty$	\\
				where	\\
					$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWherePrevPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndPrevPKeyCol )$;	\\
	\\
				update $lower DbSchemaName$.$reference Chain reference Table DbTableName$	\\
				set	\\
					$reference Chain reference NextRel iterate Columns( first implDb2LUWSPMoveDownTableUpdatePrevWithNextKey each implDb2LUWSPMoveDownTableUpdatePrevWithNextCommaKey )$	\\
				where	\\
					$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWherePrevPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndPrevPKeyCol )$;	\\
</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableUpdatePrevIfNotNull"
		>varprev$StripPrevNextColumnName$ is not null</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdatePrevAuditUpdated">	\\
				call sp_audit_$reference Chain reference Table lower DbTableName$( argAuditClusterId,	\\
					argAuditUserId,	\\
					argAuditSessionId,	\\
					secClusterId,	\\
					secTenantId$reference Chain reference Table switch HasClassCode yes implDb2LUWSPMoveDownTableUpdatePrevAuditPassClassCode default empty$$reference Chain reference PrevRel reference FromIndex iterate Columns( each implDb2LUWSPMoveDownTableAuditUpdatedPrevPassArg )$,	\\
					1 );</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdatePrevAuditPassClassCode">,	\\
					varprevClassCode</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableAuditUpdatedPrevPassArg">,	\\
					varprev$StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateNext">	\\
$switch ChainTableHasSuperClassRelation yes implDb2LUWSPMoveDownTableUpdateNextTwoTables default implDb2LUWSPMoveDownTableUpdateNextOneTable$$switch BaseHasHistory yes implDb2LUWSPMoveDownTableUpdateNextAuditUpdated default empty$	\\
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateNextOneTable">	\\
			update $lower DbSchemaName$.$reference Chain reference Table DbTableName$	\\
			set	\\
				revision = revision + 1$reference Chain reference Table switch HasAuditColumns yes implDb2LUWSPMoveDownTableUpdateTableAuditColumns4 default empty$$reference Chain reference PrevRel iterate Columns( each implDb2LUWSPMoveDownTableUpdateNextWithPrevCommaKey )$$reference Chain reference NextRel iterate Columns( each implDb2LUWSPMoveDownTableUpdateNextWithThisCommaKey )$	\\
			where	\\
				$reference Chain reference NextRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWhereNextPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndNextPKeyCol )$;	\\
</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateNextWithThisKey"
		>$reference FromCol DbColumnName$ = arg$reference FromCol StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateNextWithThisCommaKey">,	\\
				$implDb2LUWSPMoveDownTableUpdateNextWithThisKey$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateNextWithPrevKey"
		>$reference FromCol DbColumnName$ = varprev$reference FromCol StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateNextWithPrevCommaKey">,	\\
				$implDb2LUWSPMoveDownTableUpdateNextWithPrevKey$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateTableWhereNextPKeyCol"
		>$reference ToCol DbColumnName$ = varnext$reference FromCol StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateTableWhereAndNextPKeyCol">	\\
				and $implDb2LUWSPMoveDownTableUpdateTableWhereNextPKeyCol$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateNextTwoTables">	\\
			update $lower DbSchemaName$.$reference Chain reference Table reference BaseClass DbTableName$	\\
			set	\\
				revision = revision + 1$reference Chain reference Table reference BaseClass switch HasAuditColumns yes implDb2LUWSPMoveDownTableUpdateTableAuditColumns4 default empty$	\\
			where	\\
				$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWhereNextPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndNextPKeyCol )$;	\\
	\\
			update $lower DbSchemaName$.$reference Chain reference Table DbTableName$	\\
			set	\\
				$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateNextWithPrevKey each implDb2LUWSPMoveDownTableUpdateNextWithPrevCommaKey )$$reference Chain reference NextRel iterate Columns( each implDb2LUWSPMoveDownTableUpdateNextWithThisCommaKey )$	\\
			where	\\
				$reference Chain reference NextRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWhereNextPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndNextPKeyCol )$;	\\
</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableUpdateNextIfNotNull"
		>varnext$StripPrevNextColumnName$ is not null</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateNextAuditUpdated">	\\
			call sp_audit_$reference Chain reference Table lower DbTableName$( argAuditClusterId,	\\
				argAuditUserId,	\\
				argAuditSessionId,	\\
				secClusterId,	\\
				secTenantId$reference Chain reference Table switch HasClassCode yes implDb2LUWSPMoveDownTableUpdateNextAuditPassClassCode default empty$$reference Chain reference NextRel reference FromIndex iterate Columns( each implDb2LUWSPMoveDownTableAuditUpdatedNextPassArg )$,	\\
				1 );</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateNextAuditPassClassCode">,	\\
				varnextClassCode</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableAuditUpdatedNextPassArg">,	\\
				varnext$StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateThisOneTable">	\\
			update $lower DbSchemaName$.$reference Chain reference Table DbTableName$	\\
			set	\\
				revision = revision + 1$reference Chain reference Table switch HasAuditColumns yes implDb2LUWSPMoveDownTableUpdateTableAuditColumns4 default empty$$reference Chain reference PrevRel iterate Columns( each implDb2LUWSPMoveDownTableUpdateThisPrevWithCommaKey )$$reference Chain reference NextRel iterate Columns( each implDb2LUWSPMoveDownTableUpdateThisNextWithCommaKey )$	\\
			where	\\
				$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWhereThisPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndThisPKeyCol )$;	\\
</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateThisPrevWithKey"
		>$reference FromCol DbColumnName$ = varnext$reference FromCol StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateThisPrevWithCommaKey">,	\\
				$implDb2LUWSPMoveDownTableUpdateThisPrevWithKey$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateThisNextWithKey"
		>$reference FromCol DbColumnName$ = gnext$reference ToCol StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateThisNextWithCommaKey">,	\\
				$implDb2LUWSPMoveDownTableUpdateThisNextWithKey$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateTableWhereThisPKeyCol"
		>$reference ToCol DbColumnName$ = arg$reference FromCol StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateTableWhereAndThisPKeyCol">	\\
				and $implDb2LUWSPMoveDownTableUpdateTableWhereThisPKeyCol$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateThisTwoTables">	\\
			update $lower DbSchemaName$.$reference Chain reference Table reference BaseClass DbTableName$	\\
			set	\\
				revision = revision + 1$reference Chain reference Table reference BaseClass switch HasAuditColumns yes implDb2LUWSPMoveDownTableUpdateTableAuditColumns4 default empty$	\\
			where	\\
				$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWhereThisPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndThisPKeyCol )$;	\\
	\\
			update $lower DbSchemaName$.$reference Chain reference Table DbTableName$	\\
			set	\\
				$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateThisPrevWithKey each implDb2LUWSPMoveDownTableUpdateThisPrevWithCommaKey )$$reference Chain reference NextRel iterate Columns( each implDb2LUWSPMoveDownTableUpdateThisNextWithCommaKey )$	\\
			where	\\
				$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWhereThisPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndThisPKeyCol )$;	\\
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateThisAuditUpdated">	\\
			call sp_audit_$reference Chain reference Table lower DbTableName$( argAuditClusterId,	\\
				argAuditUserId,	\\
				argAuditSessionId,	\\
				secClusterId,	\\
				secTenantId$reference Chain reference Table switch HasClassCode yes implDb2LUWSPMoveDownTableUpdateThisAuditPassClassCode default empty$$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implDb2LUWSPMoveDownTableAuditUpdatedThisPassArg )$,	\\
				1 );</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateThisAuditPassClassCode">,	\\
				oldClassCode</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableAuditUpdatedThisPassArg">,	\\
				arg$Name$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateGNext">	\\
			if( $reference Chain reference NextRel reference FromIndex iterate Columns( first implDb2LUWSPMoveDownTableUpdateGNextIfNotNull each empty )$ )	\\
			then$switch ChainTableHasSuperClassRelation yes implDb2LUWSPMoveDownTableUpdateGNextTwoTables default implDb2LUWSPMoveDownTableUpdateGNextOneTable$$switch BaseHasHistory yes implDb2LUWSPMoveDownTableUpdateGNextAuditUpdated default empty$	\\
			end if;	\\
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateGNextOneTable">	\\
				update $lower DbSchemaName$.$reference Chain reference Table DbTableName$	\\
				set	\\
					revision = revision + 1$reference Chain reference Table switch HasAuditColumns yes implDb2LUWSPMoveDownTableUpdateTableAuditColumns5 default empty$$reference Chain reference PrevRel iterate Columns( each implDb2LUWSPMoveDownTableUpdateGNextWithCommaKey )$	\\
				where	\\
					$reference Chain reference NextRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWhereGNextPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndGNextPKeyCol )$;	\\
</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateGNextWithKey"
		>$reference FromCol DbColumnName$ = arg$reference ToCol ColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateGNextWithCommaKey">,	\\
					$implDb2LUWSPMoveDownTableUpdateGNextWithKey$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateTableWhereGNextPKeyCol"
		>$reference ToCol DbColumnName$ = gnext$reference FromCol StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableUpdateTableWhereAndGNextPKeyCol">	\\
					and $implDb2LUWSPMoveDownTableUpdateTableWhereGNextPKeyCol$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateGNextTwoTables">	\\
				update $lower DbSchemaName$.$reference Chain reference Table reference BaseClass DbTableName$	\\
				set	\\
					revision = revision + 1$reference Chain reference Table reference BaseClass switch HasAuditColumns yes implDb2LUWSPMoveDownTableUpdateTableAuditColumns5 default empty$	\\
				where	\\
					$reference Chain reference NextRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWhereGNextPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndGNextPKeyCol )$;	\\
	\\
				update $lower DbSchemaName$.$reference Chain reference Table DbTableName$	\\
				set	\\
					$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateGNextWithKey each implDb2LUWSPMoveDownTableUpdateGNextWithCommaKey )$	\\
				where	\\
					$reference Chain reference NextRel iterate Columns( first implDb2LUWSPMoveDownTableUpdateTableWhereGNextPKeyCol each implDb2LUWSPMoveDownTableUpdateTableWhereAndGNextPKeyCol )$;	\\
</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableUpdateGNextIfNotNull"
		>gnext$StripPrevNextColumnName$ is not null</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateGNextAuditUpdated">	\\
				call sp_audit_$reference Chain reference Table lower DbTableName$( argAuditClusterId,	\\
					argAuditUserId,	\\
					argAuditSessionId,	\\
					secClusterId,	\\
					secTenantId$reference Chain reference Table switch HasClassCode yes implDb2LUWSPMoveDownTableUpdateGNextAuditPassClassCode default empty$$reference Chain reference NextRel reference FromIndex iterate Columns( each implDb2LUWSPMoveDownTableAuditUpdatedGNextPassArg )$,	\\
					1 );</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateGNextAuditPassClassCode">,	\\
					gnextClassCode</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableAuditUpdatedGNextPassArg">,	\\
					gnext$StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUpdateThis">$switch ChainTableHasSuperClassRelation yes implDb2LUWSPMoveDownTableUpdateThisTwoTables default implDb2LUWSPMoveDownTableUpdateThisOneTable$$switch BaseHasHistory yes implDb2LUWSPMoveDownTableUpdateThisAuditUpdated default empty$	\\
</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWSPMoveDownTableChainLinkVars"
		>$switch HasClassCode yes declDb2LUWSPMoveDownTableChainLinkClassCode default empty$$reference Chain reference PrevRel reference FromIndex iterate Columns( each declDb2LUWSPMoveDownTableChainPrevVar )$$reference Chain reference NextRel reference FromIndex iterate Columns( each declDb2LUWSPMoveDownTableChainNextVar )$$reference Chain reference NextRel reference FromIndex iterate Columns( each declDb2LUWSPMoveDownTableChainGNextVar )$</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWSPMoveDownTableChainLinkClassCode">	\\
	declare varprevClassCode varchar(4);	\\
	declare varnextClassCode varchar(4);	\\
	declare gnextClassCode varchar(4);</GenRule>

	<GenRule GenDef="IndexCol" Name="declDb2LUWSPMoveDownTableChainGNextVar">	\\
	declare gnext$StripPrevNextColumnName$ $reference Column clause_SPColType$;</GenRule>

	<GenRule GenDef="IndexCol" Name="declDb2LUWSPMoveDownTableChainPrevVar">	\\
	declare varprev$StripPrevNextColumnName$ $reference Column clause_SPColType$;</GenRule>

	<GenRule GenDef="IndexCol" Name="declDb2LUWSPMoveDownTableChainNextVar">	\\
	declare varnext$StripPrevNextColumnName$ $reference Column clause_SPColType$;</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectLinks"
		>$reference Chain reference Table implDb2LUWSPMoveDownTableChainSelectChainLinks$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectChainLinks">	\\
		select$switch HasClassCode yes implDb2LUWSPMoveDownTableChainSelectPrevClassCodeComma default empty$$reference Chain reference PrevRel reference FromIndex iterate Columns( each implDb2LUWSPMoveDownTableChainSelectPrevKeyComma )$$switch HasClassCode yes implDb2LUWSPMoveDownTableChainSelectNextClassCodeComma default empty$$reference Chain reference NextRel reference FromIndex iterate Columns( each implDb2LUWSPMoveDownTableChainSelectNextKeyComma )$$switch HasClassCode yes implDb2LUWSPMoveDownTableChainSelectGNextClassCodeComma default empty$$reference Chain reference NextRel reference FromIndex iterate Columns( each implDb2LUWSPMoveDownTableChainSelectGNextKeyComma last implDb2LUWSPMoveDownTableChainSelectGNextKey )$$implDb2LUWSPMoveDownTableChainSelectChainLinksInto$$implDb2LUWSPMoveDownTableChainSelectChainLinksFromWhere$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectChainLinksInto">	\\
		into$switch HasClassCode yes implDb2LUWSPMoveDownTableChainSelectIntoPrevClassCodeComma default empty$$reference Chain reference PrevRel reference FromIndex iterate Columns( each implDb2LUWSPMoveDownTableChainSelectIntoPrevKeyComma )$$switch HasClassCode yes implDb2LUWSPMoveDownTableChainSelectIntoNextClassCodeComma default empty$$reference Chain reference NextRel reference FromIndex iterate Columns( each implDb2LUWSPMoveDownTableChainSelectIntoNextKeyComma )$$switch HasClassCode yes implDb2LUWSPMoveDownTableChainSelectIntoGNextClassCodeComma default empty$$reference Chain reference NextRel reference FromIndex iterate Columns( each implDb2LUWSPMoveDownTableChainSelectIntoGNextKeyComma last implDb2LUWSPMoveDownTableChainSelectIntoGNextKey )$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectChainLinksFromWhere">	\\
		from $lower DbSchemaName$.$reference Chain reference Table DbTableName$ $lower reference Chain reference Table ClassCode$$reference Chain reference Table switch HasSuperClassRelation yes implDb2LUWSPMoveDownTableChainSelectInnerJoinSuper default empty$$implDb2LUWSPMoveDownTableChainSelectOuterJoinLinkTables$	\\
		where	\\
			$reference Chain reference Table reference PrimaryKeyIndex iterate Columns( first implDb2LUWSPMoveDownTableChainSelectWherePKey each implDb2LUWSPMoveDownTableChainSelectWhereAndPKey )$;	\\
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectInnerJoinSuper">	\\
			inner join $lower DbSchemaName$.$reference SuperClassRelation reference ToTable DbTableName$ $lower reference SuperClassRelation reference ToTable ClassCode$ on $reference SuperClassRelation iterate Columns( first implDb2LUWSPMoveDownTableChainSelectOnKeySuper each implDb2LUWSPMoveDownTableChainSelectOnKeyAndSuper )$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOnKeySuper"
		>$lower reference FromCol reference Index reference Table ClassCode$.$reference FromCol DbColumnName$ = $lower popto Relation reference ToTable ClassCode$.$reference ToCol DbColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOnKeyAndSuper">	\\
				and $implDb2LUWSPMoveDownTableChainSelectOnKeySuper$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectWherePKey"
		>$lower poptop Table reference Chain reference Table ClassCode$.$DbColumnName$ = arg$Name$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectWhereAndPKey">	\\
			and $implDb2LUWSPMoveDownTableChainSelectWherePKey$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinLinkTables">	\\
			left outer join $lower DbSchemaName$.$DbTableName$ prv$lower ClassCode$ on	\\
				$reference Chain reference PrevRel iterate Columns( first implDb2LUWSPMoveDownTableChainSelectOJPrevKey each implDb2LUWSPMoveDownTableChainSelectOJAndPrevKey )$$switch HasSuperClassRelation yes implDb2LUWSPMoveDownTableChainSelectOuterJoinPrevSuper default empty$	\\
			left outer join $lower DbSchemaName$.$DbTableName$ nxt$lower ClassCode$ on	\\
				$reference Chain reference NextRel iterate Columns( first implDb2LUWSPMoveDownTableChainSelectOJNextKey each implDb2LUWSPMoveDownTableChainSelectOJAndNextKey )$$switch HasSuperClassRelation yes implDb2LUWSPMoveDownTableChainSelectOuterJoinNextSuper default empty$$switch HasClassCode yes implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextTable default empty$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextTable">	\\
			left outer join $lower DbSchemaName$.$DbTableName$ gnxt$lower ClassCode$ on	\\
				$reference Chain reference NextRel iterate Columns( first implDb2LUWSPMoveDownTableChainSelectOJGNextKey each implDb2LUWSPMoveDownTableChainSelectOJAndGNextKey )$$switch HasSuperClassRelation yes implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextSuper default empty$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextSuper">	\\
			left outer join $lower DbSchemaName$.$reference SuperClassRelation reference ToTable DbTableName$ gnxt$lower reference SuperClassRelation reference ToTable ClassCode$ on $reference SuperClassRelation iterate Columns( first implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextSuperKey each implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextSuperAndKey )$$reference SuperClassRelation reference ToTable switch HasSuperClassRelation yes implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextSuper default empty$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextSuperKey"
		>gnxt$lower reference FromCol reference Index reference Table ClassCode$.$reference FromCol DbColumnName$ = gnxt$lower popto Relation reference ToTable ClassCode$.$reference ToCol DbColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextSuperAndKey">	\\
				and $implDb2LUWSPMoveDownTableChainSelectOuterJoinGNextSuperKey$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinPrevSuper">	\\
			left outer join $lower DbSchemaName$.$reference SuperClassRelation reference ToTable DbTableName$ prv$lower reference SuperClassRelation reference ToTable ClassCode$ on $reference SuperClassRelation iterate Columns( first implDb2LUWSPMoveDownTableChainSelectOuterJoinPrevSuperKey each implDb2LUWSPMoveDownTableChainSelectOuterJoinPrevSuperAndKey )$$reference SuperClassRelation reference ToTable switch HasSuperClassRelation yes implDb2LUWSPMoveDownTableChainSelectOuterJoinPrevSuper default empty$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinPrevSuperKey"
		>prv$lower reference FromCol reference Index reference Table ClassCode$.$reference FromCol DbColumnName$ = prv$lower popto Relation reference ToTable ClassCode$.$reference ToCol DbColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinPrevSuperAndKey">	\\
				and $implDb2LUWSPMoveDownTableChainSelectOuterJoinPrevSuperKey$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinNextSuper">	\\
			left outer join $lower DbSchemaName$.$reference SuperClassRelation reference ToTable DbTableName$ nxt$lower reference SuperClassRelation reference ToTable ClassCode$ on $reference SuperClassRelation iterate Columns( first implDb2LUWSPMoveDownTableChainSelectOuterJoinNextSuperKey each implDb2LUWSPMoveDownTableChainSelectOuterJoinNextSuperAndKey )$$reference SuperClassRelation reference ToTable switch HasSuperClassRelation yes implDb2LUWSPMoveDownTableChainSelectOuterJoinNextSuper default empty$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinNextSuperKey"
		>nxt$lower reference FromCol reference Index reference Table ClassCode$.$reference FromCol DbColumnName$ = nxt$lower popto Relation reference ToTable ClassCode$.$reference ToCol DbColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOuterJoinNextSuperAndKey">	\\
				and $implDb2LUWSPMoveDownTableChainSelectOuterJoinNextSuperKey$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOJGNextKey"
		>gnxt$lower reference ToCol reference Index reference Table ClassCode$.$reference ToCol DbColumnName$ = nxt$lower reference FromCol reference Index reference Table ClassCode$.$reference FromCol DbColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOJAndGNextKey">	\\
				and $implDb2LUWSPMoveDownTableChainSelectOJGNextKey$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOJPrevKey"
		>prv$lower reference ToCol reference Index reference Table ClassCode$.$reference ToCol DbColumnName$ = $lower reference FromCol reference Index reference Table ClassCode$.$reference FromCol DbColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOJAndPrevKey">	\\
				and $implDb2LUWSPMoveDownTableChainSelectOJPrevKey$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOJNextKey"
		>nxt$lower reference ToCol reference Index reference Table ClassCode$.$reference ToCol DbColumnName$ = $lower reference FromCol reference Index reference Table ClassCode$.$reference FromCol DbColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableChainSelectOJAndNextKey">	\\
				and $implDb2LUWSPMoveDownTableChainSelectOJNextKey$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectGNextClassCodeComma">	\\
			gnxt$lower reference BaseClass ClassCode$.classcode as gnxtclasscode,</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectPrevClassCodeComma">	\\
			prv$lower reference BaseClass ClassCode$.classcode as prvclasscode,</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectGNextKeyComma">	\\
			nxt$lower popto Table reference Chain reference Table ClassCode$.$DbColumnName$ as gnxt$DbColumnName$,</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectGNextKey">	\\
			nxt$lower popto Table reference Chain reference Table ClassCode$.$DbColumnName$ as gnxt$DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectPrevKeyComma">	\\
			$lower popto Table reference Chain reference Table ClassCode$.$DbColumnName$ as prv$DbColumnName$,</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectNextClassCodeComma">	\\
			nxt$lower reference Chain reference Table reference BaseClass ClassCode$.classcode as nxtclasscode,</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectNextKey">	\\
			$lower popto Table reference Chain reference Table ClassCode$.$DbColumnName$ as nxt$DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectNextKeyComma"
		>$implDb2LUWSPMoveDownTableChainSelectNextKey$,</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectIntoGNextClassCodeComma">	\\
			gnextClassCode,</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectIntoGNextKeyComma">	\\
			gnext$StripPrevNextColumnName$,</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectIntoGNextKey">	\\
			gnext$StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectIntoPrevClassCodeComma">	\\
			varprevClassCode,</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectIntoPrevKeyComma">	\\
			varprev$StripPrevNextColumnName$,</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableChainSelectIntoNextClassCodeComma">	\\
			varnextClassCode,</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectIntoNextKey">	\\
			varnext$StripPrevNextColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableChainSelectIntoNextKeyComma"
		>$implDb2LUWSPMoveDownTableChainSelectIntoNextKey$,</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableFetchContainerKeys">	\\
		select$reference ContainerRelation iterate Columns( first implDb2LUWSPMoveDownTableFetchContainerKeysColName each implDb2LUWSPMoveDownTableFetchContainerKeysCommaColName )$	\\
		into$reference ContainerRelation iterate Columns( first implDb2LUWSPMoveDownTableFetchContainerKeysIntoVar each implDb2LUWSPMoveDownTableFetchContainerKeysCommaIntoVar )$	\\
		from $lower DbSchemaName$.$reference ContainerRelation reference FromTable DbTableName$	\\
		where$reference ContainerRelation reference FromTable reference PrimaryKeyIndex iterate Columns( first implDb2LUWSPMoveDownTableFetchContainerKeysPassPKey each implDb2LUWSPMoveDownTableFetchContainerKeysAndPassPKey )$;	\\
</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableFetchContainerKeysColName">	\\
			$reference FromCol DbColumnName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableFetchContainerKeysCommaColName"
		>,$implDb2LUWSPMoveDownTableFetchContainerKeysColName$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableFetchContainerKeysIntoVar">	\\
			var$reference FromCol Name$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableFetchContainerKeysCommaIntoVar"
		>,$implDb2LUWSPMoveDownTableFetchContainerKeysIntoVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableFetchContainerKeysPassPKey">	\\
			$DbColumnName$ = arg$Name$</GenRule>

	<GenRule GenDef="IndexCol" Name="implDb2LUWSPMoveDownTableFetchContainerKeysAndPassPKey">	\\
			and $DbColumnName$ = arg$Name$</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWSPMoveDownTableContainerVars"
		>$switch DoesContainerRelationNarrow yes declDb2LUWSPMoveDownTableChaseContainerVars default declDb2LUWSPMoveDownTableActualContainerVars$</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWSPMoveDownTableChaseContainerVars"
		>$reference ContainerRelation reference Narrowed declDb2LUWSPMoveDownTableContainerVars$</GenRule>

	<GenRule GenDef="Relation" Name="declDb2LUWSPMoveDownTableContainerVars"
		>$switch HasNarrowed yes declDb2LUWSPMoveDownTableChaseContainerVars default declDb2LUWSPMoveDownTableActualContainerVars$</GenRule>

	<GenRule GenDef="Relation" Name="declDb2LUWSPMoveDownTableActualContainerVars"
		>$iterate Columns( each declDb2LUWSPMoveDownTableContainerVar )$</GenRule>

	<GenRule GenDef="Relation" Name="declDb2LUWSPMoveDownTableChaseContainerVars"
		>$reference Narrowed declDb2LUWSPMoveDownTableContainerVars$</GenRule>

	<GenRule GenDef="Table" Name="declDb2LUWSPMoveDownTableActualContainerVars"
		>$reference ContainerRelation iterate Columns( each declDb2LUWSPMoveDownTableContainerVar )$</GenRule>

	<GenRule GenDef="RelationCol" Name="declDb2LUWSPMoveDownTableContainerVar">	\\
	declare var$reference FromCol Name$ $reference FromCol clause_SPColType$;</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableLatchContainer"
		>$reference ContainerRelation reference ToTable reference BaseClass implDb2LUWSPMoveDownTableLatchBase$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableLatchBase">	\\
		update $lower DbSchemaName$.$DbTableName$	\\
		set revision = revision + 1	\\
		where	\\
			$popto Relation iterate Columns( first implDb2LUWSPMoveDownTableLatchWhereArg each implDb2LUWSPMoveDownTableLatchWhereAndArg )$;	\\
</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableLatchWhereArg"
		>$reference ToCol DbColumnName$ = var$reference FromCol Name$</GenRule>

	<GenRule GenDef="RelationCol" Name="implDb2LUWSPMoveDownTableLatchWhereAndArg">	\\
			and $implDb2LUWSPMoveDownTableLatchWhereArg$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUnlatchContainer"
		>$reference ContainerRelation reference ToTable reference BaseClass implDb2LUWSPMoveDownTableUnlatchBase$</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableUnlatchBase">	\\
		update $lower DbSchemaName$.$DbTableName$	\\
		set revision = revision - 1	\\
		where	\\
			$popto Relation iterate Columns( first implDb2LUWSPMoveDownTableLatchWhereArg each implDb2LUWSPMoveDownTableLatchWhereAndArg )$;	\\
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableArgSecClusterId">,	\\
		secClusterId</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableArgSecTenantId">,	\\
		secTenantId</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableCheckSystem">	\\
		set( permissionFlag ) = ( sp_is_system_user( argAuditUserId ) );	\\
		if( permissionFlag = 0 )	\\
		then	\\
			call raise_application_error( -20001, 'Permission denied -- only system can update $TableName$ records' );	\\
		end if;	\\
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableCheckCluster">	\\
		set( permissionFlag ) = ( sp_is_cluster_user( arg$poptop Table reference ClusterIdColumn Name$,	\\
				'Update$Name$',	\\
				argAuditUserId ) );	\\
		if( permissionFlag = 0 )	\\
		then	\\
			call raise_application_error( -20002, 'Permission denied -- User not in SecGroup for Update$TableName$' );	\\
		end if;	\\
</GenRule>

	<GenRule GenDef="Table" Name="implDb2LUWSPMoveDownTableCheckTenant">	\\
		set( permissionFlag ) = ( sp_is_tenant_user( arg$poptop Table reference TenantIdColumn Name$,	\\
				'Update$Name$',	\\
				argAuditUserId ) );	\\
		if( permissionFlag = 0 )	\\
		then	\\
			call raise_application_error( -20003, 'Permission denied -- User not in TSecGroup for Update$TableName$' );	\\
		end if;	\\
</GenRule>

</RuleSet>
