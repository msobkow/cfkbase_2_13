<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus+ram"
	Name="libschemaram/schemaram/SchemaRamSchema.hpp"
	Revision="2.13"
	Descr="C++18 Interface for an declementation of an in-memory RAM $SchemaName$ schema.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaRamSchemaHPlus"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$ram"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$ram"
		ExpansionClassName="$SchemaName$RamSchemaHPlus"
		ExpansionKeyName="$SchemaName$RamSchemaHPlus"
		ExpansionFileName="$SchemaName$RamSchema.hpp"
>#pragma once

// Description: C++18 Interface for an declementation of an in-memory RAM $SchemaName$ schema.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;
#include &lt;$lower SchemaName$/$SchemaName$Schema.hpp&gt;
#include &lt;$lower SchemaName$obj/I$SchemaName$ObjPublic.hpp&gt;
#include &lt;$poptop SchemaDef lower SchemaName$saxloader/$poptop SchemaDef SchemaName$SaxLoader.hpp&gt;

namespace $CPlusNamespace$ {

	class $SchemaName$RamSchema
	: public $CPlusNamespace$::$SchemaName$Schema,
	  public virtual $CPlusNamespace$::I$SchemaName$Schema
	{
	protected:
		bool sessConnected = false;
		bool tranOpen = false;$iterate Id16Generators( each declRamNextIdGen empty empty )$$iterate Id32Generators( each declRamNextIdGen empty empty )$$iterate Id64Generators( each declRamNextIdGen empty empty )$

	public:
		static const std::string CLASS_NAME;
$declSchemaRamConstructor$$declRamSchemaConnectionMethods$$declRamSchemaNewSchema$$iterate Id16Generators( each declRamNextIdGenMethod empty empty)$$iterate Id32Generators( each declRamNextIdGenMethod empty empty)$$iterate Id64Generators( each declRamNextIdGenMethod empty empty)$$iterate UuidGenerators( each declRamNextIdGenMethod empty empty )$$declRamSchemaReleasePreparedStatements$$declRamSchemaFileImport$
	};
}
</GenFile>

	<GenRule GenDef="Table" Name="includeIDefSchemaTableTable">
#include &lt;$lower DefSchemaName$/I$DefSchemaName$$TableName$Table.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeDefSchemaTablePKey"
		>$switch HasSuperClassRelation yes empty default reallyIncludeDefSchemaTablePKey$</GenRule>

	<GenRule GenDef="Table" Name="reallyIncludeDefSchemaTablePKey">
#include &lt;$lower DefSchemaName$/$DefSchemaName$$TableName$PKey.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeDefSchemaTableBuff">
#include &lt;$lower DefSchemaName$/$DefSchemaName$$TableName$Buff.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeDefSchemaTableIndexKey"
		>$iterate Index( each includeDefSchemaTableIndexKey empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="includeDefSchemaTableIndexKey"
		>$switch IsPrimaryIndex yes empty default reallyIncludeDefSchemaTableIndexKey$</GenRule>

	<GenRule GenDef="Index" Name="reallyIncludeDefSchemaTableIndexKey">
#include &lt;$lower reference Table DefSchemaName$/$reference Table DefSchemaName$$reference Table TableName$By$Suffix$Key.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeISchemaTableObj">
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$Obj.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeISchemaTableEditObj">
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$EditObj.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeISchemaTableTableObj">
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$TableObj.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeSchemaRamTableHPlus">
#include &lt;$lower SchemaName$ram/$SchemaName$Ram$TableName$Table.hpp&gt;</GenRule>

	<GenRule GenDef="Value" Name="includeSchemaRamTableId16GenHPlus">
#include &lt;$lower SchemaName$ram/$SchemaName$Ram$popto Table TableName$Id16Gen.hpp&gt;</GenRule>

	<GenRule GenDef="Value" Name="includeSchemaRamTableId32GenHPlus">
#include &lt;$lower SchemaName$ram/$SchemaName$Ram$popto Table TableName$Id32Gen.hpp&gt;</GenRule>

	<GenRule GenDef="Value" Name="includeSchemaRamTableId64GenHPlus">
#include &lt;$lower SchemaName$ram/$SchemaName$Ram$popto Table TableName$Id64Gen.hpp&gt;</GenRule>

	<GenRule GenDef="SchemaDef" Name="declRamSchemaReleasePreparedStatements">
	virtual void releasePreparedStatements();</GenRule>

	<GenRule GenDef="SchemaDef" Name="declRamSchemaConnectionMethods">
	virtual bool isConnected();
	virtual bool connect();
	virtual bool connect( const std::string&amp; username, const std::string&amp; password );
	virtual bool connect( const std::string&amp; loginId, const std::string&amp; password, const std::string&amp; clusterName, const std::string&amp; tenantName );
	virtual void disconnect( bool doCommit );
	virtual bool isTransactionOpen();
	virtual bool beginTransaction();
	virtual void commit();
	virtual void rollback();</GenRule>

	<GenRule GenDef="SchemaDef" Name="declRamSchemaFileImport">
	virtual std::string fileImport( $CPlusSecNamespace$::$SecSchemaName$Authorization* Authorization,
		const std::string&amp; fileName,
		const std::string&amp; fileContent );
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id16Gen" Name="declRamNextIdGen">
		int16_t next$Name$Value;</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id32Gen" Name="declRamNextIdGen">
		int32_t next$Name$Value;</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id64Gen" Name="declRamNextIdGen">
		int64_t next$Name$Value;</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaRamConstructor">
	$SchemaName$RamSchema();
	virtual ~$SchemaName$RamSchema();</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id16Gen" Name="declRamNextIdGenMethod">
	virtual int16_t next$Name$();</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id32Gen" Name="declRamNextIdGenMethod">
	virtual int32_t next$Name$();</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id64Gen" Name="declRamNextIdGenMethod">
	virtual int64_t next$Name$();</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="UuidGen" Name="declRamNextIdGenMethod"></GenRule>

	<GenRule GenDef="SchemaDef" Name="declRamSchemaNewSchema">
	virtual $CPlusNamespace$::I$SchemaName$Schema* newSchema();
</GenRule>

</RuleSet>
