<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus+ram"
	Name="libschemaram/SchemaRamTableIdGen.cpp"
	Revision="2.13"
	Descr="C++18 Implementation of a $TableName$ in-memory RAM Id Generator object.">

	<GenFile GenDef="Id16Gen" Name="fileSchemaRamTableId16GenCPlus"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$ram"
		SubPackageName=""
		ExpansionClassName="$SchemaName$Ram$popto Table TableName$Id16GenCPlus"
		ExpansionKeyName="$SchemaName$Ram$popto Table TableName$Id16GenCPlus"
		ExpansionFileName="$SchemaName$Ram$popto Table TableName$Id16Gen.cpp"
>// Description: C++18 Implementation of a $popto Table TableName$ 16-bit in-memory RAM Id Generator object.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;
#include &lt;$lower SchemaName$ram/$SchemaName$Ram$popto Table TableName$Id16Gen.hpp&gt;

using namespace std;

namespace $CPlusNamespace$ {

	const std::string $SchemaName$Ram$popto Table TableName$Id16Gen::CLASS_NAME( "$SchemaName$Ram$popto Table TableName$Id16Gen" );
	const std::string $SchemaName$Ram$popto Table TableName$Id16Gen::S_VALUE( "value" );
$popto Table reference BaseClass reference PrimaryKeyIndex implTableId16GenConstructor$
	int16_t $SchemaName$Ram$popto Table TableName$Id16Gen::getNextId() {
		int16_t retNext = (int16_t)(nextId ++);
		return( retNext );
	}
$popto Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implTableId16GenColumnGetterSetter )$$implTableId16GenSliceIdGetterSetter$$popto Table reference BaseClass reference PrimaryKeyIndex implTableId16GenGetHashCode$$popto Table reference BaseClass reference PrimaryKeyIndex implTableId16GenComparison$$popto Table reference BaseClass reference PrimaryKeyIndex implTableId16GenSet$
}

namespace std {$popto Table reference BaseClass reference PrimaryKeyIndex implStdTableId16GenComparison$
}
</GenFile>

	<GenRule GenDef="Object" Name="implTableId16GenSliceIdGetterSetter">
	int16_t $SchemaName$Ram$popto Table TableName$Id16Gen::getRequiredSliceId() const {
		return( sliceId );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::setRequiredSliceId( int16_t value ) {
		sliceId = value;
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implTableId16GenColumnGetterSetter"
		>$reference Column implTableId16GenColumnGetterSetter$</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenColumnGetterSetter"
		>$switch IsNullable yes implTableId16GenOptGetterSetter default implTableId16GenReqGetterSetter$</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqGetterSetter"
		>$switch BaseModelAtomClass
			BlobDef implTableId16GenReqBlobGetterSetter
			BoolDef implTableId16GenReqBoolGetterSetter
			EnumDef implTableId16GenReqEnumGetterSetter
			Id16Gen implTableId16GenReqInt16GetterSetter
			Id32Gen implTableId16GenReqInt32GetterSetter
			Id64Gen implTableId16GenReqInt64GetterSetter
			Int16Def implTableId16GenReqInt16GetterSetter
			Int32Def implTableId16GenReqInt32GetterSetter
			Int64Def implTableId16GenReqInt64GetterSetter
			UInt16Def implTableId16GenReqUInt16GetterSetter
			UInt32Def implTableId16GenReqUInt32GetterSetter
			UInt64Def implTableId16GenReqUInt64GetterSetter
			FloatDef implTableId16GenReqFloatGetterSetter
			DoubleDef implTableId16GenReqDoubleGetterSetter
			NumberDef implTableId16GenReqNumberGetterSetter
			DateDef implTableId16GenReqDateGetterSetter
			TimeDef implTableId16GenReqTimeGetterSetter
			TimestampDef implTableId16GenReqTimestampGetterSetter
			TZDateDef implTableId16GenReqTZDateGetterSetter
			TZTimeDef implTableId16GenReqTZTimeGetterSetter
			TZTimestampDef implTableId16GenReqTZTimestampGetterSetter
			UuidGen implTableId16GenReqUuidGetterSetter
			UuidDef implTableId16GenReqUuidGetterSetter
			StringDef implTableId16GenReqStringGetterSetter
			TokenDef implTableId16GenReqTokenGetterSetter
			NmTokenDef implTableId16GenReqNmTokenGetterSetter
			NmTokensDef implTableId16GenReqNmTokensGetterSetter
			TextDef implTableId16GenReqTextGetterSetter
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqBlobGetterSetter">
	const std::vector&lt;cflib::BYTE&gt;&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::vector&lt;cflib::BYTE&gt;* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::vector&lt;cflib::BYTE&gt;&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$$switch IsNullable yes declIObjColumnValue default empty$" );
		static const std::string S_ValueLength( "value-&gt;length" );
		if( value.size() > $SchemaName$Ram$popto Table TableName$Id16Gen::$upper Name$_MAX_LEN ) {
			throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
				S_ProcName,
				1,
				S_ValueLength,
				value-&gt;length,
				$SchemaName$Ram$popto Table TableName$Id16Gen::$upper Name$_MAX_LEN );
		}
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::vector&lt;cflib::BYTE&gt;( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqBoolGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const bool* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const bool value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqEnumGetterSetter">
	const $reference DataType CPlusNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $reference DataType CPlusNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const I$reference DataType EffSchemaName$Schema::$reference DataType Name$ value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqInt16GetterSetter">
	const int16_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const int16_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const int16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqInt32GetterSetter">
	const int32_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const int32_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const int32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqInt64GetterSetter">
	const int64_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const int64_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const int64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqUInt16GetterSetter">
	const uint16_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const uint16_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const uint16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqUInt32GetterSetter">
	const uint32_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const uint32_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const uint32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqUInt64GetterSetter">
	const uint64_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const uint64_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const uint64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqFloatGetterSetter">
	const float $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const float* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const float value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqDoubleGetterSetter">
	const double $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const double* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const double value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqNumberGetterSetter">
	const cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const cflib::CFLibGenericBigDecimal&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqDateGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqTimeGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqTimestampGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqTZDateGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqTZTimeGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqTZTimestampGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqUuidGetterSetter">
	const uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const uuid_ptr_t value ) {
		uuid_copy( $lower implColumnAttrOptionality$$Name$, value );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::generate$implColumnAttrOptionality$$Name$() {
		uuid_generate_random( $lower implColumnAttrOptionality$$Name$ );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqStringGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqTokenGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqNmTokenGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqNmTokensGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenReqTextGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptGetterSetter"
		>$switch BaseModelAtomClass
			BlobDef implTableId16GenOptBlobGetterSetter
			BoolDef implTableId16GenOptBoolGetterSetter
			EnumDef implTableId16GenOptEnumGetterSetter
			Id16Gen implTableId16GenOptInt16GetterSetter
			Id32Gen implTableId16GenOptInt32GetterSetter
			Id64Gen implTableId16GenOptInt64GetterSetter
			Int16Def implTableId16GenOptInt16GetterSetter
			Int32Def implTableId16GenOptInt32GetterSetter
			Int64Def implTableId16GenOptInt64GetterSetter
			UInt16Def implTableId16GenOptUInt16GetterSetter
			UInt32Def implTableId16GenOptUInt32GetterSetter
			UInt64Def implTableId16GenOptUInt64GetterSetter
			FloatDef implTableId16GenOptFloatGetterSetter
			DoubleDef implTableId16GenOptDoubleGetterSetter
			NumberDef implTableId16GenOptNumberGetterSetter
			DateDef implTableId16GenOptDateGetterSetter
			TimeDef implTableId16GenOptTimeGetterSetter
			TimestampDef implTableId16GenOptTimestampGetterSetter
			TZDateDef implTableId16GenOptTZDateGetterSetter
			TZTimeDef implTableId16GenOptTZTimeGetterSetter
			TZTimestampDef implTableId16GenOptTZTimestampGetterSetter
			UuidGen implTableId16GenOptUuidGetterSetter
			UuidDef implTableId16GenOptUuidGetterSetter
			StringDef implTableId16GenOptStringGetterSetter
			TokenDef implTableId16GenOptTokenGetterSetter
			NmTokenDef implTableId16GenOptNmTokenGetterSetter
			NmTokensDef implTableId16GenOptNmTokensGetterSetter
			TextDef implTableId16GenOptTextGetterSetter
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptBlobGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::vector&lt;cflib::BYTE&gt;&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::vector&lt;cflib::BYTE&gt;* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::vector&lt;cflib::BYTE&gt;&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );
		static const std::string S_Size( "value-&gt;size()" );
		if( value.size() > $SchemaName$Ram$popto Table TableName$Id16Gen::$upper Name$_MAX_LEN ) {
			throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
				S_ProcName,
				1,
				S_Size,
				value.size(),
				$SchemaName$Ram$popto Table TableName$Id16Gen::$upper Name$_MAX_LEN );
		}
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::vector&lt;cflib::BYTE&gt;( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptBoolGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const bool* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const bool value ) {
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptEnumGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const $reference DataType CPlusNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const $reference DataType CPlusNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const I$reference DataType EffSchemaName$Schema::$reference DataType Name$ value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new I$reference DataType EffSchemaName$Schema::$reference DataType Name$;
		}
		*$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptInt16GetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const int16_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const int16_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const int16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptInt32GetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const int32_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const int32_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const int32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptInt64GetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const int64_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const int64_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const int64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptUInt16GetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const uint16_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const uint16_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const uint16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptUInt32GetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const uint32_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const uint32_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const uint32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptUInt64GetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const uint64_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const uint64_t* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const uint64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptFloatGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const float $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const float* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const float value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptDoubleGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const double $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const double* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const double value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptNumberGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const cflib::CFLibGenericBigDecimal&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );
		static const std::string S_ColumnName( ".$Name$" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		std::string fieldName( CLASS_NAME );
		fieldName.append( S_ColumnName );
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;::coerce( fieldName, value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptDateGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptTimeGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptTimestampGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptTZDateGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptTZTimeGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptTZTimestampGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptUuidGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		for( int i = 0; i &lt; 16; i++ ) {
			if( $lower implColumnAttrOptionality$$Name$[ i ] != 0 ) {
				return( false );
			}
		}
		return( true );
	}

	const uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( is$implColumnAttrOptionality$$Name$Null() ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		if( is$implColumnAttrOptionality$$Name$Null() ) {
			return( NULL );
		}
		else {
			return( $lower implColumnAttrOptionality$$Name$ );
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		for( int i = 0; i &lt; 16; i ++ ) {
			$lower implColumnAttrOptionality$$Name$[i] = 0;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const uuid_ptr_t value ) {
		uuid_copy( $lower implColumnAttrOptionality$$Name$, value );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::generate$implColumnAttrOptionality$$Name$() {
		uuid_generate_random( $lower implColumnAttrOptionality$$Name$ );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptStringGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptTokenGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptNmTokenGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptNmTokensGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId16GenOptTextGetterSetter">
	const bool $SchemaName$Ram$popto Table TableName$Id16Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id16Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id16Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenSet">
$SchemaName$Ram$popto Table TableName$Id16Gen $SchemaName$Ram$popto Table TableName$Id16Gen::operator =( $SchemaName$Ram$popto Table TableName$Id16Gen&amp; src ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implBuffSetCopyCol )$
	// Don't bother copying the id generation value; only the map keys make copies of id generators, so they never use them
	return( *this );
}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenComparison"
		>$implTableId16GenComparisonLessThan$
$implTableId16GenComparisonLessOrEqual$
$implTableId16GenComparisonEqual$
$implTableId16GenComparisonNotEqual$
$implTableId16GenComparisonGreaterOrEqual$
$implTableId16GenComparisonGreaterThan$</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenComparisonLessThan">
	bool $SchemaName$Ram$popto Table TableName$Id16Gen::operator &lt;( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessThanCmpAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenComparisonLessOrEqual">
	bool $SchemaName$Ram$popto Table TableName$Id16Gen::operator &lt;=( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessOrEqualCmpAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenComparisonEqual">
	bool $SchemaName$Ram$popto Table TableName$Id16Gen::operator ==( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implEqualCmpAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenComparisonNotEqual">
	bool $SchemaName$Ram$popto Table TableName$Id16Gen::operator !=( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implNotEqualCmpAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenComparisonGreaterOrEqual">
	bool $SchemaName$Ram$popto Table TableName$Id16Gen::operator &gt;=( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterOrEqualCmpAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenComparisonGreaterThan">
	bool $SchemaName$Ram$popto Table TableName$Id16Gen::operator &gt;( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterThanCmpAttr )$
		return( false );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId16GenComparison">
$implStdTableId16GenComparisonLessThan$
$implStdTableId16GenComparisonLessOrEqual$
$implStdTableId16GenComparisonEqual$
$implStdTableId16GenComparisonNotEqual$
$implStdTableId16GenComparisonGreaterOrEqual$
$implStdTableId16GenComparisonGreaterThan$
</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId16GenComparisonLessThan">
	bool operator &lt;(const  $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessThanCmpLhsAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId16GenComparisonLessOrEqual">
	bool operator &lt;=(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessOrEqualCmpLhsAttr )$
		return( true );
	}</GenRule>


	<GenRule GenDef="Index" Name="implStdTableId16GenComparisonEqual">
	bool operator ==(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implEqualCmpLhsAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId16GenComparisonNotEqual">
	bool operator !=(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implNotEqualCmpLhsAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId16GenComparisonGreaterOrEqual">
	bool operator &gt;=(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterOrEqualCmpLhsAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId16GenComparisonGreaterThan">
	bool operator &gt;(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id16Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterThanCmpLhsAttr )$
		return( false );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenGetHashCode">
	size_t $SchemaName$Ram$popto Table TableName$Id16Gen::hashCode() const {
		size_t hashCode = 0;$iterate Columns( each implGetHashCodeAttr )$
		return( hashCode );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenGetHashCode">
	size_t $SchemaName$Ram$popto Table TableName$Id32Gen::hashCode() const {
		size_t hashCode = 0;$iterate Columns( each implGetHashCodeAttr )$
		return( hashCode );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenGetHashCode">
	size_t $SchemaName$Ram$popto Table TableName$Id64Gen::hashCode() const {
		size_t hashCode = 0;$iterate Columns( each implGetHashCodeAttr )$
		return( hashCode );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId16GenConstructor">
	$SchemaName$Ram$popto Table TableName$Id16Gen::$SchemaName$Ram$popto Table TableName$Id16Gen() {$iterate Columns( each implConstructorInitAttr )$
		sliceId = 0;
		nextId = (int16_t)1;
	}

	$SchemaName$Ram$popto Table TableName$Id16Gen::~$SchemaName$Ram$popto Table TableName$Id16Gen() {$iterate Columns( each implDestructorDestructAttr )$
	}
</GenRule>

	<GenFile GenDef="Id32Gen" Name="fileSchemaRamTableId32GenCPlus"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$reference ManufacturingSchema lower PackageName$ram"
		SubPackageName=""
		ExpansionClassName="$SchemaName$Ram$popto Table TableName$Id32GenCPlus"
		ExpansionKeyName="$SchemaName$Ram$popto Table TableName$Id32GenCPlus"
		ExpansionFileName="$SchemaName$Ram$popto Table TableName$Id32Gen.cpp"
>// Description: C++18 Implementation of a $popto Table TableName$ 32-bit in-memory RAM Id Generator object.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;
#include &lt;$lower SchemaName$ram/$SchemaName$Ram$popto Table TableName$Id32Gen.hpp&gt;

using namespace std;

namespace $CPlusNamespace$ {

	const std::string $SchemaName$Ram$popto Table TableName$Id32Gen::CLASS_NAME( "$SchemaName$Ram$popto Table TableName$Id32Gen" );
	const std::string $SchemaName$Ram$popto Table TableName$Id32Gen::S_VALUE( "value" );
$popto Table reference BaseClass reference PrimaryKeyIndex implTableId32GenConstructor$
	int32_t $SchemaName$Ram$popto Table TableName$Id32Gen::getNextId() {
		int32_t retNext = nextId ++;
		return( retNext );
	}
$popto Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implTableId32GenColumnGetterSetter )$$implTableId32GenSliceIdGetterSetter$$popto Table reference BaseClass reference PrimaryKeyIndex implTableId32GenGetHashCode$$popto Table reference BaseClass reference PrimaryKeyIndex implTableId32GenComparison$$popto Table reference BaseClass reference PrimaryKeyIndex implTableId32GenSet$
}

namespace std {$popto Table reference BaseClass reference PrimaryKeyIndex implStdTableId32GenComparison$
}
</GenFile>

	<GenRule GenDef="Object" Name="implTableId32GenSliceIdGetterSetter">
	int16_t $SchemaName$Ram$popto Table TableName$Id32Gen::getRequiredSliceId() const {
		return( sliceId );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::setRequiredSliceId( int16_t value ) {
		sliceId = value;
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implTableId32GenColumnGetterSetter"
		>$reference Column implTableId32GenColumnGetterSetter$</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenColumnGetterSetter"
		>$switch IsNullable yes implTableId32GenOptGetterSetter default implTableId32GenReqGetterSetter$</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqGetterSetter"
		>$switch BaseModelAtomClass
			BlobDef implTableId32GenReqBlobGetterSetter
			BoolDef implTableId32GenReqBoolGetterSetter
			EnumDef implTableId32GenReqEnumGetterSetter
			Id16Gen implTableId32GenReqInt16GetterSetter
			Id32Gen implTableId32GenReqInt32GetterSetter
			Id64Gen implTableId32GenReqInt64GetterSetter
			Int16Def implTableId32GenReqInt16GetterSetter
			Int32Def implTableId32GenReqInt32GetterSetter
			Int64Def implTableId32GenReqInt64GetterSetter
			UInt16Def implTableId32GenReqUInt16GetterSetter
			UInt32Def implTableId32GenReqUInt32GetterSetter
			UInt64Def implTableId32GenReqUInt64GetterSetter
			FloatDef implTableId32GenReqFloatGetterSetter
			DoubleDef implTableId32GenReqDoubleGetterSetter
			NumberDef implTableId32GenReqNumberGetterSetter
			DateDef implTableId32GenReqDateGetterSetter
			TimeDef implTableId32GenReqTimeGetterSetter
			TimestampDef implTableId32GenReqTimestampGetterSetter
			TZDateDef implTableId32GenReqTZDateGetterSetter
			TZTimeDef implTableId32GenReqTZTimeGetterSetter
			TZTimestampDef implTableId32GenReqTZTimestampGetterSetter
			UuidGen implTableId32GenReqUuidGetterSetter
			UuidDef implTableId32GenReqUuidGetterSetter
			StringDef implTableId32GenReqStringGetterSetter
			TokenDef implTableId32GenReqTokenGetterSetter
			NmTokenDef implTableId32GenReqNmTokenGetterSetter
			NmTokensDef implTableId32GenReqNmTokensGetterSetter
			TextDef implTableId32GenReqTextGetterSetter
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqBlobGetterSetter">
	const std::vector&lt;cflib::BYTE&gt;&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::vector&lt;cflib::BYTE&gt;* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::vector&lt;cflib::BYTE&gt;&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$$switch IsNullable yes declIObjColumnValue default empty$" );
		static const std::string S_ValueLength( "value-&gt;length" );
		if( value.size() > $SchemaName$Ram$popto Table TableName$Id32Gen::$upper Name$_MAX_LEN ) {
			throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
				S_ProcName,
				1,
				S_ValueLength,
				value-&gt;length,
				$SchemaName$Ram$popto Table TableName$Id32Gen::$upper Name$_MAX_LEN );
		}
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::vector&lt;cflib::BYTE&gt;( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqBoolGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::bool* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::bool value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqEnumGetterSetter">
	const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqInt16GetterSetter">
	const int16_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const int16_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const int16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqInt32GetterSetter">
	const int32_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const int32_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const int32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqInt64GetterSetter">
	const int64_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const int64_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const int64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqUInt16GetterSetter">
	const $CPlusNamespace$::uint16_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uint16_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::uint16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqUInt32GetterSetter">
	const $CPlusNamespace$::uint32_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uint32_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::uint32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqUInt64GetterSetter">
	const $CPlusNamespace$::uint64_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uint64_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::uint64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqFloatGetterSetter">
	const $CPlusNamespace$::float $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::float* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::float value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqDoubleGetterSetter">
	const $CPlusNamespace$::double $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::double* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::double value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqNumberGetterSetter">
	const $CPlusNamespace$::cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::cflib::CFLibGenericBigDecimal&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqDateGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqTimeGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqTimestampGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqTZDateGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqTZTimeGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqTZTimestampGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqUuidGetterSetter">
	const $CPlusNamespace$::uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::uuid_ptr_t value ) {
		uuid_copy( $lower implColumnAttrOptionality$$Name$, value );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::generate$implColumnAttrOptionality$$Name$() {
		uuid_generate_random( $lower implColumnAttrOptionality$$Name$ );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqStringGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqTokenGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqNmTokenGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqNmTokensGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenReqTextGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptGetterSetter"
	>$switch BaseModelAtomClass
		BlobDef implTableId32GenOptBlobGetterSetter
		BoolDef implTableId32GenOptBoolGetterSetter
		EnumDef implTableId32GenOptEnumGetterSetter
		Id16Gen implTableId32GenOptInt16GetterSetter
		Id32Gen implTableId32GenOptInt32GetterSetter
		Id64Gen implTableId32GenOptInt64GetterSetter
		Int16Def implTableId32GenOptInt16GetterSetter
		Int32Def implTableId32GenOptInt32GetterSetter
		Int64Def implTableId32GenOptInt64GetterSetter
		UInt16Def implTableId32GenOptUInt16GetterSetter
		UInt32Def implTableId32GenOptUInt32GetterSetter
		UInt64Def implTableId32GenOptUInt64GetterSetter
		FloatDef implTableId32GenOptFloatGetterSetter
		DoubleDef implTableId32GenOptDoubleGetterSetter
		NumberDef implTableId32GenOptNumberGetterSetter
		DateDef implTableId32GenOptDateGetterSetter
		TimeDef implTableId32GenOptTimeGetterSetter
		TimestampDef implTableId32GenOptTimestampGetterSetter
		TZDateDef implTableId32GenOptTZDateGetterSetter
		TZTimeDef implTableId32GenOptTZTimeGetterSetter
		TZTimestampDef implTableId32GenOptTZTimestampGetterSetter
		UuidGen implTableId32GenOptUuidGetterSetter
		UuidDef implTableId32GenOptUuidGetterSetter
		StringDef implTableId32GenOptStringGetterSetter
		TokenDef implTableId32GenOptTokenGetterSetter
		NmTokenDef implTableId32GenOptNmTokenGetterSetter
		NmTokensDef implTableId32GenOptNmTokensGetterSetter
		TextDef implTableId32GenOptTextGetterSetter
		default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptBlobGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::vector&lt;cflib::BYTE&gt;&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::vector&lt;cflib::BYTE&gt;* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::vector&lt;cflib::BYTE&gt;&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );
		static const std::string S_Size( "value-&gt;size()" );
		if( value.size() > $SchemaName$Ram$popto Table TableName$Id32Gen::$upper Name$_MAX_LEN ) {
			throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
				S_ProcName,
				1,
				S_Size,
				value.size(),
				$SchemaName$Ram$popto Table TableName$Id32Gen::$upper Name$_MAX_LEN );
		}
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::vector&lt;cflib::BYTE&gt;( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptBoolGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::bool* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::bool value ) {
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptEnumGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new I$reference DataType EffSchemaName$Schema::$reference DataType Name$;
		}
		*$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptInt16GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const int16_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const int16_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const int16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptInt32GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const int32_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const int32_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const int32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptInt64GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const int64_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const int64_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const int64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptUInt16GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::uint16_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::uint16_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::uint16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptUInt32GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::uint32_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::uint32_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::uint32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptUInt64GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::uint64_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::uint64_t* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::uint64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptFloatGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::float $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::float* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::float value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptDoubleGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::double $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::double* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::double value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptNumberGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const $CPlusNamespace$::cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::cflib::CFLibGenericBigDecimal&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );
		static const std::string S_ColumnName( ".$Name$" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		std::string fieldName( CLASS_NAME );
		fieldName.append( S_ColumnName );
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;::coerce( fieldName, value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptDateGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptTimeGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptTimestampGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptTZDateGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptTZTimeGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptTZTimestampGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptUuidGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		for( int i = 0; i &lt; 16; i++ ) {
			if( $lower implColumnAttrOptionality$$Name$[ i ] != 0 ) {
				return( false );
			}
		}
		return( true );
	}

	const $CPlusNamespace$::uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( is$implColumnAttrOptionality$$Name$Null() ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		if( is$implColumnAttrOptionality$$Name$Null() ) {
			return( NULL );
		}
		else {
			return( $lower implColumnAttrOptionality$$Name$ );
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		for( int i = 0; i &lt; 16; i ++ ) {
			$lower implColumnAttrOptionality$$Name$[i] = 0;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::uuid_ptr_t value ) {
		uuid_copy( $lower implColumnAttrOptionality$$Name$, value );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::generate$implColumnAttrOptionality$$Name$() {
		uuid_generate_random( $lower implColumnAttrOptionality$$Name$ );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptStringGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptTokenGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptNmTokenGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptNmTokensGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId32GenOptTextGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id32Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id32Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id32Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenComparison"
		>$implTableId32GenComparisonLessThan$
$implTableId32GenComparisonLessOrEqual$
$implTableId32GenComparisonEqual$
$implTableId32GenComparisonNotEqual$
$implTableId32GenComparisonGreaterOrEqual$
$implTableId32GenComparisonGreaterThan$</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenComparisonLessThan">
	bool $SchemaName$Ram$popto Table TableName$Id32Gen::operator &lt;( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessThanCmpAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenComparisonLessOrEqual">
	bool $SchemaName$Ram$popto Table TableName$Id32Gen::operator &lt;=( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessOrEqualCmpAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenComparisonEqual">
	bool $SchemaName$Ram$popto Table TableName$Id32Gen::operator ==( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implEqualCmpAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenComparisonNotEqual">
	bool $SchemaName$Ram$popto Table TableName$Id32Gen::operator !=( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implNotEqualCmpAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenComparisonGreaterOrEqual">
	bool $SchemaName$Ram$popto Table TableName$Id32Gen::operator &gt;=( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterOrEqualCmpAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenComparisonGreaterThan">
	bool $SchemaName$Ram$popto Table TableName$Id32Gen::operator &gt;( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterThanCmpAttr )$
		return( false );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId32GenComparison">
$implStdTableId32GenComparisonLessThan$
$implStdTableId32GenComparisonLessOrEqual$
$implStdTableId32GenComparisonEqual$
$implStdTableId32GenComparisonNotEqual$
$implStdTableId32GenComparisonGreaterOrEqual$
$implStdTableId32GenComparisonGreaterThan$
</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId32GenComparisonLessThan">
	bool operator &lt;(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessThanCmpLhsAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId32GenComparisonLessOrEqual">
	bool operator &lt;=(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessOrEqualCmpLhsAttr )$
		return( true );
	}</GenRule>


	<GenRule GenDef="Index" Name="implStdTableId32GenComparisonEqual">
	bool operator ==(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implEqualCmpLhsAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId32GenComparisonNotEqual">
	bool operator !=(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implNotEqualCmpLhsAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId32GenComparisonGreaterOrEqual">
	bool operator &gt;=(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterOrEqualCmpLhsAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId32GenComparisonGreaterThan">
	bool operator &gt;(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id32Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterThanCmpLhsAttr )$
		return( false );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenSet">
	$SchemaName$Ram$popto Table TableName$Id32Gen $SchemaName$Ram$popto Table TableName$Id32Gen::operator =( $SchemaName$Ram$popto Table TableName$Id32Gen&amp; src ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implBuffSetCopyCol )$
		// Don't bother copying the id generation value; only the map keys make copies of id generators, so they never use them
		return( *this );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId32GenConstructor">
	$SchemaName$Ram$popto Table TableName$Id32Gen::$SchemaName$Ram$popto Table TableName$Id32Gen() {$iterate Columns( each implConstructorInitAttr )$
		sliceId = 0;
		nextId = 1;
	}

	$SchemaName$Ram$popto Table TableName$Id32Gen::~$SchemaName$Ram$popto Table TableName$Id32Gen() {$iterate Columns( each implDestructorDestructAttr )$
	}
</GenRule>

	<GenFile GenDef="Id64Gen" Name="fileSchemaRamTableId64GenCPlus"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$reference ManufacturingSchema lower PackageName$ram"
		SubPackageName=""
		ExpansionClassName="$SchemaName$Ram$popto Table TableName$Id64GenCPlus"
		ExpansionKeyName="$SchemaName$Ram$popto Table TableName$Id64GenCPlus"
		ExpansionFileName="$SchemaName$Ram$popto Table TableName$Id64Gen.cpp"
>// Description: C++18 Implementation of a $popto Table TableName$ 64-bit in-memory RAM Id Generator object.

$MssSourceLicense$
#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;
#include &lt;$lower SchemaName$ram/$SchemaName$Ram$popto Table TableName$Id64Gen.hpp&gt;

using namespace std;

namespace $CPlusNamespace$ {

	const std::string $SchemaName$Ram$popto Table TableName$Id64Gen::CLASS_NAME( "$SchemaName$Ram$popto Table TableName$Id64Gen" );
	const std::string $SchemaName$Ram$popto Table TableName$Id64Gen::S_VALUE( "value" );
$popto Table reference BaseClass reference PrimaryKeyIndex implTableId64GenConstructor$
	int64_t $SchemaName$Ram$popto Table TableName$Id64Gen::getNextId() {
		int64_t retNext = nextId ++;
		return( retNext );
	}
$popto Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implTableId64GenColumnGetterSetter )$$implTableId64GenSliceIdGetterSetter$$popto Table reference BaseClass reference PrimaryKeyIndex implTableId64GenGetHashCode$$popto Table reference BaseClass reference PrimaryKeyIndex implTableId64GenComparison$$popto Table reference BaseClass reference PrimaryKeyIndex implTableId64GenSet$
}

namespace std {$popto Table reference BaseClass reference PrimaryKeyIndex implStdTableId64GenComparison$
}
</GenFile>

	<GenRule GenDef="Object" Name="implTableId64GenSliceIdGetterSetter">
	int16_t $SchemaName$Ram$popto Table TableName$Id64Gen::getRequiredSliceId() const {
		return( sliceId );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::setRequiredSliceId( int16_t value ) {
		sliceId = value;
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implTableId64GenColumnGetterSetter"
		>$reference Column implTableId64GenColumnGetterSetter$</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenColumnGetterSetter"
		>$switch IsNullable yes implTableId64GenOptGetterSetter default implTableId64GenReqGetterSetter$</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqGetterSetter"
		>$switch BaseModelAtomClass
			BlobDef implTableId64GenReqBlobGetterSetter
			BoolDef implTableId64GenReqBoolGetterSetter
			EnumDef implTableId64GenReqEnumGetterSetter
			Id16Gen implTableId64GenReqInt16GetterSetter
			Id32Gen implTableId64GenReqInt32GetterSetter
			Id64Gen implTableId64GenReqInt64GetterSetter
			Int16Def implTableId64GenReqInt16GetterSetter
			Int32Def implTableId64GenReqInt32GetterSetter
			Int64Def implTableId64GenReqInt64GetterSetter
			UInt16Def implTableId64GenReqUInt16GetterSetter
			UInt32Def implTableId64GenReqUInt32GetterSetter
			UInt64Def implTableId64GenReqUInt64GetterSetter
			FloatDef implTableId64GenReqFloatGetterSetter
			DoubleDef implTableId64GenReqDoubleGetterSetter
			NumberDef implTableId64GenReqNumberGetterSetter
			DateDef implTableId64GenReqDateGetterSetter
			TimeDef implTableId64GenReqTimeGetterSetter
			TimestampDef implTableId64GenReqTimestampGetterSetter
			TZDateDef implTableId64GenReqTZDateGetterSetter
			TZTimeDef implTableId64GenReqTZTimeGetterSetter
			TZTimestampDef implTableId64GenReqTZTimestampGetterSetter
			UuidGen implTableId64GenReqUuidGetterSetter
			UuidDef implTableId64GenReqUuidGetterSetter
			StringDef implTableId64GenReqStringGetterSetter
			TokenDef implTableId64GenReqTokenGetterSetter
			NmTokenDef implTableId64GenReqNmTokenGetterSetter
			NmTokensDef implTableId64GenReqNmTokensGetterSetter
			TextDef implTableId64GenReqTextGetterSetter
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqBlobGetterSetter">
	const std::vector&lt;cflib::BYTE&gt;&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::vector&lt;cflib::BYTE&gt;* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::vector&lt;cflib::BYTE&gt;&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$$switch IsNullable yes declIObjColumnValue default empty$" );
		static const std::string S_ValueLength( "value-&gt;length" );
		if( value.size() > $SchemaName$Ram$popto Table TableName$Id64Gen::$upper Name$_MAX_LEN ) {
			throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
				S_ProcName,
				1,
				S_ValueLength,
				value-&gt;length,
				$SchemaName$Ram$popto Table TableName$Id64Gen::$upper Name$_MAX_LEN );
		}
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::vector&lt;cflib::BYTE&gt;( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqBoolGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::bool* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::bool value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqEnumGetterSetter">
	const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqInt16GetterSetter">
	const int16_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const int16_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const int16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqInt32GetterSetter">
	const int32_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const int32_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const int32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqInt64GetterSetter">
	const int64_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const int64_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const int64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqUInt16GetterSetter">
	const $CPlusNamespace$::uint16_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uint16_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::uint16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqUInt32GetterSetter">
	const $CPlusNamespace$::uint32_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uint32_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::uint32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqUInt64GetterSetter">
	const $CPlusNamespace$::uint64_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uint64_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::uint64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqFloatGetterSetter">
	const $CPlusNamespace$::float $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::float* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::float value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqDoubleGetterSetter">
	const $CPlusNamespace$::double $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::double* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::double value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqNumberGetterSetter">
	const $CPlusNamespace$::cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::cflib::CFLibGenericBigDecimal&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$switch HasMinValue yes implReqSetterCheckMinValue default empty$$switch HasMaxValue yes implReqSetterCheckMaxValue default empty$
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqDateGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqTimeGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqTimestampGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqTZDateGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqTZTimeGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqTZTimestampGetterSetter">
	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( &amp;$lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::chrono::system_clock::time_point&amp; value ) {
		$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqUuidGetterSetter">
	const $CPlusNamespace$::uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const $CPlusNamespace$::uuid_ptr_t value ) {
		uuid_copy( $lower implColumnAttrOptionality$$Name$, value );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::generate$implColumnAttrOptionality$$Name$() {
		uuid_generate_random( $lower implColumnAttrOptionality$$Name$ );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqStringGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqTokenGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqNmTokenGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqNmTokensGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenReqTextGetterSetter">
	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$() const {
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$" );$implReqSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptGetterSetter"
	>$switch BaseModelAtomClass
		BlobDef implTableId64GenOptBlobGetterSetter
		BoolDef implTableId64GenOptBoolGetterSetter
		EnumDef implTableId64GenOptEnumGetterSetter
		Id16Gen implTableId64GenOptInt16GetterSetter
		Id32Gen implTableId64GenOptInt32GetterSetter
		Id64Gen implTableId64GenOptInt64GetterSetter
		Int16Def implTableId64GenOptInt16GetterSetter
		Int32Def implTableId64GenOptInt32GetterSetter
		Int64Def implTableId64GenOptInt64GetterSetter
		UInt16Def implTableId64GenOptUInt16GetterSetter
		UInt32Def implTableId64GenOptUInt32GetterSetter
		UInt64Def implTableId64GenOptUInt64GetterSetter
		FloatDef implTableId64GenOptFloatGetterSetter
		DoubleDef implTableId64GenOptDoubleGetterSetter
		NumberDef implTableId64GenOptNumberGetterSetter
		DateDef implTableId64GenOptDateGetterSetter
		TimeDef implTableId64GenOptTimeGetterSetter
		TimestampDef implTableId64GenOptTimestampGetterSetter
		TZDateDef implTableId64GenOptTZDateGetterSetter
		TZTimeDef implTableId64GenOptTZTimeGetterSetter
		TZTimestampDef implTableId64GenOptTZTimestampGetterSetter
		UuidGen implTableId64GenOptUuidGetterSetter
		UuidDef implTableId64GenOptUuidGetterSetter
		StringDef implTableId64GenOptStringGetterSetter
		TokenDef implTableId64GenOptTokenGetterSetter
		NmTokenDef implTableId64GenOptNmTokenGetterSetter
		NmTokensDef implTableId64GenOptNmTokensGetterSetter
		TextDef implTableId64GenOptTextGetterSetter
		default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptBlobGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::vector&lt;cflib::BYTE&gt;&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::vector&lt;cflib::BYTE&gt;* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::vector&lt;cflib::BYTE&gt;&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );
		static const std::string S_Size( "value-&gt;size()" );
		if( value.size() > $SchemaName$Ram$popto Table TableName$Id64Gen::$upper Name$_MAX_LEN ) {
			throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
				S_ProcName,
				1,
				S_Size,
				value.size(),
				$SchemaName$Ram$popto Table TableName$Id64Gen::$upper Name$_MAX_LEN );
		}
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::vector&lt;cflib::BYTE&gt;( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptBoolGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::bool* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::bool value ) {
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptEnumGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const $reference DataType CPlusDefNamespace$::I$reference DataType EffSchemaName$Schema::$reference DataType Name$ value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new I$reference DataType EffSchemaName$Schema::$reference DataType Name$;
		}
		*$lower implColumnAttrOptionality$$Name$ = value;
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptInt16GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const int16_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const int16_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const int16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptInt32GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const int32_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const int32_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const int32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptInt64GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const int64_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const int64_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const int64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptUInt16GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::uint16_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::uint16_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::uint16_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptUInt32GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::uint32_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::uint32_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::uint32_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptUInt64GetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::uint64_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::uint64_t* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::uint64_t value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptFloatGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::float $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::float* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::float value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptDoubleGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$.isNull() );
	}

	const $CPlusNamespace$::double $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		return( $lower implColumnAttrOptionality$$Name$.getValue() );
	}

	const $CPlusNamespace$::double* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$.getReference() );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		$lower implColumnAttrOptionality$$Name$.setNull();
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::double value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		$lower implColumnAttrOptionality$$Name$.setValue( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptNumberGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const $CPlusNamespace$::cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::cflib::CFLibGenericBigDecimal&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );
		static const std::string S_ColumnName( ".$Name$" );$switch HasMinValue yes implOptSetterCheckMinValue default empty$$switch HasMaxValue yes implOptSetterCheckMaxValue default empty$
		std::string fieldName( CLASS_NAME );
		fieldName.append( S_ColumnName );
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = cflib::TCFLibBigDecimal&lt;$Digits$,$Precis$&gt;::coerce( fieldName, value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptDateGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptTimeGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptTimestampGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptTZDateGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptTZTimeGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptTZTimestampGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::chrono::system_clock::time_point&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::chrono::system_clock::time_point* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::chrono::system_clock::time_point&amp; value ) {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
		$lower implColumnAttrOptionality$$Name$ = new std::chrono::system_clock::time_point( value );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptUuidGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		for( int i = 0; i &lt; 16; i++ ) {
			if( $lower implColumnAttrOptionality$$Name$[ i ] != 0 ) {
				return( false );
			}
		}
		return( true );
	}

	const $CPlusNamespace$::uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( is$implColumnAttrOptionality$$Name$Null() ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	const $CPlusNamespace$::uuid_ptr_t $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		if( is$implColumnAttrOptionality$$Name$Null() ) {
			return( NULL );
		}
		else {
			return( $lower implColumnAttrOptionality$$Name$ );
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		for( int i = 0; i &lt; 16; i ++ ) {
			$lower implColumnAttrOptionality$$Name$[i] = 0;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const $CPlusNamespace$::uuid_ptr_t value ) {
		uuid_copy( $lower implColumnAttrOptionality$$Name$, value );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::generate$implColumnAttrOptionality$$Name$() {
		uuid_generate_random( $lower implColumnAttrOptionality$$Name$ );
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptStringGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptTokenGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptNmTokenGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptNmTokensGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Value" Name="implTableId64GenOptTextGetterSetter">
	const $CPlusNamespace$::bool $SchemaName$Ram$popto Table TableName$Id64Gen::is$implColumnAttrOptionality$$Name$Null() const {
		return( $lower implColumnAttrOptionality$$Name$ == NULL );
	}

	const std::string&amp; $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Value() const {
		static const std::string S_ProcName( "get$implColumnAttrOptionality$$Name$Value" );
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_VALUE );
		}
		return( *$lower implColumnAttrOptionality$$Name$ );
	}

	const std::string* $SchemaName$Ram$popto Table TableName$Id64Gen::get$implColumnAttrOptionality$$Name$Reference() const {
		return( $lower implColumnAttrOptionality$$Name$ );
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Null() {
		if( $lower implColumnAttrOptionality$$Name$ != NULL ) {
			delete $lower implColumnAttrOptionality$$Name$;
			$lower implColumnAttrOptionality$$Name$ = NULL;
		}
	}

	void $SchemaName$Ram$popto Table TableName$Id64Gen::set$implColumnAttrOptionality$$Name$Value( const std::string&amp; value ) {
		static const std::string S_ProcName( "set$implColumnAttrOptionality$$Name$Value" );$implOptSetterCheckMaxLen$
		if( $lower implColumnAttrOptionality$$Name$ == NULL ) {
			$lower implColumnAttrOptionality$$Name$ = new std::string( value );
		}
		else {
			$lower implColumnAttrOptionality$$Name$-&gt;clear();
			$lower implColumnAttrOptionality$$Name$-&gt;append( value );
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenComparison"
		>$implTableId64GenComparisonLessThan$
$implTableId64GenComparisonLessOrEqual$
$implTableId64GenComparisonEqual$
$implTableId64GenComparisonNotEqual$
$implTableId64GenComparisonGreaterOrEqual$
$implTableId64GenComparisonGreaterThan$</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenComparisonLessThan">
	bool $SchemaName$Ram$popto Table TableName$Id64Gen::operator &lt;( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessThanCmpAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenComparisonLessOrEqual">
	bool $SchemaName$Ram$popto Table TableName$Id64Gen::operator &lt;=( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessOrEqualCmpAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenComparisonEqual">
	bool $SchemaName$Ram$popto Table TableName$Id64Gen::operator ==( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implEqualCmpAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenComparisonNotEqual">
	bool $SchemaName$Ram$popto Table TableName$Id64Gen::operator !=( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implNotEqualCmpAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenComparisonGreaterOrEqual">
	bool $SchemaName$Ram$popto Table TableName$Id64Gen::operator &gt;=( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterOrEqualCmpAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenComparisonGreaterThan">
	bool $SchemaName$Ram$popto Table TableName$Id64Gen::operator &gt;( const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterThanCmpAttr )$
		return( false );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId64GenComparison">
$implStdTableId64GenComparisonLessThan$
$implStdTableId64GenComparisonLessOrEqual$
$implStdTableId64GenComparisonEqual$
$implStdTableId64GenComparisonNotEqual$
$implStdTableId64GenComparisonGreaterOrEqual$
$implStdTableId64GenComparisonGreaterThan$
</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId64GenComparisonLessThan">
	bool operator &lt;(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessThanCmpLhsAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId64GenComparisonLessOrEqual">
	bool operator &lt;=(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implLessOrEqualCmpLhsAttr )$
		return( true );
	}</GenRule>


	<GenRule GenDef="Index" Name="implStdTableId64GenComparisonEqual">
	bool operator ==(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implEqualCmpLhsAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId64GenComparisonNotEqual">
	bool operator !=(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implNotEqualCmpLhsAttr )$
		return( false );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId64GenComparisonGreaterOrEqual">
	bool operator &gt;=(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterOrEqualCmpLhsAttr )$
		return( true );
	}</GenRule>

	<GenRule GenDef="Index" Name="implStdTableId64GenComparisonGreaterThan">
	bool operator &gt;(const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; lhs, const $CPlusNamespace$::$SchemaName$Ram$popto Table TableName$Id64Gen&amp; rhs ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implGreaterThanCmpLhsAttr )$
		return( false );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenSet">
	$SchemaName$Ram$popto Table TableName$Id64Gen $SchemaName$Ram$popto Table TableName$Id64Gen::operator =( $SchemaName$Ram$popto Table TableName$Id64Gen&amp; src ) {$popto Table reference PrimaryKeyIndex iterate Columns( each implBuffSetCopyCol )$
		// Don't bother copying the id generation value; only the map keys make copies of id generators, so they never use them
		return( *this );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implTableId64GenConstructor">
	$SchemaName$Ram$popto Table TableName$Id64Gen::$SchemaName$Ram$popto Table TableName$Id64Gen() {$iterate Columns( each implConstructorInitAttr )$
		sliceId = 0;
		nextId = 1L;
	}

	$SchemaName$Ram$popto Table TableName$Id64Gen::~$SchemaName$Ram$popto Table TableName$Id64Gen() {$iterate Columns( each implDestructorDestructAttr )$
	}
</GenRule>

</RuleSet>
