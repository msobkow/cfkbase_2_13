<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+saxloader+mssql"
	Name="src/SchemaSaxMSSqlLdr/SchemaSaxMSSqlLdr.java"
	Revision="2.13"
	Descr="Java 11 Command Line Interface for Schema SAX SQL Server Loader Parser">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSaxMSSqlLdrJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$SaxMSSqlLdr"
			SourceBundle="java"
			BasePackageName="$reference ManufacturingSchema lower PackageName$saxmssqlloader.src"
			SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$SaxMSSqlLdr"
			ExpansionClassName="$SchemaName$SaxMSSqlLdrJava"
			ExpansionKeyName="$SchemaName$SaxMSSqlLdrJava"
			ExpansionFileName="$SchemaName$SaxMSSqlLdr.java"
>// Description: Java 11 XML SAX Loader CLI persisting as MS SQL Server Developer Edition for $SchemaName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$SaxMSSqlLdr;

import org.apache.log4j.*;
import java.io.File;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.*;

import org.msscf.msscf.cflib.CFLib.*;$iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$importJavaPackageSchemaName$$iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$MSSql.*;
import $lower JavaPackage$.$SchemaName$SaxLoader.*;

public class $SchemaName$SaxMSSqlLdr
	extends $SchemaName$SaxLdr
{
	private static ICFLibMessageLog log = new CFLibConsoleMessageLog();

	// Constructors
$implSchemaSaxMSSqlLdrConstructor$
	// main() entry point
$implSchemaSaxMSSqlLdrMain$
	// Initialize the console log
$implSchemaSaxMSSqlLdrInitConsoleLog$
	// Evaluate remaining arguments
$implSchemaSaxMSSqlLdrEvalRemaining$
}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrConstructor"
		>$implSchemaSaxMSSqlLdrConstructorVoid$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrConstructorVoid">
	public $SchemaName$SaxMSSqlLdr() {
		super( log );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrEvalRemaining">
	public void evaluateRemainingArgs( String[] args, int consumed ) {
		// There are no extra arguments for a database instance
		if( args.length &gt; consumed ) {
			log.message( "$SchemaName$SaxMSSqlLdr.evaluateRemainingArgs() WARNING No extra arguments are expected for a RAM database instance, but "
				+ Integer.toString( args.length - consumed )
				+ " extra arguments were specified.  Extra arguments ignored." );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMain"
		>$implSchemaSaxMSSqlLdrMainPart01$$implSchemaSaxMSSqlLdrMainPart02$$implSchemaSaxMSSqlLdrMainPart03$$implSchemaSaxMSSqlLdrMainPart04$$implSchemaSaxMSSqlLdrMainPart05$$implSchemaSaxMSSqlLdrMainPart06$$implSchemaSaxMSSqlLdrMainPart07$$implSchemaSaxMSSqlLdrMainPart08$$implSchemaSaxMSSqlLdrMainPart09$$implSchemaSaxMSSqlLdrMainPart10$$implSchemaSaxMSSqlLdrMainPart11$$implSchemaSaxMSSqlLdrMainPart12$$implSchemaSaxMSSqlLdrMainPart13$$implSchemaSaxMSSqlLdrMainPart14$$implSchemaSaxMSSqlLdrMainPart15$$implSchemaSaxMSSqlLdrMainPart16$$implSchemaSaxMSSqlLdrMainPart17$$implSchemaSaxMSSqlLdrMainPart18$$implSchemaSaxMSSqlLdrMainPart19$$implSchemaSaxMSSqlLdrMainPart20$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart01">
	public static void main( String args[] ) {
		final String S_ProcName = "$SchemaName$SaxMSSqlLdr.main() ";
		initConsoleLog();
		int numArgs = args.length;
		if( numArgs &gt;= 2 ) {
			String homeDirName = System.getProperty( "HOME" );
			if( homeDirName == null ) {
				homeDirName = System.getProperty( "user.home" );
				if( homeDirName == null ) {
					log.message( S_ProcName + "ERROR: Home directory not set" );
					return;
				}
			}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart02">
			File homeDir = new File( homeDirName );
			if( ! homeDir.exists() ) {
				log.message( S_ProcName + "ERROR: Home directory \\"" + homeDirName + "\\" does not exist" );
				return;
			}
			if( ! homeDir.isDirectory() ) {
				log.message( S_ProcName + "ERROR: Home directory \\"" + homeDirName + "\\" is not a directory" );
				return;
			}

			InetAddress localHost;
			try {
				localHost = InetAddress.getLocalHost();
			}
			catch( UnknownHostException e ) {
				localHost = null;
			}
			if( localHost == null ) {
				log.message( S_ProcName + "ERROR: LocalHost is null" );
				return;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart03">
			String hostName = localHost.getHostName();
			if( ( hostName == null ) || ( hostName.length() &lt;= 0 ) ) {
				log.message( "ERROR: LocalHost.HostName is null or empty" );
				return;
			}

			String userName = System.getProperty( "user.name" );
			if( ( userName == null ) || ( userName.length() &lt;= 0 ) ) {
				log.message( "ERROR: System property \"user.name\" returned a null or empty string" );
				return;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart04">
			boolean fastExit = false;

			// Load or create the client configuration file for resolving device keys
			$SchemaName$ClientConfigurationFile $leadlower SchemaName$ClientConfig = new $SchemaName$ClientConfigurationFile();
			String $leadlower SchemaName$ClientConfigFileName = homeDir.getPath() + File.separator + ".cfdbtestclientrc";
			$leadlower SchemaName$ClientConfig.setFileName( $leadlower SchemaName$ClientConfigFileName );
			File $leadlower SchemaName$ClientConfigFile = new File( $leadlower SchemaName$ClientConfigFileName );
			if( ! $leadlower SchemaName$ClientConfigFile.exists() ) {
				String $leadlower SchemaName$KeyStoreFileName = homeDir.getPath() + File.separator + ".msscfjceks";
				$leadlower SchemaName$ClientConfig.setKeyStore( $leadlower SchemaName$KeyStoreFileName );
				String deviceName = hostName.replaceAll( "[^\\\\w]", "_" ).toLowerCase()
				 	+ "-"
				 	+ userName.replaceAll( "[^\\\\w]", "_" ).toLowerCase();
				$leadlower SchemaName$ClientConfig.setDeviceName( deviceName );
				$leadlower SchemaName$ClientConfig.save();
				log.message( S_ProcName + "INFO: Created $SchemaName$ client configuration file " + $leadlower SchemaName$ClientConfigFileName );
				fastExit = true;
			}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart05">
			if( ! $leadlower SchemaName$ClientConfigFile.isFile() ) {
				log.message( S_ProcName + "ERROR: Proposed client configuration file " + $leadlower SchemaName$ClientConfigFileName + " is not a file." );
				fastExit = true;
			}
			if( ! $leadlower SchemaName$ClientConfigFile.canRead() ) {
				log.message( S_ProcName + "ERROR: Permission denied attempting to read client configuration file " + $leadlower SchemaName$ClientConfigFileName );
				fastExit = true;
			}
			$leadlower SchemaName$ClientConfig.load();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart06">
			// Load MSSql-specific configuration file for connecting to database
			$SchemaName$ConfigurationFile $leadlower SchemaName$Config = new $SchemaName$ConfigurationFile();
			String $leadlower SchemaName$ConfigFileName = homeDir.getPath() + File.separator + ".$leadlower SchemaName$mssqlrc";
			$leadlower SchemaName$Config.setFileName( $leadlower SchemaName$ConfigFileName );
			File $leadlower SchemaName$ConfigFile = new File( $leadlower SchemaName$ConfigFileName );
			if( ! $leadlower SchemaName$ConfigFile.exists() ) {
				$leadlower SchemaName$Config.setDbServer( hostName );
				$leadlower SchemaName$Config.setNetServerPort( 1433 );
				$leadlower SchemaName$Config.setDbDatabase( "$lower DbSchemaName$" );
				$leadlower SchemaName$Config.setDbUserName( userName );
				$leadlower SchemaName$Config.setDbPassword( "ChangeMe!" );
				$leadlower SchemaName$Config.save();
				log.message( S_ProcName + "INFO: Created $SchemaName$ mssql configuration file " + $leadlower SchemaName$ConfigFileName );
				fastExit = true;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart07">
			if( ! $leadlower SchemaName$ConfigFile.isFile() ) {
				log.message( S_ProcName + "ERROR: Proposed mssql configuration file " + $leadlower SchemaName$ConfigFileName + " is not a file." );
				fastExit = true;
			}
			if( ! $leadlower SchemaName$ConfigFile.canRead() ) {
				log.message( S_ProcName + "ERROR: Permission denied attempting to read mssql configuration file " + $leadlower SchemaName$ConfigFileName );
				fastExit = true;
			}
			$leadlower SchemaName$Config.load();

			// If either configuration file was created, return
			if( fastExit ) {
				return;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart08">
			// Configure logging
			Properties sysProps = System.getProperties();
			sysProps.setProperty( "log4j.rootCategory", "WARN" );
			sysProps.setProperty( "org.apache.commons.logging.Log", "org.apache.commons.logging.impl.Log4JLogger" );

			Logger httpLogger = Logger.getLogger( $SchemaName$SaxMSSqlLdr.class );
			httpLogger.setLevel( Level.WARN );

			$SchemaName$SaxLdr cli = new $SchemaName$SaxMSSqlLdr();
			$SchemaName$SaxLoader loader = cli.getSaxLoader();

			applyLoaderOptions( loader, args[0] );
			if( numArgs &gt;= 5 ) {
				cli.evaluateRemainingArgs( args, 5 );
			}
			else {
				cli.evaluateRemainingArgs( args, 2 );
			}

			String useClusterName;
			String useTenantName;
			String useSecUserName;
			if( numArgs &gt;= 5 ) {
				useClusterName = new String( args[2] );
				useTenantName = new String( args[3] );
				useSecUserName = new String( args[4] );
			}
			else {
				useClusterName = new String( "default" );
				useTenantName = new String( "system" );
				useSecUserName = new String( "system" );
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart09">
			I$SchemaName$Schema $leadlower SchemaName$Schema = new $SchemaName$MSSqlSchema();
			$leadlower SchemaName$Schema.setConfigurationFile( $leadlower SchemaName$Config );
			$leadlower SchemaName$Schema.connect( "system", "system", $leadlower SchemaName$Config.getDbUserName(), $leadlower SchemaName$Config.getDbPassword() );
			$leadlower SchemaName$Schema.rollback();
			$leadlower SchemaName$Schema.beginTransaction();

			I$SchemaName$SchemaObj $leadlower SchemaName$SchemaObj = new $SchemaName$SchemaObj();
			$leadlower SchemaName$SchemaObj.setBackingStore( $leadlower SchemaName$Schema );
			String url = args[1];

			loader.setSchemaObj( $leadlower SchemaName$SchemaObj );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart10">
			I$SecSchemaName$ClusterObj $leadlower SchemaName$UseCluster = null;
			if( useClusterName.equals( "default" ) ) {
				List&lt;I$SecSchemaName$SysClusterObj&gt; $leadlower SchemaName$SysClusterList = $leadlower SchemaName$SchemaObj.getSysClusterTableObj().readAllSysCluster();
				Iterator&lt;I$SecSchemaName$SysClusterObj&gt; $leadlower SchemaName$SysClusterIter = $leadlower SchemaName$SysClusterList.iterator();
				I$SecSchemaName$SysClusterObj $leadlower SchemaName$SysClusterObj = null;
				while( $leadlower SchemaName$SysClusterIter.hasNext() ) {
					$leadlower SchemaName$SysClusterObj = $leadlower SchemaName$SysClusterIter.next();
					break;
				}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart11">
				if( $leadlower SchemaName$SysClusterObj == null ) {
					log.message( S_ProcName + "WARN: Could not find a SysCluster instance in the database, defaulting to system cluster" );
					useClusterName = new String( "system" );
					$leadlower SchemaName$UseCluster = $leadlower SchemaName$SchemaObj.getClusterTableObj().readClusterByUDomNameIdx( useClusterName );
					if( $leadlower SchemaName$UseCluster == null ) {
						log.message( S_ProcName + "ERROR: Could not resolve system cluster" );
						fastExit = true;
					}
				}
				else {
					$leadlower SchemaName$UseCluster = $leadlower SchemaName$SysClusterObj.getRequiredContainerCluster();
					if( $leadlower SchemaName$UseCluster == null ) {
						log.message( S_ProcName + "ERROR: Could not resolve SysCluster.RequiredContainerCluster" );
						fastExit = true;
					}
					else {
						useClusterName = $leadlower SchemaName$UseCluster.getRequiredFullDomName();
					}
				}
			}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart12">
			else {
				$leadlower SchemaName$UseCluster = $leadlower SchemaName$SchemaObj.getClusterTableObj().readClusterByUDomNameIdx( useClusterName );
				if( $leadlower SchemaName$UseCluster == null ) {
					log.message( S_ProcName + "ERROR: Could not resolve Cluster \"" + useClusterName + "\"" );
					fastExit = true;
				}
			}

			I$SecSchemaName$TenantObj $leadlower SchemaName$UseTenant = null;
			if( $leadlower SchemaName$UseCluster != null ) {
				$leadlower SchemaName$UseTenant = $leadlower SchemaName$SchemaObj.getTenantTableObj().readTenantByUNameIdx( $leadlower SchemaName$UseCluster.getRequiredId(), useTenantName );
				if( $leadlower SchemaName$UseTenant == null ) {
					log.message( S_ProcName + "ERROR: Could not resolve Tenant \"" + $leadlower SchemaName$UseCluster.getRequiredFullDomName() + "." + useTenantName + "\"" );
					fastExit = true;
				}
			}
			else {
				log.message( S_ProcName + "WARN: Cannot resolve Tenant \"" + useTenantName + "\" without a cluster" );
				fastExit = true;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart13">
			I$SecSchemaName$SecUserObj $leadlower SchemaName$SecUserSystem = $leadlower SchemaName$SchemaObj.getSecUserTableObj().readSecUserByULoginIdx( "system" );
			if( $leadlower SchemaName$SecUserSystem == null ) {
				log.message( S_ProcName + "ERROR: Could not resolve SecUser login \"system\"" );
				fastExit = true;
			}

			I$SecSchemaName$SecUserObj $leadlower SchemaName$UseSecUser = null;
			$leadlower SchemaName$UseSecUser = $leadlower SchemaName$SchemaObj.getSecUserTableObj().readSecUserByULoginIdx( useSecUserName );
			if( $leadlower SchemaName$UseSecUser == null ) {
				log.message( S_ProcName + "ERROR: Could not resolve SecUser login \"" + useSecUserName + "\"" );
				fastExit = true;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart14">
			$leadlower SchemaName$Schema.commit();
			$leadlower SchemaName$Schema.disconnect( false );

			// If any required data could not be resolved, return
			if( fastExit ) {
				return;
			}

			$leadlower SchemaName$Schema.connect( useClusterName, useTenantName, $leadlower SchemaName$Config.getDbUserName(), $leadlower SchemaName$Config.getDbPassword() );

			$leadlower SchemaName$UseCluster = $leadlower SchemaName$SchemaObj.getClusterTableObj().readClusterByUDomNameIdx( useClusterName );
			if( $leadlower SchemaName$UseCluster == null ) {
				log.message( S_ProcName + "ERROR: Could not resolve Cluster \"" + useClusterName + "\"" );
				fastExit = true;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart15">
			if( $leadlower SchemaName$UseCluster != null ) {
				$leadlower SchemaName$UseTenant = $leadlower SchemaName$SchemaObj.getTenantTableObj().readTenantByUNameIdx( $leadlower SchemaName$UseCluster.getRequiredId(), useTenantName );
				if( $leadlower SchemaName$UseTenant == null ) {
					log.message( S_ProcName + "ERROR: Could not resolve Tenant \"" + $leadlower SchemaName$UseCluster.getRequiredFullDomName() + "." + useTenantName + "\"" );
					fastExit = true;
				}
			}
			else {
				log.message( S_ProcName + "WARN: Cannot resolve Tenant \"" + useTenantName + "\" without a Cluster" );
				$leadlower SchemaName$UseTenant = null;
			}

			$leadlower SchemaName$UseSecUser = $leadlower SchemaName$SchemaObj.getSecUserTableObj().readSecUserByULoginIdx( useSecUserName );
			if( $leadlower SchemaName$UseSecUser == null ) {
				log.message( S_ProcName + "ERROR: Could not resolve SecUser login \"" + useSecUserName + "\"" );
				fastExit = true;
			}

			// If any data could not be resolved, rollback, disconnect, and return
			if( fastExit ) {
				$leadlower SchemaName$Schema.rollback();
				$leadlower SchemaName$Schema.disconnect( false );
				return;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart16">
			$leadlower SchemaName$Schema.commit();

			$leadlower SchemaName$Schema.beginTransaction();

			$leadlower SchemaName$SchemaObj.setSecCluster( $leadlower SchemaName$UseCluster );
			$leadlower SchemaName$SchemaObj.setSecTenant( $leadlower SchemaName$UseTenant );
			$leadlower SchemaName$SchemaObj.setSecUser( $leadlower SchemaName$UseSecUser );

</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart17">
			$SecSchemaName$Authorization auth = new $SecSchemaName$Authorization();
			auth.setSecCluster( $leadlower SchemaName$UseCluster );
			auth.setSecTenant( $leadlower SchemaName$UseTenant );
			$leadlower SchemaName$SchemaObj.setAuthorization( auth );

			cli.setClusterName( useClusterName );
			cli.setTenantName( useTenantName );
			cli.setSecUserName( useSecUserName );

			I$SecSchemaName$SecSessionObj $leadlower SchemaName$SecSession = cli.getSecSessionObj();
			$leadlower SchemaName$SchemaObj.setSecSession( $leadlower SchemaName$SecSession );
			auth.setSecSession( $leadlower SchemaName$SecSession );

			loader.setUseCluster( $leadlower SchemaName$UseCluster );
			loader.setUseTenant( $leadlower SchemaName$UseTenant );

			$leadlower SchemaName$Schema.commit();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart18">
			try {
				$leadlower SchemaName$Schema.beginTransaction();
				loader.parseFile( url );
				$leadlower SchemaName$Schema.commit();
				$leadlower SchemaName$SchemaObj.logout();
				$leadlower SchemaName$Schema.disconnect( false );
			}
			catch( Exception e ) {
				log.message( S_ProcName + "EXCEPTION: Could not parse XML file \\"" + url + "\\": " + e.getMessage() );
				e.printStackTrace( System.out );
			}
			catch( Error e ) {
				log.message( S_ProcName + "ERROR: Could not parse XML file \\"" + url + "\\": " + e.getMessage() );
				e.printStackTrace( System.out );
			}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart19">
			finally {
				if( $leadlower SchemaName$Schema.isConnected() ) {
					try {
						$leadlower SchemaName$Schema.rollback();
					}
					catch( Exception e ) {
					}
					catch( Error e ) {
					}
					try {
						$leadlower SchemaName$SchemaObj.logout();
					}
					catch( Exception e ) {
					}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrMainPart20">
					catch( Error e ) {
					}
					try {
						$leadlower SchemaName$Schema.disconnect( false );
					}
					catch( Exception e ) {
					}
					catch( Error e ) {
					}
				}
			}
		}
		else {
			log.message( S_ProcName + "ERROR: Expected at least two argument specifying the loader options and the name of the XML file to parse.  The first argument may be empty." );
		}
	}
</GenRule>


	<GenRule GenDef="SchemaDef" Name="implSchemaSaxMSSqlLdrInitConsoleLog">
	protected static void initConsoleLog() {
//		Layout layout = new PatternLayout(
//				"%d{ISO8601}"		// Start with a timestamp
//			+	" %-5p"				// Include the severity
//			+	" %C.%M"			// pkg.class.method()
//			+	" %F[%L]"			// File[lineNumber]
//			+	": %m\\n" );			// Message text
//		BasicConfigurator.configure( new ConsoleAppender( layout, "System.out" ) );
	}
</GenRule>

</RuleSet>
