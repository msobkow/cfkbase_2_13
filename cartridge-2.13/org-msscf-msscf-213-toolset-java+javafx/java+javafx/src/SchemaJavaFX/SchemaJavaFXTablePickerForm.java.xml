<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
		xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:xs="http://www.w3.org/2001/XMLSchema"
		xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+javafx"
	Name="src/SchemaJavaFXTablePickerForm.java"
	Revision="2.13"
	Descr="Java 11 JavaFX Picker Form for Table">

	<GenFile GenDef="Table" Name="fileSchemaJavaFXTablePickerFormJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$JavaFX"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$javafx.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$JavaFX"
		ExpansionClassName="$SchemaName$JavaFX$TableName$TablePickerFormJava"
		ExpansionKeyName="$SchemaName$JavaFX$TableName$TablePickerFormJava"
		ExpansionFileName="$SchemaName$JavaFX$TableName$PickerForm.java"
>// Description: Java 11 JavaFX Picker Form implementation for $TableName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$JavaFX;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.msscf.msscf.cflib.CFLib.*;
import org.msscf.msscf.cflib.CFLib.JavaFX.*;
import org.apache.commons.codec.binary.Base64;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$

/**
 *	$SchemaName$JavaFX$TableName$PickerForm JavaFX Picker Form implementation
 *	for $TableName$.
 */
public class $SchemaName$JavaFX$TableName$PickerForm
extends CFBorderPane
implements I$SchemaName$JavaFX$TableName$PaneList,
	ICFForm
{
	protected ICFFormManager cfFormManager = null;
	protected CFBorderPane javafxPickerPane = null;
	protected I$SchemaName$JavaFXSchema javafxSchema = null;$switch PageData yes declJavaFXTableListPaneMemberPageCallback default declJavaFXTableListPaneMemberDataCollection$
$implConstructJavaFXTablePickerForm$$implGetSetCFFormManager$$implSchemaJavaFXTablePickerFormForceCancelAndClose$$implGetJavaFXSchema$$implPickerFormGetSetJavaFXFocus$$implJavaFXPickerTableFormGetSetJavaFXDataCollection$$implSetPaneModePickerForm$$implJavaFXTablePickerFormGetSetJavaFXContainer$}
</GenFile>

	<GenRule GenDef="Table" Name="implSchemaJavaFXTablePickerFormForceCancelAndClose">
	public void forceCancelAndClose() {
		if( cfFormManager != null ) {
			if( cfFormManager.getCurrentForm() == this ) {
				cfFormManager.closeCurrentForm();
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implJavaFXPickerTableFormGetSetJavaFXDataCollection">
	public Collection&lt;I$DefSchemaName$$TableName$Obj&gt; getJavaFXDataCollection() {
		I$SchemaName$JavaFX$TableName$PaneList jplPicker = (I$SchemaName$JavaFX$TableName$PaneList)javafxPickerPane;
		Collection&lt;I$DefSchemaName$$TableName$Obj&gt; cltn = jplPicker.getJavaFXDataCollection();
		return( cltn );
	}

	public void setJavaFXDataCollection( Collection&lt;I$DefSchemaName$$TableName$Obj&gt; value ) {
		I$SchemaName$JavaFX$TableName$PaneList jplPicker = (I$SchemaName$JavaFX$TableName$PaneList)javafxPickerPane;
		jplPicker.setJavaFXDataCollection( value );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implJavaFXTablePickerFormGetSetJavaFXContainer">
	public $switch HasContainer yes implISchemaJavaFXTableContainerObjInterface default implISchemaJavaFXTableContainerAnyInterface$ getJavaFXContainer() {
		I$SchemaName$JavaFX$TableName$PaneList jplPicker = (I$SchemaName$JavaFX$TableName$PaneList)javafxPickerPane;
		$switch HasContainer yes implISchemaJavaFXTableContainerObjInterface default implISchemaJavaFXTableContainerAnyInterface$ cnt = jplPicker.getJavaFXContainer();
		return( cnt );
	}

	public void setJavaFXContainer( $switch HasContainer yes implISchemaJavaFXTableContainerObjInterface default implISchemaJavaFXTableContainerAnyInterface$ value ) {
		I$SchemaName$JavaFX$TableName$PaneList jplPicker = (I$SchemaName$JavaFX$TableName$PaneList)javafxPickerPane;
		jplPicker.setJavaFXContainer( value );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implSetPaneModePickerForm">
	public void setPaneMode( CFPane.PaneMode value ) {
		final String S_ProcName = "setPaneMode";
		CFPane.PaneMode oldValue = getPaneMode();
		if( oldValue == value ) {
			return;
		}
		if( value != CFPane.PaneMode.View ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"PickerForms only support PaneMode View" );
		}
		super.setPaneMode( value );
		if( javafxPickerPane != null ) {
			I$DefSchemaName$JavaFX$TableName$PaneCommon jpanelCommon = (I$SchemaName$JavaFX$TableName$PaneCommon)javafxPickerPane;
			jpanelCommon.setPaneMode( value );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implConstructJavaFXTablePickerForm">
	public $SchemaName$JavaFX$TableName$PickerForm( ICFFormManager formManager,
		I$SchemaName$JavaFXSchema argSchema,
		I$DefSchemaName$$TableName$Obj argFocus,
		$switch HasContainer yes implISchemaJavaFXTableContainerObjInterface default implISchemaJavaFXTableContainerAnyInterface$ argContainer$switch PageData yes implConstructJavaFXTableListPanePageCallback default implConstructJavaFXTableListPaneDataCollection$,
		I$DefSchemaName$JavaFX$TableName$Chosen whenChosen )
	{
		super();
		final String S_ProcName = "construct-schema-focus";
		if( formManager == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				"formManager" );
		}
		cfFormManager = formManager;
		if( argSchema == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				"argSchema" );
		}
		if( whenChosen == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				6,
				"whenChosen" );
		}
		// argFocus is optional; focus may be set later during execution as
		// conditions of the runtime change.
		javafxSchema = argSchema;
		javafxPickerPane = argSchema.get$TableName$Factory().newPickerPane( cfFormManager, argFocus, argContainer$switch PageData yes implJavaFXTablePickerFormPassPageCallback default implJavaFXTablePickerFormPassCollection$, whenChosen );
		setJavaFXFocusAs$TableName$( argFocus );$switch PageData yes empty default implJavaFXTablePickerFormSetDataCollection$
		setJavaFXContainer( argContainer );
		setCenter( javafxPickerPane );
		setPaneMode( CFPane.PaneMode.View );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implJavaFXTablePickerFormSetDataCollection">
		setJavaFXDataCollection( argDataCollection );</GenRule>

	<GenRule GenDef="Table" Name="implJavaFXTablePickerFormPassPageCallback"
		>, argPageCallback</GenRule>

	<GenRule GenDef="Table" Name="implJavaFXTablePickerFormPassCollection"
		>, argDataCollection</GenRule>

	<GenRule GenDef="Table" Name="implPickerFormGetSetJavaFXFocus">
	public void setJavaFXFocus( ICFLibAnyObj value ) {
		final String S_ProcName = "setJavaFXFocus";
		if( ( value == null ) || ( value instanceof I$DefSchemaName$$TableName$Obj ) ) {
			super.setJavaFXFocus( value );
		}
		else {
			throw new CFLibUnsupportedClassException( getClass(),
				S_ProcName,
				"value",
				value,
				"I$DefSchemaName$$TableName$Obj" );
		}
		((I$DefSchemaName$JavaFX$TableName$PaneCommon)javafxPickerPane).setJavaFXFocus( (I$DefSchemaName$$TableName$Obj)value );
	}

	public I$DefSchemaName$$TableName$Obj getJavaFXFocusAs$TableName$() {
		return( (I$DefSchemaName$$TableName$Obj)getJavaFXFocus() );
	}

	public void setJavaFXFocusAs$TableName$( I$DefSchemaName$$TableName$Obj value ) {
		setJavaFXFocus( value );
	}
</GenRule>

</RuleSet>
