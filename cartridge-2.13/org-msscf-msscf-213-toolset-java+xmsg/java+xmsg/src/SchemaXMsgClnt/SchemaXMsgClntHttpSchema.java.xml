<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+xmsg"
	Name="src/SchemaXMsgClntHttpSchema.java"
	Revision="2.13"
	Descr="Java 11 XMsg Client Schema HTTP DbIO implementation">

	<GenFile GenDef="SchemaDef" Name="fileSchemaXMsgClntHttpSchemaJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgClnt"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$xmsgclnt.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgClnt"
		ExpansionClassName="$SchemaName$XMsgClntHttpSchemaJava"
		ExpansionKeyName="$SchemaName$XMsgClntHttpSchemaJava"
		ExpansionFileName="$SchemaName$XMsgClntHttpSchema.java"
>// Description: Java 11 XMsg Client HTTP DbIO implementation for $SchemaName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$XMsgClnt;
$importSchemaXMsgClntHttpSchema$
public class $SchemaName$XMsgClntHttpSchema
	extends $SchemaName$XMsgClntSchema
{
	protected String serverURL = "http://localhost/$lower SchemaName$xmsgsrvwar/$SchemaName$XMsgSrvWarRequestXml";
	protected HttpClientContext clientContext = null;
$SchemaXMsgClntHttpSchemaConstruct$$implSchemaXMsgClntHttpSchemaLogAccessors$$SchemaXMsgClntHttpSchemaServerURLAccessors$$SchemaXMsgClntHttpSchemaHandlerAccessors$$SchemaXMsgClntHttpSchemaServerConnect$$SchemaXMsgClntHttpSchemaServerLogout$$SchemaXMsgClntHttpSchemaHandler$
}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="importSchemaXMsgClntHttpSchema">
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;
import java.util.ArrayList;
import java.util.List;

import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

import org.apache.commons.codec.binary.Base64;
import org.apache.http.Consts;
import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;
import org.apache.http.StatusLine;
import org.apache.http.client.CookieStore;
import org.apache.http.client.HttpResponseException;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.protocol.HttpClientContext;
import org.apache.http.entity.ContentType;
import org.apache.http.impl.client.BasicCookieStore;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;

import org.msscf.msscf.cflib.CFLib.*;
import org.msscf.msscf.cflib.CFLib.Tip.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$XMsg.*;
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaXMsgClntHttpSchemaLogAccessors">
	public void setLog( ICFLibMessageLog newlog ) {
		super.setLog( newlog );
		if( cftipClientHandler != null ) {
			if( newlog != cftipClientHandler.getLog() ) {
				cftipClientHandler.setLog( newlog );
			}
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaXMsgClntHttpSchemaConstruct">
	public $SchemaName$XMsgClntHttpSchema() {
		super();
	}

	public $SchemaName$XMsgClntHttpSchema( $SchemaName$SchemaObj handlerSchema ) {
		super( handlerSchema );
	}

	public $SchemaName$XMsgClntHttpSchema( $SchemaName$SchemaObj handlerSchema, $SchemaName$ConfigurationFile conf ) {
		super( handlerSchema, conf );
	}

	public $SchemaName$XMsgClntHttpSchema( $SchemaName$SchemaObj handlerSchema, String argJndiName ) {
		super( handlerSchema, argJndiName );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaXMsgClntHttpSchemaServerURLAccessors">
	public void setServerURL( String value ) {
		final String S_ProcName = "setServerURL";
		if( ( value == null ) || ( value.length() &lt;= 0 ) ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				"value" );
		}
		serverURL = value;
	}

	public String getServerURL() {
		return( serverURL );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaXMsgClntHttpSchemaHandlerAccessors">
	// Overload this to create an instance implementing your sendReceive() processing for CFTip
	public CFTipClientHandler getCFTipClientHandler() {
		if( cftipClientHandler == null ) {
			cftipClientHandler = new ClientHandler();
			cftipClientHandler.setLog( getLog() );
		}
		return( cftipClientHandler );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaXMsgClntHttpSchemaServerConnect">
	public boolean connect( String loginId, String password, String clusterName, String tenantName ) {
		final String S_ProcName = "connect-full";
		CFTipClientHandler clientHandler = getCFTipClientHandler();
		String deviceName = clientHandler.getDeviceName();
		if( clientContext != null ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"clientContext already exists" );
		}
		CookieStore cookieStore = new BasicCookieStore();
		clientContext = HttpClientContext.create();
		clientContext.setCookieStore( cookieStore );

		String rqst = null;
		try {
			clientHandler.requestServerInfo();

			MessageDigest msgDigest = MessageDigest.getInstance( "SHA-512" );
			msgDigest.update( password.getBytes( "UTF-8" ) );
			byte[] hash = msgDigest.digest();
			byte[] encodedHash = Base64.encodeBase64( hash );
			byte[] devEncPWHash = clientHandler.encryptWithDevicePrivateKey( encodedHash );

			clientHandler.initSessionKey();

			rqst = $SchemaName$XMsgSchemaMessageFormatter.formatRqstXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRqstLogIn( "\n\t\t\t",
								loginId,
								deviceName,
								devEncPWHash,
								clusterName,
								tenantName )
				+	"\n"
				+	$SchemaName$XMsgSchemaMessageFormatter.formatRqstXmlPostamble();
		}
		catch( NoSuchAlgorithmException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught NoSuchAlgorithmException - " + e.getMessage(),
				e );
		}
		catch( UnsupportedEncodingException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught UnsupportedEncodingException - " + e.getMessage(),
				e );
		}
		catch( InvalidKeyException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught InvalidKeyException - " + e.getMessage(),
				e );
		}
		catch( NoSuchPaddingException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught NoSuchPaddingException - " + e.getMessage(),
				e );
		}
		catch( IllegalBlockSizeException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught IllegalBlockSizeException - " + e.getMessage(),
				e );
		}
		catch( BadPaddingException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught BadPaddingException - " + e.getMessage(),
				e );
		}
		catch( InvalidKeySpecException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught InvalidKeySpecException - " + e.getMessage(),
				e );
		}
		catch( RuntimeException e ) {
			clientContext = null;
			throw e;
		}
		try {
			cftipClientHandler.issueLoginRequest( rqst );
		}
		catch( InvalidAlgorithmParameterException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught InvalidAlgorithmParameterException - " + e.getMessage(),
				e );
		}
		catch( BadPaddingException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught BadPaddingException - " + e.getMessage(),
				e );
		}
		catch( IllegalBlockSizeException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught IllegalBlockSizeException - " + e.getMessage(),
				e );
		}
		catch( InvalidKeyException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught InvalidKeyException - " + e.getMessage(),
				e );
		}
		catch( NoSuchAlgorithmException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught NoSuchAlgorithmException - " + e.getMessage(),
				e );
		}
		catch( NoSuchPaddingException e ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught NoSuchPaddingException - " + e.getMessage(),
				e );
		}
		catch( RuntimeException e ) {
			clientContext = null;
			throw e;
		}
		// The response handler sets up the authorization
		ICFTipResponseHandler responseHandler = cftipClientHandler.getResponseHandler();
		RuntimeException exceptionRaised = responseHandler.getExceptionRaised();
		if( exceptionRaised != null ) {
			clientContext = null;
			throw exceptionRaised;
		}
		// If we got a response instead of an exception, we succeeded at logging in.
		return( true );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaXMsgClntHttpSchemaServerLogout">
	public void logout( $SecSchemaName$Authorization auth ) {
		final String S_ProcName = "logout";
		if( ( clientContext == null ) || ( auth == null ) || ( null == auth.getSecSessionId() ) ) {
			clientContext = null;
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Not authorized/connected" );
		}
		String rqst = $SchemaName$XMsgSchemaMessageFormatter.formatRqstXmlPreamble() + "\n"
			+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRqstLogOut( "\n\t\t\t",
							auth.getSecSessionId() )
			+	"\n"
			+	$SchemaName$XMsgSchemaMessageFormatter.formatRqstXmlPostamble();
		try {
			cftipClientHandler.issueAppRequest( rqst );
		}
		catch( BadPaddingException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught BadPaddingException - " + e.getMessage(),
				e );
		}
		catch( IllegalBlockSizeException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught IllegalBlockSizeException - " + e.getMessage(),
				e );
		}
		catch( InvalidKeyException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught InvalidKeyException - " + e.getMessage(),
				e );
		}
		catch( NoSuchAlgorithmException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught NoSuchAlgorithmException - " + e.getMessage(),
				e );
		}
		catch( InvalidAlgorithmParameterException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught InvalidAlgorithmParameterException - " + e.getMessage(),
				e );
		}
		catch( NoSuchPaddingException e ) {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Caught NoSuchPaddingException - " + e.getMessage(),
				e );
		}
		finally {
			clientContext = null;
		}
		ICFTipResponseHandler responseHandler = cftipClientHandler.getResponseHandler();
		RuntimeException exceptionRaised = responseHandler.getExceptionRaised();
		if( exceptionRaised != null ) {
			throw exceptionRaised;
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaXMsgClntHttpSchemaHandler">
	public class ClientHandler
	extends CFTipClientHandler
	{
		public ClientHandler() {
			super();
		}

		public ClientHandler( ICFLibMessageLog logger ) {
			super( logger );
		}
$SchemaXMsgClntHttpSchemaHandlerSendReceive$
}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaXMsgClntHttpSchemaHandlerSendReceive">
		public String sendReceive( String value ) {
			final String S_ProcName = "sendReceive";

			if( ( value == null ) || ( value.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					1,
					"value" );
			}

			if( clientContext == null ) {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"clientContext must be initialized by invoking connect() with full parameters first" );
			}
			String rspn = null;
			CloseableHttpClient httpClient = null;
			CloseableHttpResponse httpResponse = null;
			try {
				// Prepare to POST the form to the server URL
				List&lt;NameValuePair&gt; formParams = new ArrayList&lt;NameValuePair&gt;();
				formParams.add( new BasicNameValuePair( "MessageBody", value ) );
				UrlEncodedFormEntity entity = new UrlEncodedFormEntity( formParams, Consts.UTF_8 );
				HttpPost httpPost = new HttpPost( getServerURL() );
				httpPost.setEntity( entity );
				// POST the form and analyze the response validity
				httpClient = HttpClients.createDefault();
				httpResponse = httpClient.execute( httpPost, clientContext );
				StatusLine statusLine = httpResponse.getStatusLine();
				if( statusLine.getStatusCode() &gt;= 300 ) {
					throw new HttpResponseException( statusLine.getStatusCode(),
						statusLine.getReasonPhrase() );
				}
				HttpEntity responseEntity = httpResponse.getEntity();
				if( responseEntity == null ) {
					throw new CFLibNullArgumentException( getClass(),
						S_ProcName,
						0,
						"responseEntity" );
				}
				// Read the response into a string
				ContentType contentType = ContentType.getOrDefault( responseEntity );
				Charset charSet = contentType.getCharset();
				Reader reader = new InputStreamReader( responseEntity.getContent(), charSet );
				StringBuffer buff = new StringBuffer();
				char ca[] = new char[1];
				int bytesRead = reader.read( ca );
				while( bytesRead == 1 ) {
					buff.append( ca[0] );
					bytesRead = reader.read( ca );
				}
				rspn = buff.toString();
			}
			catch( Exception e ) {
				rspn = null;
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"EXCEPTION processing HTTP POST -- " + e.getMessage(),
					e );
			}
			catch( Error e ) {
				rspn = null;
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"ERROR processing HTTP POST -- " + e.getMessage(),
					e );
			}
			finally {
				if( httpResponse != null ) {
					try {
						httpResponse.close();
					}
					catch (IOException e) {
					}
					httpResponse = null;
				}
				if( httpClient != null ) {
					try {
						httpClient.close();
					}
					catch (IOException e) {
					}
					httpClient = null;
				}
			}
			return( rspn );
		}
</GenRule>

</RuleSet>
