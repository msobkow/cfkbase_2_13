<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+xmsg"
	Name="src/SchemaXMsg/SchemaXMsgRqstTableUpdate.java"
	Revision="2.13"
	Descr="Java 11 XML SAX Element  for Table">

	<GenFile GenDef="Table" Name="fileSchemaXMsgRqstTableUpdateJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$xmsgrqst.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		ExpansionClassName="$SchemaName$XMsgRqst$TableName$UpdateJava"
		ExpansionKeyName="$SchemaName$XMsgRqst$TableName$UpdateJava"
		ExpansionFileName="$SchemaName$XMsgRqst$TableName$Update.java">
// Description: Java 11 XML Message SAX Response Record Element  for $TableName$

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$XMsgRqst;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.xml.sax.*;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$XMsg.*;

/*
 *	$SchemaName$XMsgRqst$TableName$Update XML SAX Element  implementation
 *	for $TableName$.
 */
public class $SchemaName$XMsgRqst$TableName$Update
	extends CFLibXmlCoreElementHandler
{$implConstructXMsgRqstTableUpdate$$implRqstTableUpdateStartElement$$implRqstTableUpdateEndElement$}
</GenFile>

	<GenRule GenDef="Table" Name="implConstructXMsgRqstTableUpdate">
	public $SchemaName$XMsgRqst$TableName$Update( $SchemaName$XMsgRqst xmsgRqst ) {
		super( xmsgRqst );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateStartElement">
	public void startElement(
		String		uri,
		String		localName,
		String		qName,
		Attributes	attrs )
	throws SAXException
	{
		$SchemaName$XMsgSchemaMessageFormatter schemaFormatter = null;
		try {
			// Common XML Attributes
			String	attrId = null;
			String	attrRevision = null;$implRqstTableUpdateDeclAttrs$
			// Attribute Extraction
			String	attrLocalName;
			int		numAttrs;
			int		idxAttr;
			final String S_ProcName = "startElement";
			final String S_LocalName = "LocalName";

			assert qName.equals( "Rqst$TableName$Update" );
$implRqstTableUpdateRetrieveSchemaObj$$implRqstTableUpdateExtractAttrs$$implRqstTableUpdateCheckRequiredAttrs$$implRqstTableUpdateGetContext$$implRqstTableUpdateConsPKey$$implRqstTableUpdateConvertPKeyAttributes$$implRqstTableUpdateReadAndBeginEdit$$implRqstTableUpdateConvertDataAttributes$$implRqstTableUpdateDoUpdate$
		}$implRqstTableUpdateStartElementCatchBlock$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateStartElementCatchBlock">
		catch( RuntimeException e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch( Error e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateConsPKey">
			// Instantiate a PKey buffer for the parsed information
			$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey pkey = ((I$SchemaName$Schema)schemaObj.getBackingStore()).getFactory$reference BaseClass TableName$().newPKey();
</GenRule>


	<GenRule GenDef="Table" Name="implRqstTableUpdateReadAndBeginEdit">
			// Read the instance
			I$SchemaName$$TableName$Obj origBuff = ((I$SchemaName$$TableName$Obj)schemaObj.get$TableName$TableObj().read$TableName$( pkey ));
			if( origBuff == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"get$TableName$TableObj().read$TableName$()" );
			}
			else {
				// Edit the instance
				I$SchemaName$$TableName$EditObj editBuff = (I$SchemaName$$TableName$EditObj)origBuff.beginEdit();
				$DefSchemaName$$TableName$Buff dataBuff = editBuff.get$TableName$Buff();</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateDoUpdate">
				//	Attempt the update
				editBuff.update();
				editBuff = null;
				String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
					+	"\t" + $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnUpdated( "\n\t\t\t", origBuff.get$TableName$Buff() )
					+	"\n"
					+	schemaFormatter.formatRspnXmlPostamble();
				(($SchemaName$XMsgRqst)getParser()).appendResponse( response );
			}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateDeclPKeyAttrs">
			// Primary Key Attributes for Constant Enum support$switch HasSuperClassRelation yes implRqstTableUpdateDeclPKeyInhAttrs default implRqstTableUpdateDeclPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateDeclPKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableUpdateDeclNonIdPKeyAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateDeclPKeyInhAttrs"
		>$reference SuperClassRelation reference ToTable implRqstTableUpdateDeclPKeyDecisionAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateDeclPKeyDecisionAttrs"
		>$switch HasSuperClassRelation yes implRqstTableUpdateDeclPKeyInhAttrs default implRqstTableUpdateDeclPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableUpdateDeclNonIdPKeyAttr"
		>$switch Name Id empty default implRqstTableUpdateDeclEmitPKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableUpdateDeclEmitPKeyAttr">
			String attr$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateEndElement">
	public void endElement(
		String		uri,
		String		localName,
		String		qName )
	throws SAXException
	{
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateRetrieveSchemaObj">
			$SchemaName$XMsgRqst xmsgRqst = ($SchemaName$XMsgRqst)getParser();
			if( xmsgRqst == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser()" );
			}

			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();

			I$SchemaName$SchemaObj schemaObj = xmsgRqst.getSchemaObj();
			if( schemaObj == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser().getSchemaObj()" );
			}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateDeclAttrs"
		>$switch HasSuperClassRelation yes implRqstTableUpdateDeclAttrsSuper default implRqstTableUpdateDeclAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateDeclAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableUpdateDeclAttrs$
			// $TableName$ Attributes$iterate Columns( each implRqstTableUpdateDeclDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateDeclAttrsBase">
			// $TableName$ Attributes$reference PrimaryKeyIndex iterate Columns( each implRqstTableUpdateDeclNonIdAttr empty empty )$$iterate Columns( each implRqstTableUpdateDeclDataAttr )$$switch BaseHasAuditColumns yes implTableDeclAttrsAudit default empty$</GenRule>

	<GenRule GenDef="Table" Name="implTableDeclAttrsAudit">
			String attrCreatedAt = null;
			String attrCreatedBy = null;
			String attrUpdatedAt = null;
			String attrUpdatedBy = null;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateDeclDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableUpdateDeclNonIdAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableUpdateDeclNonIdAttr"
		>$reference Column implRqstTableUpdateDeclNonIdAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateDeclNonIdAttr"
		>$switch Name Id empty default implRqstTableUpdateDeclAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateDeclAnAttr">
			String	attr$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateExtractAttrs">
			// Extract Attributes
			numAttrs = attrs.getLength();
			for( idxAttr = 0; idxAttr &lt; numAttrs; idxAttr++ ) {
				attrLocalName = attrs.getLocalName( idxAttr );
				if( attrLocalName.equals( "Id" ) ) {
					if( attrId != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrId = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "Revision" ) ) {
					if( attrRevision != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrRevision = attrs.getValue( idxAttr );
				}$switch BaseHasAuditColumns yes implTableParseAuditAttrs default empty$$implRqstTableUpdateParseAttrs$
				else if( attrLocalName.equals( "schemaLocation" ) ) {
					// ignored
				}
				else {
					throw new CFLibUnrecognizedAttributeException( getClass(),
						S_ProcName,
						getParser().getLocationInfo(),
						attrLocalName );
				}
			}
</GenRule>

	<GenRule GenDef="Table" Name="implTableParseAuditAttrs">
				else if( attrLocalName.equals( "CreatedAt" ) ) {
					if( attrCreatedAt != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrCreatedAt = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "CreatedBy" ) ) {
					if( attrCreatedBy != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrCreatedBy = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "UpdatedAt" ) ) {
					if( attrUpdatedAt != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrUpdatedAt = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "UpdatedBy" ) ) {
					if( attrUpdatedBy != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrUpdatedBy = attrs.getValue( idxAttr );
				}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateParsePKeyAttrs"
		>$switch HasSuperClassRelation yes implRqstTableUpdateParsePKeyInhAttrs default implRqstTableUpdateParsePKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateParsePKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableUpdateParseNonIdPKeyAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateParsePKeyInhAttrs"
		>$reference SuperClassRelation reference ToTable implRqstTableUpdateParsePKeyAttrs$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableUpdateParseNonIdPKeyAttr"
		>$switch Name Id empty default implRqstTableUpdateParseEmitPKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableUpdateParseEmitPKeyAttr">
				else if( attrLocalName.equals( "$Name$" ) ) {
					if( attr$Name$ != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attr$Name$ = attrs.getValue( idxAttr );
				}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateParseAttrs"
		>$switch HasSuperClassRelation yes implRqstTableUpdateParseAttrsSuper default implRqstTableUpdateParseAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateParseAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableUpdateParseAttrs$$iterate Columns( each implRqstTableUpdateParseDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateParseAttrsBase">$iterate Columns( each implRqstTableUpdateParseNonIdAttr )$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateParseDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableUpdateParseNonIdAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateParseNonIdAttr"
		>$switch Name Id empty default implRqstTableUpdateParseAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateParseAnAttr">
				else if( attrLocalName.equals( "$Name$" ) ) {
					if( attr$Name$ != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attr$Name$ = attrs.getValue( idxAttr );
				}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateCheckRequiredAttrs">
			// Ensure that required attributes have values$implRqstTableUpdateCheckReqAttrs$
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateCheckReqAttrs"
		>$switch HasSuperClassRelation yes implRqstTableUpdateCheckReqAttrsSuper default implRqstTableUpdateCheckReqAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateCheckReqAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableUpdateCheckReqAttrs$$iterate Columns( each implRqstTableUpdateCheckReqDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateCheckReqAttrsBase">$iterate Columns( each implCheckReqAnAttr )$$implCheckReqRevision$$switch BaseHasAuditColumns yes implCheckReqAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implCheckReqAuditColumns">
			if( ( attrCreatedAt == null ) || ( attrCreatedAt.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"CreatedAt" );
			}
			if( ( attrCreatedBy == null ) || ( attrCreatedBy.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"CreatedBy" );
			}
			if( ( attrUpdatedAt == null ) || ( attrUpdatedAt.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"UpdatedAt" );
			}
			if( ( attrUpdatedBy == null ) || ( attrUpdatedBy.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"UpdatedBy" );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateCheckReqDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implCheckReqAnAttr$</GenRule>

	<GenRule GenDef="Table" Name="implCheckReqRevision">
			if( ( attrRevision == null ) || ( attrRevision.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"Revision" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateGetContext">
			// Save named attributes to context
			CFLibXmlCoreContext curContext = getParser().getCurContext();
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateConvertPKeyAttributes"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implRqstTableUpdateConvertColPKeyAttr empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateConvertDataAttributes">
				// Convert string attributes to native Java types
				// and apply the converted attributes to the editBuff.$implRqstTableUpdateConvertDataAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implConvertAuditColumns">
			UUID createdBy = null;
			if( attrCreatedBy != null ) {
				createdBy = UUID.fromString( attrCreatedBy );
			}
			Calendar createdAt = null;
			if( attrCreatedAt != null ) {
				createdAt = CFLibXmlUtil.parseTimestamp( attrCreatedAt );
			}
			UUID updatedBy = null;
			if( attrUpdatedBy != null ) {
				updatedBy = UUID.fromString( attrUpdatedBy );
			}
			Calendar updatedAt = null;
			if( attrUpdatedAt != null ) {
				updatedAt = CFLibXmlUtil.parseTimestamp( attrUpdatedAt );
			}
			if( createdBy != null ) {
				dataBuff.setCreatedByUserId( createdBy );
			}
			if( createdAt != null ) {
				dataBuff.setCreatedAt( createdAt );
			}
			if( updatedBy != null ) {
				dataBuff.setUpdatedByUserId( updatedBy );
			}
			if( updatedAt != null ) {
				dataBuff.setUpdatedAt( updatedAt );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableUpdateConvertColPKeyAttr"
		>$reference Column implRqstTableUpdateConvertColPKeyAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColPKeyAttr"
		>$implRqstTableUpdateConvertColPKeyAttrs$
			pkey.set$OptionalOrRequired$$Name$( nat$Name$ );</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableUpdateConvertColDataAttr"
		>$reference Column implRqstTableUpdateConvertColDataAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableUpdateConvertColADataAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColADataAttr"
		>$implRqstTableUpdateConvertColPKeyAttrs$
				dataBuff.set$OptionalOrRequired$$Name$( nat$Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateConvertColRevision">
				int natRevision = Integer.parseInt( attrRevision );
				dataBuff.setRequiredRevision( natRevision );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColPKeyAttrs">
			$implJavaAtomType$ nat$Name$;$switch BaseModelAtomClass
			BlobDef implRqstTableUpdateConvertColBlobValue
			BoolDef implRqstTableUpdateConvertColBoolValue
			EnumDef implRqstTableUpdateConvertColEnumValue
			Int16Def implRqstTableUpdateConvertColInt16Value
			Int32Def implRqstTableUpdateConvertColInt32Value
			Int64Def implRqstTableUpdateConvertColInt64Value
			UInt16Def implRqstTableUpdateConvertColUInt16Value
			UInt32Def implRqstTableUpdateConvertColUInt32Value
			UInt64Def implRqstTableUpdateConvertColUInt64Value
			Id16Gen implRqstTableUpdateConvertColInt16Value
			Id32Gen implRqstTableUpdateConvertColInt32Value
			Id64Gen implRqstTableUpdateConvertColInt64Value
			FloatDef implRqstTableUpdateConvertColFloatValue
			DoubleDef implRqstTableUpdateConvertColDoubleValue
			NumberDef implRqstTableUpdateConvertColNumberValue
			StringDef implRqstTableUpdateConvertColStringValue
			TokenDef implRqstTableUpdateConvertColTokenValue
			NmTokenDef implRqstTableUpdateConvertColNmTokenValue
			NmTokensDef implRqstTableUpdateConvertColNmTokensValue
			TextDef implRqstTableUpdateConvertColTextValue
			DateDef implRqstTableUpdateConvertColDateValue
			TimeDef implRqstTableUpdateConvertColTimeValue
			TimestampDef implRqstTableUpdateConvertColTimestampValue
			TZDateDef implRqstTableUpdateConvertColTZDateValue
			TZTimeDef implRqstTableUpdateConvertColTZTimeValue
			TZTimestampDef implRqstTableUpdateConvertColTZTimestampValue
			UuidGen implRqstTableUpdateConvertColUuidValue
			UuidDef implRqstTableUpdateConvertColUuidValue
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColBlobValue"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptBlobValue default implRqstTableUpdateConvertColReqBlobValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqBlobValue">
				if( attr$Name$.length() &lt;= 0 ) {
					nat$Name$ = new byte[0];
				}
				else {
					nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
				}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptBlobValue">
				if( attr$Name$ == null ) {
					nat$Name$ = null;
				}
				else if( attr$Name$.length() &lt;= 0 ) {
					nat$Name$ = new byte[0];
				}
				else {
					nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
				}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColBoolValue"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptBoolValue default implRqstTableUpdateConvertColReqBoolValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqBoolValue">
				if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
					nat$Name$ = true;
				}
				else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
					nat$Name$ = false;
				}
				else {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$ );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptBoolValue">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() == 0 ) ) {
					nat$Name$ = null;
				}
				else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
					nat$Name$ = Boolean.valueOf( true );
				}
				else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
					nat$Name$ = Boolean.valueOf( false );
				}
				else {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$ );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColEnumValue"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptEnumValue default implRqstTableUpdateConvertColReqEnumValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptEnumValue">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqEnumValue">
				nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColInt16Value"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptInt16Value default implRqstTableUpdateConvertColReqInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptInt16Value">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = Short.valueOf( Short.parseShort( attr$Name$ ) );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqInt16Value">
				nat$Name$ = Short.parseShort( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColInt32Value"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptInt32Value default implRqstTableUpdateConvertColReqInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptInt32Value">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqInt32Value">
				nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColInt64Value"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptInt64Value default implRqstTableUpdateConvertColReqInt64Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptInt64Value">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqInt64Value">
				nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColUInt16Value"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptUInt16Value default implRqstTableUpdateConvertColReqUInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptUInt16Value">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqUInt16Value">
				nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColUInt32Value"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptUInt32Value default implRqstTableUpdateConvertColReqUInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptUInt32Value">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqUInt32Value">
				nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColUInt64Value">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = new BigDecimal( attr$Name$ );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColFloatValue"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptFloatValue default implRqstTableUpdateConvertColReqFloatValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptFloatValue">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = Float.valueOf( Float.parseFloat( attr$Name$ ) );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqFloatValue">
				nat$Name$ = Float.parseFloat( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColDoubleValue"
		>$switch IsNullable yes implRqstTableUpdateConvertColOptDoubleValue default implRqstTableUpdateConvertColReqDoubleValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColOptDoubleValue">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = Double.valueOf( Double.parseDouble( attr$Name$ ) );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColReqDoubleValue">
				nat$Name$ = Double.parseDouble( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColNumberValue">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = new BigDecimal( attr$Name$ );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColStringValue">
				nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColTokenValue">
				nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColNmTokenValue">
				nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColNmTokensValue">
				nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColTextValue">
				nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColDateValue">
				try {
					nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColTimeValue">
				try {
					nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColTimestampValue">
				try {
					nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColTZDateValue">
				try {
					nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColTZTimeValue">
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColTZTimestampValue">
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertColUuidValue">
				if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
					nat$Name$ = null;
				}
				else {
					nat$Name$ = UUID.fromString( attr$Name$ );
				}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateConvertNatId">
				Integer natId;
				if( ( attrId != null ) &amp;&amp; ( attrId.length() &gt; 0 ) ) {
					natId = Integer.valueOf( Integer.parseInt( attrId ) );
				}
				else {
					natId = null;
				}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateConvertDataAttrs"
		>$switch HasSuperClassRelation yes implRqstTableUpdateConvertDataAttrsSuper default implRqstTableUpdateConvertDataAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateConvertDataAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableUpdateConvertDataAttrs$$iterate Columns( each implRqstTableUpdateConvertDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableUpdateConvertDataAttrsBase">$iterate Columns( each implRqstTableUpdateConvertDataAttr )$$implRqstTableUpdateConvertColRevision$$switch BaseHasAuditColumns yes implConvertAuditColumns default empty$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableUpdateReallyConvertAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertAnAttr"
		>$switch GenerateId yes empty default implRqstTableUpdateReallyConvertAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateReallyConvertAnAttr"
		>$switch IsNullable yes implRqstTableUpdateConvertOptAttr default implRqstTableUpdateConvertReqAttr$
			dataBuff.set$OptionalOrRequired$$Name$( nat$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqAttr"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableUpdateConvertReqBlob
			BoolDef implRqstTableUpdateConvertReqBool
			EnumDef implRqstTableUpdateConvertReqEnum
			Id16Gen implRqstTableUpdateConvertReqInt16
			Id32Gen implRqstTableUpdateConvertReqInt32
			Id64Gen implRqstTableUpdateConvertReqInt64
			Int16Def implRqstTableUpdateConvertReqInt16
			Int32Def implRqstTableUpdateConvertReqInt32
			Int64Def implRqstTableUpdateConvertReqInt64
			UInt16Def implRqstTableUpdateConvertReqUInt16
			UInt32Def implRqstTableUpdateConvertReqUInt32
			UInt64Def implRqstTableUpdateConvertReqUInt64
			FloatDef implRqstTableUpdateConvertReqFloat
			DoubleDef implRqstTableUpdateConvertReqDouble
			NumberDef implRqstTableUpdateConvertReqNumber
			DateDef implRqstTableUpdateConvertReqDate
			TimeDef implRqstTableUpdateConvertReqTime
			TimestampDef implRqstTableUpdateConvertReqTimestamp
			TZDateDef implRqstTableUpdateConvertReqTZDate
			TZTimeDef implRqstTableUpdateConvertReqTZTime
			TZTimestampDef implRqstTableUpdateConvertReqTZTimestamp
			UuidGen implRqstTableUpdateConvertReqUuid
			UuidDef implRqstTableUpdateConvertReqUuid
			StringDef implRqstTableUpdateConvertReqString
			TokenDef implRqstTableUpdateConvertReqString
			NmTokenDef implRqstTableUpdateConvertReqString
			NmTokensDef implRqstTableUpdateConvertReqString
			TextDef implRqstTableUpdateConvertReqString
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableUpdateConvertOptBlob
			BoolDef implRqstTableUpdateConvertOptBool
			EnumDef implRqstTableUpdateConvertOptEnum
			Id16Gen implRqstTableUpdateConvertOptInt16
			Id32Gen implRqstTableUpdateConvertOptInt32
			Id64Gen implRqstTableUpdateConvertOptInt64
			Int16Def implRqstTableUpdateConvertOptInt16
			Int32Def implRqstTableUpdateConvertOptInt32
			Int64Def implRqstTableUpdateConvertOptInt64
			UInt16Def implRqstTableUpdateConvertOptUInt16
			UInt32Def implRqstTableUpdateConvertOptUInt32
			UInt64Def implRqstTableUpdateConvertOptUInt64
			FloatDef implRqstTableUpdateConvertOptFloat
			DoubleDef implRqstTableUpdateConvertOptDouble
			NumberDef implRqstTableUpdateConvertOptNumber
			DateDef implRqstTableUpdateConvertOptDate
			TimeDef implRqstTableUpdateConvertOptTime
			TimestampDef implRqstTableUpdateConvertOptTimestamp
			TZDateDef implRqstTableUpdateConvertOptTZDate
			TZTimeDef implRqstTableUpdateConvertOptTZTime
			TZTimestampDef implRqstTableUpdateConvertOptTZTimestamp
			UuidGen implRqstTableUpdateConvertOptUuid
			UuidDef implRqstTableUpdateConvertOptUuid
			StringDef implRqstTableUpdateConvertOptString
			TokenDef implRqstTableUpdateConvertOptString
			NmTokenDef implRqstTableUpdateConvertOptString
			NmTokensDef implRqstTableUpdateConvertOptString
			TextDef implRqstTableUpdateConvertOptString
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqBlob">
			byte[] nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqBool">
			boolean nat$Name$;
			if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) || attr$Name$.equals( "1" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) || attr$Name$.equals( "0" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"Unexpected $Name$ value, must be one of true, false, yes, no, 1, or 0, not \"" + attr$Name$ + "\"" );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqEnum">
			I$reference DataType EffSchemaName$Schema.$reference DataType Name$ nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqInt16">
			short nat$Name$ = Short.parseShort( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqInt32">
			int nat$Name$ = Integer.parseInt( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqInt64">
			long nat$Name$ = Long.parseLong( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqUInt16">
			int nat$Name$ = Integer.parseInt( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqUInt32">
			long nat$Name$ = Long.parseLong( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqUInt64">
			BigDecimal nat$Name$ = new BigDecimal( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqFloat">
			float nat$Name$ = Float.parseFloat( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqDouble">
			double nat$Name$ = Double.parseDouble( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqNumber">
			BigDecimal nat$Name$ = new BigDecimal( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqDate">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqTime">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqTimestamp">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqTZDate">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqTZTime">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqTZTimestamp">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqUuid">
			UUID nat$Name$ = UUID.fromString( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertReqString">
			String nat$Name$ = attr$Name$;
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptBlob">
			byte[] nat$Name$;
			if( attr$Name$ == null ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.length() &lt;= 0 ) {
				nat$Name$ = new byte[0];
			}
			else {
				nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptBool">
			Boolean nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) || attr$Name$.equals( "1" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) || attr$Name$.equals( "0" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"Unexpected $Name$ value, must be one of true, false, yes, no, 1, or 0, not \"" + attr$Name$ + "\"" );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptEnum">
			I$reference DataType EffSchemaName$Schema.$reference DataType Name$ nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptInt16">
			Short nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Short.valueOf( Short.parseShort( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptInt32">
			Integer nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptInt64">
			Long nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptUInt16">
			Integer nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptUInt32">
			Long nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Long.valueOf( Long.parseLong( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptUInt64">
			BigDecimal nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= new BigDecimal( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptFloat">
			Float nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Float.valueOf( Float.parseFloat( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptDouble">
			Double nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Double.valueOf( Double.parseDouble( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptNumber">
			BigDecimal nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= new BigDecimal( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptDate">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptTime">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptTimestamp">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptTZDate">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptTZTime">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptTZTimestamp">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptUuid">
			UUID nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = UUID.fromString( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableUpdateConvertOptString">
			String nat$Name$ = attr$Name$;
</GenRule>

</RuleSet>
