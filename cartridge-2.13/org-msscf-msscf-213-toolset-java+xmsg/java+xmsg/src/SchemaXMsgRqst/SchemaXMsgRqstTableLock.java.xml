<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+xmsg"
	Name="src/SchemaXMsg/SchemaXMsgRqstTableLock.java"
	Revision="2.13"
	Descr="Java 11 XML SAX Element  for Table">

	<GenFile GenDef="Table" Name="fileSchemaXMsgRqstTableLockJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$xmsgrqst.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		ExpansionClassName="$SchemaName$XMsgRqst$TableName$LockJava"
		ExpansionKeyName="$SchemaName$XMsgRqst$TableName$LockJava"
		ExpansionFileName="$SchemaName$XMsgRqst$TableName$Lock.java">
// Description: Java 11 XML Message SAX Response Record Element  for $TableName$

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$XMsgRqst;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.xml.sax.*;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$XMsg.*;

/*
 *	$SchemaName$XMsgRqst$TableName$Lock XML SAX Element  implementation
 *	for $TableName$.
 */
public class $SchemaName$XMsgRqst$TableName$Lock
	extends CFLibXmlCoreElementHandler
{$implConstructXMsgRqstTableLock$$implRqstTableLockStartElement$$implRqstTableLockEndElement$}
</GenFile>

	<GenRule GenDef="Table" Name="implConstructXMsgRqstTableLock">
	public $SchemaName$XMsgRqst$TableName$Lock( $SchemaName$XMsgRqst xmsgRqst ) {
		super( xmsgRqst );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockStartElement">
	public void startElement(
		String		uri,
		String		localName,
		String		qName,
		Attributes	attrs )
	throws SAXException
	{
		$SchemaName$XMsgSchemaMessageFormatter schemaFormatter = null;
		try {
			// Common XML Attributes
			String	attrId = null;$implRqstTableLockDeclPKeyAttrs$
			// Attribute Extraction
			String	attrLocalName;
			int		numAttrs;
			int		idxAttr;
			final String S_ProcName = "startElement";
			final String S_LocalName = "LocalName";

			assert qName.equals( "Rqst$TableName$Lock" );
$implRqstTableLockRetrieveSchemaObj$$implRqstTableLockConsPKey$$implRqstTableLockExtractAttrs$$implRqstTableLockCheckRequiredAttrs$$implRqstTableLockGetContext$$implRqstTableLockConvertAttributes$$implRqstTableLockDoLock$
		}
		catch( RuntimeException e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch( Error e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockDoLock">
			// Lock the object
			I$SchemaName$$TableName$Obj locked = ((I$SchemaName$$TableName$Obj)schemaObj.get$TableName$TableObj().lock$TableName$( pkey ));
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnLocked( "\n\t\t\t", locked.get$TableName$Buff() )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			(($SchemaName$XMsgRqst)getParser()).appendResponse( response );</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockDeclPKeyAttrs">
			// Primary Key Attributes for Constant Enum support$switch HasSuperClassRelation yes implRqstTableLockDeclPKeyInhAttrs default implRqstTableLockDeclPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockDeclPKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableLockDeclNonIdPKeyAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockDeclPKeyInhAttrs"
		>$reference SuperClassRelation reference ToTable implRqstTableLockDeclPKeyDecisionAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockDeclPKeyDecisionAttrs"
		>$switch HasSuperClassRelation yes implRqstTableLockDeclPKeyInhAttrs default implRqstTableLockDeclPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableLockDeclNonIdPKeyAttr"
		>$switch Name Id empty default implRqstTableLockDeclEmitPKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableLockDeclEmitPKeyAttr">
			String attr$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockConsPKey">
			// Instantiate a PKey buffer for the parsed information
			$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey pkey = ((I$SchemaName$Schema)schemaObj.getBackingStore()).getFactory$reference BaseClass TableName$().newPKey();
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockEndElement">
	public void endElement(
		String		uri,
		String		localName,
		String		qName )
	throws SAXException
	{
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockRetrieveSchemaObj">
			$SchemaName$XMsgRqst xmsgRqst = ($SchemaName$XMsgRqst)getParser();
			if( xmsgRqst == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser()" );
			}

			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();

			I$SchemaName$SchemaObj schemaObj = xmsgRqst.getSchemaObj();
			if( schemaObj == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser().getSchemaObj()" );
			}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockApplyPKeyAttrs"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implRqstTableLockApplyPIndexColumn )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableLockApplyPIndexColumn">
			pkey.set$OptionalOrRequired$$Name$( nat$Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockApplyInsertAttrs"
		>$switch HasSuperClassRelation yes implRqstTableLockApplyInsertAttrsSuper default implRqstTableLockApplyInsertAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockApplyInsertAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableLockApplyInsertAttrs$
			// Apply $TableName$ Attributes$iterate Columns( each implRqstTableLockApplyDataInsertAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockApplyInsertAttrsBase">
			// Apply $TableName$ Attributes$iterate Columns( each implRqstTableLockApplyDataInsertAttr )$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockApplyDataInsertAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableLockApplyNonIdInsertAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockApplyNonIdInsertAttr"
		>$switch Name Id empty default implRqstTableLockApplyAnUnhiddenInsertAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockApplyAnUnhiddenInsertAttr"
		>$switch ColumnInContainerOrNamedLookupRelation no implRqstTableLockApplyAnInsertAttr default empty$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockApplyAnInsertAttr">
			edit$poptop Table TableName$.set$OptionalOrRequired$$Name$( $implRqstTableLockApplyAnAttrVar$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockApplyAnAttrVar"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableLockApplyNatVar
			BoolDef implRqstTableLockApplyNatVar
			EnumDef implRqstTableLockApplyNatVar
			Id16Gen implRqstTableLockApplyNatVar
			Id32Gen implRqstTableLockApplyNatVar
			Id64Gen implRqstTableLockApplyNatVar
			Int16Def implRqstTableLockApplyNatVar
			Int32Def implRqstTableLockApplyNatVar
			Int64Def implRqstTableLockApplyNatVar
			UInt16Def implRqstTableLockApplyNatVar
			UInt32Def implRqstTableLockApplyNatVar
			UInt64Def implRqstTableLockApplyNatVar
			FloatDef implRqstTableLockApplyNatVar
			DoubleDef implRqstTableLockApplyNatVar
			NumberDef implRqstTableLockApplyNatVar
			DateDef implRqstTableLockApplyNatVar
			TimeDef implRqstTableLockApplyNatVar
			TimestampDef implRqstTableLockApplyNatVar
			TZDateDef implRqstTableLockApplyNatVar
			TZTimeDef implRqstTableLockApplyNatVar
			TZTimestampDef implRqstTableLockApplyNatVar
			UuidGen implRqstTableLockApplyNatVar
			UuidDef implRqstTableLockApplyNatVar
			StringDef implRqstTableLockApplyAttrVar
			TokenDef implRqstTableLockApplyAttrVar
			NmTokenDef implRqstTableLockApplyAttrVar
			NmTokensDef implRqstTableLockApplyAttrVar
			TextDef implRqstTableLockApplyAttrVar
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockApplyNatVar"
		>nat$Name$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockApplyAttrVar"
		>attr$Name$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockExtractAttrs">
			// Extract Attributes
			numAttrs = attrs.getLength();
			for( idxAttr = 0; idxAttr &lt; numAttrs; idxAttr++ ) {
				attrLocalName = attrs.getLocalName( idxAttr );
				if( attrLocalName.equals( "Id" ) ) {
					if( attrId != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrId = attrs.getValue( idxAttr );
				}$implRqstTableLockParsePKeyAttrs$
				else if( attrLocalName.equals( "schemaLocation" ) ) {
					// ignored
				}
				else {
					throw new CFLibUnrecognizedAttributeException( getClass(),
						S_ProcName,
						getParser().getLocationInfo(),
						attrLocalName );
				}
			}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockParsePKeyAttrs"
		>$reference BaseClass implRqstTableLockParsePKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockParsePKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableLockParseEmitNonIdPKeyAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableLockParseEmitNonIdPKeyAttr"
		>$switch Name Id empty default implRqstTableLockParseEmitPKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableLockParseEmitPKeyAttr">
				else if( attrLocalName.equals( "$Name$" ) ) {
					if( attr$Name$ != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attr$Name$ = attrs.getValue( idxAttr );
				}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockCheckRequiredAttrs">
			// Ensure that required attributes have values$implRqstTableLockCheckReqPKeyAttrs$
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockCheckReqPKeyAttrs"
		>$reference BaseClass implRqstTableLockCheckReqPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockCheckReqPKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableLockCheckReqMaybeEmitPKeyAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableLockCheckReqMaybeEmitPKeyAttr"
		>$switch IsNullable no implRqstTableLockCheckReqEmitPKeyAttr default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableLockCheckReqEmitPKeyAttr">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockGetContext">
			// Get current context
			CFLibXmlCoreContext curContext = getParser().getCurContext();</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockPutNamedAttrs"
		>$switch HasSuperClassRelation yes implRqstTableLockPutNamedAttrsSuper default implRqstTableLockPutNamedAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockPutNamedAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableLockPutNamedAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockPutNamedAttrsBase">$reference PrimaryKeyIndex iterate Columns( each implRqstTableLockPutNamedAnAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableLockPutNamedAnAttr">
			curContext.putNamedValue( "$Name$", attr$Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockConvertAttributes">
			// Convert string attributes to native Java types
			// and apply the converted attributes to the editBuff.
$implRqstTableLockConvertPKeyAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockConvertPKeyAttrs"
		>$switch HasSuperClassRelation yes implRqstTableLockConvertInhPKeyAttrs default implRqstTableLockConvertBasePKeyAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockConvertInhPKeyAttrs"
		>$reference SuperClassRelation reference ToTable implRqstTableLockConvertPKeyAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockConvertBasePKeyAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableLockConvertColPKeyAttrs )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableLockConvertColPKeyAttrs"
		>$reference Column implRqstTableLockConvertColPKeyAttrs$
			pkey.set$OptionalOrRequired$$Name$( nat$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColPKeyAttrs">
			$implJavaAtomType$ nat$Name$;$switch BaseModelAtomClass
			BlobDef implRqstTableLockConvertColBlobValue
			BoolDef implRqstTableLockConvertColBoolValue
			EnumDef implRqstTableLockConvertColEnumValue
			Int16Def implRqstTableLockConvertColInt16Value
			Int32Def implRqstTableLockConvertColInt32Value
			Int64Def implRqstTableLockConvertColInt64Value
			UInt16Def implRqstTableLockConvertColUInt16Value
			UInt32Def implRqstTableLockConvertColUInt32Value
			UInt64Def implRqstTableLockConvertColUInt64Value
			Id16Gen implRqstTableLockConvertColInt16Value
			Id32Gen implRqstTableLockConvertColInt32Value
			Id64Gen implRqstTableLockConvertColInt64Value
			FloatDef implRqstTableLockConvertColFloatValue
			DoubleDef implRqstTableLockConvertColDoubleValue
			NumberDef implRqstTableLockConvertColNumberValue
			StringDef implRqstTableLockConvertColStringValue
			TokenDef implRqstTableLockConvertColTokenValue
			NmTokenDef implRqstTableLockConvertColNmTokenValue
			NmTokensDef implRqstTableLockConvertColNmTokensValue
			TextDef implRqstTableLockConvertColTextValue
			DateDef implRqstTableLockConvertColDateValue
			TimeDef implRqstTableLockConvertColTimeValue
			TimestampDef implRqstTableLockConvertColTimestampValue
			TZDateDef implRqstTableLockConvertColTZDateValue
			TZTimeDef implRqstTableLockConvertColTZTimeValue
			TZTimestampDef implRqstTableLockConvertColTZTimestampValue
			UuidGen implRqstTableLockConvertColUuidValue
			UuidDef implRqstTableLockConvertColUuidValue
			default ErrorUnrecognizedBaseModelAtomClass$
			pkey.set$OptionalOrRequired$$Name$( nat$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColBlobValue">
			throw new RuntimeException( S_ProcName + "ERROR: Cannot use a BLOB as a PKey attribute!" );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColBoolValue"
		>$switch IsNullable yes implRqstTableLockConvertColOptBoolValue default implRqstTableLockConvertColReqBoolValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColReqBoolValue">
			if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColOptBoolValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() == 0 ) ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = Boolean.valueOf( true );
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = Boolean.valueOf( false );
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColEnumValue"
		>$switch IsNullable yes implRqstTableLockConvertColOptEnumValue default implRqstTableLockConvertColReqEnumValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColOptEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColReqEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColInt16Value"
		>$switch IsNullable yes implRqstTableLockConvertColOptInt16Value default implRqstTableLockConvertColReqInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColOptInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Short.valueOf( Short.parseShort( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColReqInt16Value">
			nat$Name$ = Short.parseShort( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColInt32Value"
		>$switch IsNullable yes implRqstTableLockConvertColOptInt32Value default implRqstTableLockConvertColReqInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColOptInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColReqInt32Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColInt64Value"
		>$switch IsNullable yes implRqstTableLockConvertColOptInt64Value default implRqstTableLockConvertColReqInt64Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColOptInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColReqInt64Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColUInt16Value"
		>$switch IsNullable yes implRqstTableLockConvertColOptUInt16Value default implRqstTableLockConvertColReqUInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColOptUInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColReqUInt16Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColUInt32Value"
		>$switch IsNullable yes implRqstTableLockConvertColOptUInt32Value default implRqstTableLockConvertColReqUInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColOptUInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColReqUInt32Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColUInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", 19, 0, attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColFloatValue"
		>$switch IsNullable yes implRqstTableLockConvertColOptFloatValue default implRqstTableLockConvertColReqFloatValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColOptFloatValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Float.valueOf( Float.parseFloat( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColReqFloatValue">
			nat$Name$ = Float.parseFloat( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColDoubleValue"
		>$switch IsNullable yes implRqstTableLockConvertColOptDoubleValue default implRqstTableLockConvertColReqDoubleValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColOptDoubleValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Double.valueOf( Double.parseDouble( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColReqDoubleValue">
			nat$Name$ = Double.parseDouble( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColNumberValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", $Digits$, $Precis$, attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColStringValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColNmTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColNmTokensValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColTextValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColDateValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColTimeValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColTimestampValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColTZDateValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColTZTimeValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColTZTimestampValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertColUuidValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = UUID.fromString( attr$Name$ );
			}</GenRule>


	<GenRule GenDef="Table" Name="implRqstTableLockConvertNatId">
			Integer natId;
			if( ( attrId != null ) &amp;&amp; ( attrId.length() &gt; 0 ) ) {
				natId = Integer.valueOf( Integer.parseInt( attrId ) );
			}
			else {
				natId = null;
			}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockConvertAttrs"
		>$switch HasSuperClassRelation yes implRqstTableLockConvertAttrsSuper default implRqstTableLockConvertAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockConvertAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableLockConvertAttrs$$iterate Columns( each implRqstTableLockConvertDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableLockConvertAttrsBase">$iterate Columns( each implRqstTableLockConvertDataAttr )$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableLockConvertNonIdAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertNonIdAttr"
		>$switch Name Id empty default implRqstTableLockConvertAnUnhiddenAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertAnUnhiddenAttr"
		>$switch ColumnInContainerOrNamedLookupRelation no implRqstTableLockConvertAnAttr default empty$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertAnAttr"
		>$switch IsNullable yes implRqstTableLockConvertOptAttr default implRqstTableLockConvertReqAttr$		pkey.set$OptionalOrRequired$$Name$( nat$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqAttr"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableLockConvertReqBlob
			BoolDef implRqstTableLockConvertReqBool
			EnumDef implRqstTableLockConvertReqEnum
			Id16Gen implRqstTableLockConvertReqInt16
			Id32Gen implRqstTableLockConvertReqInt32
			Id64Gen implRqstTableLockConvertReqInt64
			Int16Def implRqstTableLockConvertReqInt16
			Int32Def implRqstTableLockConvertReqInt32
			Int64Def implRqstTableLockConvertReqInt64
			UInt16Def implRqstTableLockConvertReqUInt16
			UInt32Def implRqstTableLockConvertReqUInt32
			UInt64Def implRqstTableLockConvertReqUInt64
			FloatDef implRqstTableLockConvertReqFloat
			DoubleDef implRqstTableLockConvertReqDouble
			NumberDef implRqstTableLockConvertReqNumber
			DateDef implRqstTableLockConvertReqDate
			TimeDef implRqstTableLockConvertReqTime
			TimestampDef implRqstTableLockConvertReqTimestamp
			TZDateDef implRqstTableLockConvertReqTZDate
			TZTimeDef implRqstTableLockConvertReqTZTime
			TZTimestampDef implRqstTableLockConvertReqTZTimestamp
			UuidGen implRqstTableLockConvertReqUuid
			UuidDef implRqstTableLockConvertReqUuid
			StringDef implRqstTableLockConvertReqString
			TokenDef implRqstTableLockConvertReqString
			NmTokenDef implRqstTableLockConvertReqString
			NmTokensDef implRqstTableLockConvertReqString
			TextDef implRqstTableLockConvertReqString
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableLockConvertOptBlob
			BoolDef implRqstTableLockConvertOptBool
			EnumDef implRqstTableLockConvertOptEnum
			Id16Gen implRqstTableLockConvertOptInt16
			Id32Gen implRqstTableLockConvertOptInt32
			Id64Gen implRqstTableLockConvertOptInt64
			Int16Def implRqstTableLockConvertOptInt16
			Int32Def implRqstTableLockConvertOptInt32
			Int64Def implRqstTableLockConvertOptInt64
			UInt16Def implRqstTableLockConvertOptUInt16
			UInt32Def implRqstTableLockConvertOptUInt32
			UInt64Def implRqstTableLockConvertOptUInt64
			FloatDef implRqstTableLockConvertOptFloat
			DoubleDef implRqstTableLockConvertOptDouble
			NumberDef implRqstTableLockConvertOptNumber
			DateDef implRqstTableLockConvertOptDate
			TimeDef implRqstTableLockConvertOptTime
			TimestampDef implRqstTableLockConvertOptTimestamp
			TZDateDef implRqstTableLockConvertOptTZDate
			TZTimeDef implRqstTableLockConvertOptTZTime
			TZTimestampDef implRqstTableLockConvertOptTZTimestamp
			UuidGen implRqstTableLockConvertOptUuid
			UuidDef implRqstTableLockConvertOptUuid
			StringDef implRqstTableLockConvertOptString
			TokenDef implRqstTableLockConvertOptString
			NmTokenDef implRqstTableLockConvertOptString
			NmTokensDef implRqstTableLockConvertOptString
			TextDef implRqstTableLockConvertOptString
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqBlob">
			byte[] nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqBool">
			boolean nat$Name$;
			if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) || attr$Name$.equals( "1" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) || attr$Name$.equals( "0" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"Unexpected $Name$ value, must be one of true, false, yes, no, 1, or 0, not \"" + attr$Name$ + "\"" );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqEnum">
			I$reference DataType EffSchemaName$Schema.$reference DataType Name$ nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqInt16">
			short nat$Name$ = Short.parseShort( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqInt32">
			int nat$Name$ = Integer.parseInt( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqInt64">
			long nat$Name$ = Long.parseLong( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqUInt16">
			int nat$Name$ = Integer.parseInt( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqUInt32">
			long nat$Name$ = Long.parseLong( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqUInt64">
			BigDecimal nat$Name$ = new BigDecimal( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqFloat">
			float nat$Name$ = Float.parseFloat( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqDouble">
			double nat$Name$ = Double.parseDouble( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqNumber">
			BigDecimal nat$Name$ = new BigDecimal( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqDate">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqTime">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqTimestamp">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqTZDate">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqTZTime">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqTZTimestamp">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqUuid">
			UUID nat$Name$ = UUID.fromString( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertReqString">
			String nat$Name$ = attr$Name$;
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptBlob">
			byte[] nat$Name$;
			if( attr$Name$ == null ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.length() &lt;= 0 ) {
				nat$Name$ = new byte[0];
			}
			else {
				nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptBool">
			Boolean nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) || attr$Name$.equals( "1" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) || attr$Name$.equals( "0" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"Unexpected $Name$ value, must be one of true, false, yes, no, 1, or 0, not \"" + attr$Name$ + "\"" );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptEnum">
			I$reference DataType EffSchemaName$Schema.$reference DataType Name$ nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptInt16">
			Short nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Short.valueOf( Short.parseShort( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptInt32">
			Integer nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptInt64">
			Long nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptUInt16">
			Integer nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptUInt32">
			Long nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Long.valueOf( Long.parseLong( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptUInt64">
			BigDecimal nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= new BigDecimal( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptFloat">
			Float nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Float.valueOf( Float.parseFloat( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptDouble">
			Double nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Double.valueOf( Double.parseDouble( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptNumber">
			BigDecimal nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= new BigDecimal( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptDate">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptTime">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptTimestamp">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptTZDate">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptTZTime">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptTZTimestamp">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptUuid">
			UUID nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = UUID.fromString( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableLockConvertOptString">
			String nat$Name$ = attr$Name$;
</GenRule>

</RuleSet>
