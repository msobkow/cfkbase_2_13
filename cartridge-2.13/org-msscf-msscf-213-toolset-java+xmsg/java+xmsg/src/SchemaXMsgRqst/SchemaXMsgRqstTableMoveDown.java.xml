<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+xmsg"
	Name="src/SchemaXMsg/SchemaXMsgRqstTableMoveDown.java"
	Revision="2.13"
	Descr="Java 11 XML SAX Element  for Table">

	<GenFile GenDef="Table" Name="fileSchemaXMsgRqstTableMoveDownJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$xmsgrqst.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		ExpansionClassName="$SchemaName$XMsgRqst$TableName$MoveDownJava"
		ExpansionKeyName="$SchemaName$XMsgRqst$TableName$MoveDownJava"
		ExpansionFileName="$SchemaName$XMsgRqst$TableName$MoveDown.java">
// Description: Java 11 XML Message SAX Response Record Element  for $TableName$

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$XMsgRqst;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.xml.sax.*;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$XMsg.*;

/*
 *	$SchemaName$XMsgRqst$TableName$MoveDown XML SAX Element  implementation
 *	for $TableName$.
 */
public class $SchemaName$XMsgRqst$TableName$MoveDown
	extends CFLibXmlCoreElementHandler
{$implConstructXMsgRqstTableMoveDown$$implRqstTableMoveDownStartElement$$implRqstTableMoveDownEndElement$}
</GenFile>

	<GenRule GenDef="Table" Name="implConstructXMsgRqstTableMoveDown">
	public $SchemaName$XMsgRqst$TableName$MoveDown( $SchemaName$XMsgRqst xmsgRqst ) {
		super( xmsgRqst );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownStartElement">
	public void startElement(
		String		uri,
		String		localName,
		String		qName,
		Attributes	attrs )
	throws SAXException
	{
		$SchemaName$XMsgSchemaMessageFormatter schemaFormatter = null;
		try {
			// Common XML Attributes
			String	attrId = null;
			String	attrRevision = null;$implRqstTableMoveDownDeclPKeyAttrs$
			// Attribute Extraction
			String	attrLocalName;
			int		numAttrs;
			int		idxAttr;
			final String S_ProcName = "startElement";
			final String S_LocalName = "LocalName";

			assert qName.equals( "Rqst$TableName$MoveDown" );
$implRqstTableMoveDownRetrieveSchemaObj$$implRqstTableMoveDownConsPKey$$implRqstTableMoveDownExtractAttrs$$implRqstTableMoveDownCheckRequiredAttrs$$implRqstTableMoveDownGetContext$$implRqstTableMoveDownConvertAttributes$$implRqstTableMoveDownDoMoveDown$
		}
		catch( RuntimeException e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch( Error e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownDoMoveDown">
			// MoveDown the object
			I$DefSchemaName$$TableName$Obj read = schemaObj.get$TableName$TableObj().read$TableName$( pkey );
			if( read != null ) {
				if( read.get$TableName$Buff().getRequiredRevision() &gt; natRevision ) {
					throw new CFLibCollisionDetectedException( getClass(),
						S_ProcName,
						"Collision detected preparing to move $TableName$ down" );
				}
				else {
					I$SchemaName$$TableName$Obj moved = (I$SchemaName$$TableName$Obj)read.moveDown();
					String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
						+	"\t" + $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnUpdated( "\n\t\t\t", moved.get$TableName$Buff() )
						+	"\n"
						+	schemaFormatter.formatRspnXmlPostamble();
					(($SchemaName$XMsgRqst)getParser()).appendResponse( response );
				}
			}
			else {
				String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
					+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnNoDataFound() +	"\n"
					+	schemaFormatter.formatRspnXmlPostamble();
				(($SchemaName$XMsgRqst)getParser()).appendResponse( response );
			}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownDeclPKeyAttrs">
			// Primary Key Attributes for Constant Enum support$switch HasSuperClassRelation yes implRqstTableMoveDownDeclPKeyInhAttrs default implRqstTableMoveDownDeclPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownDeclPKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableMoveDownDeclNonIdPKeyAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownDeclPKeyInhAttrs"
		>$reference SuperClassRelation reference ToTable implRqstTableMoveDownDeclPKeyDecisionAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownDeclPKeyDecisionAttrs"
		>$switch HasSuperClassRelation yes implRqstTableMoveDownDeclPKeyInhAttrs default implRqstTableMoveDownDeclPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableMoveDownDeclNonIdPKeyAttr"
		>$switch Name Id empty default implRqstTableMoveDownDeclEmitPKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableMoveDownDeclEmitPKeyAttr">
			String attr$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownConsPKey">
			// Instantiate a PKey buffer for the parsed information
			$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey pkey = ((I$SchemaName$Schema)schemaObj.getBackingStore()).getFactory$reference BaseClass TableName$().newPKey();
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownEndElement">
	public void endElement(
		String		uri,
		String		localName,
		String		qName )
	throws SAXException
	{
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownRetrieveSchemaObj">
			$SchemaName$XMsgRqst xmsgRqst = ($SchemaName$XMsgRqst)getParser();
			if( xmsgRqst == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser()" );
			}

			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();

			I$SchemaName$SchemaObj schemaObj = xmsgRqst.getSchemaObj();
			if( schemaObj == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser().getSchemaObj()" );
			}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownApplyPKeyAttrs"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implRqstTableMoveDownApplyPIndexColumn )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableMoveDownApplyPIndexColumn">
			pkey.set$OptionalOrRequired$$Name$( nat$Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownApplyInsertAttrs"
		>$switch HasSuperClassRelation yes implRqstTableMoveDownApplyInsertAttrsSuper default implRqstTableMoveDownApplyInsertAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownApplyInsertAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableMoveDownApplyInsertAttrs$
			// Apply $TableName$ Attributes$iterate Columns( each implRqstTableMoveDownApplyDataInsertAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownApplyInsertAttrsBase">
			// Apply $TableName$ Attributes$iterate Columns( each implRqstTableMoveDownApplyDataInsertAttr )$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownApplyDataInsertAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableMoveDownApplyNonIdInsertAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownApplyNonIdInsertAttr"
		>$switch Name Id empty default implRqstTableMoveDownApplyAnUnhiddenInsertAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownApplyAnUnhiddenInsertAttr"
		>$switch ColumnInContainerOrNamedLookupRelation no implRqstTableMoveDownApplyAnInsertAttr default empty$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownApplyAnInsertAttr">
			edit$poptop Table TableName$.set$OptionalOrRequired$$Name$( $implRqstTableMoveDownApplyAnAttrVar$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownApplyAnAttrVar"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableMoveDownApplyNatVar
			BoolDef implRqstTableMoveDownApplyNatVar
			EnumDef implRqstTableMoveDownApplyNatVar
			Id16Gen implRqstTableMoveDownApplyNatVar
			Id32Gen implRqstTableMoveDownApplyNatVar
			Id64Gen implRqstTableMoveDownApplyNatVar
			Int16Def implRqstTableMoveDownApplyNatVar
			Int32Def implRqstTableMoveDownApplyNatVar
			Int64Def implRqstTableMoveDownApplyNatVar
			UInt16Def implRqstTableMoveDownApplyNatVar
			UInt32Def implRqstTableMoveDownApplyNatVar
			UInt64Def implRqstTableMoveDownApplyNatVar
			FloatDef implRqstTableMoveDownApplyNatVar
			DoubleDef implRqstTableMoveDownApplyNatVar
			NumberDef implRqstTableMoveDownApplyNatVar
			DateDef implRqstTableMoveDownApplyNatVar
			TimeDef implRqstTableMoveDownApplyNatVar
			TimestampDef implRqstTableMoveDownApplyNatVar
			TZDateDef implRqstTableMoveDownApplyNatVar
			TZTimeDef implRqstTableMoveDownApplyNatVar
			TZTimestampDef implRqstTableMoveDownApplyNatVar
			UuidGen implRqstTableMoveDownApplyNatVar
			UuidDef implRqstTableMoveDownApplyNatVar
			StringDef implRqstTableMoveDownApplyAttrVar
			TokenDef implRqstTableMoveDownApplyAttrVar
			NmTokenDef implRqstTableMoveDownApplyAttrVar
			NmTokensDef implRqstTableMoveDownApplyAttrVar
			TextDef implRqstTableMoveDownApplyAttrVar
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownApplyNatVar"
		>nat$Name$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownApplyAttrVar"
		>attr$Name$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownExtractAttrs">
			// Extract Attributes
			numAttrs = attrs.getLength();
			for( idxAttr = 0; idxAttr &lt; numAttrs; idxAttr++ ) {
				attrLocalName = attrs.getLocalName( idxAttr );
				if( attrLocalName.equals( "Id" ) ) {
					if( attrId != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrId = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "Revision" ) ) {
					if( attrRevision != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrRevision = attrs.getValue( idxAttr );
				}$implRqstTableMoveDownParsePKeyAttrs$
				else if( attrLocalName.equals( "schemaLocation" ) ) {
					// ignored
				}
				else {
					throw new CFLibUnrecognizedAttributeException( getClass(),
						S_ProcName,
						getParser().getLocationInfo(),
						attrLocalName );
				}
			}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownParsePKeyAttrs"
		>$reference BaseClass implRqstTableMoveDownParsePKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownParsePKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableMoveDownParseEmitNonIdPKeyAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableMoveDownParseEmitNonIdPKeyAttr"
		>$switch Name Id empty default implRqstTableMoveDownParseEmitPKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableMoveDownParseEmitPKeyAttr">
				else if( attrLocalName.equals( "$Name$" ) ) {
					if( attr$Name$ != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attr$Name$ = attrs.getValue( idxAttr );
				}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownCheckRequiredAttrs">
			// Ensure that required attributes have values$implRqstTableMoveDownCheckReqPKeyAttrs$
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownCheckReqPKeyAttrs"
		>$reference BaseClass implRqstTableMoveDownCheckReqPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownCheckReqPKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableMoveDownCheckReqMaybeEmitPKeyAttr )$$implRqstTableMoveDownCheckReqRevisionAttr$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownCheckReqRevisionAttr">
			if( ( attrRevision == null ) || ( attrRevision.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"Revision" );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableMoveDownCheckReqMaybeEmitPKeyAttr"
		>$switch IsNullable no implRqstTableMoveDownCheckReqEmitPKeyAttr default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableMoveDownCheckReqEmitPKeyAttr">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownGetContext">
			// Get current context
			CFLibXmlCoreContext curContext = getParser().getCurContext();</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownPutNamedAttrs"
		>$switch HasSuperClassRelation yes implRqstTableMoveDownPutNamedAttrsSuper default implRqstTableMoveDownPutNamedAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownPutNamedAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableMoveDownPutNamedAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownPutNamedAttrsBase">$reference PrimaryKeyIndex iterate Columns( each implRqstTableMoveDownPutNamedAnAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableMoveDownPutNamedAnAttr">
			curContext.putNamedValue( "$Name$", attr$Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownConvertAttributes">
			// Convert string attributes to native Java types
			// and apply the converted attributes to the editBuff.
$implRqstTableMoveDownConvertPKeyAttrs$$implRqstTableMoveDownConvertRevisionAttr$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownConvertRevisionAttr">
			int natRevision = Integer.parseInt( attrRevision );</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownConvertPKeyAttrs"
		>$switch HasSuperClassRelation yes implRqstTableMoveDownConvertInhPKeyAttrs default implRqstTableMoveDownConvertBasePKeyAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownConvertInhPKeyAttrs"
		>$reference SuperClassRelation reference ToTable implRqstTableMoveDownConvertPKeyAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownConvertBasePKeyAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableMoveDownConvertColPKeyAttrs )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableMoveDownConvertColPKeyAttrs"
		>$reference Column implRqstTableMoveDownConvertColPKeyAttrs$
			pkey.set$OptionalOrRequired$$Name$( nat$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColPKeyAttrs">
			$implJavaAtomType$ nat$Name$;$switch BaseModelAtomClass
			BlobDef implRqstTableMoveDownConvertColBlobValue
			BoolDef implRqstTableMoveDownConvertColBoolValue
			EnumDef implRqstTableMoveDownConvertColEnumValue
			Int16Def implRqstTableMoveDownConvertColInt16Value
			Int32Def implRqstTableMoveDownConvertColInt32Value
			Int64Def implRqstTableMoveDownConvertColInt64Value
			UInt16Def implRqstTableMoveDownConvertColUInt16Value
			UInt32Def implRqstTableMoveDownConvertColUInt32Value
			UInt64Def implRqstTableMoveDownConvertColUInt64Value
			Id16Gen implRqstTableMoveDownConvertColInt16Value
			Id32Gen implRqstTableMoveDownConvertColInt32Value
			Id64Gen implRqstTableMoveDownConvertColInt64Value
			FloatDef implRqstTableMoveDownConvertColFloatValue
			DoubleDef implRqstTableMoveDownConvertColDoubleValue
			NumberDef implRqstTableMoveDownConvertColNumberValue
			StringDef implRqstTableMoveDownConvertColStringValue
			TokenDef implRqstTableMoveDownConvertColTokenValue
			NmTokenDef implRqstTableMoveDownConvertColNmTokenValue
			NmTokensDef implRqstTableMoveDownConvertColNmTokensValue
			TextDef implRqstTableMoveDownConvertColTextValue
			DateDef implRqstTableMoveDownConvertColDateValue
			TimeDef implRqstTableMoveDownConvertColTimeValue
			TimestampDef implRqstTableMoveDownConvertColTimestampValue
			TZDateDef implRqstTableMoveDownConvertColTZDateValue
			TZTimeDef implRqstTableMoveDownConvertColTZTimeValue
			TZTimestampDef implRqstTableMoveDownConvertColTZTimestampValue
			UuidGen implRqstTableMoveDownConvertColUuidValue
			UuidDef implRqstTableMoveDownConvertColUuidValue
			default ErrorUnrecognizedBaseModelAtomClass$
			pkey.set$OptionalOrRequired$$Name$( nat$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColBlobValue">
			throw new RuntimeException( S_ProcName + "ERROR: Cannot use a BLOB as a PKey attribute!" );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColBoolValue"
		>$switch IsNullable yes implRqstTableMoveDownConvertColOptBoolValue default implRqstTableMoveDownConvertColReqBoolValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColReqBoolValue">
			if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColOptBoolValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() == 0 ) ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = Boolean.valueOf( true );
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = Boolean.valueOf( false );
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColEnumValue"
		>$switch IsNullable yes implRqstTableMoveDownConvertColOptEnumValue default implRqstTableMoveDownConvertColReqEnumValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColOptEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColReqEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColInt16Value"
		>$switch IsNullable yes implRqstTableMoveDownConvertColOptInt16Value default implRqstTableMoveDownConvertColReqInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColOptInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Short.valueOf( Short.parseShort( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColReqInt16Value">
			nat$Name$ = Short.parseShort( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColInt32Value"
		>$switch IsNullable yes implRqstTableMoveDownConvertColOptInt32Value default implRqstTableMoveDownConvertColReqInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColOptInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColReqInt32Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColInt64Value"
		>$switch IsNullable yes implRqstTableMoveDownConvertColOptInt64Value default implRqstTableMoveDownConvertColReqInt64Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColOptInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColReqInt64Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColUInt16Value"
		>$switch IsNullable yes implRqstTableMoveDownConvertColOptUInt16Value default implRqstTableMoveDownConvertColReqUInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColOptUInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColReqUInt16Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColUInt32Value"
		>$switch IsNullable yes implRqstTableMoveDownConvertColOptUInt32Value default implRqstTableMoveDownConvertColReqUInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColOptUInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColReqUInt32Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColUInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = new BigDecimal( attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColFloatValue"
		>$switch IsNullable yes implRqstTableMoveDownConvertColOptFloatValue default implRqstTableMoveDownConvertColReqFloatValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColOptFloatValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Float.valueOf( Float.parseFloat( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColReqFloatValue">
			nat$Name$ = Float.parseFloat( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColDoubleValue"
		>$switch IsNullable yes implRqstTableMoveDownConvertColOptDoubleValue default implRqstTableMoveDownConvertColReqDoubleValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColOptDoubleValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Double.valueOf( Double.parseDouble( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColReqDoubleValue">
			nat$Name$ = Double.parseDouble( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColNumberValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = new BigDecimal( attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColStringValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColNmTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColNmTokensValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColTextValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColDateValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColTimeValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColTimestampValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColTZDateValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColTZTimeValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColTZTimestampValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertColUuidValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = UUID.fromString( attr$Name$ );
			}</GenRule>


	<GenRule GenDef="Table" Name="implRqstTableMoveDownConvertNatId">
			Integer natId;
			if( ( attrId != null ) &amp;&amp; ( attrId.length() &gt; 0 ) ) {
				natId = Integer.valueOf( Integer.parseInt( attrId ) );
			}
			else {
				natId = null;
			}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownConvertAttrs"
		>$switch HasSuperClassRelation yes implRqstTableMoveDownConvertAttrsSuper default implRqstTableMoveDownConvertAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownConvertAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableMoveDownConvertAttrs$$iterate Columns( each implRqstTableMoveDownConvertDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableMoveDownConvertAttrsBase">$iterate Columns( each implRqstTableMoveDownConvertDataAttr )$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableMoveDownConvertNonIdAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertNonIdAttr"
		>$switch Name Id empty default implRqstTableMoveDownConvertAnUnhiddenAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertAnUnhiddenAttr"
		>$switch ColumnInContainerOrNamedLookupRelation no implRqstTableMoveDownConvertAnAttr default empty$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertAnAttr"
		>$switch IsNullable yes implRqstTableMoveDownConvertOptAttr default implRqstTableMoveDownConvertReqAttr$		pkey.set$OptionalOrRequired$$Name$( nat$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqAttr"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableMoveDownConvertReqBlob
			BoolDef implRqstTableMoveDownConvertReqBool
			EnumDef implRqstTableMoveDownConvertReqEnum
			Id16Gen implRqstTableMoveDownConvertReqInt16
			Id32Gen implRqstTableMoveDownConvertReqInt32
			Id64Gen implRqstTableMoveDownConvertReqInt64
			Int16Def implRqstTableMoveDownConvertReqInt16
			Int32Def implRqstTableMoveDownConvertReqInt32
			Int64Def implRqstTableMoveDownConvertReqInt64
			UInt16Def implRqstTableMoveDownConvertReqUInt16
			UInt32Def implRqstTableMoveDownConvertReqUInt32
			UInt64Def implRqstTableMoveDownConvertReqUInt64
			FloatDef implRqstTableMoveDownConvertReqFloat
			DoubleDef implRqstTableMoveDownConvertReqDouble
			NumberDef implRqstTableMoveDownConvertReqNumber
			DateDef implRqstTableMoveDownConvertReqDate
			TimeDef implRqstTableMoveDownConvertReqTime
			TimestampDef implRqstTableMoveDownConvertReqTimestamp
			TZDateDef implRqstTableMoveDownConvertReqTZDate
			TZTimeDef implRqstTableMoveDownConvertReqTZTime
			TZTimestampDef implRqstTableMoveDownConvertReqTZTimestamp
			UuidGen implRqstTableMoveDownConvertReqUuid
			UuidDef implRqstTableMoveDownConvertReqUuid
			StringDef implRqstTableMoveDownConvertReqString
			TokenDef implRqstTableMoveDownConvertReqString
			NmTokenDef implRqstTableMoveDownConvertReqString
			NmTokensDef implRqstTableMoveDownConvertReqString
			TextDef implRqstTableMoveDownConvertReqString
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableMoveDownConvertOptBlob
			BoolDef implRqstTableMoveDownConvertOptBool
			EnumDef implRqstTableMoveDownConvertOptEnum
			Id16Gen implRqstTableMoveDownConvertOptInt16
			Id32Gen implRqstTableMoveDownConvertOptInt32
			Id64Gen implRqstTableMoveDownConvertOptInt64
			Int16Def implRqstTableMoveDownConvertOptInt16
			Int32Def implRqstTableMoveDownConvertOptInt32
			Int64Def implRqstTableMoveDownConvertOptInt64
			UInt16Def implRqstTableMoveDownConvertOptUInt16
			UInt32Def implRqstTableMoveDownConvertOptUInt32
			UInt64Def implRqstTableMoveDownConvertOptUInt64
			FloatDef implRqstTableMoveDownConvertOptFloat
			DoubleDef implRqstTableMoveDownConvertOptDouble
			NumberDef implRqstTableMoveDownConvertOptNumber
			DateDef implRqstTableMoveDownConvertOptDate
			TimeDef implRqstTableMoveDownConvertOptTime
			TimestampDef implRqstTableMoveDownConvertOptTimestamp
			TZDateDef implRqstTableMoveDownConvertOptTZDate
			TZTimeDef implRqstTableMoveDownConvertOptTZTime
			TZTimestampDef implRqstTableMoveDownConvertOptTZTimestamp
			UuidGen implRqstTableMoveDownConvertOptUuid
			UuidDef implRqstTableMoveDownConvertOptUuid
			StringDef implRqstTableMoveDownConvertOptString
			TokenDef implRqstTableMoveDownConvertOptString
			NmTokenDef implRqstTableMoveDownConvertOptString
			NmTokensDef implRqstTableMoveDownConvertOptString
			TextDef implRqstTableMoveDownConvertOptString
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqBlob">
			byte[] nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqBool">
			boolean nat$Name$;
			if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) || attr$Name$.equals( "1" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) || attr$Name$.equals( "0" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"Unexpected $Name$ value, must be one of true, false, yes, no, 1, or 0, not \"" + attr$Name$ + "\"" );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqEnum">
			I$reference DataType EffSchemaName$Schema.$reference DataType Name$ nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqInt16">
			short nat$Name$ = Short.parseShort( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqInt32">
			int nat$Name$ = Integer.parseInt( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqInt64">
			long nat$Name$ = Long.parseLong( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqUInt16">
			int nat$Name$ = Integer.parseInt( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqUInt32">
			long nat$Name$ = Long.parseLong( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqUInt64">
			BigDecimal nat$Name$ = new BigDecimal( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqFloat">
			float nat$Name$ = Float.parseFloat( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqDouble">
			double nat$Name$ = Double.parseDouble( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqNumber">
			BigDecimal nat$Name$ = new BigDecimal( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqDate">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqTime">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqTimestamp">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqTZDate">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqTZTime">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqTZTimestamp">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqUuid">
			UUID nat$Name$ = UUID.fromString( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertReqString">
			String nat$Name$ = attr$Name$;
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptBlob">
			byte[] nat$Name$;
			if( attr$Name$ == null ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.length() &lt;= 0 ) {
				nat$Name$ = new byte[0];
			}
			else {
				nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptBool">
			Boolean nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) || attr$Name$.equals( "1" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) || attr$Name$.equals( "0" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"Unexpected $Name$ value, must be one of true, false, yes, no, 1, or 0, not \"" + attr$Name$ + "\"" );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptEnum">
			I$reference DataType EffSchemaName$Schema.$reference DataType Name$ nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptInt16">
			Short nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Short.valueOf( Short.parseShort( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptInt32">
			Integer nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptInt64">
			Long nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptUInt16">
			Integer nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptUInt32">
			Long nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Long.valueOf( Long.parseLong( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptUInt64">
			BigDecimal nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= new BigDecimal( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptFloat">
			Float nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Float.valueOf( Float.parseFloat( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptDouble">
			Double nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Double.valueOf( Double.parseDouble( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptNumber">
			BigDecimal nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= new BigDecimal( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptDate">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptTime">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptTimestamp">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptTZDate">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptTZTime">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptTZTimestamp">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptUuid">
			UUID nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = UUID.fromString( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableMoveDownConvertOptString">
			String nat$Name$ = attr$Name$;
</GenRule>

</RuleSet>
