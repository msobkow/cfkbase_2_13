<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+xmsg"
	Name="src/SchemaXMsg/SchemaXMsgRqstTableRdBy.java"
	Revision="2.13"
	Descr="Java 11 XML SAX Element  for Table">

	<GenFile GenDef="Index" Name="fileSchemaXMsgRqstTableRdByJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$xmsgrqst.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		ExpansionClassName="$SchemaName$XMsgRqst$poptop Table TableName$RdBy$Suffix$Java"
		ExpansionKeyName="$SchemaName$XMsgRqst$poptop Table TableName$RdBy$Suffix$Java"
		ExpansionFileName="$SchemaName$XMsgRqst$poptop Table TableName$RdBy$Suffix$.java">
// Description: Java 11 XML Message SAX Response Delete By Index Element  for $poptop Table TableName$

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$XMsgRqst;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.xml.sax.*;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$XMsg.*;

/*
 *	$SchemaName$XMsgRqst$poptop Table TableName$RdBy XML SAX Element  implementation
 *	for $poptop Table TableName$.
 */
public class $SchemaName$XMsgRqst$poptop Table TableName$RdBy$Suffix$
	extends CFLibXmlCoreElementHandler
{$implConstructXMsgRqstTableRdBy$$implRqstTableRdByStartElement$$implRqstTableRdByEndElement$}
</GenFile>

	<GenRule GenDef="Index" Name="implConstructXMsgRqstTableRdBy">
	public $SchemaName$XMsgRqst$poptop Table TableName$RdBy$Suffix$( $SchemaName$XMsgRqst xmsgRqst ) {
		super( xmsgRqst );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByStartElement">
	public void startElement(
		String		uri,
		String		localName,
		String		qName,
		Attributes	attrs )
	throws SAXException
	{
		$SchemaName$XMsgSchemaMessageFormatter schemaFormatter = null;
		try {
			// Common XML Attributes
			String	attrId = null;$implRqstTableRdByDeclKeyAttrs$
			// Attribute Extraction
			String	attrLocalName;
			int		numAttrs;
			int		idxAttr;
			final String S_ProcName = "startElement";
			final String S_LocalName = "LocalName";

			assert qName.equals( "Rqst$poptop Table TableName$RdBy$Suffix$" );
$implRqstTableRdByRetrieveSchemaObj$$implRqstTableRdByExtractAttrs$$implRqstTableRdByCheckRequiredAttrs$$implRqstTableRdByGetContext$$implRqstTableRdByConvertAttributes$$implRqstTableRdByDoRead$
		}
		catch( RuntimeException e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch( Error e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByDoRead"
		>$switch IsUnique yes implRqstTableRdByDoReadOne default implRqstTableRdByDoReadMany$</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByDoReadOne">
			// Read the object
			I$SchemaName$$poptop Table TableName$Obj read = ((I$SchemaName$$poptop Table TableName$Obj)schemaObj.get$poptop Table TableName$TableObj().read$poptop Table TableName$By$Suffix$( $iterate Columns( first implRqstTableRdByPassReadArg each implRqstTableRdByCommaPassReadArg )$,
				true ));
			if( read != null ) {
				String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
					+	"\t" + $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnSingleOpenTag()
					+	$SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnDerivedRec( "\n\t\t", read.get$TableName$Buff() ) + "\n"
					+	"\t" + $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnSingleCloseTag()
					+	schemaFormatter.formatRspnXmlPostamble();
				(($SchemaName$XMsgRqst)getParser()).appendResponse( response );
			}
			else {
				String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
					+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnNoDataFound() + "\n"
					+	schemaFormatter.formatRspnXmlPostamble();
				xmsgRqst.appendResponse( response );
			}</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByDoReadMany">
			// Read the objects
			List&lt;I$poptop Table DefSchemaName$$poptop Table TableName$Obj&gt; list = schemaObj.get$poptop Table TableName$TableObj().read$poptop Table TableName$By$Suffix$( $iterate Columns( first implRqstTableRdByPassReadArg each implRqstTableRdByCommaPassReadArg )$ );
			String responseOpening = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnListOpenTag();
			xmsgRqst.appendResponse( responseOpening );
			Iterator&lt;I$poptop Table DefSchemaName$$poptop Table TableName$Obj&gt; iter = list.iterator();
			I$poptop Table DefSchemaName$$poptop Table TableName$Obj cur;
			String subxml;
			while( iter.hasNext() ) {
				cur = iter.next();
				subxml = $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnDerivedRec( "\n\t\t", cur.get$TableName$Buff() );
				xmsgRqst.appendResponse( subxml );
			}
			String responseClosing =
				 	"\n"
				+	"\t" + $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnListCloseTag()
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.appendResponse( responseClosing );</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableRdByPassReadArg"
		>nat$Name$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableRdByCommaPassReadArg">,
				$implRqstTableRdByPassReadArg$</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByDeclKeyAttrs"
		>$iterate Columns( each implRqstTableRdByDeclEmitNonIdKeyAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableRdByDeclEmitNonIdKeyAttr"
		>$switch Name Id empty default implRqstTableRdByDeclEmitKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableRdByDeclEmitKeyAttr">
			String attr$Name$ = null;</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByEndElement">
	public void endElement(
		String		uri,
		String		localName,
		String		qName )
	throws SAXException
	{
	}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByRetrieveSchemaObj">
			$SchemaName$XMsgRqst xmsgRqst = ($SchemaName$XMsgRqst)getParser();
			if( xmsgRqst == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser()" );
			}

			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();

			I$SchemaName$SchemaObj schemaObj = xmsgRqst.getSchemaObj();
			if( schemaObj == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser().getSchemaObj()" );
			}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByExtractAttrs">
			// Extract Attributes
			numAttrs = attrs.getLength();
			for( idxAttr = 0; idxAttr &lt; numAttrs; idxAttr++ ) {
				attrLocalName = attrs.getLocalName( idxAttr );
				if( attrLocalName.equals( "Id" ) ) {
					if( attrId != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrId = attrs.getValue( idxAttr );
				}$implRqstTableRdByParseKeyAttrs$
				else if( attrLocalName.equals( "schemaLocation" ) ) {
					// ignored
				}
				else {
					throw new CFLibUnrecognizedAttributeException( getClass(),
						S_ProcName,
						getParser().getLocationInfo(),
						attrLocalName );
				}
			}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByParseKeyAttrs"
		>$iterate Columns( each implRqstTableRdByParseEmitKeyAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableRdByParseEmitKeyAttr">
				else if( attrLocalName.equals( "$Name$" ) ) {
					if( attr$Name$ != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attr$Name$ = attrs.getValue( idxAttr );
				}</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByCheckRequiredAttrs">
			// Ensure that required attributes have values$implRqstTableRdByCheckReqKeyBaseAttrs$
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByCheckReqKeyBaseAttrs"
		>$iterate Columns( each implRqstTableRdByCheckReqMaybeEmitKeyAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableRdByCheckReqMaybeEmitKeyAttr"
		>$switch IsNullable no implCheckReqAnAttr default empty$</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByGetContext">
			// Save named attributes to context
			CFLibXmlCoreContext curContext = getParser().getCurContext();</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByPutNamedAttrs"
		>$iterate Columns( each implRqstTableRdByPutNamedAnAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableRdByPutNamedAnAttr">
			curContext.putNamedValue( "$Name$", attr$Name$ );</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByConvertAttributes">
			// Convert string attributes to native Java types
			// and apply the converted attributes to the editBuff.
$implRqstTableRdByConvertKeyAttrs$</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableRdByConvertKeyAttrs"
		>$iterate Columns( each implRqstTableRdByConvertColKeyAttrs )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableRdByConvertColKeyAttrs"
		>$reference Column implRqstTableRdByConvertColKeyAttrs$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColKeyAttrs">
			$implJavaAtomType$ nat$Name$;$switch BaseModelAtomClass
			BlobDef implRqstTableRdByConvertColBlobValue
			BoolDef implRqstTableRdByConvertColBoolValue
			EnumDef implRqstTableRdByConvertColEnumValue
			Int16Def implRqstTableRdByConvertColInt16Value
			Int32Def implRqstTableRdByConvertColInt32Value
			Int64Def implRqstTableRdByConvertColInt64Value
			UInt16Def implRqstTableRdByConvertColUInt16Value
			UInt32Def implRqstTableRdByConvertColUInt32Value
			UInt64Def implRqstTableRdByConvertColUInt64Value
			Id16Gen implRqstTableRdByConvertColInt16Value
			Id32Gen implRqstTableRdByConvertColInt32Value
			Id64Gen implRqstTableRdByConvertColInt64Value
			FloatDef implRqstTableRdByConvertColFloatValue
			DoubleDef implRqstTableRdByConvertColDoubleValue
			NumberDef implRqstTableRdByConvertColNumberValue
			StringDef implRqstTableRdByConvertColStringValue
			TokenDef implRqstTableRdByConvertColTokenValue
			NmTokenDef implRqstTableRdByConvertColNmTokenValue
			NmTokensDef implRqstTableRdByConvertColNmTokensValue
			TextDef implRqstTableRdByConvertColTextValue
			DateDef implRqstTableRdByConvertColDateValue
			TimeDef implRqstTableRdByConvertColTimeValue
			TimestampDef implRqstTableRdByConvertColTimestampValue
			TZDateDef implRqstTableRdByConvertColTZDateValue
			TZTimeDef implRqstTableRdByConvertColTZTimeValue
			TZTimestampDef implRqstTableRdByConvertColTZTimestampValue
			UuidGen implRqstTableRdByConvertColUuidValue
			UuidDef implRqstTableRdByConvertColUuidValue
			default ErrorUnrecognizedBaseModelAtomClass$
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColBlobValue">
			throw new RuntimeException( S_ProcName + "ERROR: Cannot use a BLOB as a Key attribute!" );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColBoolValue"
		>$switch IsNullable yes implRqstTableRdByConvertColOptBoolValue default implRqstTableRdByConvertColReqBoolValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColReqBoolValue">
			if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColOptBoolValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() == 0 ) ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = Boolean.valueOf( true );
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = Boolean.valueOf( false );
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColEnumValue"
		>$switch IsNullable yes implRqstTableRdByConvertColOptEnumValue default implRqstTableRdByConvertColReqEnumValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColOptEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColReqEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColInt16Value"
		>$switch IsNullable yes implRqstTableRdByConvertColOptInt16Value default implRqstTableRdByConvertColReqInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColOptInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Short.valueOf( Short.parseShort( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColReqInt16Value">
			nat$Name$ = Short.parseShort( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColInt32Value"
		>$switch IsNullable yes implRqstTableRdByConvertColOptInt32Value default implRqstTableRdByConvertColReqInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColOptInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColReqInt32Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColInt64Value"
		>$switch IsNullable yes implRqstTableRdByConvertColOptInt64Value default implRqstTableRdByConvertColReqInt64Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColOptInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColReqInt64Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColUInt16Value"
		>$switch IsNullable yes implRqstTableRdByConvertColOptUInt16Value default implRqstTableRdByConvertColReqUInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColOptUInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColReqUInt16Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColUInt32Value"
		>$switch IsNullable yes implRqstTableRdByConvertColOptUInt32Value default implRqstTableRdByConvertColReqUInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColOptUInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColReqUInt32Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColUInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = new BigDecimal( attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColFloatValue"
		>$switch IsNullable yes implRqstTableRdByConvertColOptFloatValue default implRqstTableRdByConvertColReqFloatValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColOptFloatValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Float.valueOf( Float.parseFloat( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColReqFloatValue">
			nat$Name$ = Float.parseFloat( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColDoubleValue"
		>$switch IsNullable yes implRqstTableRdByConvertColOptDoubleValue default implRqstTableRdByConvertColReqDoubleValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColOptDoubleValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Double.valueOf( Double.parseDouble( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColReqDoubleValue">
			nat$Name$ = Double.parseDouble( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColNumberValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = new BigDecimal( attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColStringValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColNmTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColNmTokensValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColTextValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColDateValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColTimeValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColTimestampValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColTZDateValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColTZTimeValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColTZTimestampValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableRdByConvertColUuidValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = UUID.fromString( attr$Name$ );
			}</GenRule>

</RuleSet>
