<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+xmsg"
	Name="src/SchemaXMsg/SchemaXMsgRqstLogIn.java"
	Revision="2.13"
	Descr="Java 11 XML SAX Element  for Log In Requests">

	<GenFile GenDef="SchemaDef" Name="fileSchemaXMsgRqstLogInJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$xmsgrqst.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		ExpansionClassName="$SchemaName$XMsgRqstLogInJava"
		ExpansionKeyName="$SchemaName$XMsgRqstLogInJava"
		ExpansionFileName="$SchemaName$XMsgRqstLogIn.java">
// Description: Java 11 XML Message SAX Request Log In Element 

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$XMsgRqst;

import java.security.*;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.*;

import javax.crypto.*;

import org.apache.commons.codec.binary.Base64;
import org.xml.sax.*;

import org.msscf.msscf.cflib.CFLib.*;$iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$importJavaPackageSchemaName$$iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$XMsg.*;

/*
 *	$SchemaName$XMsgRqstLogIn XML SAX Element  implementation
 */
public class $SchemaName$XMsgRqstLogIn
	extends CFLibXmlCoreElementHandler
{$implConstructXMsgRqstLogIn$$implRqstLogInStartElement$$implRqstLogInEndElement$}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="implConstructXMsgRqstLogIn">
	public $SchemaName$XMsgRqstLogIn( $SchemaName$XMsgRqst xmsgRqst ) {
		super( xmsgRqst );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInStartElement">
	public void startElement(
		String		uri,
		String		localName,
		String		qName,
		Attributes	attrs )
	throws SAXException
	{
		final String S_ProcName = "startElement";
		I$SchemaName$SchemaObj schemaObj = null;
		$SchemaName$XMsgSchemaMessageFormatter schemaFormatter = null;
		try {
			// Common XML Attributes
			String	attrId = null;
			// Request Attributes
			String	attrLoginId = null;
			String	attrDeviceName = null;
			String	attrDevEncPWHash = null;
			String	attrClusterName = null;
			String	attrTenantName = null;
			// Attribute Extraction
			String	attrLocalName;
			int		numAttrs;
			int		idxAttr;
			final String S_LocalName = "LocalName";

			assert qName.equals( "RqstLogIn" );
$implRqstLogInRetrieveSchemaObj$$implRqstLogInExtractAttrs$$implRqstLogInCheckRequiredAttrs$$implRqstLogInDoLogInPart01$$implRqstLogInDoLogInPart02$$implRqstLogInDoLogInPart03$$implRqstLogInDoLogInPart04$$implRqstLogInDoLogInPart05$$implRqstLogInDoLogInPart06$$implRqstLogInDoLogInPart07$$implRqstLogInDoLogInPart08$
		}$implRqstLogInCatchExceptions$
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInCatchExceptions">
		catch (IllegalBlockSizeException e) {
			if( schemaObj != null ) {
				schemaObj.rollback();
				schemaObj.setAuthorization( null );
			}
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch (BadPaddingException e) {
			if( schemaObj != null ) {
				schemaObj.rollback();
				schemaObj.setAuthorization( null );
			}
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}$implRqstLogInCatchExceptionsPart2$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInCatchExceptionsPart2">
		catch (InvalidKeyException e) {
			if( schemaObj != null ) {
				schemaObj.rollback();
				schemaObj.setAuthorization( null );
			}
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch (NoSuchAlgorithmException e) {
			if( schemaObj != null ) {
				schemaObj.rollback();
				schemaObj.setAuthorization( null );
			}
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}$implRqstLogInCatchExceptionsPart3$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInCatchExceptionsPart3">
		catch (NoSuchPaddingException e) {
			if( schemaObj != null ) {
				schemaObj.rollback();
				schemaObj.setAuthorization( null );
			}
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch (InvalidKeySpecException e) {
			if( schemaObj != null ) {
				schemaObj.rollback();
				schemaObj.setAuthorization( null );
			}
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}$implRqstLogInCatchExceptionsPart4$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInCatchExceptionsPart4">
		catch( RuntimeException e ) {
			if( schemaObj != null ) {
				schemaObj.rollback();
				schemaObj.setAuthorization( null );
			}
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch( Error e ) {
			if( schemaObj != null ) {
				schemaObj.rollback();
				schemaObj.setAuthorization( null );
			}
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInEndElement">
	public void endElement(
		String		uri,
		String		localName,
		String		qName )
	throws SAXException
	{
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInRetrieveSchemaObj">
			$SchemaName$XMsgRqst xmsgRqst = ($SchemaName$XMsgRqst)getParser();
			if( xmsgRqst == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser()" );
			}

			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();

			schemaObj = xmsgRqst.getSchemaObj();
			if( schemaObj == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser().getSchemaObj()" );
			}

			schemaObj.connect();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInExtractAttrs">
			// Extract Attributes
			numAttrs = attrs.getLength();
			for( idxAttr = 0; idxAttr &lt; numAttrs; idxAttr++ ) {
				attrLocalName = attrs.getLocalName( idxAttr );
				if( attrLocalName.equals( "Id" ) ) {
					if( attrId != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrId = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "LoginId" ) ) {
					if( attrLoginId != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrLoginId = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "DeviceName" ) ) {
					if( attrDeviceName != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrDeviceName = attrs.getValue( idxAttr );
				}$implRqstLogInExtractAttrsPart2$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInExtractAttrsPart2">
				else if( attrLocalName.equals( "DevEncPWHash" ) ) {
					if( attrDevEncPWHash != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrDevEncPWHash = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "ClusterName" ) ) {
					if( attrClusterName != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrClusterName = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "TenantName" ) ) {
					if( attrTenantName != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrTenantName = attrs.getValue( idxAttr );
				}$implRqstLogInExtractAttrsPart3$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInExtractAttrsPart3">
				else {
					throw new CFLibUnrecognizedAttributeException( getClass(),
						S_ProcName,
						getParser().getLocationInfo(),
						attrLocalName );
				}
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInCheckRequiredAttrs">
			// Ensure that required attributes have values
			if( ( attrLoginId == null ) || ( attrLoginId.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"LoginId" );
			}
			if( ( attrDeviceName == null ) || ( attrDeviceName.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"DeviceName" );
			}
			if( ( attrDevEncPWHash == null ) || ( attrDevEncPWHash.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"DevEncPWHash" );
			}
			if( ( attrClusterName == null ) || ( attrClusterName.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"ClusterName" );
			}
			if( ( attrTenantName == null ) || ( attrTenantName.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"TenantName" );
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInGetContext">
			// Get current context
			CFLibXmlCoreContext curContext = getParser().getCurContext();</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInDoLogInPart01">
			if( schemaObj.getAuthorization() != null ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Back end database schema already authorized against database" );
			}

			if( schemaObj.isTransactionOpen() ) {
				schemaObj.rollback();
			}

			schemaObj.beginTransaction();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInDoLogInPart02">
			I$SecSchemaName$SysClusterObj sysCluster = schemaObj.getSysClusterTableObj().readSysClusterByIdIdx( 1, false );
			if( sysCluster == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"sysCluster" );
			}

			I$SecSchemaName$ClusterObj resolvedCluster = sysCluster.getRequiredContainerCluster();
			if( resolvedCluster == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					"resolvedCluster" );
			}

			I$SecSchemaName$SecUserObj authenticatingUser = schemaObj.getSecUserTableObj().readSecUserByULoginIdx( attrLoginId, true );
			if( authenticatingUser == null ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					"Permission denied" );
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInDoLogInPart03">
			I$SecSchemaName$SecDeviceObj device = schemaObj.getSecDeviceTableObj().readSecDeviceByIdIdx( authenticatingUser.getRequiredSecUserId(),
				attrDeviceName,
				true );
			if( device == null ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					"Permission denied" );
			}

			String pubKey = device.getOptionalPubKey();
			if( ( pubKey == null ) || ( pubKey.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"DevicePublicKey" );
			}

			byte wrapped[] = Base64.decodeBase64( pubKey );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInDoLogInPart04">
			X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec( wrapped );
			KeyFactory kf = KeyFactory.getInstance( "RSA" );
			if( kf == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"kf" );
			}

			PublicKey decodedPublicKey = kf.generatePublic( x509KeySpec );
			if( decodedPublicKey == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"DecodedPublicKey" );
			}

			byte decodedDevEncPWHash[] = Base64.decodeBase64( attrDevEncPWHash );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInDoLogInPart05">
			Cipher cipher = Cipher.getInstance( "RSA/ECB/PKCS1Padding" );
			if( cipher == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"cipher" );
			}

			cipher.init( Cipher.DECRYPT_MODE, decodedPublicKey );

			byte decryptedPWHash[] = cipher.doFinal( decodedDevEncPWHash );

			MessageDigest msgDigest = MessageDigest.getInstance( "SHA-512" );
			msgDigest.update( decryptedPWHash );
			byte hash[] = msgDigest.digest();
			byte encodedDoubleHash[] = Base64.encodeBase64( hash );
			String hashedAndEncodedPassword = new String( encodedDoubleHash );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInDoLogInPart06">
			if( ! hashedAndEncodedPassword.equals( authenticatingUser.getRequiredPasswordHash() ) ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					"Permission denied" );
			}

			I$SecSchemaName$ClusterObj useCluster = null;
			if( attrClusterName.equals( "system" ) ) {
				useCluster = schemaObj.getClusterTableObj().readClusterByUDomNameIdx( "system" );
				if( useCluster == null ) {
					throw new CFLibNullArgumentException( getClass(),
						S_ProcName,
						0,
						"ClusterSystem" );
				}
				attrTenantName = "system";
			}
			else {
				useCluster = resolvedCluster;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInDoLogInPart07">
			I$SecSchemaName$TenantObj useTenant = schemaObj.getTenantTableObj().readTenantByUNameIdx( useCluster.getRequiredId(),
				attrTenantName );
			if( useTenant == null ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					"No such tenant \"" + attrTenantName + "\"" );
			}

			I$SecSchemaName$SecSessionObj systemSession = schemaObj.getSecSessionTableObj().newInstance();
			I$SecSchemaName$SecSessionEditObj editSystemSession = (I$SecSchemaName$SecSessionEditObj)systemSession.beginEdit();
			editSystemSession.setRequiredContainerSecUser( authenticatingUser );
			editSystemSession.setRequiredStart( Calendar.getInstance() );
			systemSession = editSystemSession.create();
			editSystemSession = null;

			$SecSchemaName$Authorization auth = new $SecSchemaName$Authorization();
			auth.setSecCluster( useCluster );
			auth.setSecTenant( useTenant );
			auth.setSecSession( systemSession );
			schemaObj.setAuthorization( auth );

			schemaObj.commit();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRqstLogInDoLogInPart08">
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnLoggedIn( "\n\t\t\t",
								schemaObj.getSecCluster().getRequiredId(),
								schemaObj.getSecCluster().getRequiredFullDomName(),
								schemaObj.getSecTenant().getRequiredId(),
								schemaObj.getSecTenant().getRequiredTenantName(),
								schemaObj.getSecSession().getRequiredContainerSecUser().getRequiredSecUserId(),
								schemaObj.getSecSession().getRequiredContainerSecUser().getRequiredLoginId(),
								schemaObj.getSecSession().getRequiredSecSessionId() ) +	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			(($SchemaName$XMsgRqst)getParser()).appendResponse( response );</GenRule>

</RuleSet>
