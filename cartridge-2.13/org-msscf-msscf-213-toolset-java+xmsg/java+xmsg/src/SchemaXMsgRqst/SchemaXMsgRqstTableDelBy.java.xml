<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+xmsg"
	Name="src/SchemaXMsg/SchemaXMsgRqstTableDelBy.java"
	Revision="2.13"
	Descr="Java 11 XML SAX Element  for Table">

	<GenFile GenDef="Index" Name="fileSchemaXMsgRqstTableDelByJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$xmsgrqst.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		ExpansionClassName="$SchemaName$XMsgRqst$poptop Table TableName$DelBy$Suffix$Java"
		ExpansionKeyName="$SchemaName$XMsgRqst$poptop Table TableName$DelBy$Suffix$Java"
		ExpansionFileName="$SchemaName$XMsgRqst$poptop Table TableName$DelBy$Suffix$.java">
// Description: Java 11 XML Message SAX Response Delete By Index Element  for $poptop Table TableName$

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$XMsgRqst;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.xml.sax.*;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$XMsg.*;

/*
 *	$SchemaName$XMsgRqst$TableName$DelBy XML SAX Element  implementation
 *	for $TableName$.
 */
public class $SchemaName$XMsgRqst$poptop Table TableName$DelBy$Suffix$
	extends CFLibXmlCoreElementHandler
{$implConstructXMsgRqstTableDelBy$$implRqstTableDelByStartElement$$implRqstTableDelByEndElement$}
</GenFile>

	<GenRule GenDef="Index" Name="implConstructXMsgRqstTableDelBy">
	public $SchemaName$XMsgRqst$poptop Table TableName$DelBy$Suffix$( $SchemaName$XMsgRqst xmsgRqst ) {
		super( xmsgRqst );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByStartElement">
	public void startElement(
		String		uri,
		String		localName,
		String		qName,
		Attributes	attrs )
	throws SAXException
	{
		$SchemaName$XMsgSchemaMessageFormatter schemaFormatter = null;
		try {
			// Common XML Attributes
			String	attrId = null;$implRqstTableDelByDeclKeyAttrs$
			// Attribute Extraction
			String	attrLocalName;
			int		numAttrs;
			int		idxAttr;
			final String S_ProcName = "startElement";
			final String S_LocalName = "LocalName";

			assert qName.equals( "Rqst$TableName$DelBy$Suffix$" );
$implRqstTableDelByRetrieveSchemaObj$$implRqstTableDelByExtractAttrs$$implRqstTableDelByCheckRequiredAttrs$$implRqstTableDelByGetContext$$implRqstTableDelByConvertAttributes$$implRqstTableDelByDoDelete$
		}
		catch( RuntimeException e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch( Error e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByDoDelete">
			// Delete the objects
			schemaObj.get$poptop Table TableName$TableObj().delete$poptop Table TableName$By$Suffix$( $iterate Columns( first implRqstTableDelByPassReadArg each implRqstTableDelByCommaPassReadArg )$ );
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnDeleted() +	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			(($SchemaName$XMsgRqst)getParser()).appendResponse( response );</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableDelByPassReadArg"
		>nat$Name$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableDelByCommaPassReadArg">,
				$implRqstTableDelByPassReadArg$</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByDeclKeyAttrs"
		>$iterate Columns( each implRqstTableDelByDeclEmitNonIdKeyAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableDelByDeclEmitNonIdKeyAttr"
		>$switch Name Id empty default implRqstTableDelByDeclEmitKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableDelByDeclEmitKeyAttr">
			String attr$Name$ = null;</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByEndElement">
	public void endElement(
		String		uri,
		String		localName,
		String		qName )
	throws SAXException
	{
	}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByRetrieveSchemaObj">
			$SchemaName$XMsgRqst xmsgRqst = ($SchemaName$XMsgRqst)getParser();
			if( xmsgRqst == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser()" );
			}

			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();

			I$SchemaName$SchemaObj schemaObj = xmsgRqst.getSchemaObj();
			if( schemaObj == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser().getSchemaObj()" );
			}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByExtractAttrs">
			// Extract Attributes
			numAttrs = attrs.getLength();
			for( idxAttr = 0; idxAttr &lt; numAttrs; idxAttr++ ) {
				attrLocalName = attrs.getLocalName( idxAttr );
				if( attrLocalName.equals( "Id" ) ) {
					if( attrId != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrId = attrs.getValue( idxAttr );
				}$implRqstTableDelByParseKeyAttrs$
				else if( attrLocalName.equals( "schemaLocation" ) ) {
					// ignored
				}
				else {
					throw new CFLibUnrecognizedAttributeException( getClass(),
						S_ProcName,
						getParser().getLocationInfo(),
						attrLocalName );
				}
			}
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByParseKeyAttrs"
		>$iterate Columns( each implRqstTableDelByParseEmitKeyAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableDelByParseEmitKeyAttr">
				else if( attrLocalName.equals( "$Name$" ) ) {
					if( attr$Name$ != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attr$Name$ = attrs.getValue( idxAttr );
				}</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByCheckRequiredAttrs">
			// Ensure that required attributes have values$implRqstTableDelByCheckReqKeyBaseAttrs$
</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByCheckReqKeyBaseAttrs"
		>$iterate Columns( each implRqstTableDelByCheckReqMaybeEmitKeyAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableDelByCheckReqMaybeEmitKeyAttr"
		>$switch IsNullable no implCheckReqAnAttr default empty$</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByGetContext">
			// Save named attributes to context
			CFLibXmlCoreContext curContext = getParser().getCurContext();</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByPutNamedAttrs"
		>$iterate Columns( each implRqstTableDelByPutNamedAnAttr )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableDelByPutNamedAnAttr">
			curContext.putNamedValue( "$Name$", attr$Name$ );</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByConvertAttributes">
			// Convert string attributes to native Java types
$implRqstTableDelByConvertKeyAttrs$</GenRule>

	<GenRule GenDef="Index" Name="implRqstTableDelByConvertKeyAttrs"
		>$iterate Columns( each implRqstTableDelByConvertColKeyAttrs )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableDelByConvertColKeyAttrs"
		>$reference Column implRqstTableDelByConvertColKeyAttrs$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColKeyAttrs">
			$implJavaAtomType$ nat$Name$;$switch BaseModelAtomClass
			BlobDef implRqstTableDelByConvertColBlobValue
			BoolDef implRqstTableDelByConvertColBoolValue
			EnumDef implRqstTableDelByConvertColEnumValue
			Int16Def implRqstTableDelByConvertColInt16Value
			Int32Def implRqstTableDelByConvertColInt32Value
			Int64Def implRqstTableDelByConvertColInt64Value
			UInt16Def implRqstTableDelByConvertColUInt16Value
			UInt32Def implRqstTableDelByConvertColUInt32Value
			UInt64Def implRqstTableDelByConvertColUInt64Value
			Id16Gen implRqstTableDelByConvertColInt16Value
			Id32Gen implRqstTableDelByConvertColInt32Value
			Id64Gen implRqstTableDelByConvertColInt64Value
			FloatDef implRqstTableDelByConvertColFloatValue
			DoubleDef implRqstTableDelByConvertColDoubleValue
			NumberDef implRqstTableDelByConvertColNumberValue
			StringDef implRqstTableDelByConvertColStringValue
			TokenDef implRqstTableDelByConvertColTokenValue
			NmTokenDef implRqstTableDelByConvertColNmTokenValue
			NmTokensDef implRqstTableDelByConvertColNmTokensValue
			TextDef implRqstTableDelByConvertColTextValue
			DateDef implRqstTableDelByConvertColDateValue
			TimeDef implRqstTableDelByConvertColTimeValue
			TimestampDef implRqstTableDelByConvertColTimestampValue
			TZDateDef implRqstTableDelByConvertColTZDateValue
			TZTimeDef implRqstTableDelByConvertColTZTimeValue
			TZTimestampDef implRqstTableDelByConvertColTZTimestampValue
			UuidGen implRqstTableDelByConvertColUuidValue
			UuidDef implRqstTableDelByConvertColUuidValue
			default ErrorUnrecognizedBaseModelAtomClass$
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColBlobValue">
			throw new RuntimeException( S_ProcName + "ERROR: Cannot use a BLOB as a Key attribute!" );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColBoolValue"
		>$switch IsNullable yes implRqstTableDelByConvertColOptBoolValue default implRqstTableDelByConvertColReqBoolValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColReqBoolValue">
			if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColOptBoolValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() == 0 ) ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = Boolean.valueOf( true );
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = Boolean.valueOf( false );
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColEnumValue"
		>$switch IsNullable yes implRqstTableDelByConvertColOptEnumValue default implRqstTableDelByConvertColReqEnumValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColOptEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColReqEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColInt16Value"
		>$switch IsNullable yes implRqstTableDelByConvertColOptInt16Value default implRqstTableDelByConvertColReqInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColOptInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Short.valueOf( Short.parseShort( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColReqInt16Value">
			nat$Name$ = Short.parseShort( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColInt32Value"
		>$switch IsNullable yes implRqstTableDelByConvertColOptInt32Value default implRqstTableDelByConvertColReqInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColOptInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColReqInt32Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColInt64Value"
		>$switch IsNullable yes implRqstTableDelByConvertColOptInt64Value default implRqstTableDelByConvertColReqInt64Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColOptInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColReqInt64Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColUInt16Value"
		>$switch IsNullable yes implRqstTableDelByConvertColOptUInt16Value default implRqstTableDelByConvertColReqUInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColOptUInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColReqUInt16Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColUInt32Value"
		>$switch IsNullable yes implRqstTableDelByConvertColOptUInt32Value default implRqstTableDelByConvertColReqUInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColOptUInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColReqUInt32Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColUInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", 19, 0, attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColFloatValue"
		>$switch IsNullable yes implRqstTableDelByConvertColOptFloatValue default implRqstTableDelByConvertColReqFloatValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColOptFloatValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Float.valueOf( Float.parseFloat( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColReqFloatValue">
			nat$Name$ = Float.parseFloat( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColDoubleValue"
		>$switch IsNullable yes implRqstTableDelByConvertColOptDoubleValue default implRqstTableDelByConvertColReqDoubleValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColOptDoubleValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Double.valueOf( Double.parseDouble( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColReqDoubleValue">
			nat$Name$ = Double.parseDouble( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColNumberValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", $Digits$, $Precis$, attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColStringValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColNmTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColNmTokensValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColTextValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColDateValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColTimeValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColTimestampValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColTZDateValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColTZTimeValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColTZTimestampValue">
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableDelByConvertColUuidValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = UUID.fromString( attr$Name$ );
			}</GenRule>

</RuleSet>
