<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+xmsg"
	Name="src/SchemaXMsg/SchemaXMsgRqstTableCreate.java"
	Revision="2.13"
	Descr="Java 11 XML SAX Element  for Table">

	<GenFile GenDef="Table" Name="fileSchemaXMsgRqstTableCreateJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$xmsgrqst.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRqst"
		ExpansionClassName="$SchemaName$XMsgRqst$TableName$CreateJava"
		ExpansionKeyName="$SchemaName$XMsgRqst$TableName$CreateJava"
		ExpansionFileName="$SchemaName$XMsgRqst$TableName$Create.java">
// Description: Java 11 XML Message SAX Response Record Element  for $TableName$

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$XMsgRqst;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.xml.sax.*;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$XMsg.*;

/*
 *	$SchemaName$XMsgRqst$TableName$Create XML SAX Element  implementation
 *	for $TableName$.
 */
public class $SchemaName$XMsgRqst$TableName$Create
	extends CFLibXmlCoreElementHandler
{$implConstructXMsgRqstTableCreate$$implRqstTableCreateStartElement$$implRqstTableCreateEndElement$}
</GenFile>

	<GenRule GenDef="Table" Name="implConstructXMsgRqstTableCreate">
	public $SchemaName$XMsgRqst$TableName$Create( $SchemaName$XMsgRqst xmsgRqst ) {
		super( xmsgRqst );
	}
</GenRule>

	<GenRule GenDef="Relation" Name="IsToIndexUnique"
		>$reference ToIndex IsUnique$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateStartElement">
	public void startElement(
		String		uri,
		String		localName,
		String		qName,
		Attributes	attrs )
	throws SAXException
	{
		$SchemaName$XMsgSchemaMessageFormatter schemaFormatter = null;
		try {
			// Common XML Attributes
			String	attrId = null;
			String	attrRevision = null;$implRqstTableCreateDeclAttrs$
			// Attribute Extraction
			String	attrLocalName;
			int		numAttrs;
			int		idxAttr;
			final String S_ProcName = "startElement";
			final String S_LocalName = "LocalName";

			assert qName.equals( "Rqst$TableName$Create" );
$implRqstTableCreateRetrieveSchemaObj$$implRqstTableCreateConsEditBuff$$implRqstTableCreateExtractAttrs$$implRqstTableCreateCheckRequiredAttrs$$implRqstTableCreateGetContext$$implRqstTableCreateConvertAttributes$$implRqstTableCreateDoCreate$
		}
		catch( RuntimeException e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
		catch( Error e ) {
			$SchemaName$XMsgRqst xmsgRqst = (($SchemaName$XMsgRqst)getParser());
			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsgSchemaMessageFormatter.formatRspnException( "\n\t\t\t", e )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			xmsgRqst.resetResponse();
			xmsgRqst.appendResponse( response );
			xmsgRqst.setCaughtException( true );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateDeclAttrs"
		>$switch HasSuperClassRelation yes implRqstTableCreateDeclAttrsSuper default implRqstTableCreateDeclAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateDeclAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableCreateDeclAttrs$
			// $TableName$ Attributes$iterate Columns( each implRqstTableCreateDeclDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateDeclAttrsBase">
			// $TableName$ Attributes$reference PrimaryKeyIndex iterate Columns( each implRqstTableCreateDeclNonIdAttr empty empty )$$iterate Columns( each implRqstTableCreateDeclDataAttr )$$switch BaseHasAuditColumns yes implTableDeclAttrsAudit default empty$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateDeclDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableCreateDeclNonIdAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableCreateDeclNonIdAttr"
		>$reference Column implRqstTableCreateDeclNonIdAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateDeclNonIdAttr"
		>$switch Name Id empty default implRqstTableCreateDeclAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateDeclAnAttr">
			String	attr$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateDoCreate">
			//	Attempt the create
			editBuff.copyBuffToPKey();	// Allow for predefined ids
			I$SchemaName$$TableName$Obj created = (I$SchemaName$$TableName$Obj)editBuff.create();
			editBuff = null;
			String response = schemaFormatter.formatRspnXmlPreamble() + "\n"
				+	"\t" + $SchemaName$XMsg$TableName$MessageFormatter.format$TableName$RspnCreated( "\n\t\t\t", created.get$TableName$Buff() )
				+	"\n"
				+	schemaFormatter.formatRspnXmlPostamble();
			(($SchemaName$XMsgRqst)getParser()).appendResponse( response );</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateDeclPKeyAttrs">
			// Primary Key Attributes for Constant Enum support$switch HasSuperClassRelation yes implRqstTableCreateDeclPKeyInhAttrs default implRqstTableCreateDeclPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateDeclPKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableCreateDeclNonIdPKeyAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateDeclPKeyInhAttrs"
		>$reference SuperclassRelation reference ToTable implRqstTableCreateDeclPKeyDecisionAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateDeclPKeyDecisionAttrs"
		>$switch HasSuperClassRelation yes implRqstTableCreateDeclPKeyInhAttrs default implRqstTableCreateDeclPKeyBaseAttrs$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableCreateDeclNonIdPKeyAttr"
		>$switch Name Id empty default implRqstTableCreateDeclEmitPKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableCreateDeclEmitPKeyAttr">
			String attr$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateConsEditBuff">
			// Instantiate an edit buffer for the parsed information
			I$SchemaName$$TableName$EditObj editBuff = (I$SchemaName$$TableName$EditObj)schemaObj.get$TableName$TableObj().newInstance().beginEdit();
			$DefSchemaName$$TableName$Buff dataBuff = ($DefSchemaName$$TableName$Buff)editBuff.get$TableName$Buff();</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateEndElement">
	public void endElement(
		String		uri,
		String		localName,
		String		qName )
	throws SAXException
	{
	}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateRetrieveSchemaObj">
			$SchemaName$XMsgRqst xmsgRqst = ($SchemaName$XMsgRqst)getParser();
			if( xmsgRqst == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser()" );
			}

			schemaFormatter = xmsgRqst.getSchemaMessageFormatter();

			I$SchemaName$SchemaObj schemaObj = xmsgRqst.getSchemaObj();
			if( schemaObj == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser().getSchemaObj()" );
			}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateExtractAttrs">
			// Extract Attributes
			numAttrs = attrs.getLength();
			for( idxAttr = 0; idxAttr &lt; numAttrs; idxAttr++ ) {
				attrLocalName = attrs.getLocalName( idxAttr );
				if( attrLocalName.equals( "Id" ) ) {
					if( attrId != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrId = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "schemaLocation" ) ) {
					// ignored
				}
				else if( attrLocalName.equals( "Revision" ) ) {
					if( attrRevision != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrRevision = attrs.getValue( idxAttr );
				}$switch BaseHasAuditColumns yes implTableParseAuditAttrs default empty$$implRqstTableCreateParseAttrs$
				else {
					throw new CFLibUnrecognizedAttributeException( getClass(),
						S_ProcName,
						getParser().getLocationInfo(),
						attrLocalName );
				}
			}
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateParsePKeyAttrs"
		>$switch HasSuperClassRelation yes implRqstTableCreateParsePKeyInhAttrs default implRqstTableCreateParsePKeyBaseAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateParsePKeyBaseAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableCreateParseNonIdPKeyAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateParsePKeyInhAttrs"
		>$reference SuperclassRelation reference ToTable implRqstTableCreateParsePKeyAttrs$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableCreateParseNonIdPKeyAttr"
		>$switch Name Id empty default implRqstTableCreateParseEmitPKeyAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableCreateParseEmitPKeyAttr">
				else if( attrLocalName.equals( "$Name$" ) ) {
					if( attr$Name$ != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attr$Name$ = attrs.getValue( idxAttr );
				}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateParseAttrs"
		>$switch HasSuperClassRelation yes implRqstTableCreateParseAttrsSuper default implRqstTableCreateParseAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateParseAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableCreateParseAttrs$$iterate Columns( each implRqstTableCreateParseDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateParseAttrsBase">$iterate Columns( each implRqstTableCreateParseNonIdAttr )$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateParseDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableCreateParseNonIdAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateParseNonIdAttr"
		>$switch Name Id empty default implRqstTableCreateParseAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateParseAnAttr">
				else if( attrLocalName.equals( "$Name$" ) ) {
					if( attr$Name$ != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attr$Name$ = attrs.getValue( idxAttr );
				}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateCheckRequiredAttrs">
			// Ensure that required attributes have values$implRqstTableCreateCheckReqAttrs$
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateCheckReqAttrs"
		>$switch HasSuperClassRelation yes implRqstTableCreateCheckReqAttrsSuper default implRqstTableCreateCheckReqAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateCheckReqAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableCreateCheckReqAttrs$$iterate Columns( each implRqstTableCreateCheckReqDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateCheckReqAttrsBase">$iterate Columns( each implCheckReqAnAttr )$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateCheckReqDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implCheckReqAnAttr$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCheckReqAnAttr"
		>$reference Column implCheckReqAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implCheckReqAnAttr"
		>$switch IsNullable no implReallyCheckReqAttr default empty$</GenRule>

	<GenRule GenDef="Value" Name="implReallyCheckReqAttr"
		>$switch BaseModelAtomClass
			StringDef implReallyCheckReqStringAttr
			TextDef implReallyCheckReqStringAttr
			NmTokenDef implReallyCheckReqStringAttr
			NmTokensDef implReallyCheckReqStringAttr
			TokenDef implReallyCheckReqStringAttr
			default implReallyCheckReqValueAttr$</GenRule>

	<GenRule GenDef="Value" Name="implReallyCheckReqStringAttr">
			if( attr$Name$ == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$" );
			}</GenRule>

	<GenRule GenDef="Value" Name="implReallyCheckReqValueAttr">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateGetContext">
			// Save named attributes to context
			CFLibXmlCoreContext curContext = getParser().getCurContext();
</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreatePutNamedAttrs"
		>$switch HasSuperClassRelation yes implRqstTableCreatePutNamedAttrsSuper default implRqstTableCreatePutNamedAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreatePutNamedAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableCreatePutNamedAttrs$$iterate Columns( each implRqstTableCreatePutNamedDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreatePutNamedAttrsBase">$iterate Columns( each implRqstTableCreatePutNamedDataAttr )$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreatePutNamedDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableCreatePutNamedNonIdAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreatePutNamedNonIdAttr"
		>$switch Name Id empty default implRqstTableCreatePutNamedAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreatePutNamedAnAttr">
			curContext.putNamedValue( "$Name$", attr$Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateConvertAttributes">
			// Convert string attributes to native Java types
			// and apply the converted attributes to the editBuff.$implRqstTableCreateConvertAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateConvertPKeyAttrs"
		>$switch HasSuperClassRelation yes implRqstTableCreateConvertInhPKeyAttrs default implRqstTableCreateConvertBasePKeyAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateConvertInhPKeyAttrs"
		>$reference SuperclassRelation reference ToTable implRqstTableCreateConvertPKeyAttrs$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateConvertBasePKeyAttrs"
		>$reference PrimaryKeyIndex iterate Columns( each implRqstTableCreateConvertColPKeyAttrs )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implRqstTableCreateConvertColPKeyAttrs"
		>$reference Column implRqstTableCreateConvertColPKeyAttrs$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColPKeyAttrs">
		$implJavaAtomType$ nat$Name$;$switch BaseModelAtomClass
			BlobDef implRqstTableCreateConvertColBlobValue
			BoolDef implRqstTableCreateConvertColBoolValue
			EnumDef implRqstTableCreateConvertColEnumValue
			Int16Def implRqstTableCreateConvertColInt16Value
			Int32Def implRqstTableCreateConvertColInt32Value
			Int64Def implRqstTableCreateConvertColInt64Value
			UInt16Def implRqstTableCreateConvertColUInt16Value
			UInt32Def implRqstTableCreateConvertColUInt32Value
			UInt64Def implRqstTableCreateConvertColUInt64Value
			Id16Gen implRqstTableCreateConvertColInt16Value
			Id32Gen implRqstTableCreateConvertColInt32Value
			Id64Gen implRqstTableCreateConvertColInt64Value
			FloatDef implRqstTableCreateConvertColFloatValue
			DoubleDef implRqstTableCreateConvertColDoubleValue
			NumberDef implRqstTableCreateConvertColNumberValue
			StringDef implRqstTableCreateConvertColStringValue
			TokenDef implRqstTableCreateConvertColTokenValue
			NmTokenDef implRqstTableCreateConvertColNmTokenValue
			NmTokensDef implRqstTableCreateConvertColNmTokensValue
			TextDef implRqstTableCreateConvertColTextValue
			DateDef implRqstTableCreateConvertColDateValue
			TimeDef implRqstTableCreateConvertColTimeValue
			TimestampDef implRqstTableCreateConvertColTimestampValue
			TZDateDef implRqstTableCreateConvertColTZDateValue
			TZTimeDef implRqstTableCreateConvertColTZTimeValue
			TZTimestampDef implRqstTableCreateConvertColTZTimestampValue
			UuidGen implRqstTableCreateConvertColUuidValue
			UuidDef implRqstTableCreateConvertColUuidValue
			default ErrorUnrecognizedBaseModelAtomClass$
			dataBuff.set$OptionalOrRequired$$Name$( nat$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColBlobValue">
			throw new RuntimeException( S_ProcName + "ERROR: Cannot use a BLOB as a PKey attribute!" );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColBoolValue"
		>$switch IsNullable yes implRqstTableCreateConvertColOptBoolValue default implRqstTableCreateConvertColReqBoolValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColReqBoolValue">
			if( attr$Name$ == null ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColOptBoolValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() == 0 ) ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) ) {
				nat$Name$ = Boolean.valueOf( true );
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) ) {
				nat$Name$ = Boolean.valueOf( false );
			}
			else {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColEnumValue"
		>$switch IsNullable yes implRqstTableCreateConvertColOptEnumValue default implRqstTableCreateConvertColReqEnumValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColOptEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColReqEnumValue">
			nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColInt16Value"
		>$switch IsNullable yes implRqstTableCreateConvertColOptInt16Value default implRqstTableCreateConvertColReqInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColOptInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Short.valueOf( Short.parseShort( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColReqInt16Value">
			nat$Name$ = Short.parseShort( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColInt32Value"
		>$switch IsNullable yes implRqstTableCreateConvertColOptInt32Value default implRqstTableCreateConvertColReqInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColOptInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColReqInt32Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColInt64Value"
		>$switch IsNullable yes implRqstTableCreateConvertColOptInt64Value default implRqstTableCreateConvertColReqInt64Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColOptInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColReqInt64Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColUInt16Value"
		>$switch IsNullable yes implRqstTableCreateConvertColOptUInt16Value default implRqstTableCreateConvertColReqUInt16Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColOptUInt16Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColReqUInt16Value">
			nat$Name$ = Integer.parseInt( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColUInt32Value"
		>$switch IsNullable yes implRqstTableCreateConvertColOptUInt32Value default implRqstTableCreateConvertColReqUInt32Value$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColOptUInt32Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColReqUInt32Value">
			nat$Name$ = Long.parseLong( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColUInt64Value">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", 19, 0, attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColFloatValue"
		>$switch IsNullable yes implRqstTableCreateConvertColOptFloatValue default implRqstTableCreateConvertColReqFloatValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColOptFloatValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Float.valueOf( Float.parseFloat( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColReqFloatValue">
			nat$Name$ = Float.parseFloat( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColDoubleValue"
		>$switch IsNullable yes implRqstTableCreateConvertColOptDoubleValue default implRqstTableCreateConvertColReqDoubleValue$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColOptDoubleValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Double.valueOf( Double.parseDouble( attr$Name$ ) );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColReqDoubleValue">
			nat$Name$ = Double.parseDouble( attr$Name$ );</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColNumberValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", $Digits$, $Precis$, attr$Name$ );
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColStringValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColNmTokenValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColNmTokensValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColTextValue">
			nat$Name$ = attr$Name$;</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColDateValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColTimeValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColTimestampValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColTZDateValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColTZTimeValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColTZTimestampValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertColUuidValue">
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = UUID.fromString( attr$Name$ );
			}</GenRule>


	<GenRule GenDef="Table" Name="implRqstTableCreateConvertNatId">
			Integer natId;
			if( ( attrId != null ) &amp;&amp; ( attrId.length() &gt; 0 ) ) {
				natId = Integer.valueOf( Integer.parseInt( attrId ) );
			}
			else {
				natId = null;
			}</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateConvertAttrs"
		>$switch HasSuperClassRelation yes implRqstTableCreateConvertAttrsSuper default implRqstTableCreateConvertAttrsBase$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateConvertAttrsSuper"
		>$reference SuperClassRelation reference ToTable implRqstTableCreateConvertAttrs$$iterate Columns( each implRqstTableCreateConvertDataAttr )$</GenRule>

	<GenRule GenDef="Table" Name="implRqstTableCreateConvertAttrsBase">$iterate Columns( each implRqstTableCreateConvertAnAttr )$$switch BaseHasAuditColumns yes implConvertAuditColumns default empty$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default implRqstTableCreateReallyConvertAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertAnAttr"
		>$switch GenerateId yes empty default implRqstTableCreateReallyConvertAnAttr$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateReallyConvertAnAttr"
		>$switch IsNullable yes implRqstTableCreateConvertOptAttr default implRqstTableCreateConvertReqAttr$
			dataBuff.set$OptionalOrRequired$$Name$( nat$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqAttr"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableCreateConvertReqBlob
			BoolDef implRqstTableCreateConvertReqBool
			EnumDef implRqstTableCreateConvertReqEnum
			Id16Gen implRqstTableCreateConvertReqInt16
			Id32Gen implRqstTableCreateConvertReqInt32
			Id64Gen implRqstTableCreateConvertReqInt64
			Int16Def implRqstTableCreateConvertReqInt16
			Int32Def implRqstTableCreateConvertReqInt32
			Int64Def implRqstTableCreateConvertReqInt64
			UInt16Def implRqstTableCreateConvertReqUInt16
			UInt32Def implRqstTableCreateConvertReqUInt32
			UInt64Def implRqstTableCreateConvertReqUInt64
			FloatDef implRqstTableCreateConvertReqFloat
			DoubleDef implRqstTableCreateConvertReqDouble
			NumberDef implRqstTableCreateConvertReqNumber
			DateDef implRqstTableCreateConvertReqDate
			TimeDef implRqstTableCreateConvertReqTime
			TimestampDef implRqstTableCreateConvertReqTimestamp
			TZDateDef implRqstTableCreateConvertReqTZDate
			TZTimeDef implRqstTableCreateConvertReqTZTime
			TZTimestampDef implRqstTableCreateConvertReqTZTimestamp
			UuidGen implRqstTableCreateConvertReqUuid
			UuidDef implRqstTableCreateConvertReqUuid
			StringDef implRqstTableCreateConvertReqString
			TokenDef implRqstTableCreateConvertReqString
			NmTokenDef implRqstTableCreateConvertReqString
			NmTokensDef implRqstTableCreateConvertReqString
			TextDef implRqstTableCreateConvertReqString
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implRqstTableCreateConvertOptBlob
			BoolDef implRqstTableCreateConvertOptBool
			EnumDef implRqstTableCreateConvertOptEnum
			Id16Gen implRqstTableCreateConvertOptInt16
			Id32Gen implRqstTableCreateConvertOptInt32
			Id64Gen implRqstTableCreateConvertOptInt64
			Int16Def implRqstTableCreateConvertOptInt16
			Int32Def implRqstTableCreateConvertOptInt32
			Int64Def implRqstTableCreateConvertOptInt64
			UInt16Def implRqstTableCreateConvertOptUInt16
			UInt32Def implRqstTableCreateConvertOptUInt32
			UInt64Def implRqstTableCreateConvertOptUInt64
			FloatDef implRqstTableCreateConvertOptFloat
			DoubleDef implRqstTableCreateConvertOptDouble
			NumberDef implRqstTableCreateConvertOptNumber
			DateDef implRqstTableCreateConvertOptDate
			TimeDef implRqstTableCreateConvertOptTime
			TimestampDef implRqstTableCreateConvertOptTimestamp
			TZDateDef implRqstTableCreateConvertOptTZDate
			TZTimeDef implRqstTableCreateConvertOptTZTime
			TZTimestampDef implRqstTableCreateConvertOptTZTimestamp
			UuidGen implRqstTableCreateConvertOptUuid
			UuidDef implRqstTableCreateConvertOptUuid
			StringDef implRqstTableCreateConvertOptString
			TokenDef implRqstTableCreateConvertOptString
			NmTokenDef implRqstTableCreateConvertOptString
			NmTokensDef implRqstTableCreateConvertOptString
			TextDef implRqstTableCreateConvertOptString
			default ErrorUnrecognizedBaseModelAtomClass$</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqBlob">
			byte[] nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqBool">
			boolean nat$Name$;
			if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) || attr$Name$.equals( "1" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) || attr$Name$.equals( "0" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"Unexpected $Name$ value, must be one of true, false, yes, no, 1, or 0, not \"" + attr$Name$ + "\"" );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqEnum">
			I$reference DataType EffSchemaName$Schema.$reference DataType Name$ nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqInt16">
			short nat$Name$ = Short.parseShort( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqInt32">
			int nat$Name$ = Integer.parseInt( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqInt64">
			long nat$Name$ = Long.parseLong( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqUInt16">
			int nat$Name$ = Integer.parseInt( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqUInt32">
			long nat$Name$ = Long.parseLong( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqUInt64">
			BigDecimal nat$Name$ = CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", 19, 0, attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqFloat">
			float nat$Name$ = Float.parseFloat( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqDouble">
			double nat$Name$ = Double.parseDouble( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqNumber">
			BigDecimal nat$Name$ = CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", $Digits$, $Precis$, attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqDate">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqTime">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqTimestamp">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqTZDate">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqTZTime">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqTZTimestamp">
			Calendar nat$Name$;
			try {
				nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
			}
			catch( RuntimeException e ) {
				throw new CFLibInvalidArgumentException( getClass(),
					S_ProcName,
					0,
					"$Name$",
					attr$Name$,
					e );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqUuid">
			UUID nat$Name$ = UUID.fromString( attr$Name$ );
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertReqString">
			String nat$Name$ = attr$Name$;
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptBlob">
			byte[] nat$Name$;
			if( attr$Name$ == null ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.length() &lt;= 0 ) {
				nat$Name$ = new byte[0];
			}
			else {
				nat$Name$ = Base64.decodeBase64( attr$Name$.getBytes() );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptBool">
			Boolean nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else if( attr$Name$.equals( "true" ) || attr$Name$.equals( "yes" ) || attr$Name$.equals( "1" ) ) {
				nat$Name$ = true;
			}
			else if( attr$Name$.equals( "false" ) || attr$Name$.equals( "no" ) || attr$Name$.equals( "0" ) ) {
				nat$Name$ = false;
			}
			else {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"Unexpected $Name$ value, must be one of true, false, yes, no, 1, or 0, not \"" + attr$Name$ + "\"" );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptEnum">
			I$reference DataType EffSchemaName$Schema.$reference DataType Name$ nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = $reference DataType EffSchemaName$Schema.parse$reference DataType Name$( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptInt16">
			Short nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Short.valueOf( Short.parseShort( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptInt32">
			Integer nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptInt64">
			Long nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = Long.valueOf( Long.parseLong( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptUInt16">
			Integer nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Integer.valueOf( Integer.parseInt( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptUInt32">
			Long nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Long.valueOf( Long.parseLong( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptUInt64">
			BigDecimal nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", 19, 0, attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptFloat">
			Float nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Float.valueOf( Float.parseFloat( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptDouble">
			Double nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= Double.valueOf( Double.parseDouble( attr$Name$ ) );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptNumber">
			BigDecimal nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$= CFLibBigDecimalUtil.parse( "$EffSchemaName$.$TableName$.$Name$", $Digits$, $Precis$, attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptDate">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptTime">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptTimestamp">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptTZDate">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZDate( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptTZTime">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTime( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptTZTimestamp">
			Calendar nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				try {
					nat$Name$ = CFLibXmlUtil.parseTZTimestamp( attr$Name$ );
				}
				catch( RuntimeException e ) {
					throw new CFLibInvalidArgumentException( getClass(),
						S_ProcName,
						0,
						"$Name$",
						attr$Name$,
						e );
				}
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptUuid">
			UUID nat$Name$;
			if( ( attr$Name$ == null ) || ( attr$Name$.length() &lt;= 0 ) ) {
				nat$Name$ = null;
			}
			else {
				nat$Name$ = UUID.fromString( attr$Name$ );
			}
</GenRule>

	<GenRule GenDef="Value" Name="implRqstTableCreateConvertOptString">
			String nat$Name$ = attr$Name$;
</GenRule>

</RuleSet>
