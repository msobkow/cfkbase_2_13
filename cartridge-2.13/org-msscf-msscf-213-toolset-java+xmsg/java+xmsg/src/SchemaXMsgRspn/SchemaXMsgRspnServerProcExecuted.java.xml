<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+xmsg"
	Name="src/SchemaXMsg/SchemaXMsgRspnServerProcExecuted.java"
	Revision="2.13"
	Descr="Java 11 XML SAX Logged Out Element ">

	<GenFile GenDef="SchemaDef" Name="fileSchemaXMsgRspnServerProcExecutedJava"
			GenerateOnce="false"
		ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRspn"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$xmsgrspn.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$XMsgRspn"
		ExpansionClassName="$SchemaName$XMsgRspnServerProcExecutedJava"
		ExpansionKeyName="$SchemaName$XMsgRspnServerProcExecutedJava"
		ExpansionFileName="$SchemaName$XMsgRspnServerProcExecuted.java">
// Description: Java 11 XML Message SAX Response Record Element 

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$XMsgRspn;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.xml.sax.*;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$

/*
 *	$SchemaName$XMsgRspnServerProcExecuted XML SAX Element  implementation
 */
public class $SchemaName$XMsgRspnServerProcExecuted
	extends CFLibXmlCoreElementHandler
{$implConstructXMsgRspnServerProcExecuted$$implRspnServerProcExecutedStartElement$$implRspnServerProcExecutedEndElement$}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="implConstructXMsgRspnServerProcExecuted">
	public $SchemaName$XMsgRspnServerProcExecuted( $SchemaName$XMsgRspn xmsgRspn ) {
		super( xmsgRspn );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRspnServerProcExecutedStartElement">
	public void startElement(
		String		uri,
		String		localName,
		String		qName,
		Attributes	attrs )
	throws SAXException
	{
		try {
			// Common XML Attributes
			String	attrId = null;
			// Response Attributes
			String	attrDataChanged = null;
			// Attribute Extraction
			String	attrLocalName;
			int		numAttrs;
			int		idxAttr;
			// Attribute Localization
			boolean	dataChanged;
			final String S_ProcName = "startElement";
			final String S_LocalName = "LocalName";

			assert qName.equals( "RspnServerProcExecuted" );
$implRspnServerProcExecutedRetrieveSchemaObj$$implRspnServerProcExecutedExtractAttrs$$implRspnServerProcExecutedCheckRequiredAttrs$$implRspnServerProcExecutedConvertAttributes$$implRspnServerProcExecutedFinishServerProcExecuted$
		}
		catch( RuntimeException e ) {
			throw new RuntimeException( "Near " + getParser().getLocationInfo() + ": Caught and rethrew " + e.getClass().getName() + " - " + e.getMessage(),
				e );
		}
		catch( Error e ) {
			throw new Error( "Near " + getParser().getLocationInfo() + ": Caught and rethrew " + e.getClass().getName() + " - " + e.getMessage(),
				e );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRspnServerProcExecutedEndElement">
	public void endElement(
		String		uri,
		String		localName,
		String		qName )
	throws SAXException
	{
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRspnServerProcExecutedRetrieveSchemaObj">
			$SchemaName$XMsgRspn xmsgRspn = ($SchemaName$XMsgRspn)getParser();
			if( xmsgRspn == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser()" );
			}

			I$SchemaName$SchemaObj schemaObj = xmsgRspn.getSchemaObj();
			if( schemaObj == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"getParser().getSchemaObj()" );
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRspnServerProcExecutedExtractAttrs">
			// Extract Attributes
			numAttrs = attrs.getLength();
			for( idxAttr = 0; idxAttr &lt; numAttrs; idxAttr++ ) {
				attrLocalName = attrs.getLocalName( idxAttr );
				if( attrLocalName.equals( "Id" ) ) {
					if( attrId != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrId = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "DataChanged" ) ) {
					if( attrDataChanged != null ) {
						throw new CFLibUniqueIndexViolationException( getClass(),
							S_ProcName,
							S_LocalName,
							attrLocalName );
					}
					attrDataChanged = attrs.getValue( idxAttr );
				}
				else if( attrLocalName.equals( "schemaLocation" ) ) {
					// ignored
				}
				else {
					throw new CFLibUnrecognizedAttributeException( getClass(),
						S_ProcName,
						getParser().getLocationInfo(),
						attrLocalName );
				}
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRspnServerProcExecutedCheckRequiredAttrs">
			// Ensure that required attributes have values
			if( ( attrDataChanged == null ) || ( attrDataChanged.length() &lt;= 0 ) ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"DataChanged" );
			}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implRspnServerProcExecutedConvertAttributes"></GenRule>

	<GenRule GenDef="SchemaDef" Name="implRspnServerProcExecutedFinishServerProcExecuted">
			if( attrDataChanged.equals( "true" ) ) {
				xmsgRspn.setDataChanged( true );
			}
			else if( attrDataChanged.equals( "false" ) ) {
				xmsgRspn.setDataChanged( false );
			}
			else {
				throw new CFLibUsageException( getClass(),
					S_ProcName,
					"Expected DataChanged to be true or false" );
			}</GenRule>

</RuleSet>
