<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+saxloader"
	Name="src/SchemaSaxRamLdr/SchemaSaxRamLdr.java"
	Revision="2.13"
	Descr="Java 11 Command Line Interface for Schema SAX RAM Loader Parser">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSaxRamLdrJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$SaxRamLdr"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$saxramloader.src"
		SubPackageName="$lower JavaPackage$.$SchemaName$SaxRamLdr"
		ExpansionClassName="$SchemaName$SaxRamLdrJava"
		ExpansionKeyName="$SchemaName$SaxRamLdrJava"
		ExpansionFileName="$SchemaName$SaxRamLdr.java"
>// Description: Java 11 XML SAX Parser for $SchemaName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$SaxRamLdr;

import org.apache.log4j.*;
import org.msscf.msscf.cflib.CFLib.*;$iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$importJavaPackageSchemaName$
$iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$Ram.*;
import $lower JavaPackage$.$SchemaName$SaxLoader.*;

public class $SchemaName$SaxRamLdr
	extends $SchemaName$SaxLdr
{
	private static ICFLibMessageLog log = new CFLibConsoleMessageLog();

	// Constructors
$implSchemaSaxRamLdrConstructor$
	// main() entry point
$implSchemaSaxRamLdrMain$
	// Initialize the console log
$implSchemaSaxRamLdrInitConsoleLog$
	// Evaluate remaining arguments
$implSchemaSaxRamLdrEvalRemaining$
}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxRamLdrConstructor"
		>$implSchemaSaxRamLdrConstructorVoid$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxRamLdrConstructorVoid">
	public $SchemaName$SaxRamLdr() {
		super( log );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxRamLdrEvalRemaining">
	public void evaluateRemainingArgs( String[] args, int consumed ) {
		// There are no extra arguments for the RAM "database" instance
		if( args.length &gt; consumed ) {
			log.message( "$SchemaName$SaxRamLdr.evaluateRemainingArgs() WARNING No extra arguments are expected for a RAM database instance, but "
				+ Integer.toString( args.length - consumed )
				+ " extra arguments were specified.  Extra arguments ignored." );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxRamLdrMain">
	public static void main( String args[] ) {
		final String S_ProcName = "$SchemaName$SaxRamLdr.main() ";
		initConsoleLog();
		int numArgs = args.length;
		if( numArgs &gt;= 2 ) {
			I$SchemaName$Schema $leadlower SchemaName$Schema = new $SchemaName$RamSchema();
			I$SchemaName$SchemaObj $leadlower SchemaName$SchemaObj = new $SchemaName$SchemaObj();
			$leadlower SchemaName$SchemaObj.setBackingStore( $leadlower SchemaName$Schema );
			$SchemaName$SaxLdr cli = new $SchemaName$SaxRamLdr();
			$SchemaName$SaxLoader loader = cli.getSaxLoader();
			loader.setSchemaObj( $leadlower SchemaName$SchemaObj );
			String url = args[1];
			try {
				$leadlower SchemaName$Schema.connect( "system", "system", "system", "system" );
				$leadlower SchemaName$Schema.rollback();
				$leadlower SchemaName$Schema.beginTransaction();
				$leadlower SchemaName$SchemaObj.setSecCluster( $leadlower SchemaName$SchemaObj.getClusterTableObj().getSystemCluster() );
				$leadlower SchemaName$SchemaObj.setSecTenant( $leadlower SchemaName$SchemaObj.getTenantTableObj().getSystemTenant() );
				$leadlower SchemaName$SchemaObj.setSecSession( $leadlower SchemaName$SchemaObj.getSecSessionTableObj().getSystemSession() );
				$SecSchemaName$Authorization auth = new $SecSchemaName$Authorization();
				auth.setSecCluster( $leadlower SchemaName$SchemaObj.getSecCluster() );
				auth.setSecTenant( $leadlower SchemaName$SchemaObj.getSecTenant() );
				auth.setSecSession( $leadlower SchemaName$SchemaObj.getSecSession() );
				$leadlower SchemaName$SchemaObj.setAuthorization( auth );
				loader.setUseCluster( $leadlower SchemaName$SchemaObj.getSecCluster() );
				loader.setUseTenant( $leadlower SchemaName$SchemaObj.getSecTenant() );
				applyLoaderOptions( loader, args[0] );
				cli.evaluateRemainingArgs( args, 2 );
				loader.parseFile( url );
				$leadlower SchemaName$Schema.commit();
				$leadlower SchemaName$Schema.disconnect( true );
			}$implSchemaSaxRamLdrMainCatch$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxRamLdrMainCatch">
			catch( Exception e ) {
				log.message( S_ProcName + "EXCEPTION: Could not parse XML file \\"" + url + "\\": " + e.getMessage() );
				e.printStackTrace( System.out );
			}
			catch( Error e ) {
				log.message( S_ProcName + "ERROR: Could not parse XML file \\"" + url + "\\": " + e.getMessage() );
				e.printStackTrace( System.out );
			}
			finally {
				if( $leadlower SchemaName$Schema.isConnected() ) {
					$leadlower SchemaName$Schema.rollback();
					$leadlower SchemaName$Schema.disconnect( false );
				}
			}
		}
		else {
			log.message( S_ProcName + "ERROR: Expected at least two argument specifying the loader options and the name of the XML file to parse.  The first argument may be empty." );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxRamLdrInitConsoleLog">
	protected static void initConsoleLog() {
//		Layout layout = new PatternLayout(
//				"%d{ISO8601}"		// Start with a timestamp
//			+	" %-5p"				// Include the severity
//			+	" %C.%M"			// pkg.class.method()
//			+	" %F[%L]"			// File[lineNumber]
//			+	": %m\\n" );			// Message text
//		BasicConfigurator.configure( new ConsoleAppender( layout, "System.out" ) );
	}
</GenRule>

</RuleSet>
