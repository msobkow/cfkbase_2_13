<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+saxloader+oracle"
	Name="src/SchemaSaxOracleLdr/SchemaSaxOracleLdr.java"
	Revision="2.13"
	Descr="Java 11 Command Line Interface for Schema SAX Oracle Loader Parser">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSaxOracleLdrJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$SaxOracleLdr"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$saxoracleloader.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$SaxOracleLdr"
		ExpansionClassName="$SchemaName$SaxOracleLdrJava"
		ExpansionKeyName="$SchemaName$SaxOracleLdrJava"
		ExpansionFileName="$SchemaName$SaxOracleLdr.java"
>// Description: Java 11 XML SAX Loader CLI persisting as Oracle for $SchemaName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$SaxOracleLdr;

import org.apache.log4j.*;
import java.io.File;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Properties;

import org.msscf.msscf.cflib.CFLib.*;$iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$importJavaPackageSchemaName$$iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$importJavaPackageSchemaNameObj$
import $lower JavaPackage$.$SchemaName$Oracle.*;
import $lower JavaPackage$.$SchemaName$SaxLoader.*;

public class $SchemaName$SaxOracleLdr
	extends $SchemaName$SaxLdr
{
	private static ICFLibMessageLog log = new CFLibConsoleMessageLog();

	// Constructors
$implSchemaSaxOracleLdrConstructor$
	// main() entry point
$implSchemaSaxOracleLdrMain$
	// Initialize the console log
$implSchemaSaxOracleLdrInitConsoleLog$
	// Evaluate remaining arguments
$implSchemaSaxOracleLdrEvalRemaining$
}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrConstructor"
		>$implSchemaSaxOracleLdrConstructorVoid$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrConstructorVoid">
	public $SchemaName$SaxOracleLdr() {
		super( log );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrEvalRemaining">
	public void evaluateRemainingArgs( String[] args, int consumed ) {
		// There are no extra arguments for the Oracle instance
		if( args.length &gt; consumed ) {
			log.message( "$SchemaName$SaxOracleLdr.evaluateRemainingArgs() WARNING No extra arguments are expected for a RAM database instance, but "
				+ Integer.toString( args.length - consumed )
				+ " extra arguments were specified.  Extra arguments ignored." );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrMain"
		>$implSchemaSaxOracleLdrMainPart01$$implSchemaSaxOracleLdrMainPart02$$implSchemaSaxOracleLdrMainPart03$$implSchemaSaxOracleLdrMainPart04$$implSchemaSaxOracleLdrMainPart05$$implSchemaSaxOracleLdrMainPart06$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrMainPart01">
	public static void main( String args[] ) {
		final String S_ProcName = "$SchemaName$SaxOracleLdr.main() ";
		initConsoleLog();
		int numArgs = args.length;
		if( numArgs &gt;= 2 ) {$implSchemaSaxOracleLdrInitHomeDir$$implSchemaSaxOracleLdrConf$
			boolean fastExit = false;
			$SchemaName$ClientConfigurationFile cFDbTestClientConfig = new $SchemaName$ClientConfigurationFile();
			String cFDbTestClientConfigFileName = homeDir.getPath() + File.separator + ".cfdbtestclientrc";
			cFDbTestClientConfig.setFileName( cFDbTestClientConfigFileName );
			File cFDbTestClientConfigFile = new File( cFDbTestClientConfigFileName );
			if( ! cFDbTestClientConfigFile.exists() ) {
				String cFDbTestKeyStoreFileName = homeDir.getPath() + File.separator + ".msscfjceks";
				cFDbTestClientConfig.setKeyStore( cFDbTestKeyStoreFileName );
				InetAddress localHost;
				try {
					localHost = InetAddress.getLocalHost();
				}
				catch( UnknownHostException e ) {
					localHost = null;
				}
				if( localHost == null ) {
					log.message( S_ProcName + "ERROR: LocalHost is null" );
					return;
				}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrMainPart02">
				String hostName = localHost.getHostName();
				if( ( hostName == null ) || ( hostName.length() &lt;= 0 ) ) {
					log.message( "ERROR: LocalHost.HostName is null or empty" );
					return;
				}
				String userName = System.getProperty( "user.name" );
				if( ( userName == null ) || ( userName.length() &lt;= 0 ) ) {
					log.message( "ERROR: user.name is null or empty" );
					return;
				}
				String deviceName = hostName.replaceAll( "[^\\\\w]", "_" ).toLowerCase()
					+ "-"
					+ userName.replaceAll( "[^\\\\w]", "_" ).toLowerCase();
				cFDbTestClientConfig.setDeviceName( deviceName );
				cFDbTestClientConfig.save();
				log.message( S_ProcName + "INFO: Created $SchemaName$ client configuration file " + cFDbTestClientConfigFileName );
				fastExit = true;
			}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrMainPart03">
			if( ! cFDbTestClientConfigFile.isFile() ) {
				log.message( S_ProcName + "ERROR: Proposed client configuration file " + cFDbTestClientConfigFileName + " is not a file." );
				fastExit = true;
			}
			if( ! cFDbTestClientConfigFile.canRead() ) {
				log.message( S_ProcName + "ERROR: Permission denied attempting to read client configuration file " + cFDbTestClientConfigFileName );
				fastExit = true;
			}
			cFDbTestClientConfig.load();

			if( fastExit ) {
				return;
			}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrMainPart04">
			// Configure logging
			Properties sysProps = System.getProperties();
			sysProps.setProperty( "log4j.rootCategory", "WARN" );
			sysProps.setProperty( "org.apache.commons.logging.Log", "org.apache.commons.logging.impl.Log4JLogger" );

			Logger httpLogger = Logger.getLogger( $SchemaName$SaxOracleLdr.class );
			httpLogger.setLevel( Level.WARN );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrMainPart05">
			I$SchemaName$Schema $leadlower SchemaName$Schema = new $SchemaName$OracleSchema();
			$leadlower SchemaName$Schema.setConfigurationFile( $leadlower SchemaName$Config );
			I$SchemaName$SchemaObj $leadlower SchemaName$SchemaObj = new $SchemaName$SchemaObj();
			$leadlower SchemaName$SchemaObj.setBackingStore( $leadlower SchemaName$Schema );
			$SchemaName$SaxLdr cli = new $SchemaName$SaxOracleLdr();
			$SchemaName$SaxLoader loader = cli.getSaxLoader();
			loader.setSchemaObj( $leadlower SchemaName$SchemaObj );
			$leadlower SchemaName$Schema.connect();
			String url = args[1];
			if( numArgs &gt;= 5 ) {
				cli.setClusterName( args[2] );
				cli.setTenantName( args[3] );
				cli.setSecUserName( args[4] );
			}
			else {
				cli.setClusterName( "default" );
				cli.setTenantName( "system" );
				cli.setSecUserName( "system" );
			}
			loader.setUseCluster( cli.getClusterObj() );
			loader.setUseTenant( cli.getTenantObj() );
			try {$implSchemaSaxOracleLoaderMainTryBody$
			}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLoaderMainTryBody">
				$leadlower SchemaName$Schema.beginTransaction();
				$leadlower SchemaName$SchemaObj.setSecCluster( cli.getClusterObj() );
				$leadlower SchemaName$SchemaObj.setSecTenant( cli.getTenantObj() );
				$leadlower SchemaName$SchemaObj.setSecUser( cli.getSecUserObj() );
				$leadlower SchemaName$SchemaObj.setSecSession( cli.getSecSessionObj() );
				$SecSchemaName$Authorization auth = new $SecSchemaName$Authorization();
				auth.setSecCluster( $leadlower SchemaName$SchemaObj.getSecCluster() );
				auth.setSecTenant( $leadlower SchemaName$SchemaObj.getSecTenant() );
				auth.setSecSession( $leadlower SchemaName$SchemaObj.getSecSession() );
				$leadlower SchemaName$SchemaObj.setAuthorization( auth );
				applyLoaderOptions( loader, args[0] );
				if( numArgs &gt;= 5 ) {
					cli.evaluateRemainingArgs( args, 5 );
				}
				else {
					cli.evaluateRemainingArgs( args, 2 );
				}
				loader.parseFile( url );
				$leadlower SchemaName$Schema.commit();
				$leadlower SchemaName$Schema.disconnect( true );</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrMainPart06">
			catch( Exception e ) {
				log.message( S_ProcName + "EXCEPTION: Could not parse XML file \\"" + url + "\\": " + e.getMessage() );
				e.printStackTrace( System.out );
			}
			catch( Error e ) {
				log.message( S_ProcName + "ERROR: Could not parse XML file \\"" + url + "\\": " + e.getMessage() );
				e.printStackTrace( System.out );
			}
			finally {
				if( $leadlower SchemaName$Schema.isConnected() ) {
					$leadlower SchemaName$Schema.rollback();
					$leadlower SchemaName$Schema.disconnect( false );
				}
			}
		}
		else {
			log.message( S_ProcName + "ERROR: Expected at least two argument specifying the loader options and the name of the XML file to parse.  The first argument may be empty." );
		}
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrInitHomeDir">
			String homeDirName = System.getProperty( "HOME" );
			if( homeDirName == null ) {
				homeDirName = System.getProperty( "user.home" );
				if( homeDirName == null ) {
					log.message( S_ProcName + "ERROR: Home directory not set" );
					return;
				}
			}
			File homeDir = new File( homeDirName );
			if( ! homeDir.exists() ) {
				log.message( S_ProcName + "ERROR: Home directory \\"" + homeDirName + "\\" does not exist" );
				return;
			}
			if( ! homeDir.isDirectory() ) {
				log.message( S_ProcName + "ERROR: Home directory \\"" + homeDirName + "\\" is not a directory" );
				return;
			}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrConf">
			$SchemaName$ConfigurationFile $leadlower SchemaName$Config = new $SchemaName$ConfigurationFile();
			String $leadlower SchemaName$ConfigFileName = homeDir.getPath() + File.separator + ".$lower SchemaName$oraclerc";
			$leadlower SchemaName$Config.setFileName( $leadlower SchemaName$ConfigFileName );
			File $leadlower SchemaName$ConfigFile = new File( $leadlower SchemaName$ConfigFileName );
			if( ! $leadlower SchemaName$ConfigFile.exists() ) {
				$leadlower SchemaName$Config.setDbServer( "127.0.0.1" );
				$leadlower SchemaName$Config.setDbPort( 1526 );
				$leadlower SchemaName$Config.setDbDatabase( "$DbSchemaName$" );
				$leadlower SchemaName$Config.setDbUserName( "system" );
				$leadlower SchemaName$Config.setDbPassword( "edit-me-please" );
				$leadlower SchemaName$Config.save();
				log.message( S_ProcName + "INFO: Created configuration file " + $leadlower SchemaName$ConfigFileName + ", please edit configuration and restart." );
				return;
			}
			if( ! $leadlower SchemaName$ConfigFile.isFile() ) {
				log.message( S_ProcName + "ERROR: Proposed configuration file " + $leadlower SchemaName$ConfigFileName + " is not a file." );
				return;
			}
			if( ! $leadlower SchemaName$ConfigFile.canRead() ) {
				log.message( S_ProcName + "ERROR: Permission denied attempting to read configuration file " + $leadlower SchemaName$ConfigFileName );
				return;
			}
			$leadlower SchemaName$Config.load();</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSaxOracleLdrInitConsoleLog">
	protected static void initConsoleLog() {
//		Layout layout = new PatternLayout(
//				"%d{ISO8601}"		// Start with a timestamp
//			+	" %-5p"				// Include the severity
//			+	" %C.%M"			// pkg.class.method()
//			+	" %F[%L]"			// File[lineNumber]
//			+	": %m\\n" );			// Message text
//		BasicConfigurator.configure( new ConsoleAppender( layout, "System.out" ) );
	}
</GenRule>

</RuleSet>
