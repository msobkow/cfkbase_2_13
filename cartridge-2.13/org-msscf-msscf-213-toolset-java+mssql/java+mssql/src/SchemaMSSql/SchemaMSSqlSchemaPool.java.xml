<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+mssql"
	Name="src/SchemaMSSqlSchemaPool.java"
	Revision="2.13"
	Descr="Java 11 implementation of a $SchemaName$ schema pool.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaMSSqlSchemaPoolJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$MSSql"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$mssql.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$MSSql"
		ExpansionClassName="$SchemaName$MSSqlSchemaPoolJava"
		ExpansionKeyName="$SchemaName$MSSqlSchemaPoolJava"
		ExpansionFileName="$SchemaName$MSSqlSchemaPool.java"
>// Description: Java 11 implementation of a SQL Server $SchemaName$ schema pool.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$MSSql;

import java.util.*;

import org.msscf.msscf.cflib.CFLib.*;$iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$importJavaPackageSchemaName$

public class $SchemaName$MSSqlSchemaPool
extends $SchemaName$SchemaPool
{$implSchemaMSSqlSchemaPoolConstructor$$implSchemaMSSqlSchemaPoolToBeOverloaded$}
</GenFile>

	<GenRule GenDef="SchemaDef" Name="implSchemaMSSqlSchemaPoolConstructor">
	public $SchemaName$MSSqlSchemaPool() {
		setJndiName( "java:comp/env/$DbSchemaName$ConnectionPool" );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaMSSqlSchemaPoolToBeOverloaded">
	/**
	 *	You need to overload the implementation of newInstance() to return
	 *	connected instances of your backing store.
	 */
	public I$SchemaName$Schema newInstance() {
		I$SchemaName$Schema inst = new $SchemaName$MSSqlSchema();
		return( inst );
	}
</GenRule>

</RuleSet>
