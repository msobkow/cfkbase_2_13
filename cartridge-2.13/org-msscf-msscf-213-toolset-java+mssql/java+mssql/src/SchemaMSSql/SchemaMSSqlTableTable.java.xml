<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+mssql"
	Name="src/SchemaMSSqlTableTable.java"
	Revision="2.13"
	Descr="Java 11 MS SQL Server Developer Edition Jdbc DbIO implementation for Table">

	<GenRule GenDef="IndexCol" Name="DbColumnName"
		>$reference Column DbColumnName$</GenRule>

	<GenFile GenDef="Table" Name="fileSchemaMSSqlTableTableJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$MSSql"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$mssql.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$MSSql"
		ExpansionClassName="$SchemaName$MSSql$TableName$TableJava"
		ExpansionKeyName="$SchemaName$MSSql$TableName$TableJava"
		ExpansionFileName="$SchemaName$MSSql$TableName$Table.java"
>$MSSqlTableTablePreamble$
public class $SchemaName$MSSql$TableName$Table
	implements I$SchemaName$$TableName$Table
{
	private $SchemaName$MSSqlSchema schema;$declMSSqlTableTablePStatements$$declMSSqlDeleteTableByInheritedIndexes$$JavaMSSqlTableMembers$
$implConstructMSSqlTableTable$$iterate DispensedId16Generators( each implNextIdGen empty empty )$$iterate DispensedId32Generators( each implNextIdGen empty empty )$$iterate DispensedId64Generators( each implNextIdGen empty empty )$$implCreateTable$$declSqlSelectTableDistinctClassCode$$declSqlSelectTableBuff$$implUnpackResultSetToBuff$$implReadTableDerivedByPKey$$implLockTableDerivedByPKey$$implReadAllTableDerived$$implReadTableDerivedByIndexes$$implReadTableBuffByPKey$$implLockTableBuffByPKey$$implReadAllTableBuff$$switch PageData yes implPageAllTableBuff default empty$$implReadTableBuffByIndexes$$switch PageData yes implPageTableBuffByIndexes default empty$$implUpdateTable$$implDeleteTable$$switch HasChain yes implMSSqlMoveUpTableBuff default empty$$switch HasChain yes implMSSqlMoveDownTableBuff default empty$$implMSSqlTableReleasePreparedStatements$$iterate ServerMethods( each implServerMethod empty empty )$$JavaMSSqlTableImplementation$}
</GenFile>

	<GenRule GenDef="Index" Name="PageData"
		>$poptop Table PageData$</GenRule>

	<GenRule GenDef="Table" Name="implPageAllTableBuff">
	/**
	 *	Read a page of all the specific $TableName$ buffer instances.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@return All the specific $TableName$ instances in the database accessible for the Authorization.
	 */
	public $DefSchemaName$$TableName$Buff[] pageAllBuff( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageAllBuff";
		throw new CFLibNotImplementedYetException( getClass(), S_ProcName );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByDuplicateIndex">
	/**
	 *	Read a page array of the specific $poptop Table TableName$ buffer instances identified by the duplicate key $Suffix$.
	 *
	 *	@param	Authorization	The session authorization information.$iterate Columns( each implCommentKeyAttr empty empty )$
	 *
	 *	@return An array of derived buffer instances for the specified key, potentially with 0 elements in the set.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	public $DefSchemaName$$poptop Table TableName$Buff[] pageBuffBy$declReadTableSuffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each declCommaColumnArg )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageBuffBy$declReadTableSuffix$";
		throw new CFLibNotImplementedYetException( getClass(), S_ProcName );
	}
</GenRule>

	<GenRule GenDef="Table" Name="MSSqlTableTablePreamble"
>// Description: Java 11 MS SQL Server Developer Edition Jdbc DbIO implementation for $TableName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$MSSql;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.apache.commons.codec.binary.Base64;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$$JavaMSSqlTableImport$

/*
 *	$SchemaName$MSSql$TableName$Table PostgreSQL Jdbc DbIO implementation
 *	for $TableName$.
 */</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlMoveUpTableBuff">
	/**
	 *	Move the specified buffer up in the chain (i.e. to the previous position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffUp( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int revision )
	{
		final String S_ProcName = "moveBuffUp";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implMoveUpTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveUpTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
			String sql = "{ call $sp_moveup_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + ", ? ) }";
			if( stmtMoveUp == null ) {
				stmtMoveUp = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUp.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveUp.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlMoveUpTableAssignVar )$
			stmtMoveUp.setInt( argIdx++, revision );
			stmtMoveUp.execute();$implMoveUpTableBuffByPKeyExtractResultSet$
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMoveUpTableBuffByPKeyExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtMoveUp.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtMoveUp.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtMoveUp.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignVar"
		>$switch IsNullable yes implMSSqlMoveUpTableAssignOptVar
			default implMSSqlMoveUpTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlMoveUpTableAssignOptBlobVar
			BoolDef implMSSqlMoveUpTableAssignOptBoolVar
			EnumDef implMSSqlMoveUpTableAssignOptEnumVar
			Int16Def implMSSqlMoveUpTableAssignOptInt16Var
			Int32Def implMSSqlMoveUpTableAssignOptInt32Var
			Int64Def implMSSqlMoveUpTableAssignOptInt64Var
			UInt16Def implMSSqlMoveUpTableAssignOptUInt16Var
			UInt32Def implMSSqlMoveUpTableAssignOptUInt32Var
			UInt64Def implMSSqlMoveUpTableAssignOptUInt64Var
			Id16Gen implMSSqlMoveUpTableAssignOptInt16Var
			Id32Gen implMSSqlMoveUpTableAssignOptInt32Var
			Id64Gen implMSSqlMoveUpTableAssignOptInt64Var
			FloatDef implMSSqlMoveUpTableAssignOptFloatVar
			DoubleDef implMSSqlMoveUpTableAssignOptDoubleVar
			NumberDef implMSSqlMoveUpTableAssignOptNumberVar
			StringDef implMSSqlMoveUpTableAssignOptStringVar
			TokenDef implMSSqlMoveUpTableAssignOptTokenVar
			NmTokenDef implMSSqlMoveUpTableAssignOptNmTokenVar
			NmTokensDef implMSSqlMoveUpTableAssignOptNmTokensVar
			TextDef implMSSqlMoveUpTableAssignOptTextVar
			DateDef implMSSqlMoveUpTableAssignOptDateVar
			TimeDef implMSSqlMoveUpTableAssignOptTimeVar
			TimestampDef implMSSqlMoveUpTableAssignOptTimestampVar
			TZDateDef implMSSqlMoveUpTableAssignOptTZDateVar
			TZTimeDef implMSSqlMoveUpTableAssignOptTZTimeVar
			TZTimestampDef implMSSqlMoveUpTableAssignOptTZTimestampVar
			UuidDef implMSSqlMoveUpTableAssignOptUuidVar
			UuidGen implMSSqlMoveUpTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlMoveUpTableAssignReqBlobVar
			BoolDef implMSSqlMoveUpTableAssignReqBoolVar
			EnumDef implMSSqlMoveUpTableAssignReqEnumVar
			Int16Def implMSSqlMoveUpTableAssignReqInt16Var
			Int32Def implMSSqlMoveUpTableAssignReqInt32Var
			Int64Def implMSSqlMoveUpTableAssignReqInt64Var
			UInt16Def implMSSqlMoveUpTableAssignReqUInt16Var
			UInt32Def implMSSqlMoveUpTableAssignReqUInt32Var
			UInt64Def implMSSqlMoveUpTableAssignReqUInt64Var
			Id16Gen implMSSqlMoveUpTableAssignReqInt16Var
			Id32Gen implMSSqlMoveUpTableAssignReqInt32Var
			Id64Gen implMSSqlMoveUpTableAssignReqInt64Var
			FloatDef implMSSqlMoveUpTableAssignReqFloatVar
			DoubleDef implMSSqlMoveUpTableAssignReqDoubleVar
			NumberDef implMSSqlMoveUpTableAssignReqNumberVar
			StringDef implMSSqlMoveUpTableAssignReqStringVar
			TokenDef implMSSqlMoveUpTableAssignReqTokenVar
			NmTokenDef implMSSqlMoveUpTableAssignReqNmTokenVar
			NmTokensDef implMSSqlMoveUpTableAssignReqNmTokensVar
			TextDef implMSSqlMoveUpTableAssignReqTextVar
			DateDef implMSSqlMoveUpTableAssignReqDateVar
			TimeDef implMSSqlMoveUpTableAssignReqTimeVar
			TimestampDef implMSSqlMoveUpTableAssignReqTimestampVar
			TZDateDef implMSSqlMoveUpTableAssignReqTZDateVar
			TZTimeDef implMSSqlMoveUpTableAssignReqTZTimeVar
			TZTimestampDef implMSSqlMoveUpTableAssignReqTZTimestampVar
			UuidDef implMSSqlMoveUpTableAssignReqUuidVar
			UuidGen implMSSqlMoveUpTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqBlobVar">
			stmtMoveUp.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveUp.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtMoveUp.setString( argIdx++, "Y" );
			}
			else {
				stmtMoveUp.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtMoveUp.setString( argIdx++, "Y" );
				}
				else {
					stmtMoveUp.setString( argIdx++, "N" );
				}
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqEnumVar">
			stmtMoveUp.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveUp.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqInt16Var">
			stmtMoveUp.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveUp.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqInt32Var">
			stmtMoveUp.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveUp.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqInt64Var">
			stmtMoveUp.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveUp.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqUInt16Var">
			stmtMoveUp.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveUp.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqUInt32Var">
			stmtMoveUp.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveUp.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqUInt64Var">
			stmtMoveUp.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveUp.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqFloatVar">
			stmtMoveUp.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveUp.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqDoubleVar">
			stmtMoveUp.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveUp.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqNumberVar">
			stmtMoveUp.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveUp.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqStringVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqTokenVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqNmTokenVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqNmTokensVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqTextVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqDateVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqTimeVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqTimestampVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqTZDateVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqTZTimeVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqTZTimestampVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignReqUuidVar">
			stmtMoveUp.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveUpTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlMoveDownTableBuff">
	/**
	 *	Move the specified buffer down in the chain (i.e. to the next position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffDown( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int revision )
	{
		final String S_ProcName = "moveBuffDown";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implMoveDownTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveDownTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
			String sql = "{ call $sp_movedown_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + ", ? ) }";
			if( stmtMoveDown == null ) {
				stmtMoveDown = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDown.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveDown.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlMoveDownTableAssignVar )$
			stmtMoveDown.setInt( argIdx++, revision );
			stmtMoveDown.execute();$implMoveDownTableBuffByPKeyExtractResultSet$
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMoveDownTableBuffByPKeyExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtMoveDown.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtMoveDown.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtMoveDown.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignVar"
		>$switch IsNullable yes implMSSqlMoveDownTableAssignOptVar
			default implMSSqlMoveDownTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlMoveDownTableAssignOptBlobVar
			BoolDef implMSSqlMoveDownTableAssignOptBoolVar
			EnumDef implMSSqlMoveDownTableAssignOptEnumVar
			Int16Def implMSSqlMoveDownTableAssignOptInt16Var
			Int32Def implMSSqlMoveDownTableAssignOptInt32Var
			Int64Def implMSSqlMoveDownTableAssignOptInt64Var
			UInt16Def implMSSqlMoveDownTableAssignOptUInt16Var
			UInt32Def implMSSqlMoveDownTableAssignOptUInt32Var
			UInt64Def implMSSqlMoveDownTableAssignOptUInt64Var
			Id16Gen implMSSqlMoveDownTableAssignOptInt16Var
			Id32Gen implMSSqlMoveDownTableAssignOptInt32Var
			Id64Gen implMSSqlMoveDownTableAssignOptInt64Var
			FloatDef implMSSqlMoveDownTableAssignOptFloatVar
			DoubleDef implMSSqlMoveDownTableAssignOptDoubleVar
			NumberDef implMSSqlMoveDownTableAssignOptNumberVar
			StringDef implMSSqlMoveDownTableAssignOptStringVar
			TokenDef implMSSqlMoveDownTableAssignOptTokenVar
			NmTokenDef implMSSqlMoveDownTableAssignOptNmTokenVar
			NmTokensDef implMSSqlMoveDownTableAssignOptNmTokensVar
			TextDef implMSSqlMoveDownTableAssignOptTextVar
			DateDef implMSSqlMoveDownTableAssignOptDateVar
			TimeDef implMSSqlMoveDownTableAssignOptTimeVar
			TimestampDef implMSSqlMoveDownTableAssignOptTimestampVar
			TZDateDef implMSSqlMoveDownTableAssignOptTZDateVar
			TZTimeDef implMSSqlMoveDownTableAssignOptTZTimeVar
			TZTimestampDef implMSSqlMoveDownTableAssignOptTZTimestampVar
			UuidDef implMSSqlMoveDownTableAssignOptUuidVar
			UuidGen implMSSqlMoveDownTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlMoveDownTableAssignReqBlobVar
			BoolDef implMSSqlMoveDownTableAssignReqBoolVar
			EnumDef implMSSqlMoveDownTableAssignReqEnumVar
			Int16Def implMSSqlMoveDownTableAssignReqInt16Var
			Int32Def implMSSqlMoveDownTableAssignReqInt32Var
			Int64Def implMSSqlMoveDownTableAssignReqInt64Var
			UInt16Def implMSSqlMoveDownTableAssignReqUInt16Var
			UInt32Def implMSSqlMoveDownTableAssignReqUInt32Var
			UInt64Def implMSSqlMoveDownTableAssignReqUInt64Var
			Id16Gen implMSSqlMoveDownTableAssignReqInt16Var
			Id32Gen implMSSqlMoveDownTableAssignReqInt32Var
			Id64Gen implMSSqlMoveDownTableAssignReqInt64Var
			FloatDef implMSSqlMoveDownTableAssignReqFloatVar
			DoubleDef implMSSqlMoveDownTableAssignReqDoubleVar
			NumberDef implMSSqlMoveDownTableAssignReqNumberVar
			StringDef implMSSqlMoveDownTableAssignReqStringVar
			TokenDef implMSSqlMoveDownTableAssignReqTokenVar
			NmTokenDef implMSSqlMoveDownTableAssignReqNmTokenVar
			NmTokensDef implMSSqlMoveDownTableAssignReqNmTokensVar
			TextDef implMSSqlMoveDownTableAssignReqTextVar
			DateDef implMSSqlMoveDownTableAssignReqDateVar
			TimeDef implMSSqlMoveDownTableAssignReqTimeVar
			TimestampDef implMSSqlMoveDownTableAssignReqTimestampVar
			TZDateDef implMSSqlMoveDownTableAssignReqTZDateVar
			TZTimeDef implMSSqlMoveDownTableAssignReqTZTimeVar
			TZTimestampDef implMSSqlMoveDownTableAssignReqTZTimestampVar
			UuidDef implMSSqlMoveDownTableAssignReqUuidVar
			UuidGen implMSSqlMoveDownTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqBlobVar">
			stmtMoveDown.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveDown.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtMoveDown.setString( argIdx++, "Y" );
			}
			else {
				stmtMoveDown.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtMoveDown.setString( argIdx++, "Y" );
				}
				else {
					stmtMoveDown.setString( argIdx++, "N" );
				}
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqEnumVar">
			stmtMoveDown.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveDown.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqInt16Var">
			stmtMoveDown.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveDown.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqInt32Var">
			stmtMoveDown.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveDown.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqInt64Var">
			stmtMoveDown.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveDown.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqUInt16Var">
			stmtMoveDown.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveDown.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqUInt32Var">
			stmtMoveDown.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveDown.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqUInt64Var">
			stmtMoveDown.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveDown.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqFloatVar">
			stmtMoveDown.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveDown.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqDoubleVar">
			stmtMoveDown.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveDown.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqNumberVar">
			stmtMoveDown.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveDown.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqStringVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqTokenVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqNmTokenVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqNmTokensVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqTextVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqDateVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqTimeVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqTimestampVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqTZDateVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqTZTimeVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqTZTimestampVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignReqUuidVar">
			stmtMoveDown.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlMoveDownTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="Suffix"
		>$popto Index Suffix$</GenRule>
	<GenRule GenDef="Value" Name="Suffix"
		>$popto Index Suffix$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlTableTablePStatements"
		>$iterate DispensedId16Generators( each declMSSqlTableStmtSelectNext empty empty )$$iterate DispensedId32Generators( each declMSSqlTableStmtSelectNext empty empty )$$iterate DispensedId64Generators( each declMSSqlTableStmtSelectNext empty empty )$$switch HasSuperClassRelation yes declMSSqlTableTableInhPStatements default declMSSqlTableTableBasePStatements$</GenRule>

	<GenRule GenDef="Object" Name="declMSSqlTableStmtSelectNext">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlTableTableInhPStatements"
		>$reference SuperClassRelation reference ToTable declMSSqlTableTablePStatements$$switch ThisHasChain yes declMSSqlTableTablePStmtMove default empty$$iterate Index( each declMSSqlTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlTableTableBasePStatements"
		>$declMSSqlTableTablePStmtEmitForPKey$$switch ThisHasChain yes declMSSqlTableTablePStmtMove default empty$$reference PrimaryKeyIndex declMSSqlTableTablePStmtEmitReadTableBuffByIndex$$iterate Index( each declMSSqlTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlTableTableBaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex declMSSqlTableTablePStmtEmitReadTableClassCodeByIndex$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasSubClasses"
		>$poptop Table HasSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlDeleteTableByInheritedIndexes"
		>$switch HasSuperClassRelation yes declMSSqlDeleteTableByInhIndexes default declMSSqlDeleteTableByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlDeleteTableByInhIndexes"
		>$reference SuperClassRelation reference ToTable declMSSqlDeleteTableByInheritedIndexes$$iterate Index( each declMSSqlDeleteTableByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlDeleteTableByBaseIndexes"
		>$reference PrimaryKeyIndex declMSSqlDeleteTableByIndex$$iterate Index( each declMSSqlDeleteTableByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="declMSSqlDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declMSSqlDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declMSSqlDeleteTableByIndex">
	protected PreparedStatement stmtDeleteBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlReadBuffByInheritedIndexes"
		>$switch HasSuperClassRelation yes declMSSqlReadBuffByInhIndexes default declMSSqlReadBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlReadBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable declMSSqlReadBuffByInheritedIndexes$$iterate Index( each declMSSqlReadBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlReadBuffByBaseIndexes"
		>$reference PrimaryKeyIndex declMSSqlReadBuffByIndex$$iterate Index( each declMSSqlReadBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="declMSSqlReadBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex no declMSSqlReadBuffByIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="declMSSqlReadBuffByIndex">
	protected PreparedStatement stmtReadBuffBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declMSSqlTableTablePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declMSSqlTableTablePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declMSSqlTableTablePStmtReadTableBuffByIndex"
		>$declMSSqlTableTablePStmtEmitReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declMSSqlTableTablePStmtEmitReadTableBuffByIndex"
>$switch TopTableHasSubClasses yes declMSSqlTableTablePStmtEmitReadTableClassCodeByIndex default empty$
	protected PreparedStatement stmtReadBuffBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declMSSqlTableTablePStmtEmitReadTableClassCodeByIndex">
	protected PreparedStatement stmtReadClassCodeBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlTableTablePStmtEmitForPKey">
	protected PreparedStatement stmtReadBuffByPKey = null;
	protected PreparedStatement stmtLockBuffByPKey = null;
	protected PreparedStatement stmtCreateByPKey = null;
	protected PreparedStatement stmtUpdateByPKey = null;
	protected PreparedStatement stmtDeleteByPKey = null;$poptop Table switch BaseHasHistory yes declMSSqlTableTablePStmtEmitForPKeyAudit default empty$
	protected PreparedStatement stmtReadAllBuff = null;$switch TopTableHasSubClasses yes declMSSqlTableTablePStmtReadClassCodes default empty$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlTableTablePStmtMove">
	protected PreparedStatement stmtMoveUp = null;
	protected PreparedStatement stmtMoveDown = null;</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlTableTablePStmtEmitForPKeyAudit"
		>$switch InheritsBlobOrTextDef yes declMSSqlTableTablePStmtEmitForPKeyReallyAudit default empty$</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlTableTablePStmtEmitForPKeyReallyAudit">
	protected PreparedStatement stmtAuditCreatedByPKey = null;
	protected PreparedStatement stmtAuditUpdatedByPKey = null;</GenRule>

	<GenRule GenDef="Table" Name="declMSSqlTableTablePStmtReadClassCodes">
	protected PreparedStatement stmtReadDerivedClassCode = null;
	protected PreparedStatement stmtLockDerivedClassCode = null;
	protected PreparedStatement stmtReadAllClassCode = null;</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlTableReleasePreparedStatements">
	/**
	 *	Release the prepared statements.
	 *	&lt;p&gt;
	 *	When the schema changes connections, the prepared statements
	 *	have to be released because they contain connection-specific
	 *	information for most databases.
	 */
	public void releasePreparedStatements() {
		final String S_ProcName = "releasePreparedStatements";
		S_sqlSelect$TableName$DistinctClassCode = null;
		S_sqlSelect$TableName$Buff = null;$iterate DispensedId16Generators( each implReleaseStmtSelectNext empty empty )$$iterate DispensedId32Generators( each implReleaseStmtSelectNext empty empty )$$iterate DispensedId64Generators( each implReleaseStmtSelectNext empty empty )$$implReleaseStmtReadBuffByPKey$$implReleaseStmtLockBuffByPKey$$poptop Table switch BaseHasHistory yes implMSSqlTableReleasePStmtEmitForPKeyAudit default empty$$implReleaseStmtCreateByPKey$$implReleaseStmtUpdateByPKey$$switch HasChain yes implReleaseStmtMove default empty$$implReleaseStmtDeleteByPKey$$implReleaseStmtDeleteByIndexes$$implReleaseStmtReadAllBuff$$switch TopTableHasSubClasses yes implMSSqlTableReleasePStmtReadClassCodes default empty$$implMSSqlTableReleasePStatements$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlTableReleasePStmtEmitForPKeyAudit"
		>$switch InheritsBlobOrTextDef yes implMSSqlTableReleasePStmtEmitForPKeyReallyAudit default empty$</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtMove">
		if( stmtMoveUp != null ) {
			try {
				stmtMoveUp.close();
			}
			catch( SQLException e ) {
			}
			stmtMoveUp = null;
		}
		if( stmtMoveDown != null ) {
			try {
				stmtMoveDown.close();
			}
			catch( SQLException e ) {
			}
			stmtMoveDown = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlTableReleasePStmtEmitForPKeyReallyAudit">
		if( stmtAuditCreatedByPKey != null ) {
			try {
				stmtAuditCreatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditCreatedByPKey = null;
		}
		if( stmtAuditUpdatedByPKey != null ) {
			try {
				stmtAuditUpdatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditUpdatedByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtDeleteByIndexes"
		>$switch HasSuperClassRelation yes implReleaseStmtInhDeleteByIndexes default empty $<!--
		-->$iterate Index( each implReleaseStmtDeleteByIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtInhDeleteByIndexes"
		>$reference SuperClassRelation reference ToTable implReleaseStmtDeleteByIndexes$</GenRule>

	<GenRule GenDef="Index" Name="implReleaseStmtDeleteByIndex"
		>$switch IsPrimaryIndex yes empty default implReleaseStmtReallyDeleteByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReleaseStmtReallyDeleteByIndex">
		if( stmtDeleteBy$Suffix$ != null ) {
			try {
				stmtDeleteBy$Suffix$.close();
			}
			catch( SQLException e ) {
//				throw new CFLibDbException( getClass(),
//					S_ProcName,
//					e );
			}
			finally {
				stmtDeleteBy$Suffix$ = null;
			}
		}</GenRule>

	<GenRule GenDef="Object" Name="implReleaseStmtSelectNext">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
			}
			stmtSelectNext$Name$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtReadBuffByPKey">
		if( stmtReadBuffByPKey != null ) {
			try {
				stmtReadBuffByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtReadBuffByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtLockBuffByPKey">
		if( stmtLockBuffByPKey != null ) {
			try {
				stmtLockBuffByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtLockBuffByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtCreateByPKey">
		if( stmtCreateByPKey != null ) {
			try {
				stmtCreateByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtCreateByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtUpdateByPKey">
		if( stmtUpdateByPKey != null ) {
			try {
				stmtUpdateByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtUpdateByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtDeleteByPKey">
		if( stmtDeleteByPKey != null ) {
			try {
				stmtDeleteByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtDeleteByPKey = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtReadAllBuff">
		if( stmtReadAllBuff != null ) {
			try {
				stmtReadAllBuff.close();
			}
			catch( SQLException e ) {
			}
			stmtReadAllBuff = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlTableReleasePStmtReadClassCodes">
		if( stmtReadDerivedClassCode != null ) {
			try {
				stmtReadDerivedClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtReadDerivedClassCode = null;
		}
		if( stmtLockDerivedClassCode != null ) {
			try {
				stmtLockDerivedClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtLockDerivedClassCode = null;
		}
		if( stmtReadAllClassCode != null ) {
			try {
				stmtReadAllClassCode.close();
			}
			catch( SQLException e ) {
			}
			stmtReadAllClassCode = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlTableReleasePStatements"
		>$switch HasSuperClassRelation yes implMSSqlTableReleaseInhPStatements default implMSSqlTableReleaseBasePStatements$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlTableReleaseInhPStatements"
		>$reference SuperClassRelation reference ToTable implMSSqlTableReleasePStatements$$iterate Index( each implMSSqlTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlTableReleaseBasePStatements"
		>$reference PrimaryKeyIndex implMSSqlTableReleasePStmtReadTableBuffByIndex$$iterate Index( each implMSSqlTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlTableReleaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex implMSSqlTableReleasePStmtDerivedClassCodeBySuffix$</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlTableReleasePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implMSSqlTableReleasePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlTableReleasePStmtReadTableBuffByIndex"
		>$implMSSqlTableReleasePStmtEmitReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlTableReleasePStmtDerivedClassCodeBySuffix">
		if( stmtReadClassCodeBy$Suffix$ != null ) {
			try {
				stmtReadClassCodeBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtReadClassCodeBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlTableReleasePStmtEmitReadTableBuffByIndex"
>$switch TopTableHasSubClasses yes implMSSqlTableReleasePStmtDerivedClassCodeBySuffix default empty$
		if( stmtReadBuffBy$Suffix$ != null ) {
			try {
				stmtReadBuffBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtReadBuffBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implConstructMSSqlTableTable">
	public $SchemaName$MSSql$TableName$Table( $SchemaName$MSSqlSchema argSchema ) {
		schema = argSchema;
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlIndexColumnNameComma">$lower DbColumnName$, </GenRule>
	<GenRule GenDef="IndexCol" Name="implMSSqlIndexColumnName">$lower DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlIndexColumnBindVar">?</GenRule>
	<GenRule GenDef="IndexCol" Name="implMSSqlIndexCommaColumnBindVar">, ?</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGen">
	public short next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		if( ! schema.isTransactionOpen() ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"Not in a transaction" );
		}
		Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlLocalizeTableKeys )$		short nextId = -1;
		ResultSet resultSet = null;
		try {
			String sql = "exec $sp_selnext_tableidgen$ "
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implMSSqlNextIdGenSPArg each implMSSqlNextIdGenCommaSPArg )$;
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlNextIdGen16SelectAssignVar )$
			stmtSelectNext$Name$.execute();$implNextIdGenExtractResultSet$
			if( resultSet.next() ) {
				nextId = resultSet.getShort( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenViaAttributes">
	public short next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		short retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenViaAttributesSetKeyValue">
		pkey.set$OptionalOrRequired$$Name$( arg$Name$ );</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenDeclAttr">,
		$implJavaAtomType$ arg$Name$</GenRule>

	<GenRule GenDef="Value" Name="implNextIdGenExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtSelectNext$Name$.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtSelectNext$Name$.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtSelectNext$Name$.getUpdateCount() ) {
					break;
				}
			}
			if( resultSet == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"resultSet" );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlNextIdGenCommaSPArg"> + ", "
$implMSSqlNextIdGenSPArg$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArg"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlNextIdGenSPArgValueGenericVar
			BoolDef implMSSqlNextIdGenSPArgValueBoolVar
			EnumDef implMSSqlNextIdGenSPArgValueGenericVar
			Int16Def implMSSqlNextIdGenSPArgValueGenericVar
			Int32Def implMSSqlNextIdGenSPArgValueGenericVar
			Int64Def implMSSqlNextIdGenSPArgValueGenericVar
			UInt16Def implMSSqlNextIdGenSPArgValueGenericVar
			UInt32Def implMSSqlNextIdGenSPArgValueGenericVar
			UInt64Def implMSSqlNextIdGenSPArgValueGenericVar
			Id16Gen implMSSqlNextIdGenSPArgValueGenericVar
			Id32Gen implMSSqlNextIdGenSPArgValueGenericVar
			Id64Gen implMSSqlNextIdGenSPArgValueGenericVar
			FloatDef implMSSqlNextIdGenSPArgValueGenericVar
			DoubleDef implMSSqlNextIdGenSPArgValueGenericVar
			NumberDef implMSSqlNextIdGenSPArgValueGenericVar
			StringDef implMSSqlNextIdGenSPArgValueGenericVar
			TokenDef implMSSqlNextIdGenSPArgValueGenericVar
			NmTokenDef implMSSqlNextIdGenSPArgValueGenericVar
			NmTokensDef implMSSqlNextIdGenSPArgValueGenericVar
			TextDef implMSSqlNextIdGenSPArgValueGenericVar
			DateDef implMSSqlNextIdGenSPArgValueDateVar
			TimeDef implMSSqlNextIdGenSPArgValueTimeVar
			TimestampDef implMSSqlNextIdGenSPArgValueTimestampVar
			TZDateDef implMSSqlNextIdGenSPArgValueTZDateVar
			TZTimeDef implMSSqlNextIdGenSPArgValueTZTimeVar
			TZTimestampDef implMSSqlNextIdGenSPArgValueTZTimestampVar
			UuidDef implMSSqlNextIdGenSPArgValueGenericVar
			UuidGen implMSSqlNextIdGenSPArgValueGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArgValueGenericVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArgValueBoolVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArgValueDateVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArgValueTimeVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArgValueTimestampVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArgValueTZDateVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArgValueTZTimeVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArgValueTZTimestampVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGenSPArgValueUuidVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignVar"
		>$switch IsNullable yes implMSSqlNextIdGen16SelectAssignOptVar
			default implMSSqlNextIdGen16SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlNextIdGen16SelectAssignOptBlobVar
			BoolDef implMSSqlNextIdGen16SelectAssignOptBoolVar
			EnumDef implMSSqlNextIdGen16SelectAssignOptEnumVar
			Int16Def implMSSqlNextIdGen16SelectAssignOptInt16Var
			Int32Def implMSSqlNextIdGen16SelectAssignOptInt32Var
			Int64Def implMSSqlNextIdGen16SelectAssignOptInt64Var
			UInt16Def implMSSqlNextIdGen16SelectAssignOptUInt16Var
			UInt32Def implMSSqlNextIdGen16SelectAssignOptUInt32Var
			UInt64Def implMSSqlNextIdGen16SelectAssignOptUInt64Var
			Id16Gen implMSSqlNextIdGen16SelectAssignOptInt16Var
			Id32Gen implMSSqlNextIdGen16SelectAssignOptInt32Var
			Id64Gen implMSSqlNextIdGen16SelectAssignOptInt64Var
			FloatDef implMSSqlNextIdGen16SelectAssignOptFloatVar
			DoubleDef implMSSqlNextIdGen16SelectAssignOptDoubleVar
			NumberDef implMSSqlNextIdGen16SelectAssignOptNumberVar
			StringDef implMSSqlNextIdGen16SelectAssignOptStringVar
			TokenDef implMSSqlNextIdGen16SelectAssignOptTokenVar
			NmTokenDef implMSSqlNextIdGen16SelectAssignOptNmTokenVar
			NmTokensDef implMSSqlNextIdGen16SelectAssignOptNmTokensVar
			TextDef implMSSqlNextIdGen16SelectAssignOptTextVar
			DateDef implMSSqlNextIdGen16SelectAssignOptDateVar
			TimeDef implMSSqlNextIdGen16SelectAssignOptTimeVar
			TimestampDef implMSSqlNextIdGen16SelectAssignOptTimestampVar
			TZDateDef implMSSqlNextIdGen16SelectAssignOptTZDateVar
			TZTimeDef implMSSqlNextIdGen16SelectAssignOptTZTimeVar
			TZTimestampDef implMSSqlNextIdGen16SelectAssignOptTZTimestampVar
			UuidDef implMSSqlNextIdGen16SelectAssignOptUuidVar
			UuidGen implMSSqlNextIdGen16SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlNextIdGen16SelectAssignReqBlobVar
			BoolDef implMSSqlNextIdGen16SelectAssignReqBoolVar
			EnumDef implMSSqlNextIdGen16SelectAssignReqEnumVar
			Int16Def implMSSqlNextIdGen16SelectAssignReqInt16Var
			Int32Def implMSSqlNextIdGen16SelectAssignReqInt32Var
			Int64Def implMSSqlNextIdGen16SelectAssignReqInt64Var
			UInt16Def implMSSqlNextIdGen16SelectAssignReqUInt16Var
			UInt32Def implMSSqlNextIdGen16SelectAssignReqUInt32Var
			UInt64Def implMSSqlNextIdGen16SelectAssignReqUInt64Var
			Id16Gen implMSSqlNextIdGen16SelectAssignReqInt16Var
			Id32Gen implMSSqlNextIdGen16SelectAssignReqInt32Var
			Id64Gen implMSSqlNextIdGen16SelectAssignReqInt64Var
			FloatDef implMSSqlNextIdGen16SelectAssignReqFloatVar
			DoubleDef implMSSqlNextIdGen16SelectAssignReqDoubleVar
			NumberDef implMSSqlNextIdGen16SelectAssignReqNumberVar
			StringDef implMSSqlNextIdGen16SelectAssignReqStringVar
			TokenDef implMSSqlNextIdGen16SelectAssignReqTokenVar
			NmTokenDef implMSSqlNextIdGen16SelectAssignReqNmTokenVar
			NmTokensDef implMSSqlNextIdGen16SelectAssignReqNmTokensVar
			TextDef implMSSqlNextIdGen16SelectAssignReqTextVar
			DateDef implMSSqlNextIdGen16SelectAssignReqDateVar
			TimeDef implMSSqlNextIdGen16SelectAssignReqTimeVar
			TimestampDef implMSSqlNextIdGen16SelectAssignReqTimestampVar
			TZDateDef implMSSqlNextIdGen16SelectAssignReqTZDateVar
			TZTimeDef implMSSqlNextIdGen16SelectAssignReqTZTimeVar
			TZTimestampDef implMSSqlNextIdGen16SelectAssignReqTZTimestampVar
			UuidDef implMSSqlNextIdGen16SelectAssignReqUuidVar
			UuidGen implMSSqlNextIdGen16SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqBlobVar">
			stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqBoolVar">
			if( $Name$ ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "Y" );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "Y" );
				}
				else {
					stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqEnumVar">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqFloatVar">
			stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqNumberVar">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqStringVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqTextVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignReqUuidVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen16SelectAssignClassCode">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGen">
	public int next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		if( ! schema.isTransactionOpen() ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"Not in a transaction" );
		}
		Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlLocalizeTableKeys )$		int nextId = -1;
		ResultSet resultSet = null;
		try {
			String sql = "exec $sp_selnext_tableidgen$ "
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implMSSqlNextIdGenSPArg each implMSSqlNextIdGenCommaSPArg )$;
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlNextIdGen32SelectAssignVar )$
			stmtSelectNext$Name$.execute();$implNextIdGenExtractResultSet$
			if( resultSet.next() ) {
				nextId = resultSet.getInt( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenViaAttributes">
	public int next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		int retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignVar"
		>$switch IsNullable yes implMSSqlNextIdGen32SelectAssignOptVar
			default implMSSqlNextIdGen32SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlNextIdGen32SelectAssignOptBlobVar
			BoolDef implMSSqlNextIdGen32SelectAssignOptBoolVar
			EnumDef implMSSqlNextIdGen32SelectAssignOptEnumVar
			Int16Def implMSSqlNextIdGen32SelectAssignOptInt16Var
			Int32Def implMSSqlNextIdGen32SelectAssignOptInt32Var
			Int64Def implMSSqlNextIdGen32SelectAssignOptInt64Var
			UInt16Def implMSSqlNextIdGen32SelectAssignOptUInt16Var
			UInt32Def implMSSqlNextIdGen32SelectAssignOptUInt32Var
			UInt64Def implMSSqlNextIdGen32SelectAssignOptUInt64Var
			Id16Gen implMSSqlNextIdGen32SelectAssignOptInt16Var
			Id32Gen implMSSqlNextIdGen32SelectAssignOptInt32Var
			Id64Gen implMSSqlNextIdGen32SelectAssignOptInt64Var
			FloatDef implMSSqlNextIdGen32SelectAssignOptFloatVar
			DoubleDef implMSSqlNextIdGen32SelectAssignOptDoubleVar
			NumberDef implMSSqlNextIdGen32SelectAssignOptNumberVar
			StringDef implMSSqlNextIdGen32SelectAssignOptStringVar
			TokenDef implMSSqlNextIdGen32SelectAssignOptTokenVar
			NmTokenDef implMSSqlNextIdGen32SelectAssignOptNmTokenVar
			NmTokensDef implMSSqlNextIdGen32SelectAssignOptNmTokensVar
			TextDef implMSSqlNextIdGen32SelectAssignOptTextVar
			DateDef implMSSqlNextIdGen32SelectAssignOptDateVar
			TimeDef implMSSqlNextIdGen32SelectAssignOptTimeVar
			TimestampDef implMSSqlNextIdGen32SelectAssignOptTimestampVar
			TZDateDef implMSSqlNextIdGen32SelectAssignOptTZDateVar
			TZTimeDef implMSSqlNextIdGen32SelectAssignOptTZTimeVar
			TZTimestampDef implMSSqlNextIdGen32SelectAssignOptTZTimestampVar
			UuidDef implMSSqlNextIdGen32SelectAssignOptUuidVar
			UuidGen implMSSqlNextIdGen32SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlNextIdGen32SelectAssignReqBlobVar
			BoolDef implMSSqlNextIdGen32SelectAssignReqBoolVar
			EnumDef implMSSqlNextIdGen32SelectAssignReqEnumVar
			Int16Def implMSSqlNextIdGen32SelectAssignReqInt16Var
			Int32Def implMSSqlNextIdGen32SelectAssignReqInt32Var
			Int64Def implMSSqlNextIdGen32SelectAssignReqInt64Var
			UInt16Def implMSSqlNextIdGen32SelectAssignReqUInt16Var
			UInt32Def implMSSqlNextIdGen32SelectAssignReqUInt32Var
			UInt64Def implMSSqlNextIdGen32SelectAssignReqUInt64Var
			Id16Gen implMSSqlNextIdGen32SelectAssignReqInt16Var
			Id32Gen implMSSqlNextIdGen32SelectAssignReqInt32Var
			Id64Gen implMSSqlNextIdGen32SelectAssignReqInt64Var
			FloatDef implMSSqlNextIdGen32SelectAssignReqFloatVar
			DoubleDef implMSSqlNextIdGen32SelectAssignReqDoubleVar
			NumberDef implMSSqlNextIdGen32SelectAssignReqNumberVar
			StringDef implMSSqlNextIdGen32SelectAssignReqStringVar
			TokenDef implMSSqlNextIdGen32SelectAssignReqTokenVar
			NmTokenDef implMSSqlNextIdGen32SelectAssignReqNmTokenVar
			NmTokensDef implMSSqlNextIdGen32SelectAssignReqNmTokensVar
			TextDef implMSSqlNextIdGen32SelectAssignReqTextVar
			DateDef implMSSqlNextIdGen32SelectAssignReqDateVar
			TimeDef implMSSqlNextIdGen32SelectAssignReqTimeVar
			TimestampDef implMSSqlNextIdGen32SelectAssignReqTimestampVar
			TZDateDef implMSSqlNextIdGen32SelectAssignReqTZDateVar
			TZTimeDef implMSSqlNextIdGen32SelectAssignReqTZTimeVar
			TZTimestampDef implMSSqlNextIdGen32SelectAssignReqTZTimestampVar
			UuidDef implMSSqlNextIdGen32SelectAssignReqUuidVar
			UuidGen implMSSqlNextIdGen32SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqBlobVar">
			stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqBoolVar">
			if( $Name$ ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "Y" );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "Y" );
				}
				else {
					stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqEnumVar">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqFloatVar">
			stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqNumberVar">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqStringVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqTextVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignReqUuidVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen32SelectAssignClassCode">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGen">
	public long next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		if( ! schema.isTransactionOpen() ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"Not in a transaction" );
		}
		Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlLocalizeTableKeys )$		long nextId = -1;
		ResultSet resultSet = null;
		try {
			String sql = "exec $sp_selnext_tableidgen$ "
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implMSSqlNextIdGenSPArg each implMSSqlNextIdGenCommaSPArg )$;
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlNextIdGen64SelectAssignVar )$
			stmtSelectNext$Name$.execute();$implNextIdGenExtractResultSet$
			if( resultSet.next() ) {
				nextId = resultSet.getLong( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenViaAttributes">
	public long next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		long retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignVar"
		>$switch IsNullable yes implMSSqlNextIdGen64SelectAssignOptVar
			default implMSSqlNextIdGen64SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlNextIdGen64SelectAssignOptBlobVar
			BoolDef implMSSqlNextIdGen64SelectAssignOptBoolVar
			EnumDef implMSSqlNextIdGen64SelectAssignOptEnumVar
			Int16Def implMSSqlNextIdGen64SelectAssignOptInt16Var
			Int32Def implMSSqlNextIdGen64SelectAssignOptInt32Var
			Int64Def implMSSqlNextIdGen64SelectAssignOptInt64Var
			UInt16Def implMSSqlNextIdGen64SelectAssignOptUInt16Var
			UInt32Def implMSSqlNextIdGen64SelectAssignOptUInt32Var
			UInt64Def implMSSqlNextIdGen64SelectAssignOptUInt64Var
			Id16Gen implMSSqlNextIdGen64SelectAssignOptInt16Var
			Id32Gen implMSSqlNextIdGen64SelectAssignOptInt32Var
			Id64Gen implMSSqlNextIdGen64SelectAssignOptInt64Var
			FloatDef implMSSqlNextIdGen64SelectAssignOptFloatVar
			DoubleDef implMSSqlNextIdGen64SelectAssignOptDoubleVar
			NumberDef implMSSqlNextIdGen64SelectAssignOptNumberVar
			StringDef implMSSqlNextIdGen64SelectAssignOptStringVar
			TokenDef implMSSqlNextIdGen64SelectAssignOptTokenVar
			NmTokenDef implMSSqlNextIdGen64SelectAssignOptNmTokenVar
			NmTokensDef implMSSqlNextIdGen64SelectAssignOptNmTokensVar
			TextDef implMSSqlNextIdGen64SelectAssignOptTextVar
			DateDef implMSSqlNextIdGen64SelectAssignOptDateVar
			TimeDef implMSSqlNextIdGen64SelectAssignOptTimeVar
			TimestampDef implMSSqlNextIdGen64SelectAssignOptTimestampVar
			TZDateDef implMSSqlNextIdGen64SelectAssignOptTZDateVar
			TZTimeDef implMSSqlNextIdGen64SelectAssignOptTZTimeVar
			TZTimestampDef implMSSqlNextIdGen64SelectAssignOptTZTimestampVar
			UuidDef implMSSqlNextIdGen64SelectAssignOptUuidVar
			UuidGen implMSSqlNextIdGen64SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlNextIdGen64SelectAssignReqBlobVar
			BoolDef implMSSqlNextIdGen64SelectAssignReqBoolVar
			EnumDef implMSSqlNextIdGen64SelectAssignReqEnumVar
			Int16Def implMSSqlNextIdGen64SelectAssignReqInt16Var
			Int32Def implMSSqlNextIdGen64SelectAssignReqInt32Var
			Int64Def implMSSqlNextIdGen64SelectAssignReqInt64Var
			UInt16Def implMSSqlNextIdGen64SelectAssignReqUInt16Var
			UInt32Def implMSSqlNextIdGen64SelectAssignReqUInt32Var
			UInt64Def implMSSqlNextIdGen64SelectAssignReqUInt64Var
			Id16Gen implMSSqlNextIdGen64SelectAssignReqInt16Var
			Id32Gen implMSSqlNextIdGen64SelectAssignReqInt32Var
			Id64Gen implMSSqlNextIdGen64SelectAssignReqInt64Var
			FloatDef implMSSqlNextIdGen64SelectAssignReqFloatVar
			DoubleDef implMSSqlNextIdGen64SelectAssignReqDoubleVar
			NumberDef implMSSqlNextIdGen64SelectAssignReqNumberVar
			StringDef implMSSqlNextIdGen64SelectAssignReqStringVar
			TokenDef implMSSqlNextIdGen64SelectAssignReqTokenVar
			NmTokenDef implMSSqlNextIdGen64SelectAssignReqNmTokenVar
			NmTokensDef implMSSqlNextIdGen64SelectAssignReqNmTokensVar
			TextDef implMSSqlNextIdGen64SelectAssignReqTextVar
			DateDef implMSSqlNextIdGen64SelectAssignReqDateVar
			TimeDef implMSSqlNextIdGen64SelectAssignReqTimeVar
			TimestampDef implMSSqlNextIdGen64SelectAssignReqTimestampVar
			TZDateDef implMSSqlNextIdGen64SelectAssignReqTZDateVar
			TZTimeDef implMSSqlNextIdGen64SelectAssignReqTZTimeVar
			TZTimestampDef implMSSqlNextIdGen64SelectAssignReqTZTimestampVar
			UuidDef implMSSqlNextIdGen64SelectAssignReqUuidVar
			UuidGen implMSSqlNextIdGen64SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqBlobVar">
			stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqBoolVar">
			if( $Name$ ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "Y" );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "Y" );
				}
				else {
					stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqEnumVar">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqFloatVar">
			stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqNumberVar">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqStringVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqTextVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignReqUuidVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlNextIdGen64SelectAssignClassCode">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="UuidGen" Name="implNextIdGen">
	public UUID next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey )
	{
		UUID retval = UUID.randomUUID();
		return( retval );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevision">
				+		", revision )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevision"
		> + " )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevisionValue"> + ", "
				+		"1 )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevisionValue"> + " )"</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableSetBuffPKey"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlCreateTableSetBuffPKeyGeneratedAttr )$
			Buff.setRequiredRevision( Revision );</GenRule>

	<GenRule GenDef="IndexCol" Name="GenerateId"
		>$reference Column GenerateId$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlCreateTableSetBuffPKeyGeneratedAttr"
		>$switch GenerateId yes implMSSqlCreateTableSetBuffPKeyAttr default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlCreateTableSetBuffPKeyAttr">
			Buff.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableGenKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlCreateTableKeys empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableCopyKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlCreateTableKeysCopyId empty empty )$</GenRule>

	<GenRule GenDef="Object" Name="implCheckOpenTransaction"
		>$popto Table implCheckOpenTransaction$</GenRule>

	<GenRule GenDef="Table" Name="implCheckOpenTransaction">
		if( ! schema.isTransactionOpen() ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"Transaction not open" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTable"
		>$switch InheritsBlobOrTextDef yes implCreateTableOldStyle default implCreateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="BaseDefIsBaseTable"
		>$reference BaseClass IsBaseTable$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implCreateTableSPCopyInhColumns default implCreateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implCreateTableSPCopyColumns$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableCopyDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implMSSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implMSSqlCreateTableCopyClassCode default empty$$iterate Columns( each implMSSqlCreateTableCopyNonGenColumn empty empty )$</GenRule>

	<GenRule GenDef="Value" Name="implMSSqlCreateTableCopyNonGenColumn"
		>$switch GenerateId yes empty default implMSSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSP">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$switch HasSuperClassRelation yes empty default implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implCreateTableSPTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPTryBody">
$implCreateTableSPCopyColumns$$reference PrimaryKeyIndex iterate Columns( each implCreateTableSPMaybeInitGeneratedUuid )$			Connection cnx = schema.getCnx();
			String sql =
				"exec $sp_create_dbtablename$ ?, ?, ?, ?, ?, ?"$implCreateTableSPPassArgs$;
			if( stmtCreateByPKey == null ) {
				stmtCreateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implMSSqlCreateTableBindClassCode default implMSSqlCreateTableBindConstClassCode$$implCreateTableSPBindArgs$
			stmtCreateByPKey.execute();$implCreateTableSPExtractResultSet$
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff createdBuff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}$implMSSqlCreateTableApplyBuff$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtCreateByPKey.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtCreateByPKey.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtCreateByPKey.getUpdateCount() ) {
					break;
				}
			}
			if( resultSet == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"resultSet" );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPMaybeInitGeneratedUuid"
		>$switch GenerateId yes implCreateTableSPCheckIfGeneratingUuid default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPCheckIfGeneratingUuid"
		>$switch BaseModelAtomClass
			UuidDef implCreateTableSPInitGeneratedUuid
			UuidGen implCreateTableSPInitGeneratedUuid
			default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPInitGeneratedUuid">
			UUID $Name$ = UUID.randomUUID();</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableApplyBuff"
		>$switch HasSuperClassRelation yes implMSSqlCreateTableApplyInhBuff default implMSSqlCreateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implMSSqlCreateTableApplyBuff$$iterate Columns( each implMSSqlCreateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableApplyBaseBuff"
		>$iterate Columns( each implMSSqlCreateTableApplyCol )$$implMSSqlCreateTableApplyRevision$$switch HasAuditColumns yes implMSSqlCreateTableApplyAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableApplyRevision">
				Buff.setRequiredRevision( createdBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableApplyAuditColumns">
				Buff.setCreatedByUserId( createdBuff.getCreatedByUserId() );
				Buff.setCreatedAt( createdBuff.getCreatedAt() );
				Buff.setUpdatedByUserId( createdBuff.getUpdatedByUserId() );
				Buff.setUpdatedAt( createdBuff.getUpdatedAt() );</GenRule>

	<GenRule GenDef="Value" Name="implMSSqlCreateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implMSSqlCreateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implMSSqlCreateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( createdBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPBindInhArgs default implCreateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPBindArgs$$iterate Columns( each implCreateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindBaseArgs"
		>$iterate Columns( each implCreateTableSPBindNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implMSSqlCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPBindForceUuidArg default implMSSqlCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindForceUuidArg"
		>$switch BaseModelAtomClass
			UuidDef implMSSqlCreateTableBindVar
			UuidGen implMSSqlCreateTableBindVar
			default empty$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPPassInhArgs default implCreateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPPassArgs$$iterate Columns( each implCreateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassBaseArgs"
		>$iterate Columns( each implCreateTableSPPassNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPForceUuidArg default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPForceUuidArg"
		>$switch BaseModelAtomClass
			UuidGen implCreateTableSPPassAnArg
			UuidDef implCreateTableSPPassAnArg
			default empty$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlCreateTableSPPassGenericVar
			BoolDef implMSSqlCreateTableSPPassGenericVar
			EnumDef implMSSqlCreateTableSPPassGenericVar
			Int16Def implMSSqlCreateTableSPPassGenericVar
			Int32Def implMSSqlCreateTableSPPassGenericVar
			Int64Def implMSSqlCreateTableSPPassGenericVar
			UInt16Def implMSSqlCreateTableSPPassGenericVar
			UInt32Def implMSSqlCreateTableSPPassGenericVar
			UInt64Def implMSSqlCreateTableSPPassGenericVar
			Id16Gen implMSSqlCreateTableSPPassGenericVar
			Id32Gen implMSSqlCreateTableSPPassGenericVar
			Id64Gen implMSSqlCreateTableSPPassGenericVar
			FloatDef implMSSqlCreateTableSPPassFloatVar
			DoubleDef implMSSqlCreateTableSPPassGenericVar
			NumberDef implMSSqlCreateTableSPPassGenericVar
			StringDef implMSSqlCreateTableSPPassGenericVar
			TokenDef implMSSqlCreateTableSPPassGenericVar
			NmTokenDef implMSSqlCreateTableSPPassGenericVar
			NmTokensDef implMSSqlCreateTableSPPassGenericVar
			TextDef implMSSqlCreateTableSPPassTextVar
			DateDef implMSSqlCreateTableSPPassDateVar
			TimeDef implMSSqlCreateTableSPPassTimeVar
			TimestampDef implMSSqlCreateTableSPPassTimestampVar
			TZDateDef implMSSqlCreateTableSPPassTZDateVar
			TZTimeDef implMSSqlCreateTableSPPassTZTimeVar
			TZTimestampDef implMSSqlCreateTableSPPassTZTimestampVar
			UuidDef implMSSqlCreateTableSPPassGenericVar
			UuidGen implMSSqlCreateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableSPPassGenericVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableSPPassFloatVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableSPPassTextVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableSPPassDateVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableSPPassTimeVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableSPPassTimestampVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableSPPassTZDateVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableSPPassTZTimeVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableSPPassTZTimestampVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableInvokeSuperCreate">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().create$reference SuperClassRelation reference ToTable TableName$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyle">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$switch SecScope None empty System implCreateTableOSCheckSystem Cluster implCreateTableOSCheckCluster Tenant implCreateTableOSCheckTenant default error$$switch HasSuperClassRelation yes implCreateTableInvokeSuperCreate default implCheckOpenTransaction$
		try {
			Connection cnx = schema.getCnx();
$switch IsBaseTable yes implMSSqlCreateTableClassCodeKey default empty$$switch HasSuperClassRelation no implMSSqlCreateTableGenKeys default implMSSqlCreateTableCopyKeys$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$$switch HasSuperClassRelation no implMSSqlCreateTableInitRevision default empty$<!--
-->			String sql =
					"INSERT INTO " + schema.getLowerDbSchemaName() + "..$DbTableName$( "$switch IsBaseTable yes implMSSqlCreateTableInsertClassCode default empty$$switch HasSuperClassRelation no implMSSqlCreateTableInsertForceSyncLock default empty$$switch HasSuperClassRelation no implMSSqlCreateTableInsertOptAuditColumns default empty$$iterate Columns( each implMSSqlCreateTableInsertColumnComma last implMSSqlCreateTableInsertColumn )$$switch HasSuperClassRelation no implCreateTableSqlFragRevision default implCreateTableSqlFragNoRevision$
				+	"VALUES ( "$switch IsBaseTable yes implMSSqlCreateTableValuesClassCode default empty$$switch HasSuperClassRelation no implMSSqlCreateTableValuesForceSyncLock default empty$$switch HasSuperClassRelation no implMSSqlCreateTableValuesOptAuditColumns default empty$$iterate Columns( each implMSSqlCreateTableValuesVarComma last implMSSqlCreateTableValuesVar )$$switch HasSuperClassRelation no implCreateTableSqlFragRevisionValue default implCreateTableSqlFragNoRevisionValue$;$implCreateTableOldStylePartTwo$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableInsertForceSyncLock">
				+		"forcesynclock, "</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableValuesForceSyncLock">
				+		"0, "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableValuesOptAuditColumns"
		>$switch HasAuditColumns yes implMSSqlCreateTableValuesAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableValuesAuditColumns">
				+		" ?, "
				+		" getdate(), "
				+		" ?, "
				+		" getdate(), "</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableInsertOptAuditColumns"
		>$switch HasAuditColumns yes implMSSqlCreateTableInsertAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableInsertAuditColumns">
				+		"createdby, "
				+		"createdat, "
				+		"updatedby, "
				+		"updatedat, "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStylePartTwo">
			if( stmtCreateByPKey == null ) {
				stmtCreateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;$switch HasSuperClassRelation no implMSSqlCreateTableBindOptAuditColumns default empty$$switch IsBaseTable yes implMSSqlCreateTableBindClassCode default empty$$iterate Columns( each implMSSqlCreateTableBindVar )$
			int rowsAffected = stmtCreateByPKey.executeUpdate();
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by insert, not " + rowsAffected );
			}$switch HasSuperClassRelation no implMSSqlCreateTableSetBuffPKey default empty$$poptop Table switch BaseHasHistory yes implCreateTableOldStyleAuditCreated default empty$$switch HasChain yes implCreateTableOldStyleRereadCreated default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleRereadCreated"
		>$switch BaseHasClassCode yes implCreateTableOldStyleRereadCreatedWithCC default implCreateTableOldStyleRereadCreatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleRereadCreatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey key = schema.getFactory$reference BaseClass TableName$().newPKey();$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleRereadCreatedCopyBuffToKey )$
				$DefSchemaName$$TableName$Buff reread = readBuff( Authorization, key );
				Buff.set( reread );
			}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleRereadCreatedNoCC">
			{
				$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey key = schema.getFactory$reference BaseClass TableName$().newPKey();$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleRereadCreatedCopyBuffToKey )$
				$DefSchemaName$$TableName$Buff reread = readBuff( Authorization, key );
				Buff.set( reread );
			}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleRereadCreatedCopyBuffToKey">
				key.set$OptionalOrRequired$$Name$( Buff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreated"
		>$switch BaseHasClassCode yes implCreateTableOldStyleAuditCreatedWithCC default implCreateTableOldStyleAuditCreatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + "..$DbTableName$_h( auditclusterid, "
					+		" auditsessionid,"
					+		" auditstamp,"
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, sysdatetime(), $lower reference BaseClass ClassCode$.classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 0 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditCreatedByPKey == null ) {
					stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
				}
				argIdx = 1;
				stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlCreateTableAssignVar )$
				int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedValInh default implCreateTableOldStyleAuditCreatedValBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedVal$$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValBase"
		>$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditCreatedReallyVal$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedReallyVal"
> + ", "
					+		"$lower reference Table ClassCode$.$lower DbColumnName$"</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implMSSqlCreateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlCreateTableBindAuditColumns">
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignVar"
		>$switch IsNullable yes implMSSqlCreateTableAssignOptVar
			default implMSSqlCreateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlCreateTableAssignOptBlobVar
			BoolDef implMSSqlCreateTableAssignOptBoolVar
			EnumDef implMSSqlCreateTableAssignOptEnumVar
			Int16Def implMSSqlCreateTableAssignOptInt16Var
			Int32Def implMSSqlCreateTableAssignOptInt32Var
			Int64Def implMSSqlCreateTableAssignOptInt64Var
			UInt16Def implMSSqlCreateTableAssignOptUInt16Var
			UInt32Def implMSSqlCreateTableAssignOptUInt32Var
			UInt64Def implMSSqlCreateTableAssignOptUInt64Var
			Id16Gen implMSSqlCreateTableAssignOptInt16Var
			Id32Gen implMSSqlCreateTableAssignOptInt32Var
			Id64Gen implMSSqlCreateTableAssignOptInt64Var
			FloatDef implMSSqlCreateTableAssignOptFloatVar
			DoubleDef implMSSqlCreateTableAssignOptDoubleVar
			NumberDef implMSSqlCreateTableAssignOptNumberVar
			StringDef implMSSqlCreateTableAssignOptStringVar
			TokenDef implMSSqlCreateTableAssignOptTokenVar
			NmTokenDef implMSSqlCreateTableAssignOptNmTokenVar
			NmTokensDef implMSSqlCreateTableAssignOptNmTokensVar
			TextDef implMSSqlCreateTableAssignOptTextVar
			DateDef implMSSqlCreateTableAssignOptDateVar
			TimeDef implMSSqlCreateTableAssignOptTimeVar
			TimestampDef implMSSqlCreateTableAssignOptTimestampVar
			TZDateDef implMSSqlCreateTableAssignOptTZDateVar
			TZTimeDef implMSSqlCreateTableAssignOptTZTimeVar
			TZTimestampDef implMSSqlCreateTableAssignOptTZTimestampVar
			UuidDef implMSSqlCreateTableAssignOptUuidVar
			UuidGen implMSSqlCreateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlCreateTableAssignReqBlobVar
			BoolDef implMSSqlCreateTableAssignReqBoolVar
			EnumDef implMSSqlCreateTableAssignReqEnumVar
			Int16Def implMSSqlCreateTableAssignReqInt16Var
			Int32Def implMSSqlCreateTableAssignReqInt32Var
			Int64Def implMSSqlCreateTableAssignReqInt64Var
			UInt16Def implMSSqlCreateTableAssignReqUInt16Var
			UInt32Def implMSSqlCreateTableAssignReqUInt32Var
			UInt64Def implMSSqlCreateTableAssignReqUInt64Var
			Id16Gen implMSSqlCreateTableAssignReqInt16Var
			Id32Gen implMSSqlCreateTableAssignReqInt32Var
			Id64Gen implMSSqlCreateTableAssignReqInt64Var
			FloatDef implMSSqlCreateTableAssignReqFloatVar
			DoubleDef implMSSqlCreateTableAssignReqDoubleVar
			NumberDef implMSSqlCreateTableAssignReqNumberVar
			StringDef implMSSqlCreateTableAssignReqStringVar
			TokenDef implMSSqlCreateTableAssignReqTokenVar
			NmTokenDef implMSSqlCreateTableAssignReqNmTokenVar
			NmTokensDef implMSSqlCreateTableAssignReqNmTokensVar
			TextDef implMSSqlCreateTableAssignReqTextVar
			DateDef implMSSqlCreateTableAssignReqDateVar
			TimeDef implMSSqlCreateTableAssignReqTimeVar
			TimestampDef implMSSqlCreateTableAssignReqTimestampVar
			TZDateDef implMSSqlCreateTableAssignReqTZDateVar
			TZTimeDef implMSSqlCreateTableAssignReqTZTimeVar
			TZTimestampDef implMSSqlCreateTableAssignReqTZTimestampVar
			UuidDef implMSSqlCreateTableAssignReqUuidVar
			UuidGen implMSSqlCreateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqBlobVar">
				stmtAuditCreatedByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqBoolVar">
				stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqEnumVar">
				stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqInt16Var">
				stmtAuditCreatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqInt32Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqInt64Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqUInt16Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqUInt32Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqUInt64Var">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqFloatVar">
				stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqDoubleVar">
				stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqNumberVar">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqStringVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqNmTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqNmTokensVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqTextVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqTZDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqTZTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqTZTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignReqUuidVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereIndexCol">
					+				"$lower reference Index reference Table reference BaseClass ClassCode$.$lower DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereAndIndexCol">
					+			"AND $lower reference Index reference Table reference BaseClass ClassCode$.$lower DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedData"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedDataInh default implCreateTableOldStyleAuditCreatedDataBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedData$$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataBase"
		>$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgNonPKeyColumn"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgColumnName"> + ", "
					+		"$lower DbColumnName$"</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgFirstColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgFirstColumnName">
					+		"$lower DbColumnName$"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedNoCC">
			String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + "..$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, sysdatetime()"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName )$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 0"
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditCreatedByPKey == null ) {
				stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
			}
			argIdx = 1;
			stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlCreateTableAssignVar )$
			int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableClassCodeKey"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implMSSqlCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implMSSqlCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implMSSqlCreateTableInsertColumnComma">
				+		"$lower DbColumnName$, "</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implMSSqlCreateTableInsertColumn">
				+		"$lower DbColumnName$"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableInsertClassCode">
				+		"classcode, "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesClassCode">
				+		"?, "</GenRule>

	<GenRule GenDef="Object" Name="implCreateTableOldStyleAuditValIndexColName"
		> + ", "$implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditValFirstIndexColName">
					+		"$lower reference Table ClassCode$.$lower DbColumnName$" </GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditValFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindClassCode">
			stmtCreateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindConstClassCode">
			stmtCreateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesVarComma"
		>$implMSSqlCreateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlCreateTableValuesGenericVar
			BoolDef implMSSqlCreateTableValuesGenericVar
			EnumDef implMSSqlCreateTableValuesGenericVar
			Int16Def implMSSqlCreateTableValuesGenericVar
			Int32Def implMSSqlCreateTableValuesGenericVar
			Int64Def implMSSqlCreateTableValuesGenericVar
			UInt16Def implMSSqlCreateTableValuesGenericVar
			UInt32Def implMSSqlCreateTableValuesGenericVar
			UInt64Def implMSSqlCreateTableValuesGenericVar
			Id16Gen implMSSqlCreateTableValuesGenericVar
			Id32Gen implMSSqlCreateTableValuesGenericVar
			Id64Gen implMSSqlCreateTableValuesGenericVar
			FloatDef implMSSqlCreateTableValuesGenericVar
			DoubleDef implMSSqlCreateTableValuesGenericVar
			NumberDef implMSSqlCreateTableValuesGenericVar
			StringDef implMSSqlCreateTableValuesGenericVar
			TokenDef implMSSqlCreateTableValuesGenericVar
			NmTokenDef implMSSqlCreateTableValuesGenericVar
			NmTokensDef implMSSqlCreateTableValuesGenericVar
			TextDef implMSSqlCreateTableValuesGenericVar
			DateDef implMSSqlCreateTableValuesDateVar
			TimeDef implMSSqlCreateTableValuesTimeVar
			TimestampDef implMSSqlCreateTableValuesTimestampVar
			TZDateDef implMSSqlCreateTableValuesTZDateVar
			TZTimeDef implMSSqlCreateTableValuesTZTimeVar
			TZTimestampDef implMSSqlCreateTableValuesTZTimestampVar
			UuidDef implMSSqlCreateTableValuesGenericVar
			UuidGen implMSSqlCreateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesGenericVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesTextVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesFloatVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesDateVar">
				+		"convert( date, ?, 112 )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesTimeVar">
				+		"convert( time, ?, 108 )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesTimestampVar">
				+		"convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesTZDateVar">
				+		"convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesTZTimeVar">
				+		"convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableValuesTZTimestampVar">
				+		"convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindVarComma"
		>$implMSSqlCreateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindVar"
		>$switch IsNullable yes implMSSqlCreateTableBindOptVar
			default implMSSqlCreateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlCreateTableBindOptBlobVar
			BoolDef implMSSqlCreateTableBindOptBoolVar
			EnumDef implMSSqlCreateTableBindOptEnumVar
			Int16Def implMSSqlCreateTableBindOptInt16Var
			Int32Def implMSSqlCreateTableBindOptInt32Var
			Int64Def implMSSqlCreateTableBindOptInt64Var
			UInt16Def implMSSqlCreateTableBindOptUInt16Var
			UInt32Def implMSSqlCreateTableBindOptUInt32Var
			UInt64Def implMSSqlCreateTableBindOptUInt64Var
			Id16Gen implMSSqlCreateTableBindOptInt16Var
			Id32Gen implMSSqlCreateTableBindOptInt32Var
			Id64Gen implMSSqlCreateTableBindOptInt64Var
			FloatDef implMSSqlCreateTableBindOptFloatVar
			DoubleDef implMSSqlCreateTableBindOptDoubleVar
			NumberDef implMSSqlCreateTableBindOptNumberVar
			StringDef implMSSqlCreateTableBindOptStringVar
			TokenDef implMSSqlCreateTableBindOptTokenVar
			NmTokenDef implMSSqlCreateTableBindOptNmTokenVar
			NmTokensDef implMSSqlCreateTableBindOptNmTokensVar
			TextDef implMSSqlCreateTableBindOptTextVar
			DateDef implMSSqlCreateTableBindOptDateVar
			TimeDef implMSSqlCreateTableBindOptTimeVar
			TimestampDef implMSSqlCreateTableBindOptTimestampVar
			TZDateDef implMSSqlCreateTableBindOptTZDateVar
			TZTimeDef implMSSqlCreateTableBindOptTZTimeVar
			TZTimestampDef implMSSqlCreateTableBindOptTZTimestampVar
			UuidDef implMSSqlCreateTableBindOptUuidVar
			UuidGen implMSSqlCreateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlCreateTableBindReqBlobVar
			BoolDef implMSSqlCreateTableBindReqBoolVar
			EnumDef implMSSqlCreateTableBindReqEnumVar
			Int16Def implMSSqlCreateTableBindReqInt16Var
			Int32Def implMSSqlCreateTableBindReqInt32Var
			Int64Def implMSSqlCreateTableBindReqInt64Var
			UInt16Def implMSSqlCreateTableBindReqUInt16Var
			UInt32Def implMSSqlCreateTableBindReqUInt32Var
			UInt64Def implMSSqlCreateTableBindReqUInt64Var
			Id16Gen implMSSqlCreateTableBindReqInt16Var
			Id32Gen implMSSqlCreateTableBindReqInt32Var
			Id64Gen implMSSqlCreateTableBindReqInt64Var
			FloatDef implMSSqlCreateTableBindReqFloatVar
			DoubleDef implMSSqlCreateTableBindReqDoubleVar
			NumberDef implMSSqlCreateTableBindReqNumberVar
			StringDef implMSSqlCreateTableBindReqStringVar
			TokenDef implMSSqlCreateTableBindReqTokenVar
			NmTokenDef implMSSqlCreateTableBindReqNmTokenVar
			NmTokensDef implMSSqlCreateTableBindReqNmTokensVar
			TextDef implMSSqlCreateTableBindReqTextVar
			DateDef implMSSqlCreateTableBindReqDateVar
			TimeDef implMSSqlCreateTableBindReqTimeVar
			TimestampDef implMSSqlCreateTableBindReqTimestampVar
			TZDateDef implMSSqlCreateTableBindReqTZDateVar
			TZTimeDef implMSSqlCreateTableBindReqTZTimeVar
			TZTimestampDef implMSSqlCreateTableBindReqTZTimestampVar
			UuidDef implMSSqlCreateTableBindReqUuidVar
			UuidGen implMSSqlCreateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqBlobVar">
			stmtCreateByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqBoolVar">
			if( $Name$ ) {
				stmtCreateByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtCreateByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtCreateByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtCreateByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqEnumVar">
			stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqInt16Var">
			stmtCreateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqInt32Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqInt64Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqUInt16Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqUInt32Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqUInt64Var">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqFloatVar">
			stmtCreateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqDoubleVar">
			stmtCreateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqNumberVar">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqStringVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqNmTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqNmTokensVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqTextVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqTZDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqTZTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqTZTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindReqUuidVar">
			stmtCreateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlCreateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Table" Name="implMSSqlCreateTableInitRevision"
>			int Revision = 1;
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Value" Name="implMSSqlCreateTableCopyData"
>$switch ColumnInPrimaryIndex yes empty default implMSSqlCreateTableCopyColumn$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Value" Name="implMSSqlCreateTableCopyColumn"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCreateTableCopyClassCode"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implMSSqlCreateTableRetBuffAttrComma"
>$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$ = $Name$,
		</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implMSSqlCreateTableKeys"
		>$switch GenerateId yes implMSSqlCreateTableKeysGenId default implMSSqlCreateTableKeysCopyId$</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implMSSqlCreateTableKeysGenId"
		>$reference Column implMSSqlCreateTableKeysGenId$</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implMSSqlCreateTableKeysCopyId"
		>$reference Column implMSSqlCreateTableKeysCopyId$</GenRule>

	<GenRule GenDef="TableCol" Name="implMSSqlCreateTableKeysGenId"
		>$switch HasDispenser no implMSSqlCreateTableKeysGenSchemaId default implMSSqlCreateTableKeysGenTableId$</GenRule>

	<GenRule GenDef="TableCol" Name="implMSSqlCreateTableKeysGenSchemaId"
>			$implJavaAtomType$ $Name$ = schema.next$reference DataType Name$();
</GenRule>

	<GenRule GenDef="TableCol" Name="implMSSqlCreateTableKeysGenTableId"
>			$implJavaAtomType$ $Name$ = ((I$reference DataType reference Dispenser SchemaName$$reference DataType reference Dispenser TableName$Table)schema.getTable$reference DataType reference Dispenser TableName$()).next$reference DataType Name$( Authorization$popto Table iterate OnlyOwnerRelations( first implMSSqlCreateTableKeysGenTableIdPassArgs each empty )$ );
</GenRule>

	<GenRule GenDef="Relation" Name="implMSSqlCreateTableKeysGenTableIdPassArgs"
		>$reference FromIndex iterate Columns( each implMSSqlCreateTableKeysGenTableIdCommaArg )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlCreateTableKeysGenTableIdCommaArg">,
				Buff.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Atom" Name="implMSSqlCreateTableKeys"
		></GenRule>

	<GenRule GenDef="TableCol" Name="implMSSqlCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implMSSqlCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlClassCodeSelectFragDbNameComma"
>				+		"$lower reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSelectDistinctClassCodeFrag"
>				+		"DISTINCT $lower reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlClassCodeJoinBaseTable"
>				+	"INNER JOIN $lower reference BaseClass DbSchemaName$.$reference BaseClass DbTableName$ $lower reference BaseClass ClassCode$ ON "
$reference PrimaryKeyIndex iterate Columns( first implMSSqlClassCodeJoinBaseTableColumn each implMSSqlClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlClassCodeJoinBaseTableColumn">
				+		"$lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>
	<GenRule GenDef="IndexCol" Name="implMSSqlClassCodeAndJoinBaseTableColumn">
				+		"AND $lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLocalizeClassCodeKey"
>			String ClassCode = PKey.getClassCode();
</GenRule>

	<GenRule GenDef="TableCol" Name="implMSSqlTableColumnFetchColumn"
		>$switch IsNullable yes implMSSqlTableColumnFetchOptAttr default implMSSqlTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implMSSqlTableColumnFetchColumn"
		>$switch IsNullable yes implMSSqlTableColumnFetchOptAttr default implMSSqlTableColumnFetchReqAttr$</GenRule>

	<GenRule GenDef="TableCol" Name="implMSSqlTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlTableColumnFetchBlobOptAttr
			UInt64Def implMSSqlTableColumnFetchUInt64OptAttr
			NumberDef implMSSqlTableColumnFetchNumberOptAttr
			DateDef implMSSqlTableColumnFetchDateOptAttr
			TimeDef implMSSqlTableColumnFetchTimeOptAttr
			TimestampDef implMSSqlTableColumnFetchTimestampOptAttr
			TZDateDef implMSSqlTableColumnFetchTZDateOptAttr
			TZTimeDef implMSSqlTableColumnFetchTZTimeOptAttr
			TZTimestampDef implMSSqlTableColumnFetchTZTimestampOptAttr
			default implMSSqlTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implMSSqlTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass BlobDef implMSSqlTableColumnFetchBlobOptAttr default implMSSqlTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchBlobOptAttr"
>				{
					byte colVal[] = resultSet.getBytes( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchUInt64OptAttr"
>				{
					String strval = resultSet.getString( idxcol );
					if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						BigDecimal bival = new BigDecimal( strval );
						buff.setOptional$Name$( bival );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchNumberOptAttr"
>				{
					BigDecimal value = resultSet.getBigDecimal( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( value );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MSSqlSchema.convertDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MSSqlSchema.convertTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MSSqlSchema.convertTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchTZDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MSSqlSchema.convertTZDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchTZTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MSSqlSchema.convertTZTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchTZTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$MSSqlSchema.convertTZTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implMSSqlAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implMSSqlTableColumnFetchGenOptAttr"
		>$implMSSqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implMSSqlTableColumnFetchGenOptAttr"
		>$implMSSqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implMSSqlTableColumnFetchGenOptAttr"
		>$implMSSqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implMSSqlTableColumnFetchGenOptAttr"
		>$implMSSqlTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implMSSqlTableColumnFetchGenOptAttr"
		>$implMSSqlTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchOptStringAttr"
>				{
					$implJavaReqAtomType$ colVal = $implMSSqlAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implMSSqlTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implMSSqlAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchReqAttr"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlTableColumnFetchBlobReqAttr
			UInt64Def implMSSqlTableColumnFetchUInt64ReqAttr
			NumberDef implMSSqlTableColumnFetchNumberReqAttr
			default implMSSqlTableColumnFetchGenReqAttr$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchBlobReqAttr"
>				{
					byte colVal[] = resultSet.getBytes( idxcol );
					buff.setRequired$Name$( colVal );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchUInt64ReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnFetchNumberReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implMSSqlTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implMSSqlAtomFetchReqColumn$ );
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implMSSqlTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implMSSqlAtomFetchReqColumn$ );
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implMSSqlAtomFetchReqColumn"
		>$reference DataType implMSSqlAtomFetchReqColumn$</GenRule>

	<GenRule GenDef="BlobDef" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getBytes( idxcol ) )</GenRule>

	<GenRule GenDef="BoolDef" Name="implMSSqlAtomFetchReqColumn"
		>( "Y".equals( resultSet.getString( idxcol ) ) ? true : false )</GenRule>

	<GenRule GenDef="EnumDef" Name="implMSSqlAtomFetchReqColumn"
		>$EffSchemaName$Schema.ordinalTo$Name$( resultSet.getShort( idxcol ) )</GenRule>

	<GenRule GenDef="Int16Def" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getShort( idxcol )</GenRule>

	<GenRule GenDef="Int32Def" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="Int64Def" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt16Def" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="UInt32Def" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt64Def" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="FloatDef" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getFloat( idxcol )</GenRule>

	<GenRule GenDef="DoubleDef" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getDouble( idxcol )</GenRule>

	<GenRule GenDef="NumberDef" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="StringDef" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TokenDef" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokenDef" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokensDef" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TextDef" Name="implMSSqlAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="DateDef" Name="implMSSqlAtomFetchReqColumn"
		>$SchemaName$MSSqlSchema.convertDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimeDef" Name="implMSSqlAtomFetchReqColumn"
		>$SchemaName$MSSqlSchema.convertTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimestampDef" Name="implMSSqlAtomFetchReqColumn"
		>$SchemaName$MSSqlSchema.convertTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZDateDef" Name="implMSSqlAtomFetchReqColumn"
		>$SchemaName$MSSqlSchema.convertTZDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimeDef" Name="implMSSqlAtomFetchReqColumn"
		>$SchemaName$MSSqlSchema.convertTZTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimestampDef" Name="implMSSqlAtomFetchReqColumn"
		>$SchemaName$MSSqlSchema.convertTZTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidDef" Name="implMSSqlAtomFetchReqColumn"
		>$SchemaName$MSSqlSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidGen" Name="implMSSqlAtomFetchReqColumn"
		>$SchemaName$MSSqlSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlLocalizeTableKeys"
		>$reference Column implMSSqlCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="TableCol" Name="implMSSqlLocalizeTableKeys"
		>$implMSSqlCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="Atom" Name="implMSSqlLocalizeTableKeys"
		>$implMSSqlCreateTableKeysLocalizeId$</GenRule>

	<GenRule GenDef="TableCol" Name="implMSSqlCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implMSSqlCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlClassCodeSelectFragDbNameComma"
>				+		"$lower popto Table reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlSelectDistinctClassCodeFrag"
>				+		"DISTINCT $lower popto Table reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlInhTableColumnSelectFrags"
		>$switch HasSuperClassRelation yes implMSSqlChainTableColumnSelectFrags default empty$$iterate Columns( each implMSSqlTableDataColumnSelectFrag )$</GenRule>

	<GenRule GenDef="Value" Name="implMSSqlTableDataColumnSelectFrag"
		>$switch ColumnInPrimaryIndex yes empty default implMSSqlTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlChainTableColumnSelectFrags"
		>$reference SuperClassRelation reference ToTable implMSSqlInhTableColumnSelectFrags$</GenRule>


	<GenRule GenDef="Object" Name="implBuffTableColumnFetchClassCode"
>				if( ! ( buff.getClassCode().equals( resultSet.getString( idxcol ) ) ) ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected ClassCode \"" + buff.getClassCode() +	"\", not \"" + resultSet.getString( idxcol ) + "\"" );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Value" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="IndexCol" Name="implBuffTableColumnFetchColumn"
		>$reference Column implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchBlobOptAttr"
>		{
			byte colVal[] = resultSet.getBytes( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchUInt64OptAttr"
>		{
			String strval = resultSet.getString( idxcol );
			if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
				buff.setOptional$Name$( null );
			}
			else {
				BigDecimal bival = new BigDecimal( strval );
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchNumberOptAttr"
>		{
			BigDecimal bival = resultSet.getBigDecimal( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implMSSqlAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchOptStringAttr"
>		{
			$implJavaReqAtomType$ colVal = $implMSSqlAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implMSSqlAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implMSSqlAtomFetchReqColumn$ );
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implMSSqlAtomFetchReqColumn$ );
		idxcol++;
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildFromHierarchy"
		>$switch HasSuperClassRelation yes implReadTableBuffBuildInhFromHierarchy default implReadTableBuffBuildBaseFromHierarchy$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildInhFromHierarchy"
>$reference SuperClassRelation reference ToTable implReadTableBuffBuildFromHierarchy$
				+	"INNER JOIN " + schema.getLowerDbSchemaName() + "..$DbTableName$ $lower ClassCode$ ON "$reference PrimaryKeyIndex iterate Columns( first implMSSqlClassCodeJoinBaseTableColumn each implMSSqlClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildBaseFromHierarchy">" + schema.getLowerDbSchemaName() + "..$DbTableName$ AS $lower ClassCode$ "</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildFetchColumns"
		>$switch HasSuperClassRelation yes implBuffTableBuildInhFetchColumns default implBuffTableBuildBaseFetchColumns$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildInhFetchColumns"
		>$reference SuperClassRelation reference ToTable implBuffTableBuildFetchColumns$$iterate Columns( each implBuffTableColumnFetchDataColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildBaseFetchColumns"
		>$iterate Columns( each implBuffTableColumnFetchColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableColumnFetchAuditColumns">
		{$implBuffTableColumnFetchAuditCreateColumns$
			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedByUserId( null );
			}
			else {
				buff.setUpdatedByUserId( UUID.fromString( colString ) );
			}
			idxcol ++;

			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedAt( null );
			}
			else {
				buff.setUpdatedAt( $SchemaName$MSSqlSchema.convertTimestampString( colString ) );
			}
			idxcol++;
		}
</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableColumnFetchAuditCreateColumns">
			String colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedByUserId( null );
			}
			else {
				buff.setCreatedByUserId( UUID.fromString( colString ) );
			}
			idxcol ++;

			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedAt( null );
			}
			else {
				buff.setCreatedAt( $SchemaName$MSSqlSchema.convertTimestampString( colString ) );
			}
			idxcol++;</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableDistinctClassCode">
	protected static String S_sqlSelect$TableName$DistinctClassCode = null;

	public String getSqlSelect$TableName$DistinctClassCode() {
		if( S_sqlSelect$TableName$DistinctClassCode == null ) {
			S_sqlSelect$TableName$DistinctClassCode =
					"SELECT "
$implMSSqlSelectDistinctClassCodeFrag$<!--
-->				+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$DistinctClassCode );
	}
</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableBuff">
	protected static String S_sqlSelect$TableName$Buff = null;

	public String getSqlSelect$TableName$Buff() {
		if( S_sqlSelect$TableName$Buff == null ) {
			S_sqlSelect$TableName$Buff =
					"SELECT "
$switch HasClassCode yes implMSSqlClassCodeSelectFragDbNameComma default empty$$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlTableColumnSelectFragDbNameComma )$$implMSSqlInhTableColumnSelectFrags$				+		"$lower reference BaseClass ClassCode$.revision "
				+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$Buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetWalkClassCode">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetMapViaClassCode">
		String classCode = resultSet.getString( idxcol );
		idxcol++;
		$DefSchemaName$$TableName$Buff buff;
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Unrecognized class code \"" + classCode + "\"" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetDirectBuff">
		$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetToBuff">
	protected $DefSchemaName$$TableName$Buff unpack$TableName$ResultSetToBuff( ResultSet resultSet )
	throws SQLException
	{
		final String S_ProcName = "unpack$TableName$ResultSetToBuff";
		int idxcol = 1;$switch HasClassCode yes implUnpackResultSetMapViaClassCode default implUnpackResultSetDirectBuff$$switch HasAuditColumns yes implBuffTableColumnFetchAuditColumns default empty$$implBuffTableBuildFetchColumns$<!--
-->		buff.setRequiredRevision( resultSet.getInt( idxcol ) );
		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeReadBuff"
>		buff = readBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeLockBuff"
>		buff = lockBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedAssembleSubClasses default implReadTableDerivedInvokeReadBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {$implReadTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = readBuff( Authorization, PKey );
		}$implReadTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClassesTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			String sql = "{ call $sp_read_dbtablename_cc$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + " ) }";
			if( stmtReadDerivedClassCode == null ) {
				stmtReadDerivedClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlReadTableDerivedClassCodeAssignVar )$
			resultSet = stmtReadDerivedClassCode.executeQuery();
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClassesExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtReadDerivedClassCode.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtReadDerivedClassCode.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtReadDerivedClassCode.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implMSSqlReadTableDerivedClassCodeAssignOptVar
			default implMSSqlReadTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlReadTableDerivedClassCodeAssignOptBlobVar
			BoolDef implMSSqlReadTableDerivedClassCodeAssignOptBoolVar
			EnumDef implMSSqlReadTableDerivedClassCodeAssignOptEnumVar
			Int16Def implMSSqlReadTableDerivedClassCodeAssignOptInt16Var
			Int32Def implMSSqlReadTableDerivedClassCodeAssignOptInt32Var
			Int64Def implMSSqlReadTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implMSSqlReadTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implMSSqlReadTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implMSSqlReadTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implMSSqlReadTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implMSSqlReadTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implMSSqlReadTableDerivedClassCodeAssignOptInt64Var
			FloatDef implMSSqlReadTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implMSSqlReadTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implMSSqlReadTableDerivedClassCodeAssignOptNumberVar
			StringDef implMSSqlReadTableDerivedClassCodeAssignOptStringVar
			TokenDef implMSSqlReadTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implMSSqlReadTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implMSSqlReadTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implMSSqlReadTableDerivedClassCodeAssignOptTextVar
			DateDef implMSSqlReadTableDerivedClassCodeAssignOptDateVar
			TimeDef implMSSqlReadTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implMSSqlReadTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implMSSqlReadTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implMSSqlReadTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implMSSqlReadTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implMSSqlReadTableDerivedClassCodeAssignOptUuidVar
			UuidGen implMSSqlReadTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlReadTableDerivedClassCodeAssignReqBlobVar
			BoolDef implMSSqlReadTableDerivedClassCodeAssignReqBoolVar
			EnumDef implMSSqlReadTableDerivedClassCodeAssignReqEnumVar
			Int16Def implMSSqlReadTableDerivedClassCodeAssignReqInt16Var
			Int32Def implMSSqlReadTableDerivedClassCodeAssignReqInt32Var
			Int64Def implMSSqlReadTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implMSSqlReadTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implMSSqlReadTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implMSSqlReadTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implMSSqlReadTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implMSSqlReadTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implMSSqlReadTableDerivedClassCodeAssignReqInt64Var
			FloatDef implMSSqlReadTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implMSSqlReadTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implMSSqlReadTableDerivedClassCodeAssignReqNumberVar
			StringDef implMSSqlReadTableDerivedClassCodeAssignReqStringVar
			TokenDef implMSSqlReadTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implMSSqlReadTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implMSSqlReadTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implMSSqlReadTableDerivedClassCodeAssignReqTextVar
			DateDef implMSSqlReadTableDerivedClassCodeAssignReqDateVar
			TimeDef implMSSqlReadTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implMSSqlReadTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implMSSqlReadTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implMSSqlReadTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implMSSqlReadTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implMSSqlReadTableDerivedClassCodeAssignReqUuidVar
			UuidGen implMSSqlReadTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqBlobVar">
			stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqBoolVar">
			if( $Name$ ) {
				stmtReadDerivedClassCode.setString( argIdx++, "Y" );
			}
			else {
				stmtReadDerivedClassCode.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadDerivedClassCode.setString( argIdx++, "Y" );
				}
				else {
					stmtReadDerivedClassCode.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqEnumVar">
			stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqInt16Var">
			stmtReadDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqInt32Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqInt64Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqUInt16Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqUInt32Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqUInt64Var">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqFloatVar">
			stmtReadDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqDoubleVar">
			stmtReadDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqNumberVar">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqStringVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqNmTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqNmTokensVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqTextVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqTZDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqTZTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignReqUuidVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$reference BaseClass reference PrimaryKeyIndex Suffix$( Authorization$poptop Table reference PrimaryKeyIndex iterate Columns( each implReadTableDerivedInvokeSubClassPassPKeyArg )$ );
		}$implReadTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedInvokeSubClassPassPKeyArg">,
				PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$reference Column Name$()</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByPKey">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readDerived";$implCheckOpenTransaction$
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implReadTableDerivedInvokeReadBuff default implReadTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedByPKey">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff lockDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockDerived";$implCheckOpenTransaction$
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implLockTableDerivedInvokeLockBuff default implLockTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implLockTableDerivedAssembleSubClasses default implLockTableDerivedInvokeLockBuff$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {$implLockTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClassesTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			String sql = "{ call $sp_read_dbtablename_cc$( ?, ?, ?, ?, ?"$reference PrimaryKeyIndex iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + " ) }";
			if( stmtLockDerivedClassCode == null ) {
				stmtLockDerivedClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference PrimaryKeyIndex iterate Columns( each implMSSqlLockTableDerivedClassCodeAssignVar )$
			resultSet = stmtLockDerivedClassCode.executeQuery();
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClassesExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtLockDerivedClassCode.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtLockDerivedClassCode.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtLockDerivedClassCode.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implMSSqlLockTableDerivedClassCodeAssignOptVar
			default implMSSqlLockTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlLockTableDerivedClassCodeAssignOptBlobVar
			BoolDef implMSSqlLockTableDerivedClassCodeAssignOptBoolVar
			EnumDef implMSSqlLockTableDerivedClassCodeAssignOptEnumVar
			Int16Def implMSSqlLockTableDerivedClassCodeAssignOptInt16Var
			Int32Def implMSSqlLockTableDerivedClassCodeAssignOptInt32Var
			Int64Def implMSSqlLockTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implMSSqlLockTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implMSSqlLockTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implMSSqlLockTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implMSSqlLockTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implMSSqlLockTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implMSSqlLockTableDerivedClassCodeAssignOptInt64Var
			FloatDef implMSSqlLockTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implMSSqlLockTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implMSSqlLockTableDerivedClassCodeAssignOptNumberVar
			StringDef implMSSqlLockTableDerivedClassCodeAssignOptStringVar
			TokenDef implMSSqlLockTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implMSSqlLockTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implMSSqlLockTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implMSSqlLockTableDerivedClassCodeAssignOptTextVar
			DateDef implMSSqlLockTableDerivedClassCodeAssignOptDateVar
			TimeDef implMSSqlLockTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implMSSqlLockTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implMSSqlLockTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implMSSqlLockTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implMSSqlLockTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implMSSqlLockTableDerivedClassCodeAssignOptUuidVar
			UuidGen implMSSqlLockTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlLockTableDerivedClassCodeAssignReqBlobVar
			BoolDef implMSSqlLockTableDerivedClassCodeAssignReqBoolVar
			EnumDef implMSSqlLockTableDerivedClassCodeAssignReqEnumVar
			Int16Def implMSSqlLockTableDerivedClassCodeAssignReqInt16Var
			Int32Def implMSSqlLockTableDerivedClassCodeAssignReqInt32Var
			Int64Def implMSSqlLockTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implMSSqlLockTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implMSSqlLockTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implMSSqlLockTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implMSSqlLockTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implMSSqlLockTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implMSSqlLockTableDerivedClassCodeAssignReqInt64Var
			FloatDef implMSSqlLockTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implMSSqlLockTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implMSSqlLockTableDerivedClassCodeAssignReqNumberVar
			StringDef implMSSqlLockTableDerivedClassCodeAssignReqStringVar
			TokenDef implMSSqlLockTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implMSSqlLockTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implMSSqlLockTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implMSSqlLockTableDerivedClassCodeAssignReqTextVar
			DateDef implMSSqlLockTableDerivedClassCodeAssignReqDateVar
			TimeDef implMSSqlLockTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implMSSqlLockTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implMSSqlLockTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implMSSqlLockTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implMSSqlLockTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implMSSqlLockTableDerivedClassCodeAssignReqUuidVar
			UuidGen implMSSqlLockTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqBlobVar">
			stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqBoolVar">
			if( $Name$ ) {
				stmtLockDerivedClassCode.setString( argIdx++, "Y" );
			}
			else {
				stmtLockDerivedClassCode.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtLockDerivedClassCode.setString( argIdx++, "Y" );
				}
				else {
					stmtLockDerivedClassCode.setString( argIdx++, "N" );
				}
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqEnumVar">
			stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqInt16Var">
			stmtLockDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqInt32Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqInt64Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqUInt16Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqUInt32Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqUInt64Var">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqFloatVar">
			stmtLockDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqDoubleVar">
			stmtLockDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqNumberVar">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqStringVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqNmTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqNmTokensVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqTextVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqTZDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqTZTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignReqUuidVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implLockTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeReadAllBuff"
>		buffArray = readAllBuff( Authorization );
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadAllTableDerivedAssembleSubClasses default implReadAllTableDerivedInvokeReadAllBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClasses"
>		String classCode;
		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		ResultSet resultSet = null;
		try {$implReadAllTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		List&lt;$DefSchemaName$$TableName$Buff&gt; resultList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
		for( int classCodeIdx = 0; classCodeIdx &lt; classCodeList.size(); classCodeIdx ++ ) {
			$DefSchemaName$$TableName$Buff[] subList;
			classCode = classCodeList.get( classCodeIdx );
			if( classCode.equals( "$ClassCode$" ) ) {
				subList = readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
			for( int idxSubList = 0; idxSubList &lt; subList.length; idxSubList ++ ) {
				resultList.add( subList[ idxSubList ] );
			}
		}
		int idx = 0;
		buffArray = new $DefSchemaName$$TableName$Buff[ resultList.size() ];
		Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			buffArray[idx++] = iter.next();
		}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClassesTryBody">
			Connection cnx = schema.getCnx();
			String sql = "{ call $sp_read_dbtablename_cc_all$( ?, ?, ?, ?, ? ) }";
			if( stmtReadAllClassCode == null ) {
				stmtReadAllClassCode = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmtReadAllClassCode.executeQuery();
			if( resultSet != null ) {
				while( resultSet.next() ) {
					classCode = resultSet.getString( 1 );
					classCodeList.add( classCode );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClassesExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtReadAllClassCode.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtReadAllClassCode.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtReadAllClassCode.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadAllTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				subList = schema.getTable$TableName$().readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerived">
	public $DefSchemaName$$TableName$Buff[] readAllDerived( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllDerived";
		$DefSchemaName$$TableName$Buff[] buffArray;$implCheckOpenTransaction$
$switch HasClassCode no implReadAllTableDerivedInvokeReadAllBuff default implReadAllTableDerivedCheckForSubClasses$<!--
-->		return( buffArray );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByIndexes"
		>$switch HasSuperClassRelation yes implReadTableDerivedByInhIndexes default implReadTableDerivedByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableDerivedByIndexes$$iterate Index( each implReadTableDerivedByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByBaseIndexes"
		>$iterate Index( each implReadTableDerivedByIndex )$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableDerivedByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByIndex"
		>$switch IsUnique
			yes implReadTableDerivedByUniqueIndex
			default implReadTableDerivedByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByUniqueIndexAssembleSubClasses default implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex"
>		buff = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableDerivedByUniqueIndexAssembleReqSubClasses$
			if( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
		if( classCode.equals( "$poptop Table ClassCode$" ) ) {
			buff = readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexTopWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleOptSubClasses">
			String sql =
					getSqlSelect$poptop Table TableName$DistinctClassCode()
				+	"WHERE "
$iterate Columns( first implMSSqlIndexColumnWhereFragBindVar each implMSSqlIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			stmt.execute( sql );
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmt.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmt.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmt.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleReqSubClasses">
			String sql = "{ call $sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + " ) }";
			if( stmtReadClassCodeBy$Suffix$ == null ) {
				stmtReadClassCodeBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMSSqlReadDerivedClassCodeBySuffixBindVar )$
			resultSet = stmtReadClassCodeBy$Suffix$.executeQuery();
			if( resultSet == null ) {
				return( null );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleReqSubClassesResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtReadClassCodeBy$Suffix$.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtReadClassCodeBy$Suffix$.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtReadClassCodeBy$Suffix$.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindVar"
		>$switch IsNullable yes implMSSqlReadDerivedClassCodeBySuffixBindOptVar
			default implMSSqlReadDerivedClassCodeBySuffixBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlReadDerivedClassCodeBySuffixBindOptBlobVar
			BoolDef implMSSqlReadDerivedClassCodeBySuffixBindOptBoolVar
			EnumDef implMSSqlReadDerivedClassCodeBySuffixBindOptEnumVar
			Int16Def implMSSqlReadDerivedClassCodeBySuffixBindOptInt16Var
			Int32Def implMSSqlReadDerivedClassCodeBySuffixBindOptInt32Var
			Int64Def implMSSqlReadDerivedClassCodeBySuffixBindOptInt64Var
			UInt16Def implMSSqlReadDerivedClassCodeBySuffixBindOptUInt16Var
			UInt32Def implMSSqlReadDerivedClassCodeBySuffixBindOptUInt32Var
			UInt64Def implMSSqlReadDerivedClassCodeBySuffixBindOptUInt64Var
			Id16Gen implMSSqlReadDerivedClassCodeBySuffixBindOptInt16Var
			Id32Gen implMSSqlReadDerivedClassCodeBySuffixBindOptInt32Var
			Id64Gen implMSSqlReadDerivedClassCodeBySuffixBindOptInt64Var
			FloatDef implMSSqlReadDerivedClassCodeBySuffixBindOptFloatVar
			DoubleDef implMSSqlReadDerivedClassCodeBySuffixBindOptDoubleVar
			NumberDef implMSSqlReadDerivedClassCodeBySuffixBindOptNumberVar
			StringDef implMSSqlReadDerivedClassCodeBySuffixBindOptStringVar
			TokenDef implMSSqlReadDerivedClassCodeBySuffixBindOptTokenVar
			NmTokenDef implMSSqlReadDerivedClassCodeBySuffixBindOptNmTokenVar
			NmTokensDef implMSSqlReadDerivedClassCodeBySuffixBindOptNmTokensVar
			TextDef implMSSqlReadDerivedClassCodeBySuffixBindOptTextVar
			DateDef implMSSqlReadDerivedClassCodeBySuffixBindOptDateVar
			TimeDef implMSSqlReadDerivedClassCodeBySuffixBindOptTimeVar
			TimestampDef implMSSqlReadDerivedClassCodeBySuffixBindOptTimestampVar
			TZDateDef implMSSqlReadDerivedClassCodeBySuffixBindOptTZDateVar
			TZTimeDef implMSSqlReadDerivedClassCodeBySuffixBindOptTZTimeVar
			TZTimestampDef implMSSqlReadDerivedClassCodeBySuffixBindOptTZTimestampVar
			UuidDef implMSSqlReadDerivedClassCodeBySuffixBindOptUuidVar
			UuidGen implMSSqlReadDerivedClassCodeBySuffixBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlReadDerivedClassCodeBySuffixBindReqBlobVar
			BoolDef implMSSqlReadDerivedClassCodeBySuffixBindReqBoolVar
			EnumDef implMSSqlReadDerivedClassCodeBySuffixBindReqEnumVar
			Int16Def implMSSqlReadDerivedClassCodeBySuffixBindReqInt16Var
			Int32Def implMSSqlReadDerivedClassCodeBySuffixBindReqInt32Var
			Int64Def implMSSqlReadDerivedClassCodeBySuffixBindReqInt64Var
			UInt16Def implMSSqlReadDerivedClassCodeBySuffixBindReqUInt16Var
			UInt32Def implMSSqlReadDerivedClassCodeBySuffixBindReqUInt32Var
			UInt64Def implMSSqlReadDerivedClassCodeBySuffixBindReqUInt64Var
			Id16Gen implMSSqlReadDerivedClassCodeBySuffixBindReqInt16Var
			Id32Gen implMSSqlReadDerivedClassCodeBySuffixBindReqInt32Var
			Id64Gen implMSSqlReadDerivedClassCodeBySuffixBindReqInt64Var
			FloatDef implMSSqlReadDerivedClassCodeBySuffixBindReqFloatVar
			DoubleDef implMSSqlReadDerivedClassCodeBySuffixBindReqDoubleVar
			NumberDef implMSSqlReadDerivedClassCodeBySuffixBindReqNumberVar
			StringDef implMSSqlReadDerivedClassCodeBySuffixBindReqStringVar
			TokenDef implMSSqlReadDerivedClassCodeBySuffixBindReqTokenVar
			NmTokenDef implMSSqlReadDerivedClassCodeBySuffixBindReqNmTokenVar
			NmTokensDef implMSSqlReadDerivedClassCodeBySuffixBindReqNmTokensVar
			TextDef implMSSqlReadDerivedClassCodeBySuffixBindReqTextVar
			DateDef implMSSqlReadDerivedClassCodeBySuffixBindReqDateVar
			TimeDef implMSSqlReadDerivedClassCodeBySuffixBindReqTimeVar
			TimestampDef implMSSqlReadDerivedClassCodeBySuffixBindReqTimestampVar
			TZDateDef implMSSqlReadDerivedClassCodeBySuffixBindReqTZDateVar
			TZTimeDef implMSSqlReadDerivedClassCodeBySuffixBindReqTZTimeVar
			TZTimestampDef implMSSqlReadDerivedClassCodeBySuffixBindReqTZTimestampVar
			UuidDef implMSSqlReadDerivedClassCodeBySuffixBindReqUuidVar
			UuidGen implMSSqlReadDerivedClassCodeBySuffixBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqBlobVar">
			stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptBlobVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqBoolVar">
			if( $Name$ ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadClassCodeBy$Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtReadClassCodeBy$Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqEnumVar">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptEnumVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqInt16Var">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqInt32Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqInt64Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqUInt16Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqUInt32Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqUInt64Var">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqFloatVar">
			stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptFloatVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqDoubleVar">
			stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqNumberVar">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptNumberVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqStringVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptStringVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqNmTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqNmTokensVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqTextVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptTextVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqTZDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqTZTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqTZTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindReqUuidVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadDerivedClassCodeBySuffixBindOptUuidVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedPassArg">,
				$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasClassCode"
		>$poptop Table HasClassCode$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "$SchemaName$MSSql$poptop Table TableName$Table.readDerivedBy$Suffix$() ";
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByUniqueIndexInvokeReadBuff default implReadTableDerivedByUniqueIndexCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuff"
>		buff = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuff"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByDuplicateIndexAssembleSubClasses default implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleSubClasses"
>		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		String classCode;
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableDerivedByDuplicateIndexAssembleReqSubClasses$
			if( resultSet != null ) {
				while( resultSet.next() ) {
					classCode = resultSet.getString( 1 );
					classCodeList.add( classCode );
				}
			}
		}$implReadTableDerivedByDuplicateIndexAssembleSubClassesCatchFinally$
		List&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt; resultList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt;();
		ListIterator&lt;String&gt; classCodeIter = classCodeList.listIterator();
		while( classCodeIter.hasNext() ) {
			classCode = classCodeIter.next();
			if( classCode.equals( "$poptop Table ClassCode$" ) ) {
				$poptop Table DefSchemaName$$poptop Table Name$Buff[] subList
					= readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexTopWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
		}
		int idx = 0;
		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ resultList.size() ];
		Iterator&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			retBuff[idx++] = iter.next();
		}
		return( retBuff );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleSubClassesCatchFinally">
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleOptSubClasses">
			String sql =
					getSqlSelect$poptop Table TableName$DistinctClassCode()
				+	"WHERE "
$popto Index iterate Columns( first implMSSqlIndexColumnWhereFragBindVar each implMSSqlIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			stmt.execute( sql );
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmt.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmt.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmt.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleReqSubClasses">
			String sql = "{ call $sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + " ) }";
			if( stmtReadClassCodeBy$Suffix$ == null ) {
				stmtReadClassCodeBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMSSqlReadDerivedClassCodeBySuffixBindVar )$
			resultSet = stmtReadClassCodeBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedSubListPassArg">,
						$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				$DefSchemaName$$TableName$Buff[] subList
					= schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readDerivedBy$Suffix$";$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByDuplicateIndexInvokeReadBuff default implReadTableDerivedByDuplicateIndexCheckForSubClasses$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff readBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implReadTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlLocalizeTableKeys empty empty )$<!--
-->			String sql = "{ call $sp_read_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + " ) }";
			if( stmtReadBuffByPKey == null ) {
				stmtReadBuffByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlReadByPKeyTableAssignVar )$
			resultSet = stmtReadBuffByPKey.executeQuery();
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKeyExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtReadBuffByPKey.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtReadBuffByPKey.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtReadBuffByPKey.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignVar"
		>$switch IsNullable yes implMSSqlReadByPKeyTableAssignOptVar
			default implMSSqlReadByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlReadByPKeyTableAssignOptBlobVar
			BoolDef implMSSqlReadByPKeyTableAssignOptBoolVar
			EnumDef implMSSqlReadByPKeyTableAssignOptEnumVar
			Int16Def implMSSqlReadByPKeyTableAssignOptInt16Var
			Int32Def implMSSqlReadByPKeyTableAssignOptInt32Var
			Int64Def implMSSqlReadByPKeyTableAssignOptInt64Var
			UInt16Def implMSSqlReadByPKeyTableAssignOptUInt16Var
			UInt32Def implMSSqlReadByPKeyTableAssignOptUInt32Var
			UInt64Def implMSSqlReadByPKeyTableAssignOptUInt64Var
			Id16Gen implMSSqlReadByPKeyTableAssignOptInt16Var
			Id32Gen implMSSqlReadByPKeyTableAssignOptInt32Var
			Id64Gen implMSSqlReadByPKeyTableAssignOptInt64Var
			FloatDef implMSSqlReadByPKeyTableAssignOptFloatVar
			DoubleDef implMSSqlReadByPKeyTableAssignOptDoubleVar
			NumberDef implMSSqlReadByPKeyTableAssignOptNumberVar
			StringDef implMSSqlReadByPKeyTableAssignOptStringVar
			TokenDef implMSSqlReadByPKeyTableAssignOptTokenVar
			NmTokenDef implMSSqlReadByPKeyTableAssignOptNmTokenVar
			NmTokensDef implMSSqlReadByPKeyTableAssignOptNmTokensVar
			TextDef implMSSqlReadByPKeyTableAssignOptTextVar
			DateDef implMSSqlReadByPKeyTableAssignOptDateVar
			TimeDef implMSSqlReadByPKeyTableAssignOptTimeVar
			TimestampDef implMSSqlReadByPKeyTableAssignOptTimestampVar
			TZDateDef implMSSqlReadByPKeyTableAssignOptTZDateVar
			TZTimeDef implMSSqlReadByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implMSSqlReadByPKeyTableAssignOptTZTimestampVar
			UuidDef implMSSqlReadByPKeyTableAssignOptUuidVar
			UuidGen implMSSqlReadByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlReadByPKeyTableAssignReqBlobVar
			BoolDef implMSSqlReadByPKeyTableAssignReqBoolVar
			EnumDef implMSSqlReadByPKeyTableAssignReqEnumVar
			Int16Def implMSSqlReadByPKeyTableAssignReqInt16Var
			Int32Def implMSSqlReadByPKeyTableAssignReqInt32Var
			Int64Def implMSSqlReadByPKeyTableAssignReqInt64Var
			UInt16Def implMSSqlReadByPKeyTableAssignReqUInt16Var
			UInt32Def implMSSqlReadByPKeyTableAssignReqUInt32Var
			UInt64Def implMSSqlReadByPKeyTableAssignReqUInt64Var
			Id16Gen implMSSqlReadByPKeyTableAssignReqInt16Var
			Id32Gen implMSSqlReadByPKeyTableAssignReqInt32Var
			Id64Gen implMSSqlReadByPKeyTableAssignReqInt64Var
			FloatDef implMSSqlReadByPKeyTableAssignReqFloatVar
			DoubleDef implMSSqlReadByPKeyTableAssignReqDoubleVar
			NumberDef implMSSqlReadByPKeyTableAssignReqNumberVar
			StringDef implMSSqlReadByPKeyTableAssignReqStringVar
			TokenDef implMSSqlReadByPKeyTableAssignReqTokenVar
			NmTokenDef implMSSqlReadByPKeyTableAssignReqNmTokenVar
			NmTokensDef implMSSqlReadByPKeyTableAssignReqNmTokensVar
			TextDef implMSSqlReadByPKeyTableAssignReqTextVar
			DateDef implMSSqlReadByPKeyTableAssignReqDateVar
			TimeDef implMSSqlReadByPKeyTableAssignReqTimeVar
			TimestampDef implMSSqlReadByPKeyTableAssignReqTimestampVar
			TZDateDef implMSSqlReadByPKeyTableAssignReqTZDateVar
			TZTimeDef implMSSqlReadByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implMSSqlReadByPKeyTableAssignReqTZTimestampVar
			UuidDef implMSSqlReadByPKeyTableAssignReqUuidVar
			UuidGen implMSSqlReadByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqBlobVar">
			stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtReadBuffByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtReadBuffByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadBuffByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtReadBuffByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqEnumVar">
			stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqInt16Var">
			stmtReadBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqInt32Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqInt64Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqUInt16Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqUInt32Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqUInt64Var">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqFloatVar">
			stmtReadBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqDoubleVar">
			stmtReadBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqNumberVar">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqStringVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqNmTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqNmTokensVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqTextVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqTZDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqTZTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqTZTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignReqUuidVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadByPKeyTableAssignClassCode">
			stmtReadBuffByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff lockBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implLockTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKeyTryBody">
			Connection cnx = schema.getCnx();
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlLocalizeTableKeys empty empty )$<!--
-->			String sql = "{ call $sp_lock_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + " ) }";
			if( stmtLockBuffByPKey == null ) {
				stmtLockBuffByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlLockByPKeyTableAssignVar )$
			stmtLockBuffByPKey.execute();$implLockTableBuffByPKeyExtractResultSet$
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKeyExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtLockBuffByPKey.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtLockBuffByPKey.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtLockBuffByPKey.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignVar"
		>$switch IsNullable yes implMSSqlLockByPKeyTableAssignOptVar
			default implMSSqlLockByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlLockByPKeyTableAssignOptBlobVar
			BoolDef implMSSqlLockByPKeyTableAssignOptBoolVar
			EnumDef implMSSqlLockByPKeyTableAssignOptEnumVar
			Int16Def implMSSqlLockByPKeyTableAssignOptInt16Var
			Int32Def implMSSqlLockByPKeyTableAssignOptInt32Var
			Int64Def implMSSqlLockByPKeyTableAssignOptInt64Var
			UInt16Def implMSSqlLockByPKeyTableAssignOptUInt16Var
			UInt32Def implMSSqlLockByPKeyTableAssignOptUInt32Var
			UInt64Def implMSSqlLockByPKeyTableAssignOptUInt64Var
			Id16Gen implMSSqlLockByPKeyTableAssignOptInt16Var
			Id32Gen implMSSqlLockByPKeyTableAssignOptInt32Var
			Id64Gen implMSSqlLockByPKeyTableAssignOptInt64Var
			FloatDef implMSSqlLockByPKeyTableAssignOptFloatVar
			DoubleDef implMSSqlLockByPKeyTableAssignOptDoubleVar
			NumberDef implMSSqlLockByPKeyTableAssignOptNumberVar
			StringDef implMSSqlLockByPKeyTableAssignOptStringVar
			TokenDef implMSSqlLockByPKeyTableAssignOptTokenVar
			NmTokenDef implMSSqlLockByPKeyTableAssignOptNmTokenVar
			NmTokensDef implMSSqlLockByPKeyTableAssignOptNmTokensVar
			TextDef implMSSqlLockByPKeyTableAssignOptTextVar
			DateDef implMSSqlLockByPKeyTableAssignOptDateVar
			TimeDef implMSSqlLockByPKeyTableAssignOptTimeVar
			TimestampDef implMSSqlLockByPKeyTableAssignOptTimestampVar
			TZDateDef implMSSqlLockByPKeyTableAssignOptTZDateVar
			TZTimeDef implMSSqlLockByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implMSSqlLockByPKeyTableAssignOptTZTimestampVar
			UuidDef implMSSqlLockByPKeyTableAssignOptUuidVar
			UuidGen implMSSqlLockByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlLockByPKeyTableAssignReqBlobVar
			BoolDef implMSSqlLockByPKeyTableAssignReqBoolVar
			EnumDef implMSSqlLockByPKeyTableAssignReqEnumVar
			Int16Def implMSSqlLockByPKeyTableAssignReqInt16Var
			Int32Def implMSSqlLockByPKeyTableAssignReqInt32Var
			Int64Def implMSSqlLockByPKeyTableAssignReqInt64Var
			UInt16Def implMSSqlLockByPKeyTableAssignReqUInt16Var
			UInt32Def implMSSqlLockByPKeyTableAssignReqUInt32Var
			UInt64Def implMSSqlLockByPKeyTableAssignReqUInt64Var
			Id16Gen implMSSqlLockByPKeyTableAssignReqInt16Var
			Id32Gen implMSSqlLockByPKeyTableAssignReqInt32Var
			Id64Gen implMSSqlLockByPKeyTableAssignReqInt64Var
			FloatDef implMSSqlLockByPKeyTableAssignReqFloatVar
			DoubleDef implMSSqlLockByPKeyTableAssignReqDoubleVar
			NumberDef implMSSqlLockByPKeyTableAssignReqNumberVar
			StringDef implMSSqlLockByPKeyTableAssignReqStringVar
			TokenDef implMSSqlLockByPKeyTableAssignReqTokenVar
			NmTokenDef implMSSqlLockByPKeyTableAssignReqNmTokenVar
			NmTokensDef implMSSqlLockByPKeyTableAssignReqNmTokensVar
			TextDef implMSSqlLockByPKeyTableAssignReqTextVar
			DateDef implMSSqlLockByPKeyTableAssignReqDateVar
			TimeDef implMSSqlLockByPKeyTableAssignReqTimeVar
			TimestampDef implMSSqlLockByPKeyTableAssignReqTimestampVar
			TZDateDef implMSSqlLockByPKeyTableAssignReqTZDateVar
			TZTimeDef implMSSqlLockByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implMSSqlLockByPKeyTableAssignReqTZTimestampVar
			UuidDef implMSSqlLockByPKeyTableAssignReqUuidVar
			UuidGen implMSSqlLockByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqBlobVar">
			stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtLockBuffByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtLockBuffByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtLockBuffByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtLockBuffByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqEnumVar">
			stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqInt16Var">
			stmtLockBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqInt32Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqInt64Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqUInt16Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqUInt32Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqUInt64Var">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqFloatVar">
			stmtLockBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqDoubleVar">
			stmtLockBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqNumberVar">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqStringVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqNmTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqNmTokensVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqTextVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqTZDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqTZTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqTZTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignReqUuidVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlLockByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffWhereClassCode">
				+	" WHERE "
				+		"$lower reference BaseClass ClassCode$.ClassCode = '$ClassCode$' "</GenRule>

	<GenRule GenDef="Object" Name="implBuffIndexColumnOrderBy">
				+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implBuffIndexColumnCommaOrderBy"
		>$implBuffIndexColumnOrderBy$ + ", "</GenRule>


	<GenRule GenDef="Table" Name="implReadTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implReadTableBuffByInhIndexes default implReadTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableBuffByIndexes$$iterate Index( each implReadTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByBaseIndexes"
		>$iterate Index( each implReadTableBuffByIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implPageTableBuffByInhIndexes default implPageTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implPageTableBuffByIndexes$$iterate Index( each implPageTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByBaseIndexes"
		>$iterate Index( each implPageTableBuffByIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableBuff">
	public $DefSchemaName$$TableName$Buff[] readAllBuff( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();
			String sql = "{ call $sp_read_dbtablename_all$( ?, ?, ?, ?, ? ) }";
			if( stmtReadAllBuff == null ) {
				stmtReadAllBuff = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmtReadAllBuff.executeQuery();
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			if( resultSet != null ) {
				while( resultSet.next() ) {
					$DefSchemaName$$TableName$Buff buff = unpack$TableName$ResultSetToBuff( resultSet );
					buffList.add( buff );
				}
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableBuffExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtReadAllBuff.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtReadAllBuff.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtReadAllBuff.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByIndex"
		>$switch IsUnique
			yes implReadTableBuffByUniqueIndex
			default implReadTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByIndex"
		>$switch IsUnique
			yes empty
			default maybe_implPageTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="maybe_implPageTableBuffByDuplicateIndex"
		>$switch PageData yes implPageTableBuffByDuplicateIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableBuffByReqUniqueIndex$
			if( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndexReleaseStatement">
		if( stmt != null ) {
			try {
				stmt.close();
			}
			catch( SQLException e ) {
			}
			stmt = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndex">
			String sql =
					getSqlSelect$poptop Table TableName$Buff()
				+	" WHERE "
$iterate Columns( first implMSSqlIndexColumnWhereFragBindVar each implMSSqlIndexColumnWhereAndFragBindVar )$$implMSSqlWhereFragRestrictClassCode$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			stmt.execute( sql );
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmt.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmt.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmt.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="BaseHasSubClasses"
		>$poptop Table reference BaseClass HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlWhereFragRestrictClassCode"
		>$switch BaseHasSubClasses yes implMSSqlWhereFragDoRestrict default empty$</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlWhereFragDoRestrict">
				+		"AND "
				+			"$lower poptop Table reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'"</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqUniqueIndex">
			String sql = "{ call $sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + " ) }";
			if( stmtReadBuffBy$Suffix$ == null ) {
				stmtReadBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMSSqlReadBuffBySuffixAssignVar )$
			resultSet = stmtReadBuffBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqUniqueIndexExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtReadBuffBy$Suffix$.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtReadBuffBy$Suffix$.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtReadBuffBy$Suffix$.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignVar"
		>$switch IsNullable yes implMSSqlReadBuffBySuffixAssignOptVar
			default implMSSqlReadBuffBySuffixAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlReadBuffBySuffixAssignOptBlobVar
			BoolDef implMSSqlReadBuffBySuffixAssignOptBoolVar
			EnumDef implMSSqlReadBuffBySuffixAssignOptEnumVar
			Int16Def implMSSqlReadBuffBySuffixAssignOptInt16Var
			Int32Def implMSSqlReadBuffBySuffixAssignOptInt32Var
			Int64Def implMSSqlReadBuffBySuffixAssignOptInt64Var
			UInt16Def implMSSqlReadBuffBySuffixAssignOptUInt16Var
			UInt32Def implMSSqlReadBuffBySuffixAssignOptUInt32Var
			UInt64Def implMSSqlReadBuffBySuffixAssignOptUInt64Var
			Id16Gen implMSSqlReadBuffBySuffixAssignOptInt16Var
			Id32Gen implMSSqlReadBuffBySuffixAssignOptInt32Var
			Id64Gen implMSSqlReadBuffBySuffixAssignOptInt64Var
			FloatDef implMSSqlReadBuffBySuffixAssignOptFloatVar
			DoubleDef implMSSqlReadBuffBySuffixAssignOptDoubleVar
			NumberDef implMSSqlReadBuffBySuffixAssignOptNumberVar
			StringDef implMSSqlReadBuffBySuffixAssignOptStringVar
			TokenDef implMSSqlReadBuffBySuffixAssignOptTokenVar
			NmTokenDef implMSSqlReadBuffBySuffixAssignOptNmTokenVar
			NmTokensDef implMSSqlReadBuffBySuffixAssignOptNmTokensVar
			TextDef implMSSqlReadBuffBySuffixAssignOptTextVar
			DateDef implMSSqlReadBuffBySuffixAssignOptDateVar
			TimeDef implMSSqlReadBuffBySuffixAssignOptTimeVar
			TimestampDef implMSSqlReadBuffBySuffixAssignOptTimestampVar
			TZDateDef implMSSqlReadBuffBySuffixAssignOptTZDateVar
			TZTimeDef implMSSqlReadBuffBySuffixAssignOptTZTimeVar
			TZTimestampDef implMSSqlReadBuffBySuffixAssignOptTZTimestampVar
			UuidDef implMSSqlReadBuffBySuffixAssignOptUuidVar
			UuidGen implMSSqlReadBuffBySuffixAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlReadBuffBySuffixAssignReqBlobVar
			BoolDef implMSSqlReadBuffBySuffixAssignReqBoolVar
			EnumDef implMSSqlReadBuffBySuffixAssignReqEnumVar
			Int16Def implMSSqlReadBuffBySuffixAssignReqInt16Var
			Int32Def implMSSqlReadBuffBySuffixAssignReqInt32Var
			Int64Def implMSSqlReadBuffBySuffixAssignReqInt64Var
			UInt16Def implMSSqlReadBuffBySuffixAssignReqUInt16Var
			UInt32Def implMSSqlReadBuffBySuffixAssignReqUInt32Var
			UInt64Def implMSSqlReadBuffBySuffixAssignReqUInt64Var
			Id16Gen implMSSqlReadBuffBySuffixAssignReqInt16Var
			Id32Gen implMSSqlReadBuffBySuffixAssignReqInt32Var
			Id64Gen implMSSqlReadBuffBySuffixAssignReqInt64Var
			FloatDef implMSSqlReadBuffBySuffixAssignReqFloatVar
			DoubleDef implMSSqlReadBuffBySuffixAssignReqDoubleVar
			NumberDef implMSSqlReadBuffBySuffixAssignReqNumberVar
			StringDef implMSSqlReadBuffBySuffixAssignReqStringVar
			TokenDef implMSSqlReadBuffBySuffixAssignReqTokenVar
			NmTokenDef implMSSqlReadBuffBySuffixAssignReqNmTokenVar
			NmTokensDef implMSSqlReadBuffBySuffixAssignReqNmTokensVar
			TextDef implMSSqlReadBuffBySuffixAssignReqTextVar
			DateDef implMSSqlReadBuffBySuffixAssignReqDateVar
			TimeDef implMSSqlReadBuffBySuffixAssignReqTimeVar
			TimestampDef implMSSqlReadBuffBySuffixAssignReqTimestampVar
			TZDateDef implMSSqlReadBuffBySuffixAssignReqTZDateVar
			TZTimeDef implMSSqlReadBuffBySuffixAssignReqTZTimeVar
			TZTimestampDef implMSSqlReadBuffBySuffixAssignReqTZTimestampVar
			UuidDef implMSSqlReadBuffBySuffixAssignReqUuidVar
			UuidGen implMSSqlReadBuffBySuffixAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqBlobVar">
			stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqBoolVar">
			if( $Name$ ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtReadBuffBy$Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadBuffBy$Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtReadBuffBy$Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqEnumVar">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqInt16Var">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqInt32Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqInt64Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqUInt16Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqUInt32Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqUInt64Var">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqFloatVar">
			stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqDoubleVar">
			stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqNumberVar">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqStringVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqNmTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqNmTokensVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqTextVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqTZDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqTZTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqTZTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignReqUuidVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlReadBuffBySuffixAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		try {
			Connection cnx = schema.getCnx();$implReadTableBuffByReqDuplicateIndex$
			List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
			if( resultSet != null ) {
				while( resultSet.next() ) {
					$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
					buffList.add( buff );
				}
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndexDeclStatement">
		Statement stmt = null;</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndexReleaseStatement">
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndex">
			String sql =
					getSqlSelect$poptop Table TableName$Buff()
				+	" WHERE "
$popto Index iterate Columns( first implMSSqlIndexColumnWhereFragBindVar each implMSSqlIndexColumnWhereAndFragBindVar )$$implMSSqlWhereFragRestrictClassCode$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			stmt.execute( sql );
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmt.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmt.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmt.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqDuplicateIndex">
			String sql = "{ call $sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$ + " ) }";
			if( stmtReadBuffBy$Suffix$ == null ) {
				stmtReadBuffBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMSSqlReadBuffBySuffixAssignVar )$
			resultSet = stmtReadBuffBy$Suffix$.executeQuery();</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqDuplicateIndexExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtReadBuffBy$Suffix$.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtReadBuffBy$Suffix$.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtReadBuffBy$Suffix$.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableByIndex"
		>$switch IsUnique
			yes implReadTableByUniqueIndex
			default implReadTableByDuplicateIndex$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlIndexColumnWhereAndFragBindVar">
			+	"AND "
$implMSSqlIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implMSSqlIndexColumnWhereFragBindOptVar
			default implMSSqlIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlIndexColumnWhereFragBindOptBlobVar
			BoolDef implMSSqlIndexColumnWhereFragBindOptBoolVar
			EnumDef implMSSqlIndexColumnWhereFragBindOptEnumVar
			Int16Def implMSSqlIndexColumnWhereFragBindOptInt16Var
			Int32Def implMSSqlIndexColumnWhereFragBindOptInt32Var
			Int64Def implMSSqlIndexColumnWhereFragBindOptInt64Var
			UInt16Def implMSSqlIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implMSSqlIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implMSSqlIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implMSSqlIndexColumnWhereFragBindOptInt16Var
			Id32Gen implMSSqlIndexColumnWhereFragBindOptInt32Var
			Id64Gen implMSSqlIndexColumnWhereFragBindOptInt64Var
			FloatDef implMSSqlIndexColumnWhereFragBindOptFloatVar
			DoubleDef implMSSqlIndexColumnWhereFragBindOptDoubleVar
			NumberDef implMSSqlIndexColumnWhereFragBindOptNumberVar
			StringDef implMSSqlIndexColumnWhereFragBindOptStringVar
			TokenDef implMSSqlIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implMSSqlIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implMSSqlIndexColumnWhereFragBindOptNmTokensVar
			TextDef implMSSqlIndexColumnWhereFragBindOptTextVar
			DateDef implMSSqlIndexColumnWhereFragBindOptDateVar
			TimeDef implMSSqlIndexColumnWhereFragBindOptTimeVar
			TimestampDef implMSSqlIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implMSSqlIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implMSSqlIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implMSSqlIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implMSSqlIndexColumnWhereFragBindOptUuidVar
			UuidGen implMSSqlIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlIndexColumnWhereFragBindReqBlobVar
			BoolDef implMSSqlIndexColumnWhereFragBindReqBoolVar
			EnumDef implMSSqlIndexColumnWhereFragBindReqEnumVar
			Int16Def implMSSqlIndexColumnWhereFragBindReqInt16Var
			Int32Def implMSSqlIndexColumnWhereFragBindReqInt32Var
			Int64Def implMSSqlIndexColumnWhereFragBindReqInt64Var
			UInt16Def implMSSqlIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implMSSqlIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implMSSqlIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implMSSqlIndexColumnWhereFragBindReqInt16Var
			Id32Gen implMSSqlIndexColumnWhereFragBindReqInt32Var
			Id64Gen implMSSqlIndexColumnWhereFragBindReqInt64Var
			FloatDef implMSSqlIndexColumnWhereFragBindReqFloatVar
			DoubleDef implMSSqlIndexColumnWhereFragBindReqDoubleVar
			NumberDef implMSSqlIndexColumnWhereFragBindReqNumberVar
			StringDef implMSSqlIndexColumnWhereFragBindReqStringVar
			TokenDef implMSSqlIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implMSSqlIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implMSSqlIndexColumnWhereFragBindReqNmTokensVar
			TextDef implMSSqlIndexColumnWhereFragBindReqTextVar
			DateDef implMSSqlIndexColumnWhereFragBindReqDateVar
			TimeDef implMSSqlIndexColumnWhereFragBindReqTimeVar
			TimestampDef implMSSqlIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implMSSqlIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implMSSqlIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implMSSqlIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implMSSqlIndexColumnWhereFragBindReqUuidVar
			UuidGen implMSSqlIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqBlobVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getBlobString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptBlobVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getBlobString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqBoolVar"
>				+		( $Name$ ? "$lower ClassCode$.$lower DbColumnName$ = 'Y' " : "$lower ClassCode$.$lower DbColumnName$ = 'N' " )
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptBoolVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null " :
								( $Name$ ? "'Y', " : "'N', " ) )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqEnumVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptEnumVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqInt16Var"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqInt32Var"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqInt64Var"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqUInt16Var"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptUInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqUInt32Var"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptUInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqUInt64Var"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptUInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqFloatVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptFloatVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqDoubleVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptDoubleVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqNumberVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptNumberVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqStringVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptStringVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqTokenVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqNmTokenVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptNmTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqNmTokensVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptNmTokensVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqTextVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptTextVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqDateVar"
>				+		"convert( date, " + $SchemaName$MSSqlSchema.getDateString( $Name$ ) + ", 112 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = convert( date, " + $SchemaName$MSSqlSchema.getDateString( $Name$ ) + ", 112 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqTimeVar"
>				+		"convert( time, " + $SchemaName$MSSqlSchema.getTimeString( $Name$ ) + ", 108 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = convert( time, " + $SchemaName$MSSqlSchema.getTimeString( $Name$ ) + ", 108 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqTimestampVar"
>				+		"convert( datetime2, " + $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) + ", 120 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) + ", 120 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqTZDateVar"
>				+		"convert( datetime2, " + $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) + ", 120 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptTZDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) + ", 120 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqTZTimeVar"
>				+		"convert( datetime2, " + $SchemaName$MSSqlSchema.getTimeString( $Name$ ) + ", 120 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptTZTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) + ", 120 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqTZTimestampVar"
>				+		"convert( datetime2, " + $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) + ", 120 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptTZTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) + ", 120 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindReqUuidVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = '" + $Name$.toString() + "' "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragBindOptUuidVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$lower DbColumnName$ is null "
							: "$lower ClassCode$.$lower DbColumnName$ = '" + $Name$.toString() + "' " )</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlIndexColumnWhereAndFragValueVar">
					+	"AND "
$implMSSqlIndexColumnWhereFragValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnCommaArgValueVar"> + ", "$implMSSqlIndexColumnArgValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlCommaArgRevision"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlIndexColumnArgValueWhereFragValueGeneric
			BoolDef implMSSqlIndexColumnArgValueWhereFragValueBool
			EnumDef implMSSqlIndexColumnArgValueWhereFragValueGeneric
			Int16Def implMSSqlIndexColumnArgValueWhereFragValueGeneric
			Int32Def implMSSqlIndexColumnArgValueWhereFragValueGeneric
			Int64Def implMSSqlIndexColumnArgValueWhereFragValueGeneric
			UInt16Def implMSSqlIndexColumnArgValueWhereFragValueGeneric
			UInt32Def implMSSqlIndexColumnArgValueWhereFragValueGeneric
			UInt64Def implMSSqlIndexColumnArgValueWhereFragValueGeneric
			Id16Gen implMSSqlIndexColumnArgValueWhereFragValueGeneric
			Id32Gen implMSSqlIndexColumnArgValueWhereFragValueGeneric
			Id64Gen implMSSqlIndexColumnArgValueWhereFragValueGeneric
			FloatDef implMSSqlIndexColumnArgValueWhereFragValueFloat
			DoubleDef implMSSqlIndexColumnArgValueWhereFragValueGeneric
			NumberDef implMSSqlIndexColumnArgValueWhereFragValueGeneric
			StringDef implMSSqlIndexColumnArgValueWhereFragValueGeneric
			TokenDef implMSSqlIndexColumnArgValueWhereFragValueGeneric
			NmTokenDef implMSSqlIndexColumnArgValueWhereFragValueGeneric
			NmTokensDef implMSSqlIndexColumnArgValueWhereFragValueGeneric
			TextDef implMSSqlIndexColumnArgValueWhereFragValueText
			DateDef implMSSqlIndexColumnArgValueWhereFragValueDate
			TimeDef implMSSqlIndexColumnArgValueWhereFragValueTime
			TimestampDef implMSSqlIndexColumnArgValueWhereFragValueTimestamp
			TZDateDef implMSSqlIndexColumnArgValueWhereFragValueTZDate
			TZTimeDef implMSSqlIndexColumnArgValueWhereFragValueTZTime
			TZTimestampDef implMSSqlIndexColumnArgValueWhereFragValueTZTimestamp
			UuidDef implMSSqlIndexColumnArgValueWhereFragValueGeneric
			UuidGen implMSSqlIndexColumnArgValueWhereFragValueGeneric
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueGeneric">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueFloat">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueText">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueBool">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueDate">
				+		"convert( date, ?, 112 )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueTime">
				+		"convert( time, ?, 108 )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueTimestamp">
				+		"convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueTZDate">
				+		"convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueTZTime">
				+		"convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueTZTimestamp">
				+		"convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnArgValueWhereFragValueUuid">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlIndexColumnWhereFragValueGenericVar
			BoolDef implMSSqlIndexColumnWhereFragValueBoolVar
			EnumDef implMSSqlIndexColumnWhereFragValueGenericVar
			Int16Def implMSSqlIndexColumnWhereFragValueGenericVar
			Int32Def implMSSqlIndexColumnWhereFragValueGenericVar
			Int64Def implMSSqlIndexColumnWhereFragValueGenericVar
			UInt16Def implMSSqlIndexColumnWhereFragValueGenericVar
			UInt32Def implMSSqlIndexColumnWhereFragValueGenericVar
			UInt64Def implMSSqlIndexColumnWhereFragValueGenericVar
			Id16Gen implMSSqlIndexColumnWhereFragValueGenericVar
			Id32Gen implMSSqlIndexColumnWhereFragValueGenericVar
			Id64Gen implMSSqlIndexColumnWhereFragValueGenericVar
			FloatDef implMSSqlIndexColumnWhereFragValueGenericVar
			DoubleDef implMSSqlIndexColumnWhereFragValueGenericVar
			NumberDef implMSSqlIndexColumnWhereFragValueGenericVar
			StringDef implMSSqlIndexColumnWhereFragValueGenericVar
			TokenDef implMSSqlIndexColumnWhereFragValueGenericVar
			NmTokenDef implMSSqlIndexColumnWhereFragValueGenericVar
			NmTokensDef implMSSqlIndexColumnWhereFragValueGenericVar
			TextDef implMSSqlIndexColumnWhereFragValueGenericVar
			DateDef implMSSqlIndexColumnWhereFragValueDateVar
			TimeDef implMSSqlIndexColumnWhereFragValueTimeVar
			TimestampDef implMSSqlIndexColumnWhereFragValueTimestampVar
			TZDateDef implMSSqlIndexColumnWhereFragValueTZDateVar
			TZTimeDef implMSSqlIndexColumnWhereFragValueTZTimeVar
			TZTimestampDef implMSSqlIndexColumnWhereFragValueTZTimestampVar
			UuidDef implMSSqlIndexColumnWhereFragValueGenericVar
			UuidGen implMSSqlIndexColumnWhereFragValueGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueGenericVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueFloatVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueTextVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueBoolVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueDateVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = convert( date, ?, 112 ) "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueTimeVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = convert( time, ?, 108 ) "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueTimestampVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = convert( datetime2, ? ) "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueTZDateVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = convert( datetime2, ? ) "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueTZTimeVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = convert( datetime2, ? ) "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueTZTimestampVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = convert( datetime2, ? ) "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnWhereFragValueUuidVar"
>				+		"$lower ClassCode$.$lower DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlTableColumnSelectFragDbNameComma"
		>$reference Column implMSSqlTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameComma"
>				+		"$switch BaseModelAtomClass
				BlobDef implMSSqlTableColumnSelectFragDbNameBlob
				BoolDef implMSSqlTableColumnSelectFragDbNameBool
				EnumDef implMSSqlTableColumnSelectFragDbNameEnum
				Int16Def implMSSqlTableColumnSelectFragDbNameInt16
				Int32Def implMSSqlTableColumnSelectFragDbNameInt32
				Int64Def implMSSqlTableColumnSelectFragDbNameInt64
				UInt16Def implMSSqlTableColumnSelectFragDbNameUInt16
				UInt32Def implMSSqlTableColumnSelectFragDbNameUInt32
				UInt64Def implMSSqlTableColumnSelectFragDbNameUInt64
				Id16Gen implMSSqlTableColumnSelectFragDbNameInt16
				Id32Gen implMSSqlTableColumnSelectFragDbNameInt32
				Id64Gen implMSSqlTableColumnSelectFragDbNameInt64
				FloatDef implMSSqlTableColumnSelectFragDbNameFloat
				DoubleDef implMSSqlTableColumnSelectFragDbNameDouble
				NumberDef implMSSqlTableColumnSelectFragDbNameNumber
				StringDef implMSSqlTableColumnSelectFragDbNameString
				TokenDef implMSSqlTableColumnSelectFragDbNameToken
				NmTokenDef implMSSqlTableColumnSelectFragDbNameNmToken
				NmTokensDef implMSSqlTableColumnSelectFragDbNameNmTokens
				TextDef implMSSqlTableColumnSelectFragDbNameText
				DateDef implMSSqlTableColumnSelectFragDbNameDate
				TimeDef implMSSqlTableColumnSelectFragDbNameTime
				TimestampDef implMSSqlTableColumnSelectFragDbNameTimestamp
				TZDateDef implMSSqlTableColumnSelectFragDbNameTZDate
				TZTimeDef implMSSqlTableColumnSelectFragDbNameTZTime
				TZTimestampDef implMSSqlTableColumnSelectFragDbNameTZTimestamp
				UuidDef implMSSqlTableColumnSelectFragDbNameUuid
				UuidGen implMSSqlTableColumnSelectFragDbNameUuid
				default empty$, "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameBlob"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameBool"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameEnum"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameInt16"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameInt32"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameInt64"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameUInt16"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameUInt32"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameUInt64"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameFloat"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameDouble"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameNumber"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameString"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameToken"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameNmToken"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameNmTokens"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameText"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameDate"
		>convert( varchar, $lower ClassCode$.$lower DbColumnName$, 112 ) AS $lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameTime"
		>convert( varchar, $lower ClassCode$.$lower DbColumnName$, 108 ) AS $lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameTimestamp"
		>convert( varchar, $lower ClassCode$.$lower DbColumnName$, 120 ) AS $lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameTZDate"
		>convert( varchar, $lower ClassCode$.$lower DbColumnName$, 120 ) AS $lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameTZTime"
		>convert( varchar, $lower ClassCode$.$lower DbColumnName$, 120 ) AS $lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameTZTimestamp"
		>convert( varchar, $lower ClassCode$.$lower DbColumnName$, 120 ) AS $lower DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbNameUuid"
		>$lower ClassCode$.$lower DbColumnName$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnSelectFragDbName"
>			+		"$switch BaseModelAtomClass
			BlobDef implMSSqlTableColumnSelectFragDbNameBlob
			BoolDef implMSSqlTableColumnSelectFragDbNameBool
			EnumDef implMSSqlTableColumnSelectFragDbNameEnum
			Int16Def implMSSqlTableColumnSelectFragDbNameInt16
			Int32Def implMSSqlTableColumnSelectFragDbNameInt32
			Int64Def implMSSqlTableColumnSelectFragDbNameInt64
			UInt16Def implMSSqlTableColumnSelectFragDbNameUInt16
			UInt32Def implMSSqlTableColumnSelectFragDbNameUInt32
			UInt64Def implMSSqlTableColumnSelectFragDbNameUInt64
			Id16Gen implMSSqlTableColumnSelectFragDbNameInt16
			Id32Gen implMSSqlTableColumnSelectFragDbNameInt32
			Id64Gen implMSSqlTableColumnSelectFragDbNameInt64
			FloatDef implMSSqlTableColumnSelectFragDbNameFloat
			DoubleDef implMSSqlTableColumnSelectFragDbNameDouble
			NumberDef implMSSqlTableColumnSelectFragDbNameNumber
			StringDef implMSSqlTableColumnSelectFragDbNameString
			TokenDef implMSSqlTableColumnSelectFragDbNameToken
			NmTokenDef implMSSqlTableColumnSelectFragDbNameNmToken
			NmTokensDef implMSSqlTableColumnSelectFragDbNameNmTokens
			TextDef implMSSqlTableColumnSelectFragDbNameText
			DateDef implMSSqlTableColumnSelectFragDbNameDate
			TimeDef implMSSqlTableColumnSelectFragDbNameTime
			TimestampDef implMSSqlTableColumnSelectFragDbNameTimestamp
			TZDateDef implMSSqlTableColumnSelectFragDbNameTZDate
			TZTimeDef implMSSqlTableColumnSelectFragDbNameTZTime
			TZTimestampDef implMSSqlTableColumnSelectFragDbNameTZTimestamp
			UuidDef implMSSqlTableColumnSelectFragDbNameUuid
			UuidGen implMSSqlTableColumnSelectFragDbNameUuid
			default empty$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implMSSqlTableColumnSqlFragDbName"
>			+		"$lower ClassCode$.$lower DbColumnName$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implMSSqlTableColumnSqlFragDbName"
>			+		"$lower ClassCode$.$lower DbColumnName$ "
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlIndexColumnOrderBy">
			+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlIndexColumnCommaOrderBy"
		>$implMSSqlIndexColumnOrderBy$ + ", "</GenRule>

	<GenRule GenDef="IndexCol" Name="implUpdateTableCopyBuffToPKey">
			pkey.set$OptionalOrRequired$$Name$( Buff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableExtractRevision"
>			int Revision = Buff.getRequiredRevision();
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableCheckRevision"
>			int Revision = Buff.getRequiredRevision();
			$DefSchemaName$$TableName$PKey pkey = schema.getFactory$Name$().newPKey();$reference PrimaryKeyIndex iterate Columns( each implUpdateTableCopyBuffToPKey )$
			$DefSchemaName$$TableName$Buff readBuff = lockBuff( Authorization, pkey );
			if( readBuff == null ) {
				throw new CFLibStaleCacheDetectedException( getClass(),
					S_ProcName,
					"Attempted to update record which could not be locked/found",
					schema.getLowerDbSchemaName() + "..$lower DbTableName$",
					pkey );
			}
			int oldRevision = readBuff.getRequiredRevision();
			if( oldRevision != Revision ) {
				throw new CFLibCollisionDetectedException( getClass(),
					S_ProcName,
					Buff );
			}
			int newRevision = Revision + 1;</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSqlFragUpdateRevision">
				+		", revision = ? "</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlUpdateTableSqlFragWhereAndRevision">
				+	"AND "
				+		"revision = ? "</GenRule>


	<GenRule GenDef="Table" Name="implUpdateTable"
		>$switch InheritsBlobOrTextDef yes implUpdateTableOldStyle default implUpdateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableInitClassCode">
			String ClassCode = "$ClassCode$";</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractVars"
		>$switch HasSuperClassRelation yes implUpdateTableSPExtractInhVars default implUpdateTableSPExtractBaseVars$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractBaseVars"
		>$switch IsBaseTable yes implMSSqlCreateTableCopyClassCode default empty$$iterate Columns( each implMSSqlCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractInhVars"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPExtractVars$$iterate Columns( each implMSSqlCreateTableCopyData empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implUpdateTableSPCopyInhColumns default implUpdateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPCopyColumns$$iterate DataColumns( each implMSSqlCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implMSSqlCreateTableCopyClassCode default empty$$iterate Columns( each implMSSqlCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSP">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";
		ResultSet resultSet = null;
		try {$implUpdateTableSPTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPTryBody">
$implUpdateTableSPCopyColumns$			int Revision = Buff.getRequiredRevision();
			Connection cnx = schema.getCnx();
			String sql =
				"exec $sp_update_dbtablename$ ?, ?, ?, ?, ?, ?"$implUpdateTableSPPassArgs$ + ", "
					+ "?";
			if( stmtUpdateByPKey == null ) {
				stmtUpdateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implMSSqlUpdateTableBindClassCode default implMSSqlUpdateTableBindConstClassCode$$implUpdateTableSPBindArgs$$implMSSqlUpdateTableBindRevision$
			stmtUpdateByPKey.execute();$implUpdateTableSPExtractResultSet$
			if( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff updatedBuff = unpack$TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}$implMSSqlUpdateTableApplyBuff$$implMSSqlUpdateTableApplyRevision$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmtUpdateByPKey.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmtUpdateByPKey.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtUpdateByPKey.getUpdateCount() ) {
					break;
				}
			}
			if( resultSet == null ) {
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					"resultSet" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlUpdateTableApplyRevision">
				Buff.setRequiredRevision( updatedBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlUpdateTableApplyBuff"
		>$switch HasSuperClassRelation yes implMSSqlUpdateTableApplyInhBuff default implMSSqlUpdateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlUpdateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implMSSqlUpdateTableApplyBuff$$iterate Columns( each implMSSqlUpdateTableApplyDataCol )$</GenRule>

	<!-- Note: Updates aren't allowed to change the primary key so we don't copy back those attributes -->
	<GenRule GenDef="Table" Name="implMSSqlUpdateTableApplyBaseBuff"
		>$iterate Columns( each implMSSqlUpdateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Value" Name="implMSSqlUpdateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implMSSqlUpdateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implMSSqlUpdateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( updatedBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPBindInhArgs default implUpdateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPBindArgs$$iterate Columns( each implUpdateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindBaseArgs"
		>$iterate Columns( each implMSSqlUpdateTableBindVar )$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implMSSqlUpdateTableBindVar$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPPassInhArgs default implUpdateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPPassArgs$$iterate Columns( each implUpdateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassBaseArgs"
		>$iterate Columns( each implUpdateTableSPPassAnArg )$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implUpdateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlUpdateTableSPPassGenericVar
			BoolDef implMSSqlUpdateTableSPPassGenericVar
			EnumDef implMSSqlUpdateTableSPPassGenericVar
			Int16Def implMSSqlUpdateTableSPPassGenericVar
			Int32Def implMSSqlUpdateTableSPPassGenericVar
			Int64Def implMSSqlUpdateTableSPPassGenericVar
			UInt16Def implMSSqlUpdateTableSPPassGenericVar
			UInt32Def implMSSqlUpdateTableSPPassGenericVar
			UInt64Def implMSSqlUpdateTableSPPassGenericVar
			Id16Gen implMSSqlUpdateTableSPPassGenericVar
			Id32Gen implMSSqlUpdateTableSPPassGenericVar
			Id64Gen implMSSqlUpdateTableSPPassGenericVar
			FloatDef implMSSqlUpdateTableSPPassFloatVar
			DoubleDef implMSSqlUpdateTableSPPassGenericVar
			NumberDef implMSSqlUpdateTableSPPassGenericVar
			StringDef implMSSqlUpdateTableSPPassGenericVar
			TokenDef implMSSqlUpdateTableSPPassGenericVar
			NmTokenDef implMSSqlUpdateTableSPPassGenericVar
			NmTokensDef implMSSqlUpdateTableSPPassGenericVar
			TextDef implMSSqlUpdateTableSPPassTextVar
			DateDef implMSSqlUpdateTableSPPassDateVar
			TimeDef implMSSqlUpdateTableSPPassTimeVar
			TimestampDef implMSSqlUpdateTableSPPassTimestampVar
			TZDateDef implMSSqlUpdateTableSPPassTZDateVar
			TZTimeDef implMSSqlUpdateTableSPPassTZTimeVar
			TZTimestampDef implMSSqlUpdateTableSPPassTZTimestampVar
			UuidDef implMSSqlUpdateTableSPPassGenericVar
			UuidGen implMSSqlUpdateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableSPPassGenericVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableSPPassFloatVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableSPPassTextVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableSPPassDateVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableSPPassTimeVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableSPPassTimestampVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableSPPassTZDateVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableSPPassTZTimeVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableSPPassTZTimestampVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleInvokeSuper">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().update$reference SuperClassRelation reference ToTable Name$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyle">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";$switch SecScope None empty System implUpdateTableOSCheckSystem Cluster implUpdateTableOSCheckCluster Tenant implUpdateTableOSCheckTenant default error$$switch HasSuperClassRelation yes implUpdateTableOldStyleInvokeSuper default empty$$switch HasDataColumns yes implUpdateTableOldStyleTryBlock default implUpdateTableOldStyleMaybeNoTry$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleTryBlock">
		try {
			Connection cnx = schema.getCnx();
$switch IsBaseTable yes implMSSqlCreateTableCopyClassCode default empty$$iterate Columns( each implMSSqlCreateTableCopyColumn empty empty )$$switch HasSuperClassRelation no implUpdateTableCheckRevision default implUpdateTableExtractRevision$$switch HasDataColumns yes implUpdateTableOldStyleDoUpdate default empty$$poptop Table switch BaseHasHistory yes implUpdateTableOldStyleAuditUpdated default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleMaybeNoTry"
		>$poptop Table switch BaseHasHistory yes implUpdateTableOldStyleTryBlock default implUpdateTableOldStyleNoTry$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleNoTry"
		></GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdated"
		>$switch BaseHasClassCode yes implUpdateTableOldStyleAuditUpdatedWithCC default implUpdateTableOldStyleAuditUpdatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + "..$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp, "
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, sysdatetime(), $lower reference BaseClass ClassCode$.classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditUpdatedByPKey == null ) {
					stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
				}
				argIdx = 1;
				stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlUpdateTableAssignVar )$
				int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedNoCC">
			String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + "..$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, sysdatetime()"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditUpdatedByPKey == null ) {
				stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
			}
			argIdx = 1;
			stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlUpdateTableAssignVar )$
			int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignVar"
		>$switch IsNullable yes implMSSqlUpdateTableAssignOptVar
			default implMSSqlUpdateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlUpdateTableAssignOptBlobVar
			BoolDef implMSSqlUpdateTableAssignOptBoolVar
			EnumDef implMSSqlUpdateTableAssignOptEnumVar
			Int16Def implMSSqlUpdateTableAssignOptInt16Var
			Int32Def implMSSqlUpdateTableAssignOptInt32Var
			Int64Def implMSSqlUpdateTableAssignOptInt64Var
			UInt16Def implMSSqlUpdateTableAssignOptUInt16Var
			UInt32Def implMSSqlUpdateTableAssignOptUInt32Var
			UInt64Def implMSSqlUpdateTableAssignOptUInt64Var
			Id16Gen implMSSqlUpdateTableAssignOptInt16Var
			Id32Gen implMSSqlUpdateTableAssignOptInt32Var
			Id64Gen implMSSqlUpdateTableAssignOptInt64Var
			FloatDef implMSSqlUpdateTableAssignOptFloatVar
			DoubleDef implMSSqlUpdateTableAssignOptDoubleVar
			NumberDef implMSSqlUpdateTableAssignOptNumberVar
			StringDef implMSSqlUpdateTableAssignOptStringVar
			TokenDef implMSSqlUpdateTableAssignOptTokenVar
			NmTokenDef implMSSqlUpdateTableAssignOptNmTokenVar
			NmTokensDef implMSSqlUpdateTableAssignOptNmTokensVar
			TextDef implMSSqlUpdateTableAssignOptTextVar
			DateDef implMSSqlUpdateTableAssignOptDateVar
			TimeDef implMSSqlUpdateTableAssignOptTimeVar
			TimestampDef implMSSqlUpdateTableAssignOptTimestampVar
			TZDateDef implMSSqlUpdateTableAssignOptTZDateVar
			TZTimeDef implMSSqlUpdateTableAssignOptTZTimeVar
			TZTimestampDef implMSSqlUpdateTableAssignOptTZTimestampVar
			UuidDef implMSSqlUpdateTableAssignOptUuidVar
			UuidGen implMSSqlUpdateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlUpdateTableAssignReqBlobVar
			BoolDef implMSSqlUpdateTableAssignReqBoolVar
			EnumDef implMSSqlUpdateTableAssignReqEnumVar
			Int16Def implMSSqlUpdateTableAssignReqInt16Var
			Int32Def implMSSqlUpdateTableAssignReqInt32Var
			Int64Def implMSSqlUpdateTableAssignReqInt64Var
			UInt16Def implMSSqlUpdateTableAssignReqUInt16Var
			UInt32Def implMSSqlUpdateTableAssignReqUInt32Var
			UInt64Def implMSSqlUpdateTableAssignReqUInt64Var
			Id16Gen implMSSqlUpdateTableAssignReqInt16Var
			Id32Gen implMSSqlUpdateTableAssignReqInt32Var
			Id64Gen implMSSqlUpdateTableAssignReqInt64Var
			FloatDef implMSSqlUpdateTableAssignReqFloatVar
			DoubleDef implMSSqlUpdateTableAssignReqDoubleVar
			NumberDef implMSSqlUpdateTableAssignReqNumberVar
			StringDef implMSSqlUpdateTableAssignReqStringVar
			TokenDef implMSSqlUpdateTableAssignReqTokenVar
			NmTokenDef implMSSqlUpdateTableAssignReqNmTokenVar
			NmTokensDef implMSSqlUpdateTableAssignReqNmTokensVar
			TextDef implMSSqlUpdateTableAssignReqTextVar
			DateDef implMSSqlUpdateTableAssignReqDateVar
			TimeDef implMSSqlUpdateTableAssignReqTimeVar
			TimestampDef implMSSqlUpdateTableAssignReqTimestampVar
			TZDateDef implMSSqlUpdateTableAssignReqTZDateVar
			TZTimeDef implMSSqlUpdateTableAssignReqTZTimeVar
			TZTimestampDef implMSSqlUpdateTableAssignReqTZTimestampVar
			UuidDef implMSSqlUpdateTableAssignReqUuidVar
			UuidGen implMSSqlUpdateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqBlobVar">
				stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqBoolVar">
				stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqEnumVar">
				stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqInt16Var">
				stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqInt32Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqInt64Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqUInt16Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqUInt32Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqUInt64Var">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqFloatVar">
				stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqDoubleVar">
				stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqNumberVar">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqStringVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqNmTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqNmTokensVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqTextVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqTZDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqTZTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqTZTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignReqUuidVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleDoUpdate">
			String sql =
					"UPDATE " + schema.getLowerDbSchemaName() + "..$DbTableName$ "
				+	"SET "$popto Table iterate Columns( each implMSSqlUpdateTableValuesVarComma last implMSSqlUpdateTableValuesVar )
$$switch HasSuperClassRelation no implUpdateTableOldStyleOptSetClause default empty$$switch HasSuperClassRelation no implUpdateTableSqlFragUpdateRevision default empty$
				+	" WHERE "
$reference PrimaryKeyIndex iterate Columns( first implMSSqlUpdateIndexColumnWhereFragValuesVar each implMSSqlUpdateIndexColumnWhereAndFragValuesVar )$$switch HasSuperClassRelation no implMSSqlUpdateTableSqlFragWhereAndRevision default empty$;
			if( stmtUpdateByPKey == null ) {
				stmtUpdateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
$popto Table iterate Columns( each implMSSqlUpdateTableBindVar )$$switch HasSuperClassRelation no implMSSqlUpdateTableBindOptAuditColumns default empty$$switch HasSuperClassRelation no implMSSqlUpdateTableBindUpdatedRevision default empty$$reference PrimaryKeyIndex iterate Columns( each implMSSqlUpdateTableBindVar )$$switch HasSuperClassRelation no implMSSqlUpdateTableBindOldRevision default empty$;
			int rowsAffected = stmtUpdateByPKey.executeUpdate();
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by update, not " + rowsAffected );
			}$switch HasSuperClassRelation no implMSSqlUpdateSetRevision default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleOptSetClause"
		>$switch HasAuditColumns yes implUpdateTableOldStyleSetClause default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleSetClause"> + ", "
				+		"updatedby = ?, "
				+		"updatedat = sysdatetime() "</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlUpdateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implMSSqlUpdateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlUpdateTableBindAuditColumns">
			stmtUpdateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOldRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindUpdatedRevision">
			stmtUpdateByPKey.setInt( argIdx++, newRevision );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindClassCode">
			stmtUpdateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindConstClassCode">
			stmtUpdateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesVarComma"
		>$implMSSqlUpdateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlUpdateTableValuesGenericVar
			BoolDef implMSSqlUpdateTableValuesGenericVar
			EnumDef implMSSqlUpdateTableValuesGenericVar
			Int16Def implMSSqlUpdateTableValuesGenericVar
			Int32Def implMSSqlUpdateTableValuesGenericVar
			Int64Def implMSSqlUpdateTableValuesGenericVar
			UInt16Def implMSSqlUpdateTableValuesGenericVar
			UInt32Def implMSSqlUpdateTableValuesGenericVar
			UInt64Def implMSSqlUpdateTableValuesGenericVar
			Id16Gen implMSSqlUpdateTableValuesGenericVar
			Id32Gen implMSSqlUpdateTableValuesGenericVar
			Id64Gen implMSSqlUpdateTableValuesGenericVar
			FloatDef implMSSqlUpdateTableValuesGenericVar
			DoubleDef implMSSqlUpdateTableValuesGenericVar
			NumberDef implMSSqlUpdateTableValuesGenericVar
			StringDef implMSSqlUpdateTableValuesGenericVar
			TokenDef implMSSqlUpdateTableValuesGenericVar
			NmTokenDef implMSSqlUpdateTableValuesGenericVar
			NmTokensDef implMSSqlUpdateTableValuesGenericVar
			TextDef implMSSqlUpdateTableValuesGenericVar
			DateDef implMSSqlUpdateTableValuesDateVar
			TimeDef implMSSqlUpdateTableValuesTimeVar
			TimestampDef implMSSqlUpdateTableValuesTimestampVar
			TZDateDef implMSSqlUpdateTableValuesTZDateVar
			TZTimeDef implMSSqlUpdateTableValuesTZTimeVar
			TZTimestampDef implMSSqlUpdateTableValuesTZTimestampVar
			UuidDef implMSSqlUpdateTableValuesGenericVar
			UuidGen implMSSqlUpdateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesGenericVar">
				+		"$lower DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesFloatVar">
				+		"$lower DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesTextVar">
				+		"$lower DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesDateVar">
				+		"$lower DbColumnName$ = convert( date, ?, 112 )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesTimeVar">
				+		"$lower DbColumnName$ = convert( time, ?, 108 )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesTimestampVar">
				+		"$lower DbColumnName$ = convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesTZDateVar">
				+		"$lower DbColumnName$ = convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesTZTimeVar">
				+		"$lower DbColumnName$ = convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableValuesTZTimestampVar">
				+		"$lower DbColumnName$ = convert( datetime2, ? )"</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindVarComma"
		>$implMSSqlUpdateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindVar"
		>$switch IsNullable yes implMSSqlUpdateTableBindOptVar
			default implMSSqlUpdateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlUpdateTableBindOptBlobVar
			BoolDef implMSSqlUpdateTableBindOptBoolVar
			EnumDef implMSSqlUpdateTableBindOptEnumVar
			Int16Def implMSSqlUpdateTableBindOptInt16Var
			Int32Def implMSSqlUpdateTableBindOptInt32Var
			Int64Def implMSSqlUpdateTableBindOptInt64Var
			UInt16Def implMSSqlUpdateTableBindOptUInt16Var
			UInt32Def implMSSqlUpdateTableBindOptUInt32Var
			UInt64Def implMSSqlUpdateTableBindOptUInt64Var
			Id16Gen implMSSqlUpdateTableBindOptInt16Var
			Id32Gen implMSSqlUpdateTableBindOptInt32Var
			Id64Gen implMSSqlUpdateTableBindOptInt64Var
			FloatDef implMSSqlUpdateTableBindOptFloatVar
			DoubleDef implMSSqlUpdateTableBindOptDoubleVar
			NumberDef implMSSqlUpdateTableBindOptNumberVar
			StringDef implMSSqlUpdateTableBindOptStringVar
			TokenDef implMSSqlUpdateTableBindOptTokenVar
			NmTokenDef implMSSqlUpdateTableBindOptNmTokenVar
			NmTokensDef implMSSqlUpdateTableBindOptNmTokensVar
			TextDef implMSSqlUpdateTableBindOptTextVar
			DateDef implMSSqlUpdateTableBindOptDateVar
			TimeDef implMSSqlUpdateTableBindOptTimeVar
			TimestampDef implMSSqlUpdateTableBindOptTimestampVar
			TZDateDef implMSSqlUpdateTableBindOptTZDateVar
			TZTimeDef implMSSqlUpdateTableBindOptTZTimeVar
			TZTimestampDef implMSSqlUpdateTableBindOptTZTimestampVar
			UuidDef implMSSqlUpdateTableBindOptUuidVar
			UuidGen implMSSqlUpdateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlUpdateTableBindReqBlobVar
			BoolDef implMSSqlUpdateTableBindReqBoolVar
			EnumDef implMSSqlUpdateTableBindReqEnumVar
			Int16Def implMSSqlUpdateTableBindReqInt16Var
			Int32Def implMSSqlUpdateTableBindReqInt32Var
			Int64Def implMSSqlUpdateTableBindReqInt64Var
			UInt16Def implMSSqlUpdateTableBindReqUInt16Var
			UInt32Def implMSSqlUpdateTableBindReqUInt32Var
			UInt64Def implMSSqlUpdateTableBindReqUInt64Var
			Id16Gen implMSSqlUpdateTableBindReqInt16Var
			Id32Gen implMSSqlUpdateTableBindReqInt32Var
			Id64Gen implMSSqlUpdateTableBindReqInt64Var
			FloatDef implMSSqlUpdateTableBindReqFloatVar
			DoubleDef implMSSqlUpdateTableBindReqDoubleVar
			NumberDef implMSSqlUpdateTableBindReqNumberVar
			StringDef implMSSqlUpdateTableBindReqStringVar
			TokenDef implMSSqlUpdateTableBindReqTokenVar
			NmTokenDef implMSSqlUpdateTableBindReqNmTokenVar
			NmTokensDef implMSSqlUpdateTableBindReqNmTokensVar
			TextDef implMSSqlUpdateTableBindReqTextVar
			DateDef implMSSqlUpdateTableBindReqDateVar
			TimeDef implMSSqlUpdateTableBindReqTimeVar
			TimestampDef implMSSqlUpdateTableBindReqTimestampVar
			TZDateDef implMSSqlUpdateTableBindReqTZDateVar
			TZTimeDef implMSSqlUpdateTableBindReqTZTimeVar
			TZTimestampDef implMSSqlUpdateTableBindReqTZTimestampVar
			UuidDef implMSSqlUpdateTableBindReqUuidVar
			UuidGen implMSSqlUpdateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqBlobVar">
			stmtUpdateByPKey.setBytes( argIdx++, Buff.get$OptionalOrRequired$$Name$() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqBoolVar">
			if( $Name$ ) {
				stmtUpdateByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtUpdateByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtUpdateByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtUpdateByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqEnumVar">
			stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqInt16Var">
			stmtUpdateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqInt32Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqInt64Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqUInt16Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqUInt32Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqUInt64Var">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqFloatVar">
			stmtUpdateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqDoubleVar">
			stmtUpdateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqNumberVar">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqStringVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqNmTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqNmTokensVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqTextVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqTZDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqTZTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqTZTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindReqUuidVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlUpdateSetRevision">
			Buff.setRequiredRevision( newRevision );</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implMSSqlUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implMSSqlUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule GenDef="Atom" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>
	<GenRule GenDef="TableCol" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameLast"
		>$switch HasSuperClassRelation no implMSSqlTableColumnUpdateFragDbNameComma default implMSSqlTableColumnUpdateFragDbNameSpace$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameSpace"
		>$implMSSqlTableColumnUpdateFragDbName$ + " "</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameComma"
		>$implMSSqlTableColumnUpdateFragDbName$ + ", "
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbName"
>				+		"$switch IsNullable yes implMSSqlTableColumnUpdateFragOptDbName
								default implMSSqlTableColumnUpdateFragReqDbName$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragOptDbName"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlTableColumnUpdateFragDbNameOptBlob
			BoolDef implMSSqlTableColumnUpdateFragDbNameOptBool
			EnumDef implMSSqlTableColumnUpdateFragDbNameOptEnum
			Int16Def implMSSqlTableColumnUpdateFragDbNameOptInt16
			Int32Def implMSSqlTableColumnUpdateFragDbNameOptInt32
			Int64Def implMSSqlTableColumnUpdateFragDbNameOptInt64
			UInt16Def implMSSqlTableColumnUpdateFragDbNameOptUInt16
			UInt32Def implMSSqlTableColumnUpdateFragDbNameOptUInt32
			UInt64Def implMSSqlTableColumnUpdateFragDbNameOptUInt64
			Id16Gen implMSSqlTableColumnUpdateFragDbNameOptInt16
			Id32Gen implMSSqlTableColumnUpdateFragDbNameOptInt32
			Id64Gen implMSSqlTableColumnUpdateFragDbNameOptInt64
			FloatDef implMSSqlTableColumnUpdateFragDbNameOptFloat
			DoubleDef implMSSqlTableColumnUpdateFragDbNameOptDouble
			NumberDef implMSSqlTableColumnUpdateFragDbNameOptNumber
			StringDef implMSSqlTableColumnUpdateFragDbNameOptString
			TokenDef implMSSqlTableColumnUpdateFragDbNameOptToken
			NmTokenDef implMSSqlTableColumnUpdateFragDbNameOptNmToken
			NmTokensDef implMSSqlTableColumnUpdateFragDbNameOptNmTokens
			TextDef implMSSqlTableColumnUpdateFragDbNameOptText
			DateDef implMSSqlTableColumnUpdateFragDbNameOptDate
			TimeDef implMSSqlTableColumnUpdateFragDbNameOptTime
			TimestampDef implMSSqlTableColumnUpdateFragDbNameOptTimestamp
			TZDateDef implMSSqlTableColumnUpdateFragDbNameOptTZDate
			TZTimeDef implMSSqlTableColumnUpdateFragDbNameOptTZTime
			TZTimestampDef implMSSqlTableColumnUpdateFragDbNameOptTZTimestamp
			UuidDef implMSSqlTableColumnUpdateFragDbNameOptUuid
			UuidGen implMSSqlTableColumnUpdateFragDbNameOptUuid
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragReqDbName"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlTableColumnUpdateFragDbNameReqBlob
			BoolDef implMSSqlTableColumnUpdateFragDbNameReqBool
			EnumDef implMSSqlTableColumnUpdateFragDbNameReqEnum
			Int16Def implMSSqlTableColumnUpdateFragDbNameReqInt16
			Int32Def implMSSqlTableColumnUpdateFragDbNameReqInt32
			Int64Def implMSSqlTableColumnUpdateFragDbNameReqInt64
			UInt16Def implMSSqlTableColumnUpdateFragDbNameReqUInt16
			UInt32Def implMSSqlTableColumnUpdateFragDbNameReqUInt32
			UInt64Def implMSSqlTableColumnUpdateFragDbNameReqUInt64
			Id16Gen implMSSqlTableColumnUpdateFragDbNameReqInt16
			Id32Gen implMSSqlTableColumnUpdateFragDbNameReqInt32
			Id64Gen implMSSqlTableColumnUpdateFragDbNameReqInt64
			FloatDef implMSSqlTableColumnUpdateFragDbNameReqFloat
			DoubleDef implMSSqlTableColumnUpdateFragDbNameReqDouble
			NumberDef implMSSqlTableColumnUpdateFragDbNameReqNumber
			StringDef implMSSqlTableColumnUpdateFragDbNameReqString
			TokenDef implMSSqlTableColumnUpdateFragDbNameReqToken
			NmTokenDef implMSSqlTableColumnUpdateFragDbNameReqNmToken
			NmTokensDef implMSSqlTableColumnUpdateFragDbNameReqNmTokens
			TextDef implMSSqlTableColumnUpdateFragDbNameReqText
			DateDef implMSSqlTableColumnUpdateFragDbNameReqDate
			TimeDef implMSSqlTableColumnUpdateFragDbNameReqTime
			TimestampDef implMSSqlTableColumnUpdateFragDbNameReqTimestamp
			TZDateDef implMSSqlTableColumnUpdateFragDbNameReqTZDate
			TZTimeDef implMSSqlTableColumnUpdateFragDbNameReqTZTime
			TZTimestampDef implMSSqlTableColumnUpdateFragDbNameReqTZTimestamp
			UuidDef implMSSqlTableColumnUpdateFragDbNameReqUuid
			UuidGen implMSSqlTableColumnUpdateFragDbNameReqUuid
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptBlob"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getBlobString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptBool"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getBoolString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptEnum"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getInt16String( (short)$ColumnName$.ordinal() ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptInt16"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptInt32"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptInt64"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptUInt16"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getUInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptUInt32"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getUInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptUInt64"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getUInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptFloat"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getFloatString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptDouble"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getDoubleString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptNumber"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getNumberString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptString"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptToken"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptNmToken"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptNmTokens"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptText"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptDate"
		>$lower DbColumnName$ = convert( date, " + ( ( $ColumnName$ != null )
									?	$SchemaName$MSSqlSchema.getDateString( $ColumnName$ )
									:	"null" )
					+			", 112 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptTime"
		>$lower DbColumnName$ = convert( time, " + ( ( $ColumnName$ != null )
									?	$SchemaName$MSSqlSchema.getTimeString( $ColumnName$ )
									:	"null" )
					+			", 108 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptTimestamp"
		>$lower DbColumnName$ = convert( datetime2, " + ( ( $ColumnName$ != null )
									?	$SchemaName$MSSqlSchema.getTimestampString( $ColumnName$ )
									:	"null" )
					+			", 120 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptTZDate"
		>$lower DbColumnName$ = convert( datetime2, " + ( ( $ColumnName$ != null )
									?	$SchemaName$MSSqlSchema.getTZDateString( $ColumnName$ )
									:	"null" )
					+			", 120 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptTZTime"
		>$lower DbColumnName$ = convert( datetime2, " + ( ( $ColumnName$ != null )
									?	$SchemaName$MSSqlSchema.getTZTimeString( $ColumnName$ )
									:	"null" )
					+			", 120 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptTZTimestamp"
		>$lower DbColumnName$ = convert( datetime2, " + ( ( $ColumnName$ != null )
									?	$SchemaName$MSSqlSchema.getTZTimestampString( $ColumnName$ )
									:	"null" )
					+			", 120 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameOptUuid"
		>$lower DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$.toString() ) : "null" )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqBlob"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getBlobString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqBool"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getBoolString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqEnum"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getInt16String( (short)$ColumnName$.ordinal() )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqInt16"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqInt32"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqInt64"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqUInt16"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getUInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqUInt32"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getUInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqUInt64"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getUInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqFloat"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getFloatString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqDouble"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getDoubleString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqNumber"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getNumberString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqString"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqToken"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqNmToken"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqNmTokens"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqText"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqDate"
		>$lower DbColumnName$ = convert( date, " + $SchemaName$MSSqlSchema.getDateString( $ColumnName$ ) + ", 112 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqTime"
		>$lower DbColumnName$ = convert( time, " + $SchemaName$MSSqlSchema.getTimeString( $ColumnName$ ) + ", 108 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqTimestamp"
		>$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTimestampString( $ColumnName$ ) + ", 120 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqTZDate"
		>$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTZDateString( $ColumnName$ ) + ", 120 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqTZTime"
		>$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTZTimeString( $ColumnName$ ) + ", 120 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqTZTimestamp"
		>$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTZTimestampString( $ColumnName$ ) + ", 120 ) "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlTableColumnUpdateFragDbNameReqUuid"
		>$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $ColumnName$.toString() )</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlUpdateTablePassReadArg"
>				$reference Column Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implMSSqlUpdateTablePassReadArgComma"
		>$implMSSqlUpdateTablePassReadArg$,
</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlUpdateIndexColumnWhereAndFragValuesVar">
				+	"AND "
$implMSSqlUpdateIndexColumnWhereFragValuesVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlUpdateIndexColumnWhereFragValuesVar"
>				+		"$lower DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlUpdateIndexColumnWhereAndFragBindVar">
				+	"AND "
$implMSSqlUpdateIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlUpdateIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implMSSqlUpdateIndexColumnWhereFragBindOptVar
			default implMSSqlUpdateIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlUpdateIndexColumnWhereFragBindOptBlobVar
			BoolDef implMSSqlUpdateIndexColumnWhereFragBindOptBoolVar
			EnumDef implMSSqlUpdateIndexColumnWhereFragBindOptEnumVar
			Int16Def implMSSqlUpdateIndexColumnWhereFragBindOptInt16Var
			Int32Def implMSSqlUpdateIndexColumnWhereFragBindOptInt32Var
			Int64Def implMSSqlUpdateIndexColumnWhereFragBindOptInt64Var
			UInt16Def implMSSqlUpdateIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implMSSqlUpdateIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implMSSqlUpdateIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implMSSqlUpdateIndexColumnWhereFragBindOptInt16Var
			Id32Gen implMSSqlUpdateIndexColumnWhereFragBindOptInt32Var
			Id64Gen implMSSqlUpdateIndexColumnWhereFragBindOptInt64Var
			FloatDef implMSSqlUpdateIndexColumnWhereFragBindOptFloatVar
			DoubleDef implMSSqlUpdateIndexColumnWhereFragBindOptDoubleVar
			NumberDef implMSSqlUpdateIndexColumnWhereFragBindOptNumberVar
			StringDef implMSSqlUpdateIndexColumnWhereFragBindOptStringVar
			TokenDef implMSSqlUpdateIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implMSSqlUpdateIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implMSSqlUpdateIndexColumnWhereFragBindOptNmTokensVar
			TextDef implMSSqlUpdateIndexColumnWhereFragBindOptTextVar
			DateDef implMSSqlUpdateIndexColumnWhereFragBindOptDateVar
			TimeDef implMSSqlUpdateIndexColumnWhereFragBindOptTimeVar
			TimestampDef implMSSqlUpdateIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implMSSqlUpdateIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implMSSqlUpdateIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implMSSqlUpdateIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implMSSqlUpdateIndexColumnWhereFragBindOptUuidVar
			UuidGen implMSSqlUpdateIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlUpdateIndexColumnWhereFragBindReqBlobVar
			BoolDef implMSSqlUpdateIndexColumnWhereFragBindReqBoolVar
			EnumDef implMSSqlUpdateIndexColumnWhereFragBindReqEnumVar
			Int16Def implMSSqlUpdateIndexColumnWhereFragBindReqInt16Var
			Int32Def implMSSqlUpdateIndexColumnWhereFragBindReqInt32Var
			Int64Def implMSSqlUpdateIndexColumnWhereFragBindReqInt64Var
			UInt16Def implMSSqlUpdateIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implMSSqlUpdateIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implMSSqlUpdateIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implMSSqlUpdateIndexColumnWhereFragBindReqInt16Var
			Id32Gen implMSSqlUpdateIndexColumnWhereFragBindReqInt32Var
			Id64Gen implMSSqlUpdateIndexColumnWhereFragBindReqInt64Var
			FloatDef implMSSqlUpdateIndexColumnWhereFragBindReqFloatVar
			DoubleDef implMSSqlUpdateIndexColumnWhereFragBindReqDoubleVar
			NumberDef implMSSqlUpdateIndexColumnWhereFragBindReqNumberVar
			StringDef implMSSqlUpdateIndexColumnWhereFragBindReqStringVar
			TokenDef implMSSqlUpdateIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implMSSqlUpdateIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implMSSqlUpdateIndexColumnWhereFragBindReqNmTokensVar
			TextDef implMSSqlUpdateIndexColumnWhereFragBindReqTextVar
			DateDef implMSSqlUpdateIndexColumnWhereFragBindReqDateVar
			TimeDef implMSSqlUpdateIndexColumnWhereFragBindReqTimeVar
			TimestampDef implMSSqlUpdateIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implMSSqlUpdateIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implMSSqlUpdateIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implMSSqlUpdateIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implMSSqlUpdateIndexColumnWhereFragBindReqUuidVar
			UuidGen implMSSqlUpdateIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqBlobVar"
>				+		"$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getBlobString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptBlobVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getBlobString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqBoolVar"
>				+		( $Name$ ? "$lower DbColumnName$ = 'Y' " : "$lower DbColumnName$ = 'N' " )</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptBoolVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null " :
							( $Name$ ? "'Y', " : "'N', " ) )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqEnumVar"
>				+		"$lower DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptEnumVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqInt16Var"
>				+		"$lower DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptInt16Var"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqInt32Var"
>				+		"$lower DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptInt32Var"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqInt64Var"
>				+		"$lower DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptInt64Var"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqUInt16Var"
>				+		"$lower DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptUInt16Var"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqUInt32Var"
>				+		"$lower DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptUInt32Var"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqUInt64Var"
>				+		"$lower DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptUInt64Var"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqFloatVar"
>				+		"$lower DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptFloatVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqDoubleVar"
>				+		"$lower DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptDoubleVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqNumberVar"
>				+		"$lower DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptNumberVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqStringVar"
>				+		"$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptStringVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqTokenVar"
>				+		"$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptTokenVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqNmTokenVar"
>				+		"$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptNmTokenVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqNmTokensVar"
>				+		"$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptNmTokensVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqTextVar"
>				+		"$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptTextVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqDateVar"
>				+		"convert( date, " + $SchemaName$MSSqlSchema.getDateString( $Name$ ) + ", 112 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptDateVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = convert( date, " + $SchemaName$MSSqlSchema.getDateString( $Name$ ) + ", 112 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqTimeVar"
>				+		"convert( time, " + $SchemaName$MSSqlSchema.getTimeString( $Name$ ) + ", 108 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptTimeVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = convert( time, " + $SchemaName$MSSqlSchema.getTimeString( $Name$ ) + ", 108 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqTimestampVar"
>				+		"convert( datetime2, " + $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) + ", 120 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) + ", 120 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqTZDateVar"
>				+		"convert( datetime2, " + $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) + ", 120 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptTZDateVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) + ", 120 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqTZTimeVar"
>				+		"convert( datetime2, " + $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) + ", 120 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptTZTimeVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) + ", 120 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqTZTimestampVar"
>				+		"convert( datetime2, " + $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) + ", 120 ) "
</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptTZTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = convert( datetime2, " + $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) + ", 120 ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindReqUuidVar"
>				+		"$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$.toString() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlUpdateIndexColumnWhereFragBindOptUuidVar"
>				+		( ( $Name$ == null ) ? "$lower DbColumnName$ is null "
							: "$lower DbColumnName$ = " + $SchemaName$MSSqlSchema.getQuotedString( $Name$.toString() ) + " " )</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTableSqlFragWhereAndRevision">
				+	"AND "
				+		"revision = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlDeleteTableCopyColumn"
		>$reference Column implMSSqlCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTable">
	public void delete$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "delete$TableName$";
		try {
			Connection cnx = schema.getCnx();
$reference PrimaryKeyIndex iterate Columns( each implMSSqlDeleteTableCopyColumn empty empty )$
			String sql = "exec $sp_delete_dbtablename$ ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$$implMSSqlCommaArgRevision$;
			if( stmtDeleteByPKey == null ) {
				stmtDeleteByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference PrimaryKeyIndex iterate Columns( each implMSSqlDeleteTableBindVar )$$implMSSqlDeleteTableBindRevision$;$implDeleteTableExecuteAndAnalyzeResults$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
$implMSSqlDeleteTableByInheritedIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTableExecuteAndAnalyzeResults">
			Object stuff = null;
			boolean moreResults = stmtDeleteByPKey.execute();
			while( stuff == null ) {
				try {
					moreResults = stmtDeleteByPKey.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						stuff = stmtDeleteByPKey.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtDeleteByPKey.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlDeleteTableByInheritedIndexes"
		>$switch HasSuperClassRelation yes implMSSqlDeleteTableByInhIndexes default implMSSqlDeleteTableByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlDeleteTableByInhIndexes"
		>$iterate Index( each implMSSqlDeleteTableByNonPrimaryIndex empty empty )$$reference SuperClassRelation reference ToTable implMSSqlDeleteTableByInheritedIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlDeleteTableByBaseIndexes"
		>$iterate Index( each implMSSqlDeleteTableBySpecialIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implMSSqlDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlDeleteTableBySpecialIndex"
		>$switch IsPrimaryIndex yes implMSSqlDeleteTableByPrimaryIndex default implMSSqlDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlDeleteTableByIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implDeleteTableByIndexTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$By$Suffix$Key argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implMSSqlDeleteCommaPassArgColumn )$ );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implMSSqlDeleteTableByPrimaryIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		try {$implDeleteTableByIndexTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$poptop Table reference BaseClass DefSchemaName$$poptop Table reference BaseClass TableName$PKey argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implMSSqlDeleteCommaPassArgColumn )$ );
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlDeleteCommaPassArgColumn">,
			argKey.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindRevision">
			stmtDeleteByPKey.setInt( argIdx++, Buff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindVar"
		>$switch IsNullable yes implMSSqlDeleteTableBindOptVar
			default implMSSqlDeleteTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlDeleteTableBindOptBlobVar
			BoolDef implMSSqlDeleteTableBindOptBoolVar
			EnumDef implMSSqlDeleteTableBindOptEnumVar
			Int16Def implMSSqlDeleteTableBindOptInt16Var
			Int32Def implMSSqlDeleteTableBindOptInt32Var
			Int64Def implMSSqlDeleteTableBindOptInt64Var
			UInt16Def implMSSqlDeleteTableBindOptUInt16Var
			UInt32Def implMSSqlDeleteTableBindOptUInt32Var
			UInt64Def implMSSqlDeleteTableBindOptUInt64Var
			Id16Gen implMSSqlDeleteTableBindOptInt16Var
			Id32Gen implMSSqlDeleteTableBindOptInt32Var
			Id64Gen implMSSqlDeleteTableBindOptInt64Var
			FloatDef implMSSqlDeleteTableBindOptFloatVar
			DoubleDef implMSSqlDeleteTableBindOptDoubleVar
			NumberDef implMSSqlDeleteTableBindOptNumberVar
			StringDef implMSSqlDeleteTableBindOptStringVar
			TokenDef implMSSqlDeleteTableBindOptTokenVar
			NmTokenDef implMSSqlDeleteTableBindOptNmTokenVar
			NmTokensDef implMSSqlDeleteTableBindOptNmTokensVar
			TextDef implMSSqlDeleteTableBindOptTextVar
			DateDef implMSSqlDeleteTableBindOptDateVar
			TimeDef implMSSqlDeleteTableBindOptTimeVar
			TimestampDef implMSSqlDeleteTableBindOptTimestampVar
			TZDateDef implMSSqlDeleteTableBindOptTZDateVar
			TZTimeDef implMSSqlDeleteTableBindOptTZTimeVar
			TZTimestampDef implMSSqlDeleteTableBindOptTZTimestampVar
			UuidDef implMSSqlDeleteTableBindOptUuidVar
			UuidGen implMSSqlDeleteTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlDeleteTableBindReqBlobVar
			BoolDef implMSSqlDeleteTableBindReqBoolVar
			EnumDef implMSSqlDeleteTableBindReqEnumVar
			Int16Def implMSSqlDeleteTableBindReqInt16Var
			Int32Def implMSSqlDeleteTableBindReqInt32Var
			Int64Def implMSSqlDeleteTableBindReqInt64Var
			UInt16Def implMSSqlDeleteTableBindReqUInt16Var
			UInt32Def implMSSqlDeleteTableBindReqUInt32Var
			UInt64Def implMSSqlDeleteTableBindReqUInt64Var
			Id16Gen implMSSqlDeleteTableBindReqInt16Var
			Id32Gen implMSSqlDeleteTableBindReqInt32Var
			Id64Gen implMSSqlDeleteTableBindReqInt64Var
			FloatDef implMSSqlDeleteTableBindReqFloatVar
			DoubleDef implMSSqlDeleteTableBindReqDoubleVar
			NumberDef implMSSqlDeleteTableBindReqNumberVar
			StringDef implMSSqlDeleteTableBindReqStringVar
			TokenDef implMSSqlDeleteTableBindReqTokenVar
			NmTokenDef implMSSqlDeleteTableBindReqNmTokenVar
			NmTokensDef implMSSqlDeleteTableBindReqNmTokensVar
			TextDef implMSSqlDeleteTableBindReqTextVar
			DateDef implMSSqlDeleteTableBindReqDateVar
			TimeDef implMSSqlDeleteTableBindReqTimeVar
			TimestampDef implMSSqlDeleteTableBindReqTimestampVar
			TZDateDef implMSSqlDeleteTableBindReqTZDateVar
			TZTimeDef implMSSqlDeleteTableBindReqTZTimeVar
			TZTimestampDef implMSSqlDeleteTableBindReqTZTimestampVar
			UuidDef implMSSqlDeleteTableBindReqUuidVar
			UuidGen implMSSqlDeleteTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqBlobVar">
			stmtDeleteByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqBoolVar">
			if( $Name$ ) {
				stmtDeleteByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtDeleteByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanvValue() ) {
					stmtDeleteByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtDeleteByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqEnumVar">
			stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqInt16Var">
			stmtDeleteByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqInt32Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqInt64Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqUInt16Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqUInt32Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqUInt64Var">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqFloatVar">
			stmtDeleteByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqDoubleVar">
			stmtDeleteByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqNumberVar">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqStringVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqNmTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqNmTokensVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqTextVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqTZDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqTZTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqTZTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindReqUuidVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implCommaColumnArg">,
		$implColumnArg$</GenRule>

	<GenRule GenDef="TableCol" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="Atom" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implColumnArg"
		>$reference Column implColumnArg$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTable">
	public $DefSchemaName$$TableName$Buff[] readAll$TableName$( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAll$TableName$";
		ResultSet resultSet = null;
		Statement stmt = null;
		try {$implReadAllTableTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableTryBody">
			Connection cnx = schema.getCnx();
			String sql = "{ call $sp_read_dbtablename_all$ ?, ?, ?, ?, ? }";
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			int argIdx = 1
			stmt.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmt.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmt.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmt.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmt.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmt.executeQuery( sql );$implReadAllTableExtractResultSet$
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			int idx = 0;
			while( ( resultSet != null ) &amp;&amp; resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();
				int idxcol = 1;
$popto Table switch HasClassCode yes implMSSqlTableColumnFetchClassCode default empty$$popto Table iterate Columns( each implMSSqlTableColumnFetchColumn )
$				buff.setRequiredRevision( resultSet.getInt( idxcol ) );
				buffList.add( buff );
				idx ++;
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$SchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableExtractResultSet">
			boolean moreResults = true;
			resultSet = null;
			while( resultSet == null ) {
				try {
					moreResults = stmt.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						resultSet = stmt.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmt.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Index" Name="implDeleteTableByIndexTryBody">
			Connection cnx = schema.getCnx();
			String sql = "exec $sp_delete_dbtablename_by_suffix$ ?, ?, ?, ?, ?"$iterate Columns( each implMSSqlIndexColumnCommaArgValueVar )$;
			if( stmtDeleteBy$Suffix$== null ) {
				stmtDeleteBy$Suffix$ = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implMSSqlDeleteBySuffixAssignVar )$
			Object stuff = null;
			boolean moreResults = stmtDeleteBy$Suffix$.execute();
			while( stuff == null ) {
				try {
					moreResults = stmtDeleteBy$Suffix$.getMoreResults();
				}
				catch( SQLException e ) {
					throw new CFLibDbException( getClass(),
						S_ProcName,
						e );
				}
				if( moreResults ) {
					try {
						stuff = stmtDeleteBy$Suffix$.getResultSet();
					}
					catch( SQLException e ) {
					}
				}
				else if( -1 == stmtDeleteBy$Suffix$.getUpdateCount() ) {
					break;
				}
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignVar"
		>$switch IsNullable yes implMSSqlDeleteBySuffixAssignOptVar
			default implMSSqlDeleteBySuffixAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlDeleteBySuffixAssignOptBlobVar
			BoolDef implMSSqlDeleteBySuffixAssignOptBoolVar
			EnumDef implMSSqlDeleteBySuffixAssignOptEnumVar
			Int16Def implMSSqlDeleteBySuffixAssignOptInt16Var
			Int32Def implMSSqlDeleteBySuffixAssignOptInt32Var
			Int64Def implMSSqlDeleteBySuffixAssignOptInt64Var
			UInt16Def implMSSqlDeleteBySuffixAssignOptUInt16Var
			UInt32Def implMSSqlDeleteBySuffixAssignOptUInt32Var
			UInt64Def implMSSqlDeleteBySuffixAssignOptUInt64Var
			Id16Gen implMSSqlDeleteBySuffixAssignOptInt16Var
			Id32Gen implMSSqlDeleteBySuffixAssignOptInt32Var
			Id64Gen implMSSqlDeleteBySuffixAssignOptInt64Var
			FloatDef implMSSqlDeleteBySuffixAssignOptFloatVar
			DoubleDef implMSSqlDeleteBySuffixAssignOptDoubleVar
			NumberDef implMSSqlDeleteBySuffixAssignOptNumberVar
			StringDef implMSSqlDeleteBySuffixAssignOptStringVar
			TokenDef implMSSqlDeleteBySuffixAssignOptTokenVar
			NmTokenDef implMSSqlDeleteBySuffixAssignOptNmTokenVar
			NmTokensDef implMSSqlDeleteBySuffixAssignOptNmTokensVar
			TextDef implMSSqlDeleteBySuffixAssignOptTextVar
			DateDef implMSSqlDeleteBySuffixAssignOptDateVar
			TimeDef implMSSqlDeleteBySuffixAssignOptTimeVar
			TimestampDef implMSSqlDeleteBySuffixAssignOptTimestampVar
			TZDateDef implMSSqlDeleteBySuffixAssignOptTZDateVar
			TZTimeDef implMSSqlDeleteBySuffixAssignOptTZTimeVar
			TZTimestampDef implMSSqlDeleteBySuffixAssignOptTZTimestampVar
			UuidDef implMSSqlDeleteBySuffixAssignOptUuidVar
			UuidGen implMSSqlDeleteBySuffixAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implMSSqlDeleteBySuffixAssignReqBlobVar
			BoolDef implMSSqlDeleteBySuffixAssignReqBoolVar
			EnumDef implMSSqlDeleteBySuffixAssignReqEnumVar
			Int16Def implMSSqlDeleteBySuffixAssignReqInt16Var
			Int32Def implMSSqlDeleteBySuffixAssignReqInt32Var
			Int64Def implMSSqlDeleteBySuffixAssignReqInt64Var
			UInt16Def implMSSqlDeleteBySuffixAssignReqUInt16Var
			UInt32Def implMSSqlDeleteBySuffixAssignReqUInt32Var
			UInt64Def implMSSqlDeleteBySuffixAssignReqUInt64Var
			Id16Gen implMSSqlDeleteBySuffixAssignReqInt16Var
			Id32Gen implMSSqlDeleteBySuffixAssignReqInt32Var
			Id64Gen implMSSqlDeleteBySuffixAssignReqInt64Var
			FloatDef implMSSqlDeleteBySuffixAssignReqFloatVar
			DoubleDef implMSSqlDeleteBySuffixAssignReqDoubleVar
			NumberDef implMSSqlDeleteBySuffixAssignReqNumberVar
			StringDef implMSSqlDeleteBySuffixAssignReqStringVar
			TokenDef implMSSqlDeleteBySuffixAssignReqTokenVar
			NmTokenDef implMSSqlDeleteBySuffixAssignReqNmTokenVar
			NmTokensDef implMSSqlDeleteBySuffixAssignReqNmTokensVar
			TextDef implMSSqlDeleteBySuffixAssignReqTextVar
			DateDef implMSSqlDeleteBySuffixAssignReqDateVar
			TimeDef implMSSqlDeleteBySuffixAssignReqTimeVar
			TimestampDef implMSSqlDeleteBySuffixAssignReqTimestampVar
			TZDateDef implMSSqlDeleteBySuffixAssignReqTZDateVar
			TZTimeDef implMSSqlDeleteBySuffixAssignReqTZTimeVar
			TZTimestampDef implMSSqlDeleteBySuffixAssignReqTZTimestampVar
			UuidDef implMSSqlDeleteBySuffixAssignReqUuidVar
			UuidGen implMSSqlDeleteBySuffixAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqBlobVar">
			stmtDeleteBy$Suffix$.setBytes( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtDeleteBy$Suffix$.setBytes( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqBoolVar">
			if( arg$Name$ ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtDeleteBy$Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptBoolVar">
			if( arg$Name$ != null ) {
				if( arg$Name$.booleanValue() ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtDeleteBy$Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqEnumVar">
			stmtDeleteBy$Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptEnumVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqInt16Var">
			stmtDeleteBy$Suffix$.setShort( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptInt16Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setShort( argIdx++, arg$Name$.shortValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqInt32Var">
			stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptInt32Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$.intValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqInt64Var">
			stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptInt64Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$.longValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqUInt16Var">
			stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptUInt16Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$.intValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqUInt32Var">
			stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptUInt32Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$.longValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqUInt64Var">
			stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptUInt64Var">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqFloatVar">
			stmtDeleteBy$Suffix$.setFloat( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptFloatVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setFloat( argIdx++, arg$Name$.floatValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqDoubleVar">
			stmtDeleteBy$Suffix$.setDouble( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptDoubleVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setDouble( argIdx++, arg$Name$.doubleValue() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqNumberVar">
			stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptNumberVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqStringVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptStringVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqTokenVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptTokenVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqNmTokenVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptNmTokenVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqNmTokensVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptNmTokensVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqTextVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptTextVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqDateVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptDateVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getDateString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqTimeVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptTimeVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimeString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqTimestampVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptTimestampVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTimestampString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqTZDateVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptTZDateVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZDateString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqTZTimeVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptTZTimeVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimeString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqTZTimestampVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptTZTimestampVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$MSSqlSchema.getTZTimestampString( arg$Name$ ) );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignReqUuidVar">
			stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implMSSqlDeleteBySuffixAssignOptUuidVar">
			if( arg$Name$ != null ) {
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$.toString() );
			}
			else {
				stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

</RuleSet>
