<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus+saxloader"
	Name="libschemaxml/schemaxml/SchemaSaxLdr.hpp"
	Revision="2.13"
	Descr="C++18 XML Command Line Interface common core specification for Schema">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSaxLdrHPlus"
		GenerateOnce="false"
		ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$reference ManufacturingSchema lower PackageName$saxloader"
		SubPackageName="$lower poptop SchemaDef SchemaName$saxloader"
		ExpansionClassName="$SchemaName$SaxLdrHPlus"
		ExpansionKeyName="$SchemaName$SaxLdrHPlus"
		ExpansionFileName="$SchemaName$SaxLdr.hpp"
>#pragma once

// Description: C++18 XML Command Line Interface common core specification for $SchemaName$.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;

namespace $CPlusSecNamespace$ {
	class I$SecSchemaName$ClusterObj;
	class I$SecSchemaName$TenantObj;
	class I$SecSchemaName$SecUserObj;
	class I$SecSchemaName$SecSessionObj;
}

namespace $CPlusNamespace$ {

	class $SchemaName$SaxLoader;

	class $SchemaName$SaxLdr
	{
	protected:
		cflib::ICFLibMessageLog* log;
		$CPlusNamespace$::$SchemaName$SaxLoader* saxLoader;
		std::string* clusterName;
		$CPlusSecNamespace$::I$SecSchemaName$ClusterObj* clusterObj;
		std::string* tenantName;
		$CPlusSecNamespace$::I$SecSchemaName$TenantObj* tenantObj;
		std::string* secUserName;
		$CPlusSecNamespace$::I$SecSchemaName$SecUserObj* secUserObj;
		$CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* secSessionObj;
	public:
		const static std::string CLASS_NAME;
		const static std::string S_SYSTEM;
		const static std::string S_UnhandledException;
$declSchemaSaxLdrConstructor$
$declSchemaSaxLdrSaxLoaderAccessors$
$declSchemaSaxLdrClusterAccessors$
$declSchemaSaxLdrTenantAccessors$
$declSchemaSaxLdrSecUserAccessors$
$declSchemaSaxLdrSecSessionAccessors$
$declSchemaSaxLdrApplyLoaderOptions$
$declSchemaSaxLdrEvalLoaderSegment$
$declSchemaSaxLdrEvalRemaining$
	};
}
</GenFile>

	<GenRule GenDef="Table" Name="includeDefSchemaTablePKey"
		>$switch HasSuperClassRelation yes empty default reallyIncludeDefSchemaTablePKey$</GenRule>

	<GenRule GenDef="Table" Name="reallyIncludeDefSchemaTablePKey">
#include &lt;$lower DefSchemaName$/$DefSchemaName$$TableName$PKey.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeDefSchemaTableBuff">
#include &lt;$lower DefSchemaName$/$DefSchemaName$$TableName$Buff.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeISchemaTableObj">
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$Obj.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeISchemaTableEditObj">
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$EditObj.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="includeISchemaTableTableObj">
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$TableObj.hpp&gt;</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrSaxLoaderAccessors">
		void setSaxLoader( $CPlusNamespace$::$SchemaName$SaxLoader* value );
		$SchemaName$SaxLoader* getSaxLoader();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrClusterAccessors">
		void setClusterName( const std::string&amp; value );
		const std::string&amp; getClusterName() const;
		$CPlusSecNamespace$::I$SecSchemaName$ClusterObj* getClusterObj();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrTenantAccessors">
		void setTenantName( const std::string&amp; value );
		const std::string&amp; getTenantName() const;
		$CPlusSecNamespace$::I$SecSchemaName$TenantObj* getTenantObj();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrSecUserAccessors">
		void setSecUserName( const std::string&amp; value );
		const std::string&amp; getSecUserName() const;
		$CPlusSecNamespace$::I$SecSchemaName$SecUserObj* getSecUserObj();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrSecSessionAccessors">
		$CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* getSecSessionObj();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrConstructor"
			>$declSchemaSaxLdrConstructorVoid$$declSchemaSaxLdrConstructorLog$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrConstructorVoid">
		$SchemaName$SaxLdr();
		virtual ~$SchemaName$SaxLdr();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrConstructorLog">
		$SchemaName$SaxLdr( cflib::ICFLibMessageLog* messageLog );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrEvalRemaining">
		virtual void evaluateRemainingArgs( size_t argc, char* argv[], size_t consumed );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrApplyLoaderOptions">
		static void applyLoaderOptions( $CPlusNamespace$::$SchemaName$SaxLoader* loader, const std::string&amp; loaderOptions );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSaxLdrEvalLoaderSegment">
		static void evalLoaderSegment( $CPlusNamespace$::$SchemaName$SaxLoader* loader, const std::string&amp; evalSegment );
</GenRule>

</RuleSet>
