<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="java+oracle"
	Name="src/SchemaOracleTableTable.java"
	Revision="2.13"
	Descr="Java 11 Oracle Jdbc DbIO implementation for Table">

	<GenRule GenDef="IndexCol" Name="DbColumnName"
		>$reference Column DbColumnName$</GenRule>

	<GenFile GenDef="Table" Name="fileSchemaOracleTableTableJava"
			GenerateOnce="false"
			ModuleName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$Oracle"
		SourceBundle="java"
		BasePackageName="$reference ManufacturingSchema lower PackageName$oracle.src"
		SubPackageName="$reference ManufacturingSchema lower JavaPackage$.$reference ManufacturingSchema SchemaName$Oracle"
		ExpansionClassName="$SchemaName$Oracle$TableName$TableJava"
		ExpansionKeyName="$SchemaName$Oracle$TableName$TableJava"
		ExpansionFileName="$SchemaName$Oracle$TableName$Table.java"
>$OracleTableTablePreamble$
public class $SchemaName$Oracle$TableName$Table
	implements I$SchemaName$$TableName$Table
{
	private $SchemaName$OracleSchema schema;$declOracleTableTablePStatements$$iterate DispensedId16Generators( each declOracleTableIdGenPStatements empty empty )$$iterate DispensedId32Generators( each declOracleTableIdGenPStatements empty empty )$$iterate DispensedId64Generators( each declOracleTableIdGenPStatements empty empty )$$JavaOracleTableMembers$
$implConstructOracleTableTable$$iterate DispensedId16Generators( each implNextIdGen empty empty )$$iterate DispensedId32Generators( each implNextIdGen empty empty )$$iterate DispensedId64Generators( each implNextIdGen empty empty )$$implCreateTable$$declSqlSelectTableDistinctClassCode$$declSqlSelectTableBuff$$implUnpackResultSetToBuff$$implReadTableDerivedByPKey$$implLockTableDerivedByPKey$$implReadAllTableDerived$$implReadTableDerivedByIndexes$$implReadTableBuffByPKey$$implLockTableBuffByPKey$$implReadAllTableBuff$$switch PageData yes implPageAllTableBuff default empty$$implReadTableBuffByIndexes$$switch PageData yes implPageTableBuffByIndexes default empty$$implUpdateTable$$implDeleteTable$$switch HasChain yes implOracleMoveUpTableBuff default empty$$switch HasChain yes implOracleMoveDownTableBuff default empty$$implOracleTableReleasePreparedStatements$$iterate ServerMethods( each implServerMethod empty empty )$$JavaOracleTableImplementation$}
</GenFile>

	<GenRule GenDef="Table" Name="implPageTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implPageTableBuffByInhIndexes default implPageTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implPageTableBuffByIndexes$$iterate Index( each implPageTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implPageTableBuffByBaseIndexes"
		>$iterate Index( each implPageTableBuffByIndex )$</GenRule>

	<GenRule GenDef="Index" Name="PageData"
		>$poptop Table PageData$</GenRule>

	<GenRule GenDef="Table" Name="implPageAllTableBuff">
	/**
	 *	Read a page of all the specific $TableName$ buffer instances.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@return All the specific $TableName$ instances in the database accessible for the Authorization.
	 */
	public $DefSchemaName$$TableName$Buff[] pageAllBuff( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageAllBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtPageAllBuff = null;
		try {
			$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = null;
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			stmtPageAllBuff = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$poptop Table sp_page_dbtablename_all$( ?, ?, ?, ?, ?, ?$reference BaseClass reference PrimaryKeyIndex iterate Columns( each emitCommaQuestion )$ ); end;" );
			int argIdx = 1;
			stmtPageAllBuff.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtPageAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtPageAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtPageAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOraclePageAllTableAssignOptPriorCol )$
			stmtPageAllBuff.execute();
			resultSet = (ResultSet)stmtPageAllBuff.getObject( 1 );
			if( resultSet != null ) {
				try {
					while( resultSet.next() ) {
						buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
						buffList.add( buff );
					}
				}
				catch( SQLException e ) {
					// Oracle may return an invalid resultSet if the rowset is empty
				}
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtPageAllBuff != null ) {
				try {
					stmtPageAllBuff.close();
				}
				catch( SQLException e ) {
				}
				stmtPageAllBuff = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="emitCommaQuestion"
		>, ?</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptPriorCol"
		>$switch BaseModelAtomClass
			BlobDef implOraclePageAllTableAssignOptBlobPriorCol
			BoolDef implOraclePageAllTableAssignOptBoolPriorCol
			EnumDef implOraclePageAllTableAssignOptEnumPriorCol
			Int16Def implOraclePageAllTableAssignOptInt16PriorCol
			Int32Def implOraclePageAllTableAssignOptInt32PriorCol
			Int64Def implOraclePageAllTableAssignOptInt64PriorCol
			UInt16Def implOraclePageAllTableAssignOptUInt16PriorCol
			UInt32Def implOraclePageAllTableAssignOptUInt32PriorCol
			UInt64Def implOraclePageAllTableAssignOptUInt64PriorCol
			Id16Gen implOraclePageAllTableAssignOptInt16PriorCol
			Id32Gen implOraclePageAllTableAssignOptInt32PriorCol
			Id64Gen implOraclePageAllTableAssignOptInt64PriorCol
			FloatDef implOraclePageAllTableAssignOptFloatPriorCol
			DoubleDef implOraclePageAllTableAssignOptDoublePriorCol
			NumberDef implOraclePageAllTableAssignOptNumberPriorCol
			StringDef implOraclePageAllTableAssignOptStringPriorCol
			TokenDef implOraclePageAllTableAssignOptTokenPriorCol
			NmTokenDef implOraclePageAllTableAssignOptNmTokenPriorCol
			NmTokensDef implOraclePageAllTableAssignOptNmTokensPriorCol
			TextDef implOraclePageAllTableAssignOptTextPriorCol
			DateDef implOraclePageAllTableAssignOptDatePriorCol
			TimeDef implOraclePageAllTableAssignOptTimePriorCol
			TimestampDef implOraclePageAllTableAssignOptTimestampPriorCol
			TZDateDef implOraclePageAllTableAssignOptTZDatePriorCol
			TZTimeDef implOraclePageAllTableAssignOptTZTimePriorCol
			TZTimestampDef implOraclePageAllTableAssignOptTZTimestampPriorCol
			UuidDef implOraclePageAllTableAssignOptUuidPriorCol
			UuidGen implOraclePageAllTableAssignOptUuidPriorCol
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptBlobPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBytes( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptBoolPriorCol">
			if( prior$Name$ != null ) {
				if( prior$Name$.booleanValue() ) {
					stmtPageAllBuff.setString( argIdx++, "Y" );
				}
				else {
					stmtPageAllBuff.setString( argIdx++, "N" );
				}
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptEnumPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setShort( argIdx++, (short)prior$Name$.ordinal() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptInt16PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setShort( argIdx++, prior$Name$.shortValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptInt32PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptInt64PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptUInt16PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptUInt32PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptUInt64PriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptFloatPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setFloat( argIdx++, prior$Name$.floatValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptDoublePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setDouble( argIdx++, prior$Name$.doubleValue() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptNumberPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptStringPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptTokenPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptNmTokenPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptNmTokensPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptTextPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptDatePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$OracleSchema.getDateString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptTimePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptTimestampPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptTZDatePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptTZTimePriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptTZTimestampPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageAllTableAssignOptUuidPriorCol">
			if( prior$Name$ != null ) {
				stmtPageAllBuff.setString( argIdx++, prior$Name$.toString() );
			}
			else {
				stmtPageAllBuff.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByDuplicateIndex">
	/**
	 *	Read a page array of the specific $poptop Table TableName$ buffer instances identified by the duplicate key $Suffix$.
	 *
	 *	@param	Authorization	The session authorization information.$iterate Columns( each implCommentKeyAttr empty empty )$
	 *
	 *	@return An array of derived buffer instances for the specified key, potentially with 0 elements in the set.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	public $DefSchemaName$$poptop Table TableName$Buff[] pageBuffBy$declReadTableSuffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each declCommaColumnArg )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaOptPriorArg )$ )
	{
		final String S_ProcName = "pageBuffBy$Suffix$";
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtPageBuffBy$Suffix$ = null;
		List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
		try {$implPageTableBuffByReqDuplicateIndexTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtPageBuffBy$Suffix$ != null ) {
				try {
					stmtPageBuffBy$Suffix$.close();
				}
				catch( SQLException e ) {
				}
				stmtPageBuffBy$Suffix$ = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implOracleMoveUpTableBuff">
	/**
	 *	Move the specified buffer up in the chain (i.e. to the previous position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffUp( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int revision )
	{
		final String S_ProcName = "moveBuffUp";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtMoveUp = null;
		try {$implMoveUpTableTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtMoveUp != null ) {
				try {
					stmtMoveUp.close();
				}
				catch( SQLException e ) {
				}
				stmtMoveUp = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveUpTableTryBody">
			stmtMoveUp = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$poptop Table sp_moveup_dbtablename$( ?, ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + ", ? ); end;" );
			int argIdx = 1;
			stmtMoveUp.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUp.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveUp.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveUp.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleMoveUpTableAssignVar )$
			stmtMoveUp.setInt( argIdx++, revision );
			stmtMoveUp.execute();
			resultSet = (ResultSet)stmtMoveUp.getObject( 1 );
			if( resultSet == null ) {
				return( null );
			}
			try {
				if( resultSet.next() ) {
					$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
					if( resultSet.next() ) {
						resultSet.last();
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
					}
					return( buff );
				}
				else {
					return( null );
				}
			}
			catch( SQLException e ) {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignVar"
		>$switch IsNullable yes implOracleMoveUpTableAssignOptVar
			default implOracleMoveUpTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleMoveUpTableAssignOptBlobVar
			BoolDef implOracleMoveUpTableAssignOptBoolVar
			EnumDef implOracleMoveUpTableAssignOptEnumVar
			Int16Def implOracleMoveUpTableAssignOptInt16Var
			Int32Def implOracleMoveUpTableAssignOptInt32Var
			Int64Def implOracleMoveUpTableAssignOptInt64Var
			UInt16Def implOracleMoveUpTableAssignOptUInt16Var
			UInt32Def implOracleMoveUpTableAssignOptUInt32Var
			UInt64Def implOracleMoveUpTableAssignOptUInt64Var
			Id16Gen implOracleMoveUpTableAssignOptInt16Var
			Id32Gen implOracleMoveUpTableAssignOptInt32Var
			Id64Gen implOracleMoveUpTableAssignOptInt64Var
			FloatDef implOracleMoveUpTableAssignOptFloatVar
			DoubleDef implOracleMoveUpTableAssignOptDoubleVar
			NumberDef implOracleMoveUpTableAssignOptNumberVar
			StringDef implOracleMoveUpTableAssignOptStringVar
			TokenDef implOracleMoveUpTableAssignOptTokenVar
			NmTokenDef implOracleMoveUpTableAssignOptNmTokenVar
			NmTokensDef implOracleMoveUpTableAssignOptNmTokensVar
			TextDef implOracleMoveUpTableAssignOptTextVar
			DateDef implOracleMoveUpTableAssignOptDateVar
			TimeDef implOracleMoveUpTableAssignOptTimeVar
			TimestampDef implOracleMoveUpTableAssignOptTimestampVar
			TZDateDef implOracleMoveUpTableAssignOptTZDateVar
			TZTimeDef implOracleMoveUpTableAssignOptTZTimeVar
			TZTimestampDef implOracleMoveUpTableAssignOptTZTimestampVar
			UuidDef implOracleMoveUpTableAssignOptUuidVar
			UuidGen implOracleMoveUpTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleMoveUpTableAssignReqBlobVar
			BoolDef implOracleMoveUpTableAssignReqBoolVar
			EnumDef implOracleMoveUpTableAssignReqEnumVar
			Int16Def implOracleMoveUpTableAssignReqInt16Var
			Int32Def implOracleMoveUpTableAssignReqInt32Var
			Int64Def implOracleMoveUpTableAssignReqInt64Var
			UInt16Def implOracleMoveUpTableAssignReqUInt16Var
			UInt32Def implOracleMoveUpTableAssignReqUInt32Var
			UInt64Def implOracleMoveUpTableAssignReqUInt64Var
			Id16Gen implOracleMoveUpTableAssignReqInt16Var
			Id32Gen implOracleMoveUpTableAssignReqInt32Var
			Id64Gen implOracleMoveUpTableAssignReqInt64Var
			FloatDef implOracleMoveUpTableAssignReqFloatVar
			DoubleDef implOracleMoveUpTableAssignReqDoubleVar
			NumberDef implOracleMoveUpTableAssignReqNumberVar
			StringDef implOracleMoveUpTableAssignReqStringVar
			TokenDef implOracleMoveUpTableAssignReqTokenVar
			NmTokenDef implOracleMoveUpTableAssignReqNmTokenVar
			NmTokensDef implOracleMoveUpTableAssignReqNmTokensVar
			TextDef implOracleMoveUpTableAssignReqTextVar
			DateDef implOracleMoveUpTableAssignReqDateVar
			TimeDef implOracleMoveUpTableAssignReqTimeVar
			TimestampDef implOracleMoveUpTableAssignReqTimestampVar
			TZDateDef implOracleMoveUpTableAssignReqTZDateVar
			TZTimeDef implOracleMoveUpTableAssignReqTZTimeVar
			TZTimestampDef implOracleMoveUpTableAssignReqTZTimestampVar
			UuidDef implOracleMoveUpTableAssignReqUuidVar
			UuidGen implOracleMoveUpTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqBlobVar">
			stmtMoveUp.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveUp.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtMoveUp.setString( argIdx++, "Y" );
			}
			else {
				stmtMoveUp.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtMoveUp.setString( argIdx++, "Y" );
				}
				else {
					stmtMoveUp.setString( argIdx++, "N" );
				}
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqEnumVar">
			stmtMoveUp.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveUp.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqInt16Var">
			stmtMoveUp.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveUp.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqInt32Var">
			stmtMoveUp.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveUp.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqInt64Var">
			stmtMoveUp.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveUp.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqUInt16Var">
			stmtMoveUp.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveUp.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqUInt32Var">
			stmtMoveUp.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveUp.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqUInt64Var">
			stmtMoveUp.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveUp.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqFloatVar">
			stmtMoveUp.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveUp.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqDoubleVar">
			stmtMoveUp.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveUp.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqNumberVar">
			stmtMoveUp.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveUp.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqStringVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqTokenVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqNmTokenVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqNmTokensVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqTextVar">
			stmtMoveUp.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqDateVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqTimeVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqTimestampVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqTZDateVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqTZTimeVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqTZTimestampVar">
			stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignReqUuidVar">
			stmtMoveUp.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveUpTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveUp.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveUp.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implOracleMoveDownTableBuff">
	/**
	 *	Move the specified buffer down in the chain (i.e. to the next position.)
	 *
	 *	@return	The refreshed buffer after it has been moved
	 */
	public $DefSchemaName$$TableName$Buff moveBuffDown( $SecSchemaName$Authorization Authorization$reference BaseClass reference PrimaryKeyIndex iterate Columns( each declCommaColumnArg )$,
		int revision )
	{
		final String S_ProcName = "moveBuffDown";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtMoveDown = null;
		try {$implMoveDownTableTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtMoveDown != null ) {
				try {
					stmtMoveDown.close();
				}
				catch( SQLException e ) {
				}
				stmtMoveDown = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implMoveDownTableTryBody">
			stmtMoveDown = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$poptop Table sp_movedown_dbtablename$( ?, ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + ", ? ); end;" );
			int argIdx = 1;
			stmtMoveDown.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDown.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtMoveDown.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtMoveDown.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleMoveDownTableAssignVar )$
			stmtMoveDown.setInt( argIdx++, revision );
			stmtMoveDown.execute();
			resultSet = (ResultSet)stmtMoveDown.getObject( 1 );
			if( resultSet == null ) {
				return( null );
			}
			try {
				if( resultSet.next() ) {
					$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
					if( resultSet.next() ) {
						resultSet.last();
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
					}
					return( buff );
				}
				else {
					return( null );
				}
			}
			catch( SQLException e ) {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignVar"
		>$switch IsNullable yes implOracleMoveDownTableAssignOptVar
			default implOracleMoveDownTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleMoveDownTableAssignOptBlobVar
			BoolDef implOracleMoveDownTableAssignOptBoolVar
			EnumDef implOracleMoveDownTableAssignOptEnumVar
			Int16Def implOracleMoveDownTableAssignOptInt16Var
			Int32Def implOracleMoveDownTableAssignOptInt32Var
			Int64Def implOracleMoveDownTableAssignOptInt64Var
			UInt16Def implOracleMoveDownTableAssignOptUInt16Var
			UInt32Def implOracleMoveDownTableAssignOptUInt32Var
			UInt64Def implOracleMoveDownTableAssignOptUInt64Var
			Id16Gen implOracleMoveDownTableAssignOptInt16Var
			Id32Gen implOracleMoveDownTableAssignOptInt32Var
			Id64Gen implOracleMoveDownTableAssignOptInt64Var
			FloatDef implOracleMoveDownTableAssignOptFloatVar
			DoubleDef implOracleMoveDownTableAssignOptDoubleVar
			NumberDef implOracleMoveDownTableAssignOptNumberVar
			StringDef implOracleMoveDownTableAssignOptStringVar
			TokenDef implOracleMoveDownTableAssignOptTokenVar
			NmTokenDef implOracleMoveDownTableAssignOptNmTokenVar
			NmTokensDef implOracleMoveDownTableAssignOptNmTokensVar
			TextDef implOracleMoveDownTableAssignOptTextVar
			DateDef implOracleMoveDownTableAssignOptDateVar
			TimeDef implOracleMoveDownTableAssignOptTimeVar
			TimestampDef implOracleMoveDownTableAssignOptTimestampVar
			TZDateDef implOracleMoveDownTableAssignOptTZDateVar
			TZTimeDef implOracleMoveDownTableAssignOptTZTimeVar
			TZTimestampDef implOracleMoveDownTableAssignOptTZTimestampVar
			UuidDef implOracleMoveDownTableAssignOptUuidVar
			UuidGen implOracleMoveDownTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleMoveDownTableAssignReqBlobVar
			BoolDef implOracleMoveDownTableAssignReqBoolVar
			EnumDef implOracleMoveDownTableAssignReqEnumVar
			Int16Def implOracleMoveDownTableAssignReqInt16Var
			Int32Def implOracleMoveDownTableAssignReqInt32Var
			Int64Def implOracleMoveDownTableAssignReqInt64Var
			UInt16Def implOracleMoveDownTableAssignReqUInt16Var
			UInt32Def implOracleMoveDownTableAssignReqUInt32Var
			UInt64Def implOracleMoveDownTableAssignReqUInt64Var
			Id16Gen implOracleMoveDownTableAssignReqInt16Var
			Id32Gen implOracleMoveDownTableAssignReqInt32Var
			Id64Gen implOracleMoveDownTableAssignReqInt64Var
			FloatDef implOracleMoveDownTableAssignReqFloatVar
			DoubleDef implOracleMoveDownTableAssignReqDoubleVar
			NumberDef implOracleMoveDownTableAssignReqNumberVar
			StringDef implOracleMoveDownTableAssignReqStringVar
			TokenDef implOracleMoveDownTableAssignReqTokenVar
			NmTokenDef implOracleMoveDownTableAssignReqNmTokenVar
			NmTokensDef implOracleMoveDownTableAssignReqNmTokensVar
			TextDef implOracleMoveDownTableAssignReqTextVar
			DateDef implOracleMoveDownTableAssignReqDateVar
			TimeDef implOracleMoveDownTableAssignReqTimeVar
			TimestampDef implOracleMoveDownTableAssignReqTimestampVar
			TZDateDef implOracleMoveDownTableAssignReqTZDateVar
			TZTimeDef implOracleMoveDownTableAssignReqTZTimeVar
			TZTimestampDef implOracleMoveDownTableAssignReqTZTimestampVar
			UuidDef implOracleMoveDownTableAssignReqUuidVar
			UuidGen implOracleMoveDownTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqBlobVar">
			stmtMoveDown.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtMoveDown.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtMoveDown.setString( argIdx++, "Y" );
			}
			else {
				stmtMoveDown.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtMoveDown.setString( argIdx++, "Y" );
				}
				else {
					stmtMoveDown.setString( argIdx++, "N" );
				}
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqEnumVar">
			stmtMoveDown.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtMoveDown.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqInt16Var">
			stmtMoveDown.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtMoveDown.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqInt32Var">
			stmtMoveDown.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtMoveDown.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqInt64Var">
			stmtMoveDown.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtMoveDown.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqUInt16Var">
			stmtMoveDown.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtMoveDown.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqUInt32Var">
			stmtMoveDown.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtMoveDown.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqUInt64Var">
			stmtMoveDown.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtMoveDown.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqFloatVar">
			stmtMoveDown.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtMoveDown.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqDoubleVar">
			stmtMoveDown.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtMoveDown.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqNumberVar">
			stmtMoveDown.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtMoveDown.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqStringVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqTokenVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqNmTokenVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqNmTokensVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqTextVar">
			stmtMoveDown.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$ );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqDateVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqTimeVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqTimestampVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqTZDateVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqTZTimeVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqTZTimestampVar">
			stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignReqUuidVar">
			stmtMoveDown.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleMoveDownTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtMoveDown.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtMoveDown.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="declOracleTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="declOracleTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="declOracleTableIdGenPStatements">
	protected PreparedStatement stmtSelectNext$Name$ = null;</GenRule>

	<GenRule GenDef="Table" Name="OracleTableTablePreamble"
>// Description: Java 11 Oracle Jdbc DbIO implementation for $TableName$.

$MssSourceLicense$

package $reference ManufacturingSchema lower JavaPackage$.$SchemaName$Oracle;

import java.math.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import oracle.jdbc.OracleTypes;
import org.apache.commons.codec.binary.Base64;
import org.msscf.msscf.cflib.CFLib.*;$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaName empty empty )$$poptop SchemaDef importJavaPackageSchemaName$$poptop SchemaDef iterate SchemaRefs( each importJavaPackageSchemaNameObj empty empty )$$poptop SchemaDef importJavaPackageSchemaNameObj$$JavaOracleTableImport$

/*
 *	$SchemaName$Oracle$TableName$Table Oracle Jdbc DbIO implementation
 *	for $TableName$.
 */</GenRule>

	<GenRule GenDef="IndexCol" Name="Suffix"
		>$popto Index Suffix$</GenRule>
	<GenRule GenDef="Value" Name="Suffix"
		>$popto Index Suffix$</GenRule>

	<GenRule GenDef="Table" Name="declOracleTableTablePStatements"
		>$switch HasSuperClassRelation yes declOracleTableTableInhPStatements default declOracleTableTableBasePStatements$</GenRule>

	<GenRule GenDef="Table" Name="declOracleTableTableInhPStatements"
		>$reference SuperClassRelation reference ToTable declOracleTableTablePStatements$$iterate Index( each declOracleTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$$iterate Index( each declOracleTableTablePStmtDeleteTableByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declOracleTableTableBasePStatements"
		>$declOracleTableTablePStmtEmitForPKey$$reference PrimaryKeyIndex declOracleTableTablePStmtEmitReadTableBuffByIndex$$iterate Index( each declOracleTableTablePStmtReadTableBuffByNonPrimaryIndex empty empty )$$iterate Index( each declOracleTableTablePStmtDeleteTableByIndex )$</GenRule>

	<GenRule GenDef="Table" Name="declOracleTableTableBaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex declOracleTableTablePStmtEmitReadTableClassCodeByIndex$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasSubClasses"
		>$poptop Table HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="declOracleTableTablePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declOracleTableTablePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declOracleTableTablePStmtReadTableBuffByIndex"
		>$declOracleTableTablePStmtEmitReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declOracleTableTablePStmtEmitReadTableBuffByIndex"
>$switch TopTableHasSubClasses yes declOracleTableTablePStmtEmitReadTableClassCodeByIndex default empty$
	protected PreparedStatement stmtReadBuffBy$Suffix$ = null;$switch PageData yes ifunique_declOracleTableTablePStmtEmitPageTableBuffByIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="ifunique_declOracleTableTablePStmtEmitPageTableBuffByIndex"
		>$switch IsUnique yes empty default declOracleTableTablePStmtEmitPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declOracleTableTablePStmtEmitPageTableBuffByIndex">
	protected PreparedStatement stmtPageBuffBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declOracleTableTablePStmtDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default declOracleTableTablePStmtDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="declOracleTableTablePStmtDeleteTableByIndex">
	protected PreparedStatement stmtDeleteBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Index" Name="declOracleTableTablePStmtEmitReadTableClassCodeByIndex">
	protected PreparedStatement stmtReadClassCodeBy$Suffix$ = null;</GenRule>

	<GenRule GenDef="Table" Name="declOracleTableTablePStmtEmitForPKey">
	protected PreparedStatement stmtReadBuffByPKey = null;
	protected PreparedStatement stmtLockBuffByPKey = null;
	protected PreparedStatement stmtCreateByPKey = null;
	protected PreparedStatement stmtUpdateByPKey = null;
	protected PreparedStatement stmtDeleteByPKey = null;$poptop Table switch BaseHasHistory yes declOracleTableTablePStmtEmitForPKeyAudit default empty$
	protected PreparedStatement stmtReadAllBuff = null;$switch PageData yes declOracleTableTablePStmtPageForPKey default empty$$switch TopTableHasSubClasses yes declOracleTableTablePStmtReadClassCodes default empty$</GenRule>

	<GenRule GenDef="Table" Name="declOracleTableTablePStmtPageForPKey">
	protected PreparedStatement stmtPageAllBuff = null;</GenRule>

	<GenRule GenDef="Table" Name="declOracleTableTablePStmtEmitForPKeyAudit"
		>$switch InheritsBlob yes declOracleTableTablePStmtEmitForPKeyReallyAudit default empty$</GenRule>

	<GenRule GenDef="Table" Name="declOracleTableTablePStmtEmitForPKeyReallyAudit">
	protected PreparedStatement stmtAuditCreatedByPKey = null;
	protected PreparedStatement stmtAuditUpdatedByPKey = null;</GenRule>

	<GenRule GenDef="Table" Name="declOracleTableTablePStmtReadClassCodes">
	protected PreparedStatement stmtReadDerivedClassCode = null;
	protected PreparedStatement stmtLockDerivedClassCode = null;
	protected PreparedStatement stmtReadAllClassCode = null;</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleasePreparedStatements">
	/**
	 *	Release the prepared statements.
	 *	&lt;p&gt;
	 *	When the schema changes connections, the prepared statements
	 *	have to be released because they contain connection-specific
	 *	information for most databases.
	 */
	public void releasePreparedStatements() {
		final String S_ProcName = "releasePreparedStatements";
		S_sqlSelect$TableName$Buff = null;
		S_sqlSelect$TableName$DistinctClassCode = null;
$implReleaseStmtReadBuffByPKey$$implReleaseStmtLockBuffByPKey$$implReleaseStmtCreateByPKey$$implReleaseStmtUpdateByPKey$$implReleaseStmtDeleteByPKey$$implOracleTableReleaseDeleteByInheritedIndexes$$poptop Table switch BaseHasHistory yes implOracleTableReleasePStmtEmitForPKeyAudit default empty$$implReleaseStmtReadAllBuff$$switch PageData yes implReleaseStmtPageAllBuff default empty$$switch TopTableHasSubClasses yes implOracleTableReleasePStmtReadClassCodes default empty$$implOracleTableReleasePStatements$$iterate DispensedId16Generators( each implOracleTableIdGenReleasePStatements empty empty )$$iterate DispensedId32Generators( each implOracleTableIdGenReleasePStatements empty empty )$$iterate DispensedId64Generators( each implOracleTableIdGenReleasePStatements empty empty )$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleaseDeleteByInheritedIndexes"
		>$switch HasSuperClassRelation yes implOracleTableReleaseDeleteByInhIndexes default implOracleTableReleaseDeleteByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleaseDeleteByInhIndexes"
		>$reference SuperClassRelation reference ToTable implOracleTableReleaseDeleteByInheritedIndexes$$iterate Index( each implOracleTableReleaseDeleteByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleaseDeleteByBaseIndexes"
		>$iterate Index( each implOracleTableReleaseDeleteByIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implOracleTableReleaseDeleteByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implOracleTableReleaseDeleteByIndex$</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleasePStmtEmitForPKeyAudit"
		>$switch InheritsBlob yes implOracleTableReleasePStmtEmitForPKeyReallyAudit default empty$</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleasePStmtEmitForPKeyReallyAudit">
		if( stmtAuditCreatedByPKey != null ) {
			try {
				stmtAuditCreatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditCreatedByPKey = null;
		}
		if( stmtAuditUpdatedByPKey != null ) {
			try {
				stmtAuditUpdatedByPKey.close();
			}
			catch( SQLException e ) {
			}
			stmtAuditUpdatedByPKey = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implOracleTableReleaseDeleteByIndex">
		if( stmtDeleteBy$Suffix$ != null ) {
			try {
				stmtDeleteBy$Suffix$.close();
			}
			catch( SQLException e ) {
			}
			stmtDeleteBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtReadBuffByPKey">
		if( stmtReadBuffByPKey != null ) {
			try {
				stmtReadBuffByPKey.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtReadBuffByPKey = null;
			}
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtLockBuffByPKey">
		if( stmtLockBuffByPKey != null ) {
			try {
				stmtLockBuffByPKey.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtLockBuffByPKey = null;
			}
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtCreateByPKey">
		if( stmtCreateByPKey != null ) {
			try {
				stmtCreateByPKey.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtCreateByPKey = null;
			}
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtUpdateByPKey">
		if( stmtUpdateByPKey != null ) {
			try {
				stmtUpdateByPKey.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtUpdateByPKey = null;
			}
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtDeleteByPKey">
		if( stmtDeleteByPKey != null ) {
			try {
				stmtDeleteByPKey.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtDeleteByPKey = null;
			}
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtReadAllBuff">
		if( stmtReadAllBuff != null ) {
			try {
				stmtReadAllBuff.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtReadAllBuff = null;
			}
		}</GenRule>

	<GenRule GenDef="Table" Name="implReleaseStmtPageAllBuff">
		if( stmtPageAllBuff != null ) {
			try {
				stmtPageAllBuff.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtPageAllBuff = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implOracleTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtSelectNext$Name$ = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implOracleTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtSelectNext$Name$ = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implOracleTableIdGenReleasePStatements">
		if( stmtSelectNext$Name$ != null ) {
			try {
				stmtSelectNext$Name$.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				stmtSelectNext$Name$ = null;
			}
		}</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleasePStmtReadClassCodes">
		if( stmtReadDerivedClassCode != null ) {
			try {
				stmtReadDerivedClassCode.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			stmtReadDerivedClassCode = null;
		}
		if( stmtLockDerivedClassCode != null ) {
			try {
				stmtLockDerivedClassCode.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			stmtLockDerivedClassCode = null;
		}
		if( stmtReadAllClassCode != null ) {
			try {
				stmtReadAllClassCode.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			stmtReadAllClassCode = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleasePStatements"
		>$switch HasSuperClassRelation yes implOracleTableReleaseInhPStatements default implOracleTableReleaseBasePStatements$</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleaseInhPStatements"
		>$reference SuperClassRelation reference ToTable implOracleTableReleasePStatements$$iterate Index( each implOracleTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$$iterate Index( each implOracleTableReleasePStmtDeleteTableByNonPrimaryIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleaseBasePStatements"
		>$reference PrimaryKeyIndex implOracleTableReleasePStmtReadTableBuffByIndex$$iterate Index( each implOracleTableReleasePStmtReadTableBuffByNonPrimaryIndex empty empty )$$iterate Index( each implOracleTableReleasePStmtDeleteTableByIndex empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implOracleTableReleaseReadClassCodeByPIdx"
		>$reference PrimaryKeyIndex implOracleTableReleasePStmtDerivedClassCodeBySuffix$</GenRule>

	<GenRule GenDef="Index" Name="implOracleTableReleasePStmtReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implOracleTableReleasePStmtReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implOracleTableReleasePStmtReadTableBuffByIndex"
		>$implOracleTableReleasePStmtEmitReadTableBuffByIndex$$switch PageData yes ifduplicate_implOracleTableReleasePStmtPageTableBuffByIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="ifduplicate_implOracleTableReleasePStmtPageTableBuffByIndex"
		>$switch IsUnique yes empty default implOracleTableReleasePStmtEmitPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implOracleTableReleasePStmtDerivedClassCodeBySuffix">
		if( stmtReadClassCodeBy$Suffix$ != null ) {
			try {
				stmtReadClassCodeBy$Suffix$.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			stmtReadClassCodeBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implOracleTableReleasePStmtEmitReadTableBuffByIndex"
>$switch TopTableHasSubClasses yes implOracleTableReleasePStmtDerivedClassCodeBySuffix default empty$
		if( stmtReadBuffBy$Suffix$ != null ) {
			try {
				stmtReadBuffBy$Suffix$.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			stmtReadBuffBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implOracleTableReleasePStmtEmitPageTableBuffByIndex">
		if( stmtPageBuffBy$Suffix$ != null ) {
			try {
				stmtPageBuffBy$Suffix$.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			stmtPageBuffBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Index" Name="implOracleTableReleasePStmtDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implOracleTableReleasePStmtDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implOracleTableReleasePStmtDeleteTableByIndex">
		if( stmtDeleteBy$Suffix$ != null ) {
			try {
				stmtDeleteBy$Suffix$.close();
			}
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			stmtDeleteBy$Suffix$ = null;
		}</GenRule>

	<GenRule GenDef="Table" Name="implConstructOracleTableTable">
	public $SchemaName$Oracle$TableName$Table( $SchemaName$OracleSchema argSchema ) {
		schema = argSchema;
	}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleIndexColumnNameComma">$DbColumnName$, </GenRule>
	<GenRule GenDef="IndexCol" Name="implOracleIndexColumnName">$DbColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleIndexColumnBindVar">?</GenRule>
	<GenRule GenDef="IndexCol" Name="implOracleIndexCommaColumnBindVar">, ?</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGen">
	public short next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		String sqlSelectNext =
				"SELECT " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$("
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implOracleNextIdGenSPArg each implOracleNextIdGenCommaSPArg )$ + " ) as Next$Name$ from dual";
$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenViaAttributes">
	public short next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		short retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenViaAttributesSetKeyValue">
		pkey.set$OptionalOrRequired$$Name$( arg$Name$ );</GenRule>

	<GenRule GenDef="IndexCol" Name="implNextIdGenDeclAttr">,
		$implJavaAtomType$ arg$Name$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNext );
			}
			short nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleNextIdGen16SelectAssignVar )$
			rsSelect = stmtSelectNext$Name$.executeQuery();
			if( rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 result row to be returned by $sp_next_tableidgen$(), not 0" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getShort( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Next$Name$ cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleNextIdGenCommaSPArg"> + ", "
$implOracleNextIdGenSPArg$</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArg"
		>$switch BaseModelAtomClass
			BlobDef implOracleNextIdGenSPArgValueGenericVar
			BoolDef implOracleNextIdGenSPArgValueBoolVar
			EnumDef implOracleNextIdGenSPArgValueGenericVar
			Int16Def implOracleNextIdGenSPArgValueGenericVar
			Int32Def implOracleNextIdGenSPArgValueGenericVar
			Int64Def implOracleNextIdGenSPArgValueGenericVar
			UInt16Def implOracleNextIdGenSPArgValueGenericVar
			UInt32Def implOracleNextIdGenSPArgValueGenericVar
			UInt64Def implOracleNextIdGenSPArgValueGenericVar
			Id16Gen implOracleNextIdGenSPArgValueGenericVar
			Id32Gen implOracleNextIdGenSPArgValueGenericVar
			Id64Gen implOracleNextIdGenSPArgValueGenericVar
			FloatDef implOracleNextIdGenSPArgValueGenericVar
			DoubleDef implOracleNextIdGenSPArgValueGenericVar
			NumberDef implOracleNextIdGenSPArgValueGenericVar
			StringDef implOracleNextIdGenSPArgValueGenericVar
			TokenDef implOracleNextIdGenSPArgValueGenericVar
			NmTokenDef implOracleNextIdGenSPArgValueGenericVar
			NmTokensDef implOracleNextIdGenSPArgValueGenericVar
			TextDef implOracleNextIdGenSPArgValueGenericVar
			DateDef implOracleNextIdGenSPArgValueDateVar
			TimeDef implOracleNextIdGenSPArgValueTimeVar
			TimestampDef implOracleNextIdGenSPArgValueTimestampVar
			TZDateDef implOracleNextIdGenSPArgValueTZDateVar
			TZTimeDef implOracleNextIdGenSPArgValueTZTimeVar
			TZTimestampDef implOracleNextIdGenSPArgValueTZTimestampVar
			UuidDef implOracleNextIdGenSPArgValueGenericVar
			UuidGen implOracleNextIdGenSPArgValueGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArgValueGenericVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArgValueBoolVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArgValueDateVar"
>			+		"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArgValueTimeVar"
>			+		"to_timestamp( ?, 'HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArgValueTimestampVar"
>			+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArgValueTZDateVar"
>			+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArgValueTZTimeVar"
>			+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArgValueTZTimestampVar"
>			+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGenSPArgValueUuidVar"
>			+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignVar"
		>$switch IsNullable yes implOracleNextIdGen16SelectAssignOptVar
			default implOracleNextIdGen16SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleNextIdGen16SelectAssignOptBlobVar
			BoolDef implOracleNextIdGen16SelectAssignOptBoolVar
			EnumDef implOracleNextIdGen16SelectAssignOptEnumVar
			Int16Def implOracleNextIdGen16SelectAssignOptInt16Var
			Int32Def implOracleNextIdGen16SelectAssignOptInt32Var
			Int64Def implOracleNextIdGen16SelectAssignOptInt64Var
			UInt16Def implOracleNextIdGen16SelectAssignOptUInt16Var
			UInt32Def implOracleNextIdGen16SelectAssignOptUInt32Var
			UInt64Def implOracleNextIdGen16SelectAssignOptUInt64Var
			Id16Gen implOracleNextIdGen16SelectAssignOptInt16Var
			Id32Gen implOracleNextIdGen16SelectAssignOptInt32Var
			Id64Gen implOracleNextIdGen16SelectAssignOptInt64Var
			FloatDef implOracleNextIdGen16SelectAssignOptFloatVar
			DoubleDef implOracleNextIdGen16SelectAssignOptDoubleVar
			NumberDef implOracleNextIdGen16SelectAssignOptNumberVar
			StringDef implOracleNextIdGen16SelectAssignOptStringVar
			TokenDef implOracleNextIdGen16SelectAssignOptTokenVar
			NmTokenDef implOracleNextIdGen16SelectAssignOptNmTokenVar
			NmTokensDef implOracleNextIdGen16SelectAssignOptNmTokensVar
			TextDef implOracleNextIdGen16SelectAssignOptTextVar
			DateDef implOracleNextIdGen16SelectAssignOptDateVar
			TimeDef implOracleNextIdGen16SelectAssignOptTimeVar
			TimestampDef implOracleNextIdGen16SelectAssignOptTimestampVar
			TZDateDef implOracleNextIdGen16SelectAssignOptTZDateVar
			TZTimeDef implOracleNextIdGen16SelectAssignOptTZTimeVar
			TZTimestampDef implOracleNextIdGen16SelectAssignOptTZTimestampVar
			UuidDef implOracleNextIdGen16SelectAssignOptUuidVar
			UuidGen implOracleNextIdGen16SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleNextIdGen16SelectAssignReqBlobVar
			BoolDef implOracleNextIdGen16SelectAssignReqBoolVar
			EnumDef implOracleNextIdGen16SelectAssignReqEnumVar
			Int16Def implOracleNextIdGen16SelectAssignReqInt16Var
			Int32Def implOracleNextIdGen16SelectAssignReqInt32Var
			Int64Def implOracleNextIdGen16SelectAssignReqInt64Var
			UInt16Def implOracleNextIdGen16SelectAssignReqUInt16Var
			UInt32Def implOracleNextIdGen16SelectAssignReqUInt32Var
			UInt64Def implOracleNextIdGen16SelectAssignReqUInt64Var
			Id16Gen implOracleNextIdGen16SelectAssignReqInt16Var
			Id32Gen implOracleNextIdGen16SelectAssignReqInt32Var
			Id64Gen implOracleNextIdGen16SelectAssignReqInt64Var
			FloatDef implOracleNextIdGen16SelectAssignReqFloatVar
			DoubleDef implOracleNextIdGen16SelectAssignReqDoubleVar
			NumberDef implOracleNextIdGen16SelectAssignReqNumberVar
			StringDef implOracleNextIdGen16SelectAssignReqStringVar
			TokenDef implOracleNextIdGen16SelectAssignReqTokenVar
			NmTokenDef implOracleNextIdGen16SelectAssignReqNmTokenVar
			NmTokensDef implOracleNextIdGen16SelectAssignReqNmTokensVar
			TextDef implOracleNextIdGen16SelectAssignReqTextVar
			DateDef implOracleNextIdGen16SelectAssignReqDateVar
			TimeDef implOracleNextIdGen16SelectAssignReqTimeVar
			TimestampDef implOracleNextIdGen16SelectAssignReqTimestampVar
			TZDateDef implOracleNextIdGen16SelectAssignReqTZDateVar
			TZTimeDef implOracleNextIdGen16SelectAssignReqTZTimeVar
			TZTimestampDef implOracleNextIdGen16SelectAssignReqTZTimestampVar
			UuidDef implOracleNextIdGen16SelectAssignReqUuidVar
			UuidGen implOracleNextIdGen16SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqBlobVar">
			stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqBoolVar">
			if( $Name$ ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "Y" );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "Y" );
				}
				else {
					stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqEnumVar">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqFloatVar">
			stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqNumberVar">
			stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqStringVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqTextVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignReqUuidVar">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id16Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen16SelectAssignClassCode">
			stmtSelectNext$popto Id16Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGen">
	public int next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		String sqlSelectNext =
				"SELECT " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$("
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implOracleNextIdGenSPArg each implOracleNextIdGenCommaSPArg )$ + " ) as Next$Name$ from dual";
$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenViaAttributes">
	public int next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		int retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNext );
			}
			int nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleNextIdGen32SelectAssignVar )$
			rsSelect = stmtSelectNext$Name$.executeQuery();
			if( rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 result row to be returned by $sp_next_tableidgen$(), not 0" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getInt( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Next$Name$ cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignVar"
		>$switch IsNullable yes implOracleNextIdGen32SelectAssignOptVar
			default implOracleNextIdGen32SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleNextIdGen32SelectAssignOptBlobVar
			BoolDef implOracleNextIdGen32SelectAssignOptBoolVar
			EnumDef implOracleNextIdGen32SelectAssignOptEnumVar
			Int16Def implOracleNextIdGen32SelectAssignOptInt16Var
			Int32Def implOracleNextIdGen32SelectAssignOptInt32Var
			Int64Def implOracleNextIdGen32SelectAssignOptInt64Var
			UInt16Def implOracleNextIdGen32SelectAssignOptUInt16Var
			UInt32Def implOracleNextIdGen32SelectAssignOptUInt32Var
			UInt64Def implOracleNextIdGen32SelectAssignOptUInt64Var
			Id16Gen implOracleNextIdGen32SelectAssignOptInt16Var
			Id32Gen implOracleNextIdGen32SelectAssignOptInt32Var
			Id64Gen implOracleNextIdGen32SelectAssignOptInt64Var
			FloatDef implOracleNextIdGen32SelectAssignOptFloatVar
			DoubleDef implOracleNextIdGen32SelectAssignOptDoubleVar
			NumberDef implOracleNextIdGen32SelectAssignOptNumberVar
			StringDef implOracleNextIdGen32SelectAssignOptStringVar
			TokenDef implOracleNextIdGen32SelectAssignOptTokenVar
			NmTokenDef implOracleNextIdGen32SelectAssignOptNmTokenVar
			NmTokensDef implOracleNextIdGen32SelectAssignOptNmTokensVar
			TextDef implOracleNextIdGen32SelectAssignOptTextVar
			DateDef implOracleNextIdGen32SelectAssignOptDateVar
			TimeDef implOracleNextIdGen32SelectAssignOptTimeVar
			TimestampDef implOracleNextIdGen32SelectAssignOptTimestampVar
			TZDateDef implOracleNextIdGen32SelectAssignOptTZDateVar
			TZTimeDef implOracleNextIdGen32SelectAssignOptTZTimeVar
			TZTimestampDef implOracleNextIdGen32SelectAssignOptTZTimestampVar
			UuidDef implOracleNextIdGen32SelectAssignOptUuidVar
			UuidGen implOracleNextIdGen32SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleNextIdGen32SelectAssignReqBlobVar
			BoolDef implOracleNextIdGen32SelectAssignReqBoolVar
			EnumDef implOracleNextIdGen32SelectAssignReqEnumVar
			Int16Def implOracleNextIdGen32SelectAssignReqInt16Var
			Int32Def implOracleNextIdGen32SelectAssignReqInt32Var
			Int64Def implOracleNextIdGen32SelectAssignReqInt64Var
			UInt16Def implOracleNextIdGen32SelectAssignReqUInt16Var
			UInt32Def implOracleNextIdGen32SelectAssignReqUInt32Var
			UInt64Def implOracleNextIdGen32SelectAssignReqUInt64Var
			Id16Gen implOracleNextIdGen32SelectAssignReqInt16Var
			Id32Gen implOracleNextIdGen32SelectAssignReqInt32Var
			Id64Gen implOracleNextIdGen32SelectAssignReqInt64Var
			FloatDef implOracleNextIdGen32SelectAssignReqFloatVar
			DoubleDef implOracleNextIdGen32SelectAssignReqDoubleVar
			NumberDef implOracleNextIdGen32SelectAssignReqNumberVar
			StringDef implOracleNextIdGen32SelectAssignReqStringVar
			TokenDef implOracleNextIdGen32SelectAssignReqTokenVar
			NmTokenDef implOracleNextIdGen32SelectAssignReqNmTokenVar
			NmTokensDef implOracleNextIdGen32SelectAssignReqNmTokensVar
			TextDef implOracleNextIdGen32SelectAssignReqTextVar
			DateDef implOracleNextIdGen32SelectAssignReqDateVar
			TimeDef implOracleNextIdGen32SelectAssignReqTimeVar
			TimestampDef implOracleNextIdGen32SelectAssignReqTimestampVar
			TZDateDef implOracleNextIdGen32SelectAssignReqTZDateVar
			TZTimeDef implOracleNextIdGen32SelectAssignReqTZTimeVar
			TZTimestampDef implOracleNextIdGen32SelectAssignReqTZTimestampVar
			UuidDef implOracleNextIdGen32SelectAssignReqUuidVar
			UuidGen implOracleNextIdGen32SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqBlobVar">
			stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqBoolVar">
			if( $Name$ ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "Y" );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "N" );
			}
</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "Y" );
				}
				else {
					stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqEnumVar">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqFloatVar">
			stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqNumberVar">
			stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqStringVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqTextVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignReqUuidVar">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id32Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen32SelectAssignClassCode">
			stmtSelectNext$popto Id32Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGen">
	public long next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "next$Name$";
		String sqlSelectNext =
				"SELECT " + schema.getLowerDbSchemaName() + ".$sp_next_tableidgen$("
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( first implOracleNextIdGenSPArg each implOracleNextIdGenCommaSPArg )$ + " ) as Next$Name$ from dual";
$implCheckOpenTransaction$$implNextIdGenTryBody$
	}
$implNextIdGenViaAttributes$
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenViaAttributes">
	public long next$Name$( $SecSchemaName$Authorization Authorization$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey = schema.getFactory$reference Dispenser reference BaseClass TableName$().newPKey();$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implNextIdGenViaAttributesSetKeyValue )$
		long retval = next$Name$( Authorization, pkey );
		return( retval );
	}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenTryBody">
		ResultSet rsSelect = null;
		try {
			Connection cnx = schema.getCnx();
$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleLocalizeTableKeys empty empty )$
			if( stmtSelectNext$Name$ == null ) {
				stmtSelectNext$Name$ = cnx.prepareStatement( sqlSelectNext );
			}
			long nextId;
			int argIdx = 1;$reference Dispenser reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleNextIdGen64SelectAssignVar )$
			rsSelect = stmtSelectNext$Name$.executeQuery();
			if( rsSelect.next() ) {$implNextIdGenRowExistsCode$
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 result row to be returned by $sp_next_tableidgen$(), not 0" );
			}
			return( nextId );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( rsSelect != null ) {
				try {
					rsSelect.close();
				}
				catch( SQLException e ) {
				}
				rsSelect = null;
			}
		}</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="implNextIdGenRowExistsCode">
				nextId = rsSelect.getLong( 1 );
				if( rsSelect.wasNull() ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Next$Name$ cannot be null!" );
				}
				if( rsSelect.next() ) {
					rsSelect.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record select response, " + rsSelect.getRow() + " rows selected" );
				}</GenRule>


	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignVar"
		>$switch IsNullable yes implOracleNextIdGen64SelectAssignOptVar
			default implOracleNextIdGen64SelectAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleNextIdGen64SelectAssignOptBlobVar
			BoolDef implOracleNextIdGen64SelectAssignOptBoolVar
			EnumDef implOracleNextIdGen64SelectAssignOptEnumVar
			Int16Def implOracleNextIdGen64SelectAssignOptInt16Var
			Int32Def implOracleNextIdGen64SelectAssignOptInt32Var
			Int64Def implOracleNextIdGen64SelectAssignOptInt64Var
			UInt16Def implOracleNextIdGen64SelectAssignOptUInt16Var
			UInt32Def implOracleNextIdGen64SelectAssignOptUInt32Var
			UInt64Def implOracleNextIdGen64SelectAssignOptUInt64Var
			Id16Gen implOracleNextIdGen64SelectAssignOptInt16Var
			Id32Gen implOracleNextIdGen64SelectAssignOptInt32Var
			Id64Gen implOracleNextIdGen64SelectAssignOptInt64Var
			FloatDef implOracleNextIdGen64SelectAssignOptFloatVar
			DoubleDef implOracleNextIdGen64SelectAssignOptDoubleVar
			NumberDef implOracleNextIdGen64SelectAssignOptNumberVar
			StringDef implOracleNextIdGen64SelectAssignOptStringVar
			TokenDef implOracleNextIdGen64SelectAssignOptTokenVar
			NmTokenDef implOracleNextIdGen64SelectAssignOptNmTokenVar
			NmTokensDef implOracleNextIdGen64SelectAssignOptNmTokensVar
			TextDef implOracleNextIdGen64SelectAssignOptTextVar
			DateDef implOracleNextIdGen64SelectAssignOptDateVar
			TimeDef implOracleNextIdGen64SelectAssignOptTimeVar
			TimestampDef implOracleNextIdGen64SelectAssignOptTimestampVar
			TZDateDef implOracleNextIdGen64SelectAssignOptTZDateVar
			TZTimeDef implOracleNextIdGen64SelectAssignOptTZTimeVar
			TZTimestampDef implOracleNextIdGen64SelectAssignOptTZTimestampVar
			UuidDef implOracleNextIdGen64SelectAssignOptUuidVar
			UuidGen implOracleNextIdGen64SelectAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleNextIdGen64SelectAssignReqBlobVar
			BoolDef implOracleNextIdGen64SelectAssignReqBoolVar
			EnumDef implOracleNextIdGen64SelectAssignReqEnumVar
			Int16Def implOracleNextIdGen64SelectAssignReqInt16Var
			Int32Def implOracleNextIdGen64SelectAssignReqInt32Var
			Int64Def implOracleNextIdGen64SelectAssignReqInt64Var
			UInt16Def implOracleNextIdGen64SelectAssignReqUInt16Var
			UInt32Def implOracleNextIdGen64SelectAssignReqUInt32Var
			UInt64Def implOracleNextIdGen64SelectAssignReqUInt64Var
			Id16Gen implOracleNextIdGen64SelectAssignReqInt16Var
			Id32Gen implOracleNextIdGen64SelectAssignReqInt32Var
			Id64Gen implOracleNextIdGen64SelectAssignReqInt64Var
			FloatDef implOracleNextIdGen64SelectAssignReqFloatVar
			DoubleDef implOracleNextIdGen64SelectAssignReqDoubleVar
			NumberDef implOracleNextIdGen64SelectAssignReqNumberVar
			StringDef implOracleNextIdGen64SelectAssignReqStringVar
			TokenDef implOracleNextIdGen64SelectAssignReqTokenVar
			NmTokenDef implOracleNextIdGen64SelectAssignReqNmTokenVar
			NmTokensDef implOracleNextIdGen64SelectAssignReqNmTokensVar
			TextDef implOracleNextIdGen64SelectAssignReqTextVar
			DateDef implOracleNextIdGen64SelectAssignReqDateVar
			TimeDef implOracleNextIdGen64SelectAssignReqTimeVar
			TimestampDef implOracleNextIdGen64SelectAssignReqTimestampVar
			TZDateDef implOracleNextIdGen64SelectAssignReqTZDateVar
			TZTimeDef implOracleNextIdGen64SelectAssignReqTZTimeVar
			TZTimestampDef implOracleNextIdGen64SelectAssignReqTZTimestampVar
			UuidDef implOracleNextIdGen64SelectAssignReqUuidVar
			UuidGen implOracleNextIdGen64SelectAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqBlobVar">
			stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqBoolVar">
			if( $Name$ ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "Y" );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "Y" );
				}
				else {
					stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqEnumVar">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqUInt16Var">
			stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqUInt32Var">
			stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqUInt64Var">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqFloatVar">
			stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqDoubleVar">
			stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqNumberVar">
			stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqStringVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptStringVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqNmTokenVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqNmTokensVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqTextVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptTextVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$ );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqTZDateVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqTZTimeVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqTZTimestampVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignReqUuidVar">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtSelectNext$popto Id64Gen Name$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleNextIdGen64SelectAssignClassCode">
			stmtSelectNext$popto Id64Gen Name$.setString( argIdx++, ClassCode );</GenRule>

	<GenRule ScopeDef="Table" GenDef="UuidGen" Name="implNextIdGen">
	public UUID next$Name$( $SecSchemaName$Authorization Authorization,
		$reference Dispenser reference BaseClass DefSchemaName$$reference Dispenser reference BaseClass TableName$PKey pkey )
	{
		UUID retval = UUID.randomUUID();
		return( retval );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevision">
				+		", revision )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevision"
		> + " )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragRevisionValue"> + ", "
				+		"1 )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSqlFragNoRevisionValue"> + " )"</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableSetBuffPKey"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleCreateTableSetBuffPKeyGeneratedAttr )$
			Buff.setRequiredRevision( Revision );</GenRule>

	<GenRule GenDef="IndexCol" Name="GenerateId"
		>$reference Column GenerateId$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleCreateTableSetBuffPKeyGeneratedAttr"
		>$switch GenerateId yes implOracleCreateTableSetBuffPKeyAttr default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleCreateTableSetBuffPKeyAttr">
			Buff.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableGenKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleCreateTableKeys empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableCopyKeys"
		>$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleCreateTableKeysCopyId empty empty )$</GenRule>

	<GenRule GenDef="Object" Name="implCheckOpenTransaction"
		>$popto Table implCheckOpenTransaction$</GenRule>

	<GenRule GenDef="Table" Name="implCheckOpenTransaction">
		if( ! schema.isTransactionOpen() ) {
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				"Transaction not open" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTable"
		>$switch InheritsBlob yes implCreateTableOldStyle default implCreateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="BaseDefIsBaseTable"
		>$reference BaseClass IsBaseTable$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implCreateTableSPCopyInhColumns default implCreateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implCreateTableSPCopyColumns$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableCopyDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implOracleCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implOracleCreateTableCopyClassCode default empty$$iterate Columns( each implOracleCreateTableCopyNonGenColumn empty empty )$</GenRule>

	<GenRule GenDef="Value" Name="implOracleCreateTableCopyNonGenColumn"
		>$switch GenerateId yes empty default implOracleCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSP">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$switch HasSuperClassRelation yes empty default implCheckOpenTransaction$
		ResultSet resultSet = null;
		CallableStatement stmtCreateByPKey = null;
		try {$implCreateTableSPTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtCreateByPKey != null ) {
				try {
					stmtCreateByPKey.close();
				}
				catch( SQLException e ) {
				}
				stmtCreateByPKey = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPTryBody">
$implCreateTableSPCopyColumns$$reference PrimaryKeyIndex iterate Columns( each implCreateTableSPMaybeInitGeneratedUuid )$			Connection cnx = schema.getCnx();
			stmtCreateByPKey = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$sp_create_dbtablename$( ?, ?, ?, ?, ?, ?, ?"$implCreateTableSPPassArgs$ + " ); end;" );
			int argIdx = 1;
			stmtCreateByPKey.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtCreateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implOracleCreateTableBindClassCode default implOracleCreateTableBindConstClassCode$$implCreateTableSPBindArgs$
			stmtCreateByPKey.execute();
			resultSet = (ResultSet)stmtCreateByPKey.getObject( 1 );$implCreateTableSPAnalyseResultSet$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPAnalyseResultSet">
			if( resultSet == null ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"$sp_create_dbtablename$() did not return a result set" );
			}
			try {
				if( resultSet.next() ) {
					$poptop Table DefSchemaName$$poptop Table TableName$Buff createdBuff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
					if( resultSet.next() ) {
						resultSet.last();
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
					}$implOracleCreateTableApplyBuff$
				}
				else {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			catch( SQLException e ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"$sp_create_dbtablename$() did not return a valid result set" );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPMaybeInitGeneratedUuid"
		>$switch GenerateId yes implCreateTableSPCheckIfGeneratingUuid default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPCheckIfGeneratingUuid"
		>$switch BaseModelAtomClass
			UuidDef implCreateTableSPInitGeneratedUuid
			UuidGen implCreateTableSPInitGeneratedUuid
			default empty$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableSPInitGeneratedUuid">
			UUID $Name$ = UUID.randomUUID();</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableApplyBuff"
		>$switch HasSuperClassRelation yes implOracleCreateTableApplyInhBuff default implOracleCreateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implOracleCreateTableApplyBuff$$iterate Columns( each implOracleCreateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableApplyBaseBuff"
		>$iterate Columns( each implOracleCreateTableApplyCol )$$implOracleCreateTableApplyRevision$$switch HasAuditColumns yes implOracleCreateTableApplyAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableApplyRevision">
				Buff.setRequiredRevision( createdBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableApplyAuditColumns">
				Buff.setCreatedByUserId( createdBuff.getCreatedByUserId() );
				Buff.setCreatedAt( createdBuff.getCreatedAt() );
				Buff.setUpdatedByUserId( createdBuff.getUpdatedByUserId() );
				Buff.setUpdatedAt( createdBuff.getUpdatedAt() );</GenRule>

	<GenRule GenDef="Value" Name="implOracleCreateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implOracleCreateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implOracleCreateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( createdBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPBindInhArgs default implCreateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPBindArgs$$iterate Columns( each implCreateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPBindBaseArgs"
		>$iterate Columns( each implCreateTableSPBindNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implOracleCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPBindForceUuidArg default implOracleCreateTableBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPBindForceUuidArg"
		>$switch BaseModelAtomClass
			UuidDef implOracleCreateTableBindVar
			UuidGen implOracleCreateTableBindVar
			default empty$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implCreateTableSPPassInhArgs default implCreateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implCreateTableSPPassArgs$$iterate Columns( each implCreateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableSPPassBaseArgs"
		>$iterate Columns( each implCreateTableSPPassNonGeneratedArg )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassNonGeneratedArg"
		>$switch GenerateId yes implCreateTableSPForceUuidArg default implCreateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPForceUuidArg"
		>$switch BaseModelAtomClass
			UuidGen implCreateTableSPPassAnArg
			UuidDef implCreateTableSPPassAnArg
			default empty$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implOracleCreateTableSPPassGenericVar
			BoolDef implOracleCreateTableSPPassGenericVar
			EnumDef implOracleCreateTableSPPassGenericVar
			Int16Def implOracleCreateTableSPPassGenericVar
			Int32Def implOracleCreateTableSPPassGenericVar
			Int64Def implOracleCreateTableSPPassGenericVar
			UInt16Def implOracleCreateTableSPPassGenericVar
			UInt32Def implOracleCreateTableSPPassGenericVar
			UInt64Def implOracleCreateTableSPPassGenericVar
			Id16Gen implOracleCreateTableSPPassGenericVar
			Id32Gen implOracleCreateTableSPPassGenericVar
			Id64Gen implOracleCreateTableSPPassGenericVar
			FloatDef implOracleCreateTableSPPassFloatVar
			DoubleDef implOracleCreateTableSPPassGenericVar
			NumberDef implOracleCreateTableSPPassGenericVar
			StringDef implOracleCreateTableSPPassGenericVar
			TokenDef implOracleCreateTableSPPassGenericVar
			NmTokenDef implOracleCreateTableSPPassGenericVar
			NmTokensDef implOracleCreateTableSPPassGenericVar
			TextDef implOracleCreateTableSPPassTextVar
			DateDef implOracleCreateTableSPPassDateVar
			TimeDef implOracleCreateTableSPPassTimeVar
			TimestampDef implOracleCreateTableSPPassTimestampVar
			TZDateDef implOracleCreateTableSPPassTZDateVar
			TZTimeDef implOracleCreateTableSPPassTZTimeVar
			TZTimestampDef implOracleCreateTableSPPassTZTimestampVar
			UuidDef implOracleCreateTableSPPassGenericVar
			UuidGen implOracleCreateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableSPPassGenericVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableSPPassFloatVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableSPPassTextVar"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableSPPassDateVar"> + ", "
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableSPPassTimeVar"> + ", "
				+		"to_timestamp( ?, 'HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableSPPassTimestampVar"> + ", "
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableSPPassTZDateVar"> + ", "
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableSPPassTZTimeVar"> + ", "
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableSPPassTZTimestampVar"> + ", "
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableInvokeSuperCreate">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().create$reference SuperClassRelation reference ToTable TableName$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyle">
	public void create$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "create$TableName$";$switch SecScope None empty System implCreateTableOSCheckSystem Cluster implCreateTableOSCheckCluster Tenant implCreateTableOSCheckTenant default error$$switch HasSuperClassRelation yes implCreateTableInvokeSuperCreate default implCheckOpenTransaction$
		try {
			Connection cnx = schema.getCnx();
$switch IsBaseTable yes implOracleCreateTableClassCodeKey default empty$$switch HasSuperClassRelation no implOracleCreateTableGenKeys default implOracleCreateTableCopyKeys$$iterate Columns( each implCreateTableCopyDataColumn empty empty )$$switch HasSuperClassRelation no implOracleCreateTableInitRevision default empty$<!--
-->			String sql =
					"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$( "$switch IsBaseTable yes implOracleCreateTableInsertClassCode default empty$$switch HasSuperClassRelation no implOracleCreateTableInsertOptAuditColumns default empty$$iterate Columns( each implOracleCreateTableInsertColumnComma last implOracleCreateTableInsertColumn )$$switch HasSuperClassRelation no implCreateTableSqlFragRevision default implCreateTableSqlFragNoRevision$
				+	"VALUES ( "$switch IsBaseTable yes implOracleCreateTableValuesClassCode default empty$$switch HasSuperClassRelation no implOracleCreateTableValuesOptAuditColumns default empty$$iterate Columns( each implOracleCreateTableValuesVarComma last implOracleCreateTableValuesVar )$$switch HasSuperClassRelation no implCreateTableSqlFragRevisionValue default implCreateTableSqlFragNoRevisionValue$;$implCreateTableOldStylePartTwo$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Create$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Create$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableValuesOptAuditColumns"
		>$switch HasAuditColumns yes implOracleCreateTableValuesAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableValuesAuditColumns">
				+		" ?, "
				+		" to_timestamp( ?, 'YYYY.MM.DD HH24:MI:SS' ), "
				+		" ?, "
				+		" to_timestamp( ?, 'YYYY.MM.DD HH24:MI:SS' ), "</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableInsertOptAuditColumns"
		>$switch HasAuditColumns yes implOracleCreateTableInsertAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableInsertAuditColumns">
				+		"createdby, "
				+		"createdat, "
				+		"updatedby, "
				+		"updatedat, "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStylePartTwo">
			if( stmtCreateByPKey == null ) {
				stmtCreateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;$switch IsBaseTable yes implOracleCreateTableBindClassCode default empty$$switch HasSuperClassRelation no implOracleCreateTableBindOptAuditColumns default empty$$iterate Columns( each implOracleCreateTableBindVar )$
			int rowsAffected = stmtCreateByPKey.executeUpdate();
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by insert, not " + rowsAffected );
			}$switch HasSuperClassRelation no implOracleCreateTableSetBuffPKey default empty$$poptop Table switch BaseHasHistory yes implCreateTableOldStyleAuditCreated default empty$$switch HasChain yes implCreateTableOldStyleRereadCreated default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleRereadCreated"
		>$switch BaseHasClassCode yes implCreateTableOldStyleRereadCreatedWithCC default implCreateTableOldStyleRereadCreatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleRereadCreatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey key = schema.getFactory$reference BaseClass TableName$().newPKey();$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleRereadCreatedCopyBuffToKey )$
				$SchemaName$$TableName$Buff reread = readBuff( Authorization, key );
				Buff.set( reread );
			}
</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleRereadCreatedNoCC">
			{
				$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey key = schema.getFactory$reference BaseClass TableName$().newPKey();$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleRereadCreatedCopyBuffToKey )$
				$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey key = schema.getFactory$reference BaseClass TableName$().newPKey();
				$DefSchemaName$$TableName$Buff reread = readBuff( Authorization, key );
				Buff.set( reread );
			}
</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleRereadCreatedCopyBuffToKey">
				key.set$OptionalOrRequired$$Name$( Buff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implOracleCreateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implOracleCreateTableBindAuditColumns">
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( Calendar.getInstance() ) );
			stmtCreateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );
			stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( Calendar.getInstance() ) );</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreated"
		>$switch BaseHasClassCode yes implCreateTableOldStyleAuditCreatedWithCC default implCreateTableOldStyleAuditCreatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid,"
					+		" auditstamp,"
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, sysdate, $lower reference BaseClass ClassCode$.classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 0 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditCreatedByPKey == null ) {
					stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
				}
				argIdx = 1;
				stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleCreateTableAssignVar )$
				int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedValInh default implCreateTableOldStyleAuditCreatedValBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedVal$$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedValBase"
		>$iterate Columns( each implCreateTableOldStyleAuditCreatedVal )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedVal"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditCreatedReallyVal$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditCreatedReallyVal"
> + ", "
					+		"$lower reference Table ClassCode$.$DbColumnName$"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignVar"
		>$switch IsNullable yes implOracleCreateTableAssignOptVar
			default implOracleCreateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleCreateTableAssignOptBlobVar
			BoolDef implOracleCreateTableAssignOptBoolVar
			EnumDef implOracleCreateTableAssignOptEnumVar
			Int16Def implOracleCreateTableAssignOptInt16Var
			Int32Def implOracleCreateTableAssignOptInt32Var
			Int64Def implOracleCreateTableAssignOptInt64Var
			UInt16Def implOracleCreateTableAssignOptUInt16Var
			UInt32Def implOracleCreateTableAssignOptUInt32Var
			UInt64Def implOracleCreateTableAssignOptUInt64Var
			Id16Gen implOracleCreateTableAssignOptInt16Var
			Id32Gen implOracleCreateTableAssignOptInt32Var
			Id64Gen implOracleCreateTableAssignOptInt64Var
			FloatDef implOracleCreateTableAssignOptFloatVar
			DoubleDef implOracleCreateTableAssignOptDoubleVar
			NumberDef implOracleCreateTableAssignOptNumberVar
			StringDef implOracleCreateTableAssignOptStringVar
			TokenDef implOracleCreateTableAssignOptTokenVar
			NmTokenDef implOracleCreateTableAssignOptNmTokenVar
			NmTokensDef implOracleCreateTableAssignOptNmTokensVar
			TextDef implOracleCreateTableAssignOptTextVar
			DateDef implOracleCreateTableAssignOptDateVar
			TimeDef implOracleCreateTableAssignOptTimeVar
			TimestampDef implOracleCreateTableAssignOptTimestampVar
			TZDateDef implOracleCreateTableAssignOptTZDateVar
			TZTimeDef implOracleCreateTableAssignOptTZTimeVar
			TZTimestampDef implOracleCreateTableAssignOptTZTimestampVar
			UuidDef implOracleCreateTableAssignOptUuidVar
			UuidGen implOracleCreateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleCreateTableAssignReqBlobVar
			BoolDef implOracleCreateTableAssignReqBoolVar
			EnumDef implOracleCreateTableAssignReqEnumVar
			Int16Def implOracleCreateTableAssignReqInt16Var
			Int32Def implOracleCreateTableAssignReqInt32Var
			Int64Def implOracleCreateTableAssignReqInt64Var
			UInt16Def implOracleCreateTableAssignReqUInt16Var
			UInt32Def implOracleCreateTableAssignReqUInt32Var
			UInt64Def implOracleCreateTableAssignReqUInt64Var
			Id16Gen implOracleCreateTableAssignReqInt16Var
			Id32Gen implOracleCreateTableAssignReqInt32Var
			Id64Gen implOracleCreateTableAssignReqInt64Var
			FloatDef implOracleCreateTableAssignReqFloatVar
			DoubleDef implOracleCreateTableAssignReqDoubleVar
			NumberDef implOracleCreateTableAssignReqNumberVar
			StringDef implOracleCreateTableAssignReqStringVar
			TokenDef implOracleCreateTableAssignReqTokenVar
			NmTokenDef implOracleCreateTableAssignReqNmTokenVar
			NmTokensDef implOracleCreateTableAssignReqNmTokensVar
			TextDef implOracleCreateTableAssignReqTextVar
			DateDef implOracleCreateTableAssignReqDateVar
			TimeDef implOracleCreateTableAssignReqTimeVar
			TimestampDef implOracleCreateTableAssignReqTimestampVar
			TZDateDef implOracleCreateTableAssignReqTZDateVar
			TZTimeDef implOracleCreateTableAssignReqTZTimeVar
			TZTimestampDef implOracleCreateTableAssignReqTZTimestampVar
			UuidDef implOracleCreateTableAssignReqUuidVar
			UuidGen implOracleCreateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqBlobVar">
				stmtAuditCreatedByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqBoolVar">
				stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqEnumVar">
				stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqInt16Var">
				stmtAuditCreatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqInt32Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqInt64Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqUInt16Var">
				stmtAuditCreatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqUInt32Var">
				stmtAuditCreatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqUInt64Var">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqFloatVar">
				stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqDoubleVar">
				stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqNumberVar">
				stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqStringVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqNmTokenVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqNmTokensVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqTextVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqTZDateVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqTZTimeVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqTZTimestampVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableAssignReqUuidVar">
				stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditCreatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditCreatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereIndexCol">
					+				"$lower reference Index reference Table reference BaseClass ClassCode$.$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditWhereAndIndexCol">
					+			"AND $lower reference Index reference Table reference BaseClass ClassCode$.$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedData"
		>$switch HasSuperClassRelation yes implCreateTableOldStyleAuditCreatedDataInh default implCreateTableOldStyleAuditCreatedDataBase$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataInh"
		>$reference SuperClassRelation reference ToTable implCreateTableOldStyleAuditCreatedData$$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedDataBase"
		>$iterate Columns( each implCreateTableOldStyleAuditArgNonPKeyColumn )$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgNonPKeyColumn"
		>$switch ColumnInPrimaryIndex yes empty default implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgColumnName"> + ", "
					+		"$DbColumnName$"</GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditArgFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditArgFirstColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditArgFirstColumnName">
					+		"$DbColumnName$"</GenRule>

	<GenRule GenDef="Table" Name="implCreateTableOldStyleAuditCreatedNoCC">
			String sqlAuditCreated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, sysdate"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName )$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 0 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditCreatedByPKey == null ) {
				stmtAuditCreatedByPKey = cnx.prepareStatement( sqlAuditCreated );
			}
			argIdx = 1;
			stmtAuditCreatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditCreatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleCreateTableAssignVar )$
			int rowsAudited = stmtAuditCreatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}
</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableClassCodeKey"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implOracleCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implOracleCreateTableCopyBackColumn"
>			updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implOracleCreateTableInsertColumnComma">
				+		"$lower DbColumnName$, "</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implOracleCreateTableInsertColumn">
				+		"$lower DbColumnName$"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableInsertClassCode">
				+		"classcode, "</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesClassCode">
				+		"?, "</GenRule>

	<GenRule GenDef="Object" Name="implCreateTableOldStyleAuditValIndexColName"
		> + ", "$implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Value" Name="implCreateTableOldStyleAuditValFirstIndexColName">
					+		"$lower reference Table ClassCode$.$lower DbColumnName$" </GenRule>

	<GenRule GenDef="IndexCol" Name="implCreateTableOldStyleAuditValFirstIndexColName"
		>$reference Column implCreateTableOldStyleAuditValFirstIndexColName$</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindClassCode">
			stmtCreateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindConstClassCode">
			stmtCreateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesVarComma"
		>$implOracleCreateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleCreateTableValuesGenericVar
			BoolDef implOracleCreateTableValuesGenericVar
			EnumDef implOracleCreateTableValuesGenericVar
			Int16Def implOracleCreateTableValuesGenericVar
			Int32Def implOracleCreateTableValuesGenericVar
			Int64Def implOracleCreateTableValuesGenericVar
			UInt16Def implOracleCreateTableValuesGenericVar
			UInt32Def implOracleCreateTableValuesGenericVar
			UInt64Def implOracleCreateTableValuesGenericVar
			Id16Gen implOracleCreateTableValuesGenericVar
			Id32Gen implOracleCreateTableValuesGenericVar
			Id64Gen implOracleCreateTableValuesGenericVar
			FloatDef implOracleCreateTableValuesFloatVar
			DoubleDef implOracleCreateTableValuesGenericVar
			NumberDef implOracleCreateTableValuesGenericVar
			StringDef implOracleCreateTableValuesGenericVar
			TokenDef implOracleCreateTableValuesGenericVar
			NmTokenDef implOracleCreateTableValuesGenericVar
			NmTokensDef implOracleCreateTableValuesGenericVar
			TextDef implOracleCreateTableValuesTextVar
			DateDef implOracleCreateTableValuesDateVar
			TimeDef implOracleCreateTableValuesTimeVar
			TimestampDef implOracleCreateTableValuesTimestampVar
			TZDateDef implOracleCreateTableValuesTZDateVar
			TZTimeDef implOracleCreateTableValuesTZTimeVar
			TZTimestampDef implOracleCreateTableValuesTZTimestampVar
			UuidDef implOracleCreateTableValuesGenericVar
			UuidGen implOracleCreateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesGenericVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesTextVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesFloatVar">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesDateVar">
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesTimeVar">
				+		"to_timestamp( ?, 'HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesTimestampVar">
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesTZDateVar">
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesTZTimeVar">
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableValuesTZTimestampVar">
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindVarComma"
		>$implOracleCreateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindVar"
		>$switch IsNullable yes implOracleCreateTableBindOptVar
			default implOracleCreateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleCreateTableBindOptBlobVar
			BoolDef implOracleCreateTableBindOptBoolVar
			EnumDef implOracleCreateTableBindOptEnumVar
			Int16Def implOracleCreateTableBindOptInt16Var
			Int32Def implOracleCreateTableBindOptInt32Var
			Int64Def implOracleCreateTableBindOptInt64Var
			UInt16Def implOracleCreateTableBindOptUInt16Var
			UInt32Def implOracleCreateTableBindOptUInt32Var
			UInt64Def implOracleCreateTableBindOptUInt64Var
			Id16Gen implOracleCreateTableBindOptInt16Var
			Id32Gen implOracleCreateTableBindOptInt32Var
			Id64Gen implOracleCreateTableBindOptInt64Var
			FloatDef implOracleCreateTableBindOptFloatVar
			DoubleDef implOracleCreateTableBindOptDoubleVar
			NumberDef implOracleCreateTableBindOptNumberVar
			StringDef implOracleCreateTableBindOptStringVar
			TokenDef implOracleCreateTableBindOptTokenVar
			NmTokenDef implOracleCreateTableBindOptNmTokenVar
			NmTokensDef implOracleCreateTableBindOptNmTokensVar
			TextDef implOracleCreateTableBindOptTextVar
			DateDef implOracleCreateTableBindOptDateVar
			TimeDef implOracleCreateTableBindOptTimeVar
			TimestampDef implOracleCreateTableBindOptTimestampVar
			TZDateDef implOracleCreateTableBindOptTZDateVar
			TZTimeDef implOracleCreateTableBindOptTZTimeVar
			TZTimestampDef implOracleCreateTableBindOptTZTimestampVar
			UuidDef implOracleCreateTableBindOptUuidVar
			UuidGen implOracleCreateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleCreateTableBindReqBlobVar
			BoolDef implOracleCreateTableBindReqBoolVar
			EnumDef implOracleCreateTableBindReqEnumVar
			Int16Def implOracleCreateTableBindReqInt16Var
			Int32Def implOracleCreateTableBindReqInt32Var
			Int64Def implOracleCreateTableBindReqInt64Var
			UInt16Def implOracleCreateTableBindReqUInt16Var
			UInt32Def implOracleCreateTableBindReqUInt32Var
			UInt64Def implOracleCreateTableBindReqUInt64Var
			Id16Gen implOracleCreateTableBindReqInt16Var
			Id32Gen implOracleCreateTableBindReqInt32Var
			Id64Gen implOracleCreateTableBindReqInt64Var
			FloatDef implOracleCreateTableBindReqFloatVar
			DoubleDef implOracleCreateTableBindReqDoubleVar
			NumberDef implOracleCreateTableBindReqNumberVar
			StringDef implOracleCreateTableBindReqStringVar
			TokenDef implOracleCreateTableBindReqTokenVar
			NmTokenDef implOracleCreateTableBindReqNmTokenVar
			NmTokensDef implOracleCreateTableBindReqNmTokensVar
			TextDef implOracleCreateTableBindReqTextVar
			DateDef implOracleCreateTableBindReqDateVar
			TimeDef implOracleCreateTableBindReqTimeVar
			TimestampDef implOracleCreateTableBindReqTimestampVar
			TZDateDef implOracleCreateTableBindReqTZDateVar
			TZTimeDef implOracleCreateTableBindReqTZTimeVar
			TZTimestampDef implOracleCreateTableBindReqTZTimestampVar
			UuidDef implOracleCreateTableBindReqUuidVar
			UuidGen implOracleCreateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqBlobVar">
			stmtCreateByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqBoolVar">
			if( $Name$ ) {
				stmtCreateByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtCreateByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtCreateByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtCreateByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqEnumVar">
			stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqInt16Var">
			stmtCreateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqInt32Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqInt64Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqUInt16Var">
			stmtCreateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqUInt32Var">
			stmtCreateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqUInt64Var">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqFloatVar">
			stmtCreateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqDoubleVar">
			stmtCreateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqNumberVar">
			stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqStringVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqNmTokenVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqNmTokensVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqTextVar">
			stmtCreateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqTZDateVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqTZTimeVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqTZTimestampVar">
			stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableBindReqUuidVar">
			stmtCreateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleCreateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtCreateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtCreateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Table" Name="implOracleCreateTableInitRevision"
>			int Revision = 1;
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Value" Name="implOracleCreateTableCopyData"
>$switch ColumnInPrimaryIndex yes empty default implOracleCreateTableCopyColumn$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Value" Name="implOracleCreateTableCopyColumn"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Object" Name="implOracleCreateTableCopyClassCode"
>			String ClassCode = Buff.getClassCode();
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Object" Name="implOracleCreateTableRetBuffAttrComma"
>$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$ = $Name$,
		</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implOracleCreateTableKeys"
		>$switch GenerateId yes implOracleCreateTableKeysGenId default implOracleCreateTableKeysCopyId$</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implOracleCreateTableKeysGenId"
		>$reference Column implOracleCreateTableKeysGenId$</GenRule>

	<GenRule ScopeDef="Index" GenDef="IndexCol" Name="implOracleCreateTableKeysCopyId"
		>$reference Column implOracleCreateTableKeysCopyId$</GenRule>

	<GenRule GenDef="TableCol" Name="implOracleCreateTableKeysGenId"
		>$switch HasDispenser no implOracleCreateTableKeysGenSchemaId default implOracleCreateTableKeysGenTableId$</GenRule>

	<GenRule GenDef="TableCol" Name="implOracleCreateTableKeysGenSchemaId"
>			$implJavaAtomType$ $Name$ = ((I$EffSchemaName$Schema)schema).next$reference DataType Name$();
</GenRule>

	<GenRule GenDef="TableCol" Name="implOracleCreateTableKeysGenTableId"
>			$implJavaAtomType$ $Name$ = ((I$SchemaName$$reference DataType reference Dispenser TableName$Table)schema.getTable$reference DataType reference Dispenser TableName$()).next$reference DataType Name$( Authorization$popto Table iterate OnlyOwnerRelations( first implOracleCreateTableKeysGenTableIdPassArgs each empty )$ );
</GenRule>

	<GenRule GenDef="Relation" Name="implOracleCreateTableKeysGenTableIdPassArgs"
		>$reference FromIndex iterate Columns( each implOracleCreateTableKeysGenTableIdCommaArg )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleCreateTableKeysGenTableIdCommaArg">,
				Buff.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Atom" Name="implOracleCreateTableKeys"
		></GenRule>

	<GenRule GenDef="TableCol" Name="implOracleCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implOracleCreateTableKeysCopyId"
>			$implJavaAtomType$ $Name$ = Buff.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Table" Name="implOracleClassCodeSelectFragDbNameComma"
>				+		"$lower reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Table" Name="implOracleSelectDistinctClassCodeFrag"
>				+		"DISTINCT $lower reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implOracleClassCodeJoinBaseTable"
>				+	"INNER JOIN $lower reference BaseClass DbSchemaName$.$reference BaseClass DbTableName$ $lower reference BaseClass ClassCode$ ON "
$reference PrimaryKeyIndex iterate Columns( first implOracleClassCodeJoinBaseTableColumn each implOracleClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleClassCodeJoinBaseTableColumn">
				+		"$lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>
	<GenRule GenDef="IndexCol" Name="implOracleClassCodeAndJoinBaseTableColumn">
				+		"AND $lower ClassCode$.$reference Column DbColumnName$ = $lower popto Table reference BaseClass ClassCode$.$reference Column DbColumnName$ "</GenRule>

	<GenRule GenDef="Object" Name="implOracleLocalizeClassCodeKey"
>			String ClassCode = PKey.getClassCode();
</GenRule>

	<GenRule GenDef="TableCol" Name="implOracleTableColumnFetchColumn"
		>$switch IsNullable yes implOracleTableColumnFetchOptAttr default implOracleTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implOracleTableColumnFetchColumn"
		>$switch IsNullable yes implOracleTableColumnFetchOptAttr default implOracleTableColumnFetchReqAttr$</GenRule>

	<GenRule GenDef="TableCol" Name="implOracleTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implOracleTableColumnFetchBlobOptAttr
			UInt64Def implOracleTableColumnFetchUInt64OptAttr
			NumberDef implOracleTableColumnFetchNumberOptAttr
			DateDef implOracleTableColumnFetchDateOptAttr
			TimeDef implOracleTableColumnFetchTimeOptAttr
			TimestampDef implOracleTableColumnFetchTimestampOptAttr
			TZDateDef implOracleTableColumnFetchTZDateOptAttr
			TZTimeDef implOracleTableColumnFetchTZTimeOptAttr
			TZTimestampDef implOracleTableColumnFetchTZTimestampOptAttr
			default implOracleTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implOracleTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass BlobDef implOracleTableColumnFetchBlobOptAttr default implOracleTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchBlobOptAttr"
>				{
					byte colVal[] = resultSet.getBytes( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchUInt64OptAttr"
>				{
					String strval = resultSet.getString( idxcol );
					if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						BigDecimal bival = new BigDecimal( strval );
						buff.setOptional$Name$( bival );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchNumberOptAttr"
>				{
					BigDecimal value = resultSet.getBigDecimal( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( value );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$OracleSchema.convertDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$OracleSchema.convertTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$OracleSchema.convertTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchTZDateOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$OracleSchema.convertTZDateString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchTZTimeOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$OracleSchema.convertTZTimeString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchTZTimestampOptAttr"
>				{
					String colString = resultSet.getString( idxcol );
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( $SchemaName$OracleSchema.convertTZTimestampString( colString ) );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implOracleAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implOracleTableColumnFetchGenOptAttr"
		>$implOracleTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implOracleTableColumnFetchGenOptAttr"
		>$implOracleTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implOracleTableColumnFetchGenOptAttr"
		>$implOracleTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implOracleTableColumnFetchGenOptAttr"
		>$implOracleTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implOracleTableColumnFetchGenOptAttr"
		>$implOracleTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchOptStringAttr"
>				{
					$implJavaReqAtomType$ colVal = $implOracleAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implOracleTableColumnFetchGenOptAttr"
>				{
					$implJavaReqAtomType$ colVal = $implOracleAtomFetchReqColumn$;
					if( resultSet.wasNull() ) {
						buff.setOptional$Name$( null );
					}
					else {
						buff.setOptional$Name$( colVal );
					}
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchReqAttr"
		>$switch BaseModelAtomClass
			BlobDef implOracleTableColumnFetchBlobReqAttr
			UInt64Def implOracleTableColumnFetchUInt64ReqAttr
			NumberDef implOracleTableColumnFetchNumberReqAttr
			default implOracleTableColumnFetchGenReqAttr$</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchBlobReqAttr"
>				{
					byte colVal[] = resultSet.getBytes( idxcol );
					buff.setRequired$Name$( colVal );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchUInt64ReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnFetchNumberReqAttr"
>				{
					String strval = resultSet.getString( idxcol );
					BigDecimal bival = new BigDecimal( strval );
					buff.setRequired$Name$( bival );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implOracleTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implOracleAtomFetchReqColumn$ );
				idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implOracleTableColumnFetchGenReqAttr"
>				buff.setRequired$Name$( $implOracleAtomFetchReqColumn$ );
				idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implOracleAtomFetchReqColumn"
		>$reference DataType implOracleAtomFetchReqColumn$</GenRule>

	<GenRule GenDef="BlobDef" Name="implOracleAtomFetchReqColumn"
		>resultSet.getBytes( idxcol ) )</GenRule>

	<GenRule GenDef="BoolDef" Name="implOracleAtomFetchReqColumn"
		>( "Y".equals( resultSet.getString( idxcol ) ) ? true : false )</GenRule>

	<GenRule GenDef="EnumDef" Name="implOracleAtomFetchReqColumn"
		>$EffSchemaName$Schema.ordinalTo$Name$( resultSet.getShort( idxcol ) )</GenRule>

	<GenRule GenDef="Int16Def" Name="implOracleAtomFetchReqColumn"
		>resultSet.getShort( idxcol )</GenRule>

	<GenRule GenDef="Int32Def" Name="implOracleAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="Int64Def" Name="implOracleAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt16Def" Name="implOracleAtomFetchReqColumn"
		>resultSet.getInt( idxcol )</GenRule>

	<GenRule GenDef="UInt32Def" Name="implOracleAtomFetchReqColumn"
		>resultSet.getLong( idxcol )</GenRule>

	<GenRule GenDef="UInt64Def" Name="implOracleAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="FloatDef" Name="implOracleAtomFetchReqColumn"
		>resultSet.getFloat( idxcol )</GenRule>

	<GenRule GenDef="DoubleDef" Name="implOracleAtomFetchReqColumn"
		>resultSet.getDouble( idxcol )</GenRule>

	<GenRule GenDef="NumberDef" Name="implOracleAtomFetchReqColumn"
		>resultSet.getBigDecimal( idxcol )</GenRule>

	<GenRule GenDef="StringDef" Name="implOracleAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TokenDef" Name="implOracleAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokenDef" Name="implOracleAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="NmTokensDef" Name="implOracleAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="TextDef" Name="implOracleAtomFetchReqColumn"
		>resultSet.getString( idxcol )</GenRule>

	<GenRule GenDef="DateDef" Name="implOracleAtomFetchReqColumn"
		>$SchemaName$OracleSchema.convertDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimeDef" Name="implOracleAtomFetchReqColumn"
		>$SchemaName$OracleSchema.convertTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TimestampDef" Name="implOracleAtomFetchReqColumn"
		>$SchemaName$OracleSchema.convertTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZDateDef" Name="implOracleAtomFetchReqColumn"
		>$SchemaName$OracleSchema.convertTZDateString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimeDef" Name="implOracleAtomFetchReqColumn"
		>$SchemaName$OracleSchema.convertTZTimeString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="TZTimestampDef" Name="implOracleAtomFetchReqColumn"
		>$SchemaName$OracleSchema.convertTZTimestampString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidDef" Name="implOracleAtomFetchReqColumn"
		>$SchemaName$OracleSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="UuidGen" Name="implOracleAtomFetchReqColumn"
		>$SchemaName$OracleSchema.convertUuidString( resultSet.getString( idxcol ) )</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleLocalizeTableKeys"
		>$reference Column implOracleCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="TableCol" Name="implOracleLocalizeTableKeys"
		>$implOracleCreateTableKeysLocalizeId$</GenRule>
	<GenRule GenDef="Atom" Name="implOracleLocalizeTableKeys"
		>$implOracleCreateTableKeysLocalizeId$</GenRule>

	<GenRule GenDef="TableCol" Name="implOracleCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>
	<GenRule GenDef="Atom" Name="implOracleCreateTableKeysLocalizeId"
>			$implJavaAtomType$ $Name$ = PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$();
</GenRule>

	<GenRule GenDef="Object" Name="implOracleClassCodeSelectFragDbNameComma"
>				+		"$lower popto Table reference BaseClass ClassCode$.ClassCode, "
</GenRule>

	<GenRule GenDef="Object" Name="implOracleSelectDistinctClassCodeFrag"
>				+		"DISTINCT $lower popto Table reference BaseClass ClassCode$.ClassCode "
</GenRule>

	<GenRule GenDef="Table" Name="implOracleInhTableColumnSelectFrags"
		>$switch HasSuperClassRelation yes implOracleChainTableColumnSelectFrags default empty$$iterate Columns( each implOracleTableDataColumnSelectFrag )$</GenRule>

	<GenRule GenDef="Value" Name="implOracleTableDataColumnSelectFrag"
		>$switch ColumnInPrimaryIndex yes empty default implOracleTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Table" Name="implOracleChainTableColumnSelectFrags"
		>$reference SuperClassRelation reference ToTable implOracleInhTableColumnSelectFrags$</GenRule>


	<GenRule GenDef="Object" Name="implBuffTableColumnFetchClassCode"
>				if( ! ( buff.getClassCode().equals( resultSet.getString( idxcol ) ) ) ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected ClassCode \"" + buff.getClassCode() +	"\", not \"" + resultSet.getString( idxcol ) + "\"" );
				}
				idxcol++;
</GenRule>

	<GenRule GenDef="Value" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchDataColumn"
		>$switch ColumnInPrimaryIndex yes empty default implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchColumn"
		>$switch IsNullable yes implBuffTableColumnFetchOptAttr default implBuffTableColumnFetchReqAttr$</GenRule>
	<GenRule GenDef="IndexCol" Name="implBuffTableColumnFetchColumn"
		>$reference Column implBuffTableColumnFetchColumn$</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchOptAttr"
		>$switch BaseModelAtomClass
			BlobDef implBuffTableColumnFetchBlobOptAttr
			UInt64Def implBuffTableColumnFetchUInt64OptAttr
			NumberDef implBuffTableColumnFetchNumberOptAttr
			default implBuffTableColumnFetchGenOptAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchBlobOptAttr"
>		{
			byte colVal[] = resultSet.getBytes( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchUInt64OptAttr"
>		{
			String strval = resultSet.getString( idxcol );
			if( resultSet.wasNull() || ( strval == null ) || ( strval.length() &lt;= 0 ) ) {
				buff.setOptional$Name$( null );
			}
			else {
				BigDecimal bival = new BigDecimal( strval );
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchNumberOptAttr"
>		{
			BigDecimal bival = resultSet.getBigDecimal( idxcol );
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( bival );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implOracleAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="StringDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TextDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="TokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokenDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>
	<GenRule GenDef="NmTokensDef" Name="implBuffTableColumnFetchGenOptAttr"
		>$implBuffTableColumnFetchOptStringAttr$</GenRule>

	<GenRule GenDef="Object" Name="implBuffTableColumnFetchOptStringAttr"
>		{
			$implJavaReqAtomType$ colVal = $implOracleAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchGenOptAttr"
>		{
			$implJavaReqAtomType$ colVal = $implOracleAtomFetchReqColumn$;
			if( resultSet.wasNull() ) {
				buff.setOptional$Name$( null );
			}
			else {
				buff.setOptional$Name$( colVal );
			}
		}
		idxcol++;
</GenRule>

	<GenRule GenDef="TableCol" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implOracleAtomFetchReqColumn$ );
		idxcol++;
</GenRule>
	<GenRule GenDef="Atom" Name="implBuffTableColumnFetchReqAttr"
>		buff.setRequired$Name$( $implOracleAtomFetchReqColumn$ );
		idxcol++;
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildFromHierarchy"
		>$switch HasSuperClassRelation yes implReadTableBuffBuildInhFromHierarchy default implReadTableBuffBuildBaseFromHierarchy$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildInhFromHierarchy"
>$reference SuperClassRelation reference ToTable implReadTableBuffBuildFromHierarchy$
				+	"INNER JOIN " + schema.getLowerDbSchemaName() + ".$DbTableName$ $lower ClassCode$ ON "$reference PrimaryKeyIndex iterate Columns( first implOracleClassCodeJoinBaseTableColumn each implOracleClassCodeAndJoinBaseTableColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffBuildBaseFromHierarchy">" + schema.getLowerDbSchemaName() + ".$DbTableName$ $lower ClassCode$ "</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildFetchColumns"
		>$switch HasSuperClassRelation yes implBuffTableBuildInhFetchColumns default implBuffTableBuildBaseFetchColumns$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildInhFetchColumns"
		>$reference SuperClassRelation reference ToTable implBuffTableBuildFetchColumns$$iterate Columns( each implBuffTableColumnFetchDataColumn )$</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableBuildBaseFetchColumns"
		>$iterate Columns( each implBuffTableColumnFetchColumn )$</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableDistinctClassCode">
	protected static String S_sqlSelect$TableName$DistinctClassCode = null;

	public String getSqlSelect$TableName$DistinctClassCode() {
		if( S_sqlSelect$TableName$DistinctClassCode == null ) {
			S_sqlSelect$TableName$DistinctClassCode =
					"SELECT "
$implOracleSelectDistinctClassCodeFrag$<!--
-->				+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$DistinctClassCode );
	}
</GenRule>

	<GenRule GenDef="Table" Name="declSqlSelectTableBuff">
	protected static String S_sqlSelect$TableName$Buff = null;

	public String getSqlSelect$TableName$Buff() {
		if( S_sqlSelect$TableName$Buff == null ) {
			S_sqlSelect$TableName$Buff =
					"SELECT "
$switch HasClassCode yes implOracleClassCodeSelectFragDbNameComma default empty$$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleTableColumnSelectFragDbNameComma )$$switch HasSuperClassRelation no implOracleSelectFragOptAuditColumns default empty$$implOracleInhTableColumnSelectFrags$				+		"$lower reference BaseClass ClassCode$.Revision "
				+	"FROM $implReadTableBuffBuildFromHierarchy$;
		}
		return( S_sqlSelect$TableName$Buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implOracleSelectFragOptAuditColumns"
		>$switch HasSuperClassRelation yes implOracleSelectFragAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implOracleSelectFragAuditColumns">
				+		"$lower ClassCode$.createdby as createdby, "
				+		"to_char( $lower ClassCode$.createdat, 'YYYY-MM-DD HH24:MI:SS' ) as createdat, "
				+		"$lower ClassCode$.updatedby as updatedby, "
				+		"to_char( $lower ClassCode$.updatedat, 'YYYY-MM-DD HH24:MI:SS' ) as updatedat, "</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetWalkClassCode">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetMapViaClassCode">
		String classCode = resultSet.getString( idxcol );
		idxcol++;
		$DefSchemaName$$TableName$Buff buff;
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getFactory$TableName$().newBuff();
		}$iterate TableSubClasses( each implUnpackResultSetWalkClassCode empty empty )$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Unrecognized class code \"" + classCode + "\"" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetDirectBuff">
		$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();</GenRule>

	<GenRule GenDef="Table" Name="implUnpackResultSetToBuff">
	protected $poptop Table DefSchemaName$$poptop Table TableName$Buff unpack$poptop Table TableName$ResultSetToBuff( ResultSet resultSet )
	throws SQLException
	{
		final String S_ProcName = "unpack$poptop Table TableName$ResultSetToBuff";
		int idxcol = 1;$switch HasClassCode yes implUnpackResultSetMapViaClassCode default implUnpackResultSetDirectBuff$$switch HasAuditColumns yes implBuffTableColumnFetchAuditColumns default empty$$implBuffTableBuildFetchColumns$<!--
-->		buff.setRequiredRevision( resultSet.getInt( idxcol ) );
		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableColumnFetchAuditColumns">
		{$implBuffTableColumnFetchAuditCreateColumns$
			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedByUserId( null );
			}
			else {
				buff.setUpdatedByUserId( UUID.fromString( colString ) );
			}
			idxcol ++;

			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setUpdatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setUpdatedAt( null );
			}
			else {
				buff.setUpdatedAt( $SchemaName$OracleSchema.convertTimestampString( colString ) );
			}
			idxcol++;
		}
</GenRule>

	<GenRule GenDef="Table" Name="implBuffTableColumnFetchAuditCreateColumns">
			String colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedByUserId( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedByUserId( null );
			}
			else {
				buff.setCreatedByUserId( UUID.fromString( colString ) );
			}
			idxcol ++;

			colString = resultSet.getString( idxcol );
			if( resultSet.wasNull() ) {
				buff.setCreatedAt( null );
			}
			else if( ( colString == null ) || ( colString.length() &lt;= 0 ) ) {
				buff.setCreatedAt( null );
			}
			else {
				buff.setCreatedAt( $SchemaName$OracleSchema.convertTimestampString( colString ) );
			}
			idxcol++;</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeReadBuff"
>		buff = readBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeLockBuff"
>		buff = lockBuff( Authorization, PKey );
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedAssembleSubClasses default implReadTableDerivedInvokeReadBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClasses">
		String classCode;
		ResultSet resultSet = null;
		CallableStatement stmtReadDerivedClassCode = null;
		try {$implReadTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtReadDerivedClassCode != null ) {
				try {
					stmtReadDerivedClassCode.close();
				}
				catch( SQLException e ) {
				}
				stmtReadDerivedClassCode = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = readBuff( Authorization, PKey );
		}$implReadTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClassesTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			stmtReadDerivedClassCode = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$poptop Table sp_read_dbtablename_cc$( ?, ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end;" );
			int argIdx = 1;
			stmtReadDerivedClassCode.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleReadTableDerivedClassCodeAssignVar )$
			stmtReadDerivedClassCode.execute();
			resultSet = (ResultSet)stmtReadDerivedClassCode.getObject( 1 );$implReadTableDerivedAssembleSubClassesEvalResultSet$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedAssembleSubClassesEvalResultSet">
			if( resultSet == null ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"$poptop Table sp_read_dbtablename_cc$() did not return a result set" );
			}
			try {
				if( resultSet.next() ) {
					classCode = resultSet.getString( 1 );
					if( resultSet.next() ) {
						resultSet.last();
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
					}
				}
				else {
					return( null );
				}
			}
			catch( SQLException e ) {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implOracleReadTableDerivedClassCodeAssignOptVar
			default implOracleReadTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleReadTableDerivedClassCodeAssignOptBlobVar
			BoolDef implOracleReadTableDerivedClassCodeAssignOptBoolVar
			EnumDef implOracleReadTableDerivedClassCodeAssignOptEnumVar
			Int16Def implOracleReadTableDerivedClassCodeAssignOptInt16Var
			Int32Def implOracleReadTableDerivedClassCodeAssignOptInt32Var
			Int64Def implOracleReadTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implOracleReadTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implOracleReadTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implOracleReadTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implOracleReadTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implOracleReadTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implOracleReadTableDerivedClassCodeAssignOptInt64Var
			FloatDef implOracleReadTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implOracleReadTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implOracleReadTableDerivedClassCodeAssignOptNumberVar
			StringDef implOracleReadTableDerivedClassCodeAssignOptStringVar
			TokenDef implOracleReadTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implOracleReadTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implOracleReadTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implOracleReadTableDerivedClassCodeAssignOptTextVar
			DateDef implOracleReadTableDerivedClassCodeAssignOptDateVar
			TimeDef implOracleReadTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implOracleReadTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implOracleReadTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implOracleReadTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implOracleReadTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implOracleReadTableDerivedClassCodeAssignOptUuidVar
			UuidGen implOracleReadTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleReadTableDerivedClassCodeAssignReqBlobVar
			BoolDef implOracleReadTableDerivedClassCodeAssignReqBoolVar
			EnumDef implOracleReadTableDerivedClassCodeAssignReqEnumVar
			Int16Def implOracleReadTableDerivedClassCodeAssignReqInt16Var
			Int32Def implOracleReadTableDerivedClassCodeAssignReqInt32Var
			Int64Def implOracleReadTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implOracleReadTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implOracleReadTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implOracleReadTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implOracleReadTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implOracleReadTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implOracleReadTableDerivedClassCodeAssignReqInt64Var
			FloatDef implOracleReadTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implOracleReadTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implOracleReadTableDerivedClassCodeAssignReqNumberVar
			StringDef implOracleReadTableDerivedClassCodeAssignReqStringVar
			TokenDef implOracleReadTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implOracleReadTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implOracleReadTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implOracleReadTableDerivedClassCodeAssignReqTextVar
			DateDef implOracleReadTableDerivedClassCodeAssignReqDateVar
			TimeDef implOracleReadTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implOracleReadTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implOracleReadTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implOracleReadTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implOracleReadTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implOracleReadTableDerivedClassCodeAssignReqUuidVar
			UuidGen implOracleReadTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqBlobVar">
			stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqBoolVar">
			if( $Name$ ) {
				stmtReadDerivedClassCode.setString( argIdx++, "Y" );
			}
			else {
				stmtReadDerivedClassCode.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadDerivedClassCode.setString( argIdx++, "Y" );
				}
				else {
					stmtReadDerivedClassCode.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqEnumVar">
			stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqInt16Var">
			stmtReadDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqInt32Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqInt64Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqUInt16Var">
			stmtReadDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqUInt32Var">
			stmtReadDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqUInt64Var">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqFloatVar">
			stmtReadDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqDoubleVar">
			stmtReadDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqNumberVar">
			stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqStringVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqNmTokenVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqNmTokensVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqTextVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqTZDateVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqTZTimeVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignReqUuidVar">
			stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$reference BaseClass reference PrimaryKeyIndex Suffix$( Authorization$poptop Table reference PrimaryKeyIndex iterate Columns( each implReadTableDerivedInvokeSubClassPassPKeyArg )$ );
		}$implReadTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedInvokeSubClassPassPKeyArg">,
				PKey.get$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$reference Column Name$()</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByPKey">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readDerived";$implCheckOpenTransaction$
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implReadTableDerivedInvokeReadBuff default implReadTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedByPKey">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff lockDerived( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockDerived";$implCheckOpenTransaction$
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;
$switch HasClassCode no implLockTableDerivedInvokeLockBuff default implLockTableDerivedCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implLockTableDerivedAssembleSubClasses default implLockTableDerivedInvokeLockBuff$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClasses"
>		String classCode;
		ResultSet resultSet = null;
		CallableStatement stmtLockDerivedClassCode = null;
		try {$implLockTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtLockDerivedClassCode != null ) {
				try {
					stmtLockDerivedClassCode.close();
				}
				catch( SQLException e ) {
				}
				stmtLockDerivedClassCode = null;
			}
		}
		if( classCode.equals( "$ClassCode$" ) ) {
			buff = lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClassesTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleLocalizeTableKeys empty empty )$<!--
-->			Connection cnx = schema.getCnx();
			stmtLockDerivedClassCode = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$poptop Table sp_read_dbtablename_cc$( ?, ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end;" );
			int argIdx = 1;
			stmtLockDerivedClassCode.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockDerivedClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockDerivedClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleLockTableDerivedClassCodeAssignVar )$
			stmtLockDerivedClassCode.execute();
			resultSet = (ResultSet)stmtLockDerivedClassCode.getObject( 1 );$implLockTableDerivedAssembleSubClassesEvalResultSet$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedAssembleSubClassesEvalResultSet">
			if( resultSet == null ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"$poptop Table sp_read_dbtablename_cc$() did not return a result set" );
			}
			try {
				if( resultSet.next() ) {
					classCode = resultSet.getString( 1 );
					if( resultSet.next() ) {
						resultSet.last();
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
					}
				}
				else {
					return( null );
				}
			}
			catch( SQLException e ) {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignVar"
		>$switch IsNullable yes implOracleLockTableDerivedClassCodeAssignOptVar
			default implOracleLockTableDerivedClassCodeAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleLockTableDerivedClassCodeAssignOptBlobVar
			BoolDef implOracleLockTableDerivedClassCodeAssignOptBoolVar
			EnumDef implOracleLockTableDerivedClassCodeAssignOptEnumVar
			Int16Def implOracleLockTableDerivedClassCodeAssignOptInt16Var
			Int32Def implOracleLockTableDerivedClassCodeAssignOptInt32Var
			Int64Def implOracleLockTableDerivedClassCodeAssignOptInt64Var
			UInt16Def implOracleLockTableDerivedClassCodeAssignOptUInt16Var
			UInt32Def implOracleLockTableDerivedClassCodeAssignOptUInt32Var
			UInt64Def implOracleLockTableDerivedClassCodeAssignOptUInt64Var
			Id16Gen implOracleLockTableDerivedClassCodeAssignOptInt16Var
			Id32Gen implOracleLockTableDerivedClassCodeAssignOptInt32Var
			Id64Gen implOracleLockTableDerivedClassCodeAssignOptInt64Var
			FloatDef implOracleLockTableDerivedClassCodeAssignOptFloatVar
			DoubleDef implOracleLockTableDerivedClassCodeAssignOptDoubleVar
			NumberDef implOracleLockTableDerivedClassCodeAssignOptNumberVar
			StringDef implOracleLockTableDerivedClassCodeAssignOptStringVar
			TokenDef implOracleLockTableDerivedClassCodeAssignOptTokenVar
			NmTokenDef implOracleLockTableDerivedClassCodeAssignOptNmTokenVar
			NmTokensDef implOracleLockTableDerivedClassCodeAssignOptNmTokensVar
			TextDef implOracleLockTableDerivedClassCodeAssignOptTextVar
			DateDef implOracleLockTableDerivedClassCodeAssignOptDateVar
			TimeDef implOracleLockTableDerivedClassCodeAssignOptTimeVar
			TimestampDef implOracleLockTableDerivedClassCodeAssignOptTimestampVar
			TZDateDef implOracleLockTableDerivedClassCodeAssignOptTZDateVar
			TZTimeDef implOracleLockTableDerivedClassCodeAssignOptTZTimeVar
			TZTimestampDef implOracleLockTableDerivedClassCodeAssignOptTZTimestampVar
			UuidDef implOracleLockTableDerivedClassCodeAssignOptUuidVar
			UuidGen implOracleLockTableDerivedClassCodeAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleLockTableDerivedClassCodeAssignReqBlobVar
			BoolDef implOracleLockTableDerivedClassCodeAssignReqBoolVar
			EnumDef implOracleLockTableDerivedClassCodeAssignReqEnumVar
			Int16Def implOracleLockTableDerivedClassCodeAssignReqInt16Var
			Int32Def implOracleLockTableDerivedClassCodeAssignReqInt32Var
			Int64Def implOracleLockTableDerivedClassCodeAssignReqInt64Var
			UInt16Def implOracleLockTableDerivedClassCodeAssignReqUInt16Var
			UInt32Def implOracleLockTableDerivedClassCodeAssignReqUInt32Var
			UInt64Def implOracleLockTableDerivedClassCodeAssignReqUInt64Var
			Id16Gen implOracleLockTableDerivedClassCodeAssignReqInt16Var
			Id32Gen implOracleLockTableDerivedClassCodeAssignReqInt32Var
			Id64Gen implOracleLockTableDerivedClassCodeAssignReqInt64Var
			FloatDef implOracleLockTableDerivedClassCodeAssignReqFloatVar
			DoubleDef implOracleLockTableDerivedClassCodeAssignReqDoubleVar
			NumberDef implOracleLockTableDerivedClassCodeAssignReqNumberVar
			StringDef implOracleLockTableDerivedClassCodeAssignReqStringVar
			TokenDef implOracleLockTableDerivedClassCodeAssignReqTokenVar
			NmTokenDef implOracleLockTableDerivedClassCodeAssignReqNmTokenVar
			NmTokensDef implOracleLockTableDerivedClassCodeAssignReqNmTokensVar
			TextDef implOracleLockTableDerivedClassCodeAssignReqTextVar
			DateDef implOracleLockTableDerivedClassCodeAssignReqDateVar
			TimeDef implOracleLockTableDerivedClassCodeAssignReqTimeVar
			TimestampDef implOracleLockTableDerivedClassCodeAssignReqTimestampVar
			TZDateDef implOracleLockTableDerivedClassCodeAssignReqTZDateVar
			TZTimeDef implOracleLockTableDerivedClassCodeAssignReqTZTimeVar
			TZTimestampDef implOracleLockTableDerivedClassCodeAssignReqTZTimestampVar
			UuidDef implOracleLockTableDerivedClassCodeAssignReqUuidVar
			UuidGen implOracleLockTableDerivedClassCodeAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqBlobVar">
			stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqBoolVar">
			if( $Name$ ) {
				stmtLockDerivedClassCode.setString( argIdx++, "Y" );
			}
			else {
				stmtLockDerivedClassCode.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtLockDerivedClassCode.setString( argIdx++, "Y" );
				}
				else {
					stmtLockDerivedClassCode.setString( argIdx++, "N" );
				}
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqEnumVar">
			stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqInt16Var">
			stmtLockDerivedClassCode.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqInt32Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqInt64Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqUInt16Var">
			stmtLockDerivedClassCode.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqUInt32Var">
			stmtLockDerivedClassCode.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqUInt64Var">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqFloatVar">
			stmtLockDerivedClassCode.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqDoubleVar">
			stmtLockDerivedClassCode.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqNumberVar">
			stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqStringVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqNmTokenVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqNmTokensVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqTextVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqTZDateVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqTZTimeVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqTZTimestampVar">
			stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignReqUuidVar">
			stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockTableDerivedClassCodeAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockDerivedClassCode.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockDerivedClassCode.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implLockTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implLockTableDerivedInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().lockBuff( Authorization, PKey );
		}$implLockTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeReadAllBuff"
>		buffArray = readAllBuff( Authorization );
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadAllTableDerivedAssembleSubClasses default implReadAllTableDerivedInvokeReadAllBuff$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClasses"
>		String classCode;
		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		ResultSet resultSet = null;
		CallableStatement stmtReadAllClassCode = null;
		try {$implReadAllTableDerivedAssembleSubClassesTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtReadAllClassCode != null ) {
				try {
					stmtReadAllClassCode.close();
				}
				catch( SQLException e ) {
				}
				stmtReadAllClassCode = null;
			}
		}
		List&lt;$DefSchemaName$$TableName$Buff&gt; resultList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
		for( int classCodeIdx = 0; classCodeIdx &lt; classCodeList.size(); classCodeIdx ++ ) {
			$DefSchemaName$$TableName$Buff[] subList;
			classCode = classCodeList.get( classCodeIdx );
			if( classCode.equals( "$ClassCode$" ) ) {
				subList = readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
			for( int idxSubList = 0; idxSubList &lt; subList.length; idxSubList ++ ) {
				resultList.add( subList[ idxSubList ] );
			}
		}
		int idx = 0;
		buffArray = new $DefSchemaName$$TableName$Buff[ resultList.size() ];
		Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			buffArray[idx++] = iter.next();
		}
</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedAssembleSubClassesTryBody">
			Connection cnx = schema.getCnx();
			stmtReadAllClassCode = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$poptop Table sp_read_dbtablename_cc_all$( ?, ?, ?, ?, ?, ? ); end;" );
			int argIdx = 1;
			stmtReadAllClassCode.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllClassCode.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllClassCode.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			stmtReadAllClassCode.execute();
			resultSet = (ResultSet)stmtReadAllClassCode.getObject( 1 );
			if( resultSet != null ) {
				try {
					while( resultSet.next() ) {
						classCode = resultSet.getString( 1 );
						classCodeList.add( classCode );
					}
				}
				catch( SQLException e ) {
				}
				finally {
					if( stmtReadAllClassCode != null ) {
						try {
							stmtReadAllClassCode.close();
						}
						catch( SQLException e ) {
						}
						stmtReadAllClassCode = null;
					}
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedWalkSubClasses"
		>$iterate TableSubClasses( each implReadAllTableDerivedInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerivedInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				subList = schema.getTable$TableName$().readAllBuff( Authorization );
			}$implReadAllTableDerivedWalkSubClasses$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableDerived">
	public $DefSchemaName$$TableName$Buff[] readAllDerived( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllDerived";
		$DefSchemaName$$TableName$Buff[] buffArray;$implCheckOpenTransaction$
$switch HasClassCode no implReadAllTableDerivedInvokeReadAllBuff default implReadAllTableDerivedCheckForSubClasses$<!--
-->		return( buffArray );
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByIndexes"
		>$switch HasSuperClassRelation yes implReadTableDerivedByInhIndexes default implReadTableDerivedByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableDerivedByIndexes$$iterate Index( each implReadTableDerivedByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByBaseIndexes"
		>$iterate Index( each implReadTableDerivedByIndex )$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableDerivedByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByIndex"
		>$switch IsUnique
			yes implReadTableDerivedByUniqueIndex
			default implReadTableDerivedByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByUniqueIndexAssembleSubClasses default implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuffByUniqueIndex"
>		buff = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleSubClasses"
>		String classCode;$implReadTableDerivedByUniqueIndexAssembleReqSubClassesBody$
		if( classCode.equals( "$poptop Table ClassCode$" ) ) {
			buff = readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexTopWalkSubClasses$
		else {
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Did not expect ClassCode \"" + classCode + "\"" );
		}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleOptSubClassesBody">
		ResultSet resultSet = null;
		Statement stmt = null;
		try {
			Connection cnx = schema.getCnx();
			String sql =
					getSqlSelect$poptop Table TableName$DistinctClassCode()
				+	"WHERE "
$iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );
			if( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}
		}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleReqSubClassesBody">
		ResultSet resultSet = null;
		CallableStatement stmtReadClassCodeBy$Suffix$ = null;
		try {
			Connection cnx = schema.getCnx();
			stmtReadClassCodeBy$Suffix$ = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?, ?"$iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end;" );
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implOracleReadDerivedClassCodeBySuffixBindVar )$
			stmtReadClassCodeBy$Suffix$.execute();
			resultSet = (ResultSet)stmtReadClassCodeBy$Suffix$.getObject( 1 );$implReadTableDerivedByUniqueIndexAssembleReqSubClassesEvalResultSet$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexAssembleReqSubClassesEvalResultSet">
			if( resultSet == null ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"$sp_read_dbtablename_cc_by_suffix$() did not return a result set" );
			}
			try {
				if( resultSet.next() ) {
					classCode = resultSet.getString( 1 );
					if( resultSet.next() ) {
						resultSet.last();
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
					}
				}
				else {
					return( null );
				}
			}
			catch( SQLException e ) {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtReadClassCodeBy$Suffix$ != null ) {
				try {
					stmtReadClassCodeBy$Suffix$.close();
				}
				catch( SQLException e ) {
				}
				stmtReadClassCodeBy$Suffix$ = null;
			}
		}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindVar"
		>$switch IsNullable yes implOracleReadDerivedClassCodeBySuffixBindOptVar
			default implOracleReadDerivedClassCodeBySuffixBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleReadDerivedClassCodeBySuffixBindOptBlobVar
			BoolDef implOracleReadDerivedClassCodeBySuffixBindOptBoolVar
			EnumDef implOracleReadDerivedClassCodeBySuffixBindOptEnumVar
			Int16Def implOracleReadDerivedClassCodeBySuffixBindOptInt16Var
			Int32Def implOracleReadDerivedClassCodeBySuffixBindOptInt32Var
			Int64Def implOracleReadDerivedClassCodeBySuffixBindOptInt64Var
			UInt16Def implOracleReadDerivedClassCodeBySuffixBindOptUInt16Var
			UInt32Def implOracleReadDerivedClassCodeBySuffixBindOptUInt32Var
			UInt64Def implOracleReadDerivedClassCodeBySuffixBindOptUInt64Var
			Id16Gen implOracleReadDerivedClassCodeBySuffixBindOptInt16Var
			Id32Gen implOracleReadDerivedClassCodeBySuffixBindOptInt32Var
			Id64Gen implOracleReadDerivedClassCodeBySuffixBindOptInt64Var
			FloatDef implOracleReadDerivedClassCodeBySuffixBindOptFloatVar
			DoubleDef implOracleReadDerivedClassCodeBySuffixBindOptDoubleVar
			NumberDef implOracleReadDerivedClassCodeBySuffixBindOptNumberVar
			StringDef implOracleReadDerivedClassCodeBySuffixBindOptStringVar
			TokenDef implOracleReadDerivedClassCodeBySuffixBindOptTokenVar
			NmTokenDef implOracleReadDerivedClassCodeBySuffixBindOptNmTokenVar
			NmTokensDef implOracleReadDerivedClassCodeBySuffixBindOptNmTokensVar
			TextDef implOracleReadDerivedClassCodeBySuffixBindOptTextVar
			DateDef implOracleReadDerivedClassCodeBySuffixBindOptDateVar
			TimeDef implOracleReadDerivedClassCodeBySuffixBindOptTimeVar
			TimestampDef implOracleReadDerivedClassCodeBySuffixBindOptTimestampVar
			TZDateDef implOracleReadDerivedClassCodeBySuffixBindOptTZDateVar
			TZTimeDef implOracleReadDerivedClassCodeBySuffixBindOptTZTimeVar
			TZTimestampDef implOracleReadDerivedClassCodeBySuffixBindOptTZTimestampVar
			UuidDef implOracleReadDerivedClassCodeBySuffixBindOptUuidVar
			UuidGen implOracleReadDerivedClassCodeBySuffixBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleReadDerivedClassCodeBySuffixBindReqBlobVar
			BoolDef implOracleReadDerivedClassCodeBySuffixBindReqBoolVar
			EnumDef implOracleReadDerivedClassCodeBySuffixBindReqEnumVar
			Int16Def implOracleReadDerivedClassCodeBySuffixBindReqInt16Var
			Int32Def implOracleReadDerivedClassCodeBySuffixBindReqInt32Var
			Int64Def implOracleReadDerivedClassCodeBySuffixBindReqInt64Var
			UInt16Def implOracleReadDerivedClassCodeBySuffixBindReqUInt16Var
			UInt32Def implOracleReadDerivedClassCodeBySuffixBindReqUInt32Var
			UInt64Def implOracleReadDerivedClassCodeBySuffixBindReqUInt64Var
			Id16Gen implOracleReadDerivedClassCodeBySuffixBindReqInt16Var
			Id32Gen implOracleReadDerivedClassCodeBySuffixBindReqInt32Var
			Id64Gen implOracleReadDerivedClassCodeBySuffixBindReqInt64Var
			FloatDef implOracleReadDerivedClassCodeBySuffixBindReqFloatVar
			DoubleDef implOracleReadDerivedClassCodeBySuffixBindReqDoubleVar
			NumberDef implOracleReadDerivedClassCodeBySuffixBindReqNumberVar
			StringDef implOracleReadDerivedClassCodeBySuffixBindReqStringVar
			TokenDef implOracleReadDerivedClassCodeBySuffixBindReqTokenVar
			NmTokenDef implOracleReadDerivedClassCodeBySuffixBindReqNmTokenVar
			NmTokensDef implOracleReadDerivedClassCodeBySuffixBindReqNmTokensVar
			TextDef implOracleReadDerivedClassCodeBySuffixBindReqTextVar
			DateDef implOracleReadDerivedClassCodeBySuffixBindReqDateVar
			TimeDef implOracleReadDerivedClassCodeBySuffixBindReqTimeVar
			TimestampDef implOracleReadDerivedClassCodeBySuffixBindReqTimestampVar
			TZDateDef implOracleReadDerivedClassCodeBySuffixBindReqTZDateVar
			TZTimeDef implOracleReadDerivedClassCodeBySuffixBindReqTZTimeVar
			TZTimestampDef implOracleReadDerivedClassCodeBySuffixBindReqTZTimestampVar
			UuidDef implOracleReadDerivedClassCodeBySuffixBindReqUuidVar
			UuidGen implOracleReadDerivedClassCodeBySuffixBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqBlobVar">
			stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptBlobVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqBoolVar">
			if( $Name$ ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadClassCodeBy$Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtReadClassCodeBy$Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqEnumVar">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptEnumVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqInt16Var">
			stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqInt32Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqInt64Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqUInt16Var">
			stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqUInt32Var">
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqUInt64Var">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqFloatVar">
			stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptFloatVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqDoubleVar">
			stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqNumberVar">
			stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptNumberVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqStringVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptStringVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqNmTokenVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqNmTokensVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqTextVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptTextVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqTZDateVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqTZTimeVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqTZTimestampVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindReqUuidVar">
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadDerivedClassCodeBySuffixBindOptUuidVar">
			if( $Name$ != null ) {
				stmtReadClassCodeBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadClassCodeBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedPassArg">,
				$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByUniqueIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByUniqueIndexInvokeSubClass">
		else if( classCode.equals( "$ClassCode$" ) ) {
			buff = schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedPassArg )$ );
		}$implReadTableDerivedByUniqueIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Object" Name="TopTableHasClassCode"
		>$poptop Table HasClassCode$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "$SchemaName$Oracle$poptop Table TableName$Table.readDerivedBy$Suffix$() ";
		$poptop Table DefSchemaName$$poptop Table TableName$Buff buff;$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByUniqueIndexInvokeReadBuff default implReadTableDerivedByUniqueIndexCheckForSubClasses$<!--
-->		return( buff );
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByUniqueIndexInvokeReadBuff"
>		buff = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuff"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$Suffix$( Authorization$iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexCheckForSubClasses"
		>$switch TopTableHasSubClasses yes implReadTableDerivedByDuplicateIndexAssembleSubClasses default implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexInvokeReadBuffByDuplicateIndex"
>		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] buffList = readBuffBy$poptop Index Suffix$( Authorization$poptop Index iterate Columns( each implReadTableDerivedPassArg )$ );
		return( buffList );
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleSubClasses"
		>$implReadTableDerivedByDuplicateIndexAssembleReqSubClassesBody$
		List&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt; resultList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt;();
		ListIterator&lt;String&gt; classCodeIter = classCodeList.listIterator();
		while( classCodeIter.hasNext() ) {
			classCode = classCodeIter.next();
			if( classCode.equals( "$poptop Table ClassCode$" ) ) {
				$poptop Table DefSchemaName$$poptop Table Name$Buff[] subList
					= readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexTopWalkSubClasses$
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Did not expect ClassCode \"" + classCode + "\"" );
			}
		}
		int idx = 0;
		$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ resultList.size() ];
		Iterator&lt;$poptop Table DefSchemaName$$poptop Table Name$Buff&gt; iter = resultList.iterator();
		while( iter.hasNext() ) {
			retBuff[idx++] = iter.next();
		}
		return( retBuff );</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleOptSubClassesBody">
		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		String classCode;
		ResultSet resultSet = null;
		Statement stmt = null;
		try {
			Connection cnx = schema.getCnx();
			String sql =
					getSqlSelect$poptop Table TableName$DistinctClassCode()
				+	"WHERE "
$popto Index iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );
			while( resultSet.next() ) {
				classCode = resultSet.getString( 1 );
				classCodeList.add( classCode );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}
		}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleReqSubClassesBody">
		ArrayList&lt;String&gt; classCodeList = new ArrayList&lt;String&gt;();
		String classCode;
		ResultSet resultSet = null;
		CallableStatement stmtReadClassCodeBy$Suffix$ = null;
		try {
			Connection cnx = schema.getCnx();
			stmtReadClassCodeBy$Suffix$ = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_cc_by_suffix$( ?, ?, ?, ?, ?, ?"$iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end;" );
			int argIdx = 1;
			stmtReadClassCodeBy$Suffix$.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadClassCodeBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadClassCodeBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implOracleReadDerivedClassCodeBySuffixBindVar )$
			stmtReadClassCodeBy$Suffix$.execute();
			resultSet = (ResultSet)stmtReadClassCodeBy$Suffix$.getObject( 1 );$implReadTableDerivedByDuplicateIndexAssembleReqSubEvalResultSet$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexAssembleReqSubEvalResultSet">
			if( resultSet != null ) {
				try {
					while( resultSet.next() ) {
						classCode = resultSet.getString( 1 );
						classCodeList.add( classCode );
					}
				}
				catch( SQLException e ) {
				}
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtReadClassCodeBy$Suffix$ != null ) {
				try {
					stmtReadClassCodeBy$Suffix$.close();
				}
				catch( SQLException e ) {
				}
				stmtReadClassCodeBy$Suffix$ = null;
			}
		}</GenRule>

	<GenRule GenDef="IndexCol" Name="implReadTableDerivedSubListPassArg">,
						$reference Column Name$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndexTopWalkSubClasses"
		>$poptop Table iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexWalkSubClasses"
		>$iterate TableSubClasses( each implReadTableDerivedByDuplicateIndexInvokeSubClass empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableDerivedByDuplicateIndexInvokeSubClass">
			else if( classCode.equals( "$ClassCode$" ) ) {
				$DefSchemaName$$TableName$Buff[] subList
					= schema.getTable$TableName$().readBuffBy$popto Index Suffix$( Authorization$popto Index iterate Columns( each implReadTableDerivedSubListPassArg )$ );
				for( int subListIdx = 0; subListIdx &lt; subList.length; subListIdx ++ )
				{
					resultList.add( subList[ subListIdx ] );
				}
			}$implReadTableDerivedByDuplicateIndexWalkSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableDerivedByDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readDerivedBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readDerivedBy$Suffix$";$implCheckOpenTransaction$
$switch TopTableHasClassCode no implReadTableDerivedByDuplicateIndexInvokeReadBuff default implReadTableDerivedByDuplicateIndexCheckForSubClasses$
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff readBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "readBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtReadBuffByPKey = null;
		try {$implReadTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtReadBuffByPKey != null ) {
				try {
					stmtReadBuffByPKey.close();
				}
				catch( SQLException e ) {
				}
				stmtReadBuffByPKey = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByPKeyTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleLocalizeTableKeys empty empty )$
			stmtReadBuffByPKey = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$poptop Table sp_read_dbtablename$( ?, ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end;" );
			int argIdx = 1;
			stmtReadBuffByPKey.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleReadByPKeyTableAssignVar )$
			stmtReadBuffByPKey.execute();
			resultSet = (ResultSet)stmtReadBuffByPKey.getObject( 1 );
			if( resultSet == null ) {
				return( null );
			}
			try {
				if( resultSet.next() ) {
					$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
					if( resultSet.next() ) {
						resultSet.last();
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
					}
					return( buff );
				}
				else {
					return( null );
				}
			}
			catch( SQLException e ) {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignVar"
		>$switch IsNullable yes implOracleReadByPKeyTableAssignOptVar
			default implOracleReadByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleReadByPKeyTableAssignOptBlobVar
			BoolDef implOracleReadByPKeyTableAssignOptBoolVar
			EnumDef implOracleReadByPKeyTableAssignOptEnumVar
			Int16Def implOracleReadByPKeyTableAssignOptInt16Var
			Int32Def implOracleReadByPKeyTableAssignOptInt32Var
			Int64Def implOracleReadByPKeyTableAssignOptInt64Var
			UInt16Def implOracleReadByPKeyTableAssignOptUInt16Var
			UInt32Def implOracleReadByPKeyTableAssignOptUInt32Var
			UInt64Def implOracleReadByPKeyTableAssignOptUInt64Var
			Id16Gen implOracleReadByPKeyTableAssignOptInt16Var
			Id32Gen implOracleReadByPKeyTableAssignOptInt32Var
			Id64Gen implOracleReadByPKeyTableAssignOptInt64Var
			FloatDef implOracleReadByPKeyTableAssignOptFloatVar
			DoubleDef implOracleReadByPKeyTableAssignOptDoubleVar
			NumberDef implOracleReadByPKeyTableAssignOptNumberVar
			StringDef implOracleReadByPKeyTableAssignOptStringVar
			TokenDef implOracleReadByPKeyTableAssignOptTokenVar
			NmTokenDef implOracleReadByPKeyTableAssignOptNmTokenVar
			NmTokensDef implOracleReadByPKeyTableAssignOptNmTokensVar
			TextDef implOracleReadByPKeyTableAssignOptTextVar
			DateDef implOracleReadByPKeyTableAssignOptDateVar
			TimeDef implOracleReadByPKeyTableAssignOptTimeVar
			TimestampDef implOracleReadByPKeyTableAssignOptTimestampVar
			TZDateDef implOracleReadByPKeyTableAssignOptTZDateVar
			TZTimeDef implOracleReadByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implOracleReadByPKeyTableAssignOptTZTimestampVar
			UuidDef implOracleReadByPKeyTableAssignOptUuidVar
			UuidGen implOracleReadByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleReadByPKeyTableAssignReqBlobVar
			BoolDef implOracleReadByPKeyTableAssignReqBoolVar
			EnumDef implOracleReadByPKeyTableAssignReqEnumVar
			Int16Def implOracleReadByPKeyTableAssignReqInt16Var
			Int32Def implOracleReadByPKeyTableAssignReqInt32Var
			Int64Def implOracleReadByPKeyTableAssignReqInt64Var
			UInt16Def implOracleReadByPKeyTableAssignReqUInt16Var
			UInt32Def implOracleReadByPKeyTableAssignReqUInt32Var
			UInt64Def implOracleReadByPKeyTableAssignReqUInt64Var
			Id16Gen implOracleReadByPKeyTableAssignReqInt16Var
			Id32Gen implOracleReadByPKeyTableAssignReqInt32Var
			Id64Gen implOracleReadByPKeyTableAssignReqInt64Var
			FloatDef implOracleReadByPKeyTableAssignReqFloatVar
			DoubleDef implOracleReadByPKeyTableAssignReqDoubleVar
			NumberDef implOracleReadByPKeyTableAssignReqNumberVar
			StringDef implOracleReadByPKeyTableAssignReqStringVar
			TokenDef implOracleReadByPKeyTableAssignReqTokenVar
			NmTokenDef implOracleReadByPKeyTableAssignReqNmTokenVar
			NmTokensDef implOracleReadByPKeyTableAssignReqNmTokensVar
			TextDef implOracleReadByPKeyTableAssignReqTextVar
			DateDef implOracleReadByPKeyTableAssignReqDateVar
			TimeDef implOracleReadByPKeyTableAssignReqTimeVar
			TimestampDef implOracleReadByPKeyTableAssignReqTimestampVar
			TZDateDef implOracleReadByPKeyTableAssignReqTZDateVar
			TZTimeDef implOracleReadByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implOracleReadByPKeyTableAssignReqTZTimestampVar
			UuidDef implOracleReadByPKeyTableAssignReqUuidVar
			UuidGen implOracleReadByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqBlobVar">
			stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtReadBuffByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtReadBuffByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadBuffByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtReadBuffByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqEnumVar">
			stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqInt16Var">
			stmtReadBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqInt32Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqInt64Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqUInt16Var">
			stmtReadBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqUInt32Var">
			stmtReadBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqUInt64Var">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqFloatVar">
			stmtReadBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqDoubleVar">
			stmtReadBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqNumberVar">
			stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqStringVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqNmTokenVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqNmTokensVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqTextVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqTZDateVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqTZTimeVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqTZTimestampVar">
			stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignReqUuidVar">
			stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadByPKeyTableAssignClassCode">
			stmtReadBuffByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKey">
	public $DefSchemaName$$TableName$Buff lockBuff( $SecSchemaName$Authorization Authorization,
		$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey PKey )
	{
		final String S_ProcName = "lockBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtLockBuffByPKey = null;
		try {$implLockTableBuffByPKeyTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtLockBuffByPKey != null ) {
				try {
					stmtLockBuffByPKey.close();
				}
				catch( SQLException e ) {
				}
				stmtLockBuffByPKey = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implLockTableBuffByPKeyTryBody">
$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleLocalizeTableKeys empty empty )$
			stmtLockBuffByPKey = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$poptop Table sp_lock_dbtablename$( ?, ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end;" );
			int argIdx = 1;
			stmtLockBuffByPKey.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtLockBuffByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtLockBuffByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleLockByPKeyTableAssignVar )$
			stmtLockBuffByPKey.execute();
			resultSet = (ResultSet)stmtLockBuffByPKey.getObject( 1 );
			if( resultSet == null ) {
				return( null );
			}
			try {
				if( resultSet.next() ) {
					$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
					if( resultSet.next() ) {
						resultSet.last();
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
					}
					return( buff );
				}
				else {
					return( null );
				}
			}
			catch( SQLException e ) {
				return( null );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignVar"
		>$switch IsNullable yes implOracleLockByPKeyTableAssignOptVar
			default implOracleLockByPKeyTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleLockByPKeyTableAssignOptBlobVar
			BoolDef implOracleLockByPKeyTableAssignOptBoolVar
			EnumDef implOracleLockByPKeyTableAssignOptEnumVar
			Int16Def implOracleLockByPKeyTableAssignOptInt16Var
			Int32Def implOracleLockByPKeyTableAssignOptInt32Var
			Int64Def implOracleLockByPKeyTableAssignOptInt64Var
			UInt16Def implOracleLockByPKeyTableAssignOptUInt16Var
			UInt32Def implOracleLockByPKeyTableAssignOptUInt32Var
			UInt64Def implOracleLockByPKeyTableAssignOptUInt64Var
			Id16Gen implOracleLockByPKeyTableAssignOptInt16Var
			Id32Gen implOracleLockByPKeyTableAssignOptInt32Var
			Id64Gen implOracleLockByPKeyTableAssignOptInt64Var
			FloatDef implOracleLockByPKeyTableAssignOptFloatVar
			DoubleDef implOracleLockByPKeyTableAssignOptDoubleVar
			NumberDef implOracleLockByPKeyTableAssignOptNumberVar
			StringDef implOracleLockByPKeyTableAssignOptStringVar
			TokenDef implOracleLockByPKeyTableAssignOptTokenVar
			NmTokenDef implOracleLockByPKeyTableAssignOptNmTokenVar
			NmTokensDef implOracleLockByPKeyTableAssignOptNmTokensVar
			TextDef implOracleLockByPKeyTableAssignOptTextVar
			DateDef implOracleLockByPKeyTableAssignOptDateVar
			TimeDef implOracleLockByPKeyTableAssignOptTimeVar
			TimestampDef implOracleLockByPKeyTableAssignOptTimestampVar
			TZDateDef implOracleLockByPKeyTableAssignOptTZDateVar
			TZTimeDef implOracleLockByPKeyTableAssignOptTZTimeVar
			TZTimestampDef implOracleLockByPKeyTableAssignOptTZTimestampVar
			UuidDef implOracleLockByPKeyTableAssignOptUuidVar
			UuidGen implOracleLockByPKeyTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleLockByPKeyTableAssignReqBlobVar
			BoolDef implOracleLockByPKeyTableAssignReqBoolVar
			EnumDef implOracleLockByPKeyTableAssignReqEnumVar
			Int16Def implOracleLockByPKeyTableAssignReqInt16Var
			Int32Def implOracleLockByPKeyTableAssignReqInt32Var
			Int64Def implOracleLockByPKeyTableAssignReqInt64Var
			UInt16Def implOracleLockByPKeyTableAssignReqUInt16Var
			UInt32Def implOracleLockByPKeyTableAssignReqUInt32Var
			UInt64Def implOracleLockByPKeyTableAssignReqUInt64Var
			Id16Gen implOracleLockByPKeyTableAssignReqInt16Var
			Id32Gen implOracleLockByPKeyTableAssignReqInt32Var
			Id64Gen implOracleLockByPKeyTableAssignReqInt64Var
			FloatDef implOracleLockByPKeyTableAssignReqFloatVar
			DoubleDef implOracleLockByPKeyTableAssignReqDoubleVar
			NumberDef implOracleLockByPKeyTableAssignReqNumberVar
			StringDef implOracleLockByPKeyTableAssignReqStringVar
			TokenDef implOracleLockByPKeyTableAssignReqTokenVar
			NmTokenDef implOracleLockByPKeyTableAssignReqNmTokenVar
			NmTokensDef implOracleLockByPKeyTableAssignReqNmTokensVar
			TextDef implOracleLockByPKeyTableAssignReqTextVar
			DateDef implOracleLockByPKeyTableAssignReqDateVar
			TimeDef implOracleLockByPKeyTableAssignReqTimeVar
			TimestampDef implOracleLockByPKeyTableAssignReqTimestampVar
			TZDateDef implOracleLockByPKeyTableAssignReqTZDateVar
			TZTimeDef implOracleLockByPKeyTableAssignReqTZTimeVar
			TZTimestampDef implOracleLockByPKeyTableAssignReqTZTimestampVar
			UuidDef implOracleLockByPKeyTableAssignReqUuidVar
			UuidGen implOracleLockByPKeyTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqBlobVar">
			stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqBoolVar">
			if( $Name$ ) {
				stmtLockBuffByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtLockBuffByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtLockBuffByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtLockBuffByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqEnumVar">
			stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqInt16Var">
			stmtLockBuffByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqInt32Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqInt64Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqUInt16Var">
			stmtLockBuffByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqUInt32Var">
			stmtLockBuffByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqUInt64Var">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqFloatVar">
			stmtLockBuffByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqDoubleVar">
			stmtLockBuffByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqNumberVar">
			stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqStringVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptStringVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqNmTokenVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqNmTokensVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqTextVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptTextVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqTZDateVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqTZTimeVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqTZTimestampVar">
			stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignReqUuidVar">
			stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleLockByPKeyTableAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtLockBuffByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtLockBuffByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffWhereClassCode">
				+	"WHERE "
				+		"$lower reference BaseClass ClassCode$.ClassCode = '$ClassCode$' "</GenRule>

	<GenRule GenDef="Object" Name="implBuffIndexColumnOrderBy">
				+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implBuffIndexColumnCommaOrderBy"
		>$implBuffIndexColumnOrderBy$ + ", "</GenRule>


	<GenRule GenDef="Table" Name="implReadTableBuffByIndexes"
		>$switch HasSuperClassRelation yes implReadTableBuffByInhIndexes default implReadTableBuffByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByInhIndexes"
		>$reference SuperClassRelation reference ToTable implReadTableBuffByIndexes$$iterate Index( each implReadTableBuffByNonPrimaryIndex )$</GenRule>

	<GenRule GenDef="Table" Name="implReadTableBuffByBaseIndexes"
		>$iterate Index( each implReadTableBuffByIndex )$</GenRule>


	<GenRule GenDef="Table" Name="implReadAllTableBuff">
	public $DefSchemaName$$TableName$Buff[] readAllBuff( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAllBuff";$implCheckOpenTransaction$
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtReadAllBuff = null;
		try {
			$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = null;
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			stmtReadAllBuff = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$poptop Table sp_read_dbtablename_all$( ?, ?, ?, ?, ?, ? ) ); end;" );
			int argIdx = 1;
			stmtReadAllBuff.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadAllBuff.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadAllBuff.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			stmtReadAllBuff.execute();
			resultSet = (ResultSet)stmtReadAllBuff.getObject( 1 );$implReadAllTableBuffEvalResultSet$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableBuffEvalResultSet">
			if( resultSet != null ) {
				try {
					while( resultSet.next() ) {
						buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
						buffList.add( buff );
					}
				}
				catch( SQLException e ) {
					// Oracle may return an invalid resultSet if the rowset is empty
				}
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtReadAllBuff != null ) {
				try {
					stmtReadAllBuff.close();
				}
				catch( SQLException e ) {
				}
				stmtReadAllBuff = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implReadTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByIndex"
		>$switch IsUnique
			yes implReadTableBuffByUniqueIndex
			default implReadTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByIndex"
		>$switch IsUnique
			yes empty
			default maybe_implPageTableBuffByDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implPageTableBuffByIndex$</GenRule>

	<GenRule GenDef="Index" Name="maybe_implPageTableBuffByDuplicateIndex"
		>$switch PageData yes implPageTableBuffByDuplicateIndex default empty$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByUniqueIndex"
		>$implReadTableBuffByReqUniqueIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		Statement stmt = null;
		try {
			Connection cnx = schema.getCnx();
			String sql =
					getSqlSelect$poptop Table TableName$Buff()
				+	"WHERE "
$iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$$implOracleWhereFragRestrictClassCode$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );
			if( resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				if( resultSet.next() ) {
					resultSet.last();
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
				}
				return( buff );
			}
			else {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Object" Name="BaseHasSubClasses"
		>$poptop Table reference BaseClass HasSubClasses$</GenRule>

	<GenRule GenDef="Index" Name="implOracleWhereFragRestrictClassCode"
		>$switch BaseHasSubClasses yes implOracleWhereFragDoRestrict default empty$</GenRule>

	<GenRule GenDef="Index" Name="implOracleWhereFragDoRestrict">
				+		"AND "
				+			"$lower poptop Table reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'"</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqUniqueIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtReadBuffBy$Suffix$ = null;
		try {
			stmtReadBuffBy$Suffix$ = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?, ?"$iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end;" );
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implOracleReadBuffBySuffixAssignVar )$
			stmtReadBuffBy$Suffix$.execute();
			resultSet = (ResultSet)stmtReadBuffBy$Suffix$.getObject( 1 );$implReadTableBuffByReqUniqueIndexEvalResultSet$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqUniqueIndexEvalResultSet">
			if( resultSet == null ) {
				return( null );
			}
			try {
				if( resultSet.next() ) {
					$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
					if( resultSet.next() ) {
						resultSet.last();
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
					}
					return( buff );
				}
				else {
					return( null );
				}
			}
			catch( SQLException e ) {
				return( null );
			}
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtReadBuffBy$Suffix$ != null ) {
				try {
					stmtReadBuffBy$Suffix$.close();
				}
				catch( SQLException e ) {
				}
				stmtReadBuffBy$Suffix$ = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignVar"
		>$switch IsNullable yes implOracleReadBuffBySuffixAssignOptVar
			default implOracleReadBuffBySuffixAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleReadBuffBySuffixAssignOptBlobVar
			BoolDef implOracleReadBuffBySuffixAssignOptBoolVar
			EnumDef implOracleReadBuffBySuffixAssignOptEnumVar
			Int16Def implOracleReadBuffBySuffixAssignOptInt16Var
			Int32Def implOracleReadBuffBySuffixAssignOptInt32Var
			Int64Def implOracleReadBuffBySuffixAssignOptInt64Var
			UInt16Def implOracleReadBuffBySuffixAssignOptUInt16Var
			UInt32Def implOracleReadBuffBySuffixAssignOptUInt32Var
			UInt64Def implOracleReadBuffBySuffixAssignOptUInt64Var
			Id16Gen implOracleReadBuffBySuffixAssignOptInt16Var
			Id32Gen implOracleReadBuffBySuffixAssignOptInt32Var
			Id64Gen implOracleReadBuffBySuffixAssignOptInt64Var
			FloatDef implOracleReadBuffBySuffixAssignOptFloatVar
			DoubleDef implOracleReadBuffBySuffixAssignOptDoubleVar
			NumberDef implOracleReadBuffBySuffixAssignOptNumberVar
			StringDef implOracleReadBuffBySuffixAssignOptStringVar
			TokenDef implOracleReadBuffBySuffixAssignOptTokenVar
			NmTokenDef implOracleReadBuffBySuffixAssignOptNmTokenVar
			NmTokensDef implOracleReadBuffBySuffixAssignOptNmTokensVar
			TextDef implOracleReadBuffBySuffixAssignOptTextVar
			DateDef implOracleReadBuffBySuffixAssignOptDateVar
			TimeDef implOracleReadBuffBySuffixAssignOptTimeVar
			TimestampDef implOracleReadBuffBySuffixAssignOptTimestampVar
			TZDateDef implOracleReadBuffBySuffixAssignOptTZDateVar
			TZTimeDef implOracleReadBuffBySuffixAssignOptTZTimeVar
			TZTimestampDef implOracleReadBuffBySuffixAssignOptTZTimestampVar
			UuidDef implOracleReadBuffBySuffixAssignOptUuidVar
			UuidGen implOracleReadBuffBySuffixAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleReadBuffBySuffixAssignReqBlobVar
			BoolDef implOracleReadBuffBySuffixAssignReqBoolVar
			EnumDef implOracleReadBuffBySuffixAssignReqEnumVar
			Int16Def implOracleReadBuffBySuffixAssignReqInt16Var
			Int32Def implOracleReadBuffBySuffixAssignReqInt32Var
			Int64Def implOracleReadBuffBySuffixAssignReqInt64Var
			UInt16Def implOracleReadBuffBySuffixAssignReqUInt16Var
			UInt32Def implOracleReadBuffBySuffixAssignReqUInt32Var
			UInt64Def implOracleReadBuffBySuffixAssignReqUInt64Var
			Id16Gen implOracleReadBuffBySuffixAssignReqInt16Var
			Id32Gen implOracleReadBuffBySuffixAssignReqInt32Var
			Id64Gen implOracleReadBuffBySuffixAssignReqInt64Var
			FloatDef implOracleReadBuffBySuffixAssignReqFloatVar
			DoubleDef implOracleReadBuffBySuffixAssignReqDoubleVar
			NumberDef implOracleReadBuffBySuffixAssignReqNumberVar
			StringDef implOracleReadBuffBySuffixAssignReqStringVar
			TokenDef implOracleReadBuffBySuffixAssignReqTokenVar
			NmTokenDef implOracleReadBuffBySuffixAssignReqNmTokenVar
			NmTokensDef implOracleReadBuffBySuffixAssignReqNmTokensVar
			TextDef implOracleReadBuffBySuffixAssignReqTextVar
			DateDef implOracleReadBuffBySuffixAssignReqDateVar
			TimeDef implOracleReadBuffBySuffixAssignReqTimeVar
			TimestampDef implOracleReadBuffBySuffixAssignReqTimestampVar
			TZDateDef implOracleReadBuffBySuffixAssignReqTZDateVar
			TZTimeDef implOracleReadBuffBySuffixAssignReqTZTimeVar
			TZTimestampDef implOracleReadBuffBySuffixAssignReqTZTimestampVar
			UuidDef implOracleReadBuffBySuffixAssignReqUuidVar
			UuidGen implOracleReadBuffBySuffixAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqBlobVar">
			stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqBoolVar">
			if( $Name$ ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtReadBuffBy$Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtReadBuffBy$Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtReadBuffBy$Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqEnumVar">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqInt16Var">
			stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqInt32Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqInt64Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqUInt16Var">
			stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqUInt32Var">
			stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqUInt64Var">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqFloatVar">
			stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqDoubleVar">
			stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqNumberVar">
			stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqStringVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptStringVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqNmTokenVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqNmTokensVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqTextVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptTextVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqTZDateVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqTZTimeVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqTZTimestampVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignReqUuidVar">
			stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleReadBuffBySuffixAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtReadBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtReadBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByDuplicateIndex"
		>$implReadTableBuffByReqDuplicateIndex$</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByOptDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		Statement stmt = null;
		try {
			Connection cnx = schema.getCnx();
			String sql =
					getSqlSelect$poptop Table TableName$Buff()
				+	"WHERE "
$popto Index iterate Columns( first implOracleIndexColumnWhereFragBindVar each implOracleIndexColumnWhereAndFragBindVar )$$implOracleWhereFragRestrictClassCode$;
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			resultSet = stmt.executeQuery( sql );
			List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
			while( resultSet.next() ) {
				$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
				buffList.add( buff );
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqDuplicateIndex">
	public $poptop Table DefSchemaName$$poptop Table TableName$Buff[] readBuffBy$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implCommaColumnArg )$ )
	{
		final String S_ProcName = "readBuffBy$Suffix$";
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtReadBuffBy$Suffix$ = null;
		List&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt;();
		try {$implReadTableBuffByReqDuplicateIndexTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtReadBuffBy$Suffix$ != null ) {
				try {
					stmtReadBuffBy$Suffix$.close();
				}
				catch( SQLException e ) {
				}
				stmtReadBuffBy$Suffix$ = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Index" Name="implReadTableBuffByReqDuplicateIndexTryBody">
			stmtReadBuffBy$Suffix$ = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$sp_read_dbtablename_by_suffix$( ?, ?, ?, ?, ?, ?"$iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end;" );
			int argIdx = 1;
			stmtReadBuffBy$Suffix$.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtReadBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtReadBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implOracleReadBuffBySuffixAssignVar )$
			stmtReadBuffBy$Suffix$.execute();
			resultSet = (ResultSet)stmtReadBuffBy$Suffix$.getObject( 1 );
			if( resultSet != null ) {
				try {
					while( resultSet.next() ) {
						$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
						buffList.add( buff );
					}
					try {
						resultSet.close();
					}
					catch( SQLException e ) {
					}
					resultSet = null;
				}
				catch( SQLException e ) {
				}
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );</GenRule>

	<GenRule GenDef="Index" Name="implPageTableBuffByReqDuplicateIndexTryBody">
			stmtPageBuffBy$Suffix$ = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$sp_page_dbtablename_by_suffix$( ?, ?, ?, ?, ?, ?"$iterate Columns( each implOracleIndexColumnCommaArgValueVar )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end;" );
			int argIdx = 1;
			stmtPageBuffBy$Suffix$.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtPageBuffBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtPageBuffBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implOraclePageBuffBySuffixAssignVar )$$poptop Table reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOraclePageByIndexTableAssignOptPriorCol )$
			stmtPageBuffBy$Suffix$.execute();
			resultSet = (ResultSet)stmtPageBuffBy$Suffix$.getObject( 1 );
			if( resultSet != null ) {
				try {
					while( resultSet.next() ) {
						$poptop Table DefSchemaName$$poptop Table TableName$Buff buff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
						buffList.add( buff );
					}
					try {
						resultSet.close();
					}
					catch( SQLException e ) {
					}
					resultSet = null;
				}
				catch( SQLException e ) {
				}
			}
			int idx = 0;
			$poptop Table DefSchemaName$$poptop Table TableName$Buff[] retBuff = new $poptop Table DefSchemaName$$poptop Table TableName$Buff[ buffList.size() ];
			Iterator&lt;$poptop Table DefSchemaName$$poptop Table TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptPriorCol"
		>$switch BaseModelAtomClass
			BlobDef implOraclePageByIndexTableAssignOptBlobPriorCol
			BoolDef implOraclePageByIndexTableAssignOptBoolPriorCol
			EnumDef implOraclePageByIndexTableAssignOptEnumPriorCol
			Int16Def implOraclePageByIndexTableAssignOptInt16PriorCol
			Int32Def implOraclePageByIndexTableAssignOptInt32PriorCol
			Int64Def implOraclePageByIndexTableAssignOptInt64PriorCol
			UInt16Def implOraclePageByIndexTableAssignOptUInt16PriorCol
			UInt32Def implOraclePageByIndexTableAssignOptUInt32PriorCol
			UInt64Def implOraclePageByIndexTableAssignOptUInt64PriorCol
			Id16Gen implOraclePageByIndexTableAssignOptInt16PriorCol
			Id32Gen implOraclePageByIndexTableAssignOptInt32PriorCol
			Id64Gen implOraclePageByIndexTableAssignOptInt64PriorCol
			FloatDef implOraclePageByIndexTableAssignOptFloatPriorCol
			DoubleDef implOraclePageByIndexTableAssignOptDoublePriorCol
			NumberDef implOraclePageByIndexTableAssignOptNumberPriorCol
			StringDef implOraclePageByIndexTableAssignOptStringPriorCol
			TokenDef implOraclePageByIndexTableAssignOptTokenPriorCol
			NmTokenDef implOraclePageByIndexTableAssignOptNmTokenPriorCol
			NmTokensDef implOraclePageByIndexTableAssignOptNmTokensPriorCol
			TextDef implOraclePageByIndexTableAssignOptTextPriorCol
			DateDef implOraclePageByIndexTableAssignOptDatePriorCol
			TimeDef implOraclePageByIndexTableAssignOptTimePriorCol
			TimestampDef implOraclePageByIndexTableAssignOptTimestampPriorCol
			TZDateDef implOraclePageByIndexTableAssignOptTZDatePriorCol
			TZTimeDef implOraclePageByIndexTableAssignOptTZTimePriorCol
			TZTimestampDef implOraclePageByIndexTableAssignOptTZTimestampPriorCol
			UuidDef implOraclePageByIndexTableAssignOptUuidPriorCol
			UuidGen implOraclePageByIndexTableAssignOptUuidPriorCol
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptBlobPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBytes( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptBoolPriorCol">
			if( prior$Name$ != null ) {
				if( prior$Name$.booleanValue() ) {
					stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptEnumPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setShort( argIdx++, (short)prior$Name$.ordinal() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptInt16PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setShort( argIdx++, prior$Name$.shortValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptInt32PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptInt64PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptUInt16PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setInt( argIdx++, prior$Name$.intValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptUInt32PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setLong( argIdx++, prior$Name$.longValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptUInt64PriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptFloatPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setFloat( argIdx++, prior$Name$.floatValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptDoublePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setDouble( argIdx++, prior$Name$.doubleValue() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptNumberPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setBigDecimal( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptStringPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptTokenPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptNmTokenPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptNmTokensPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptTextPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$ );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptDatePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptTimePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptTimestampPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptTZDatePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptTZTimePriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptTZTimestampPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( prior$Name$ ) );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageByIndexTableAssignOptUuidPriorCol">
			if( prior$Name$ != null ) {
				stmtPageBuffBy$poptop Index Suffix$.setString( argIdx++, prior$Name$.toString() );
			}
			else {
				stmtPageBuffBy$poptop Index Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignVar"
		>$switch IsNullable yes implOraclePageBuffBySuffixAssignOptVar
			default implOraclePageBuffBySuffixAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOraclePageBuffBySuffixAssignOptBlobVar
			BoolDef implOraclePageBuffBySuffixAssignOptBoolVar
			EnumDef implOraclePageBuffBySuffixAssignOptEnumVar
			Int16Def implOraclePageBuffBySuffixAssignOptInt16Var
			Int32Def implOraclePageBuffBySuffixAssignOptInt32Var
			Int64Def implOraclePageBuffBySuffixAssignOptInt64Var
			UInt16Def implOraclePageBuffBySuffixAssignOptUInt16Var
			UInt32Def implOraclePageBuffBySuffixAssignOptUInt32Var
			UInt64Def implOraclePageBuffBySuffixAssignOptUInt64Var
			Id16Gen implOraclePageBuffBySuffixAssignOptInt16Var
			Id32Gen implOraclePageBuffBySuffixAssignOptInt32Var
			Id64Gen implOraclePageBuffBySuffixAssignOptInt64Var
			FloatDef implOraclePageBuffBySuffixAssignOptFloatVar
			DoubleDef implOraclePageBuffBySuffixAssignOptDoubleVar
			NumberDef implOraclePageBuffBySuffixAssignOptNumberVar
			StringDef implOraclePageBuffBySuffixAssignOptStringVar
			TokenDef implOraclePageBuffBySuffixAssignOptTokenVar
			NmTokenDef implOraclePageBuffBySuffixAssignOptNmTokenVar
			NmTokensDef implOraclePageBuffBySuffixAssignOptNmTokensVar
			TextDef implOraclePageBuffBySuffixAssignOptTextVar
			DateDef implOraclePageBuffBySuffixAssignOptDateVar
			TimeDef implOraclePageBuffBySuffixAssignOptTimeVar
			TimestampDef implOraclePageBuffBySuffixAssignOptTimestampVar
			TZDateDef implOraclePageBuffBySuffixAssignOptTZDateVar
			TZTimeDef implOraclePageBuffBySuffixAssignOptTZTimeVar
			TZTimestampDef implOraclePageBuffBySuffixAssignOptTZTimestampVar
			UuidDef implOraclePageBuffBySuffixAssignOptUuidVar
			UuidGen implOraclePageBuffBySuffixAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOraclePageBuffBySuffixAssignReqBlobVar
			BoolDef implOraclePageBuffBySuffixAssignReqBoolVar
			EnumDef implOraclePageBuffBySuffixAssignReqEnumVar
			Int16Def implOraclePageBuffBySuffixAssignReqInt16Var
			Int32Def implOraclePageBuffBySuffixAssignReqInt32Var
			Int64Def implOraclePageBuffBySuffixAssignReqInt64Var
			UInt16Def implOraclePageBuffBySuffixAssignReqUInt16Var
			UInt32Def implOraclePageBuffBySuffixAssignReqUInt32Var
			UInt64Def implOraclePageBuffBySuffixAssignReqUInt64Var
			Id16Gen implOraclePageBuffBySuffixAssignReqInt16Var
			Id32Gen implOraclePageBuffBySuffixAssignReqInt32Var
			Id64Gen implOraclePageBuffBySuffixAssignReqInt64Var
			FloatDef implOraclePageBuffBySuffixAssignReqFloatVar
			DoubleDef implOraclePageBuffBySuffixAssignReqDoubleVar
			NumberDef implOraclePageBuffBySuffixAssignReqNumberVar
			StringDef implOraclePageBuffBySuffixAssignReqStringVar
			TokenDef implOraclePageBuffBySuffixAssignReqTokenVar
			NmTokenDef implOraclePageBuffBySuffixAssignReqNmTokenVar
			NmTokensDef implOraclePageBuffBySuffixAssignReqNmTokensVar
			TextDef implOraclePageBuffBySuffixAssignReqTextVar
			DateDef implOraclePageBuffBySuffixAssignReqDateVar
			TimeDef implOraclePageBuffBySuffixAssignReqTimeVar
			TimestampDef implOraclePageBuffBySuffixAssignReqTimestampVar
			TZDateDef implOraclePageBuffBySuffixAssignReqTZDateVar
			TZTimeDef implOraclePageBuffBySuffixAssignReqTZTimeVar
			TZTimestampDef implOraclePageBuffBySuffixAssignReqTZTimestampVar
			UuidDef implOraclePageBuffBySuffixAssignReqUuidVar
			UuidGen implOraclePageBuffBySuffixAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqBlobVar">
			stmtPageBuffBy$Suffix$.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptBlobVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqBoolVar">
			if( $Name$ ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, "Y" );
			}
			else {
				stmtPageBuffBy$Suffix$.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtPageBuffBy$Suffix$.setString( argIdx++, "Y" );
				}
				else {
					stmtPageBuffBy$Suffix$.setString( argIdx++, "N" );
				}
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqEnumVar">
			stmtPageBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptEnumVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqInt16Var">
			stmtPageBuffBy$Suffix$.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptInt16Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqInt32Var">
			stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptInt32Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqInt64Var">
			stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptInt64Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqUInt16Var">
			stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptUInt16Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqUInt32Var">
			stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptUInt32Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqUInt64Var">
			stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptUInt64Var">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqFloatVar">
			stmtPageBuffBy$Suffix$.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptFloatVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqDoubleVar">
			stmtPageBuffBy$Suffix$.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptDoubleVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqNumberVar">
			stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptNumberVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqStringVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptStringVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqTokenVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptTokenVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqNmTokenVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptNmTokenVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqNmTokensVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptNmTokensVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqTextVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptTextVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$ );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqDateVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptDateVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqTimeVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptTimeVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqTimestampVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptTimestampVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqTZDateVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptTZDateVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqTZTimeVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptTZTimeVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqTZTimestampVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignReqUuidVar">
			stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOraclePageBuffBySuffixAssignOptUuidVar">
			if( $Name$ != null ) {
				stmtPageBuffBy$Suffix$.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtPageBuffBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Index" Name="implReadTableByIndex"
		>$switch IsUnique
			yes implReadTableByUniqueIndex
			default implReadTableByDuplicateIndex$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleIndexColumnWhereAndFragBindVar">
			+	"AND "
$implOracleIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implOracleIndexColumnWhereFragBindOptVar
			default implOracleIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleIndexColumnWhereFragBindOptBlobVar
			BoolDef implOracleIndexColumnWhereFragBindOptBoolVar
			EnumDef implOracleIndexColumnWhereFragBindOptEnumVar
			Int16Def implOracleIndexColumnWhereFragBindOptInt16Var
			Int32Def implOracleIndexColumnWhereFragBindOptInt32Var
			Int64Def implOracleIndexColumnWhereFragBindOptInt64Var
			UInt16Def implOracleIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implOracleIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implOracleIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implOracleIndexColumnWhereFragBindOptInt16Var
			Id32Gen implOracleIndexColumnWhereFragBindOptInt32Var
			Id64Gen implOracleIndexColumnWhereFragBindOptInt64Var
			FloatDef implOracleIndexColumnWhereFragBindOptFloatVar
			DoubleDef implOracleIndexColumnWhereFragBindOptDoubleVar
			NumberDef implOracleIndexColumnWhereFragBindOptNumberVar
			StringDef implOracleIndexColumnWhereFragBindOptStringVar
			TokenDef implOracleIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implOracleIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implOracleIndexColumnWhereFragBindOptNmTokensVar
			TextDef implOracleIndexColumnWhereFragBindOptTextVar
			DateDef implOracleIndexColumnWhereFragBindOptDateVar
			TimeDef implOracleIndexColumnWhereFragBindOptTimeVar
			TimestampDef implOracleIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implOracleIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implOracleIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implOracleIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implOracleIndexColumnWhereFragBindOptUuidVar
			UuidGen implOracleIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleIndexColumnWhereFragBindReqBlobVar
			BoolDef implOracleIndexColumnWhereFragBindReqBoolVar
			EnumDef implOracleIndexColumnWhereFragBindReqEnumVar
			Int16Def implOracleIndexColumnWhereFragBindReqInt16Var
			Int32Def implOracleIndexColumnWhereFragBindReqInt32Var
			Int64Def implOracleIndexColumnWhereFragBindReqInt64Var
			UInt16Def implOracleIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implOracleIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implOracleIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implOracleIndexColumnWhereFragBindReqInt16Var
			Id32Gen implOracleIndexColumnWhereFragBindReqInt32Var
			Id64Gen implOracleIndexColumnWhereFragBindReqInt64Var
			FloatDef implOracleIndexColumnWhereFragBindReqFloatVar
			DoubleDef implOracleIndexColumnWhereFragBindReqDoubleVar
			NumberDef implOracleIndexColumnWhereFragBindReqNumberVar
			StringDef implOracleIndexColumnWhereFragBindReqStringVar
			TokenDef implOracleIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implOracleIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implOracleIndexColumnWhereFragBindReqNmTokensVar
			TextDef implOracleIndexColumnWhereFragBindReqTextVar
			DateDef implOracleIndexColumnWhereFragBindReqDateVar
			TimeDef implOracleIndexColumnWhereFragBindReqTimeVar
			TimestampDef implOracleIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implOracleIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implOracleIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implOracleIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implOracleIndexColumnWhereFragBindReqUuidVar
			UuidGen implOracleIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqBlobVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getBlobString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptBlobVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getBlobString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqBoolVar"
>				+		( $Name$ ? "$lower ClassCode$.$DbColumnName$ = 'Y' " : "$lower ClassCode$.$DbColumnName$ = 'N' " )
</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptBoolVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null " :
								( $Name$ ? "'Y', " : "'N', " ) )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqEnumVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptEnumVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqInt16Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqInt32Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqInt64Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqUInt16Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptUInt16Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqUInt32Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptUInt32Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqUInt64Var"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptUInt64Var"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqFloatVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptFloatVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqDoubleVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptDoubleVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqNumberVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptNumberVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqStringVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptStringVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqTokenVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqNmTokenVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptNmTokenVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqNmTokensVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptNmTokensVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqTextVar"
>				+		"$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptTextVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqDateVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqTimeVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTimeString( $Name$ ) + ", 'HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTimeString( $Name$ ) + ", 'HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqTimestampVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqTZDateVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptTZDateVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqTZTimeVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTimeString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptTZTimeVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTZTimeString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqTZTimestampVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptTZTimestampVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindReqUuidVar"
>				+		"$lower ClassCode$.$DbColumnName$ = '" + $Name$.toString() + "' "</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragBindOptUuidVar"
>				+		( ( $Name$ == null ) ? "$lower ClassCode$.$DbColumnName$ is null "
							: "$lower ClassCode$.$DbColumnName$ = '" + $Name$.toString() + "' " )</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleIndexColumnWhereAndFragValueVar">
					+	"AND "
$implOracleIndexColumnWhereFragValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnCommaArgValueVar"> + ", "$implOracleIndexColumnArgValueVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleCommaArgRevision"> + ", "
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleIndexColumnArgValueWhereFragValueGeneric
			BoolDef implOracleIndexColumnArgValueWhereFragValueBool
			EnumDef implOracleIndexColumnArgValueWhereFragValueGeneric
			Int16Def implOracleIndexColumnArgValueWhereFragValueGeneric
			Int32Def implOracleIndexColumnArgValueWhereFragValueGeneric
			Int64Def implOracleIndexColumnArgValueWhereFragValueGeneric
			UInt16Def implOracleIndexColumnArgValueWhereFragValueGeneric
			UInt32Def implOracleIndexColumnArgValueWhereFragValueGeneric
			UInt64Def implOracleIndexColumnArgValueWhereFragValueGeneric
			Id16Gen implOracleIndexColumnArgValueWhereFragValueGeneric
			Id32Gen implOracleIndexColumnArgValueWhereFragValueGeneric
			Id64Gen implOracleIndexColumnArgValueWhereFragValueGeneric
			FloatDef implOracleIndexColumnArgValueWhereFragValueFloat
			DoubleDef implOracleIndexColumnArgValueWhereFragValueGeneric
			NumberDef implOracleIndexColumnArgValueWhereFragValueGeneric
			StringDef implOracleIndexColumnArgValueWhereFragValueGeneric
			TokenDef implOracleIndexColumnArgValueWhereFragValueGeneric
			NmTokenDef implOracleIndexColumnArgValueWhereFragValueGeneric
			NmTokensDef implOracleIndexColumnArgValueWhereFragValueGeneric
			TextDef implOracleIndexColumnArgValueWhereFragValueText
			DateDef implOracleIndexColumnArgValueWhereFragValueDate
			TimeDef implOracleIndexColumnArgValueWhereFragValueTime
			TimestampDef implOracleIndexColumnArgValueWhereFragValueTimestamp
			TZDateDef implOracleIndexColumnArgValueWhereFragValueTZDate
			TZTimeDef implOracleIndexColumnArgValueWhereFragValueTZTime
			TZTimestampDef implOracleIndexColumnArgValueWhereFragValueTZTimestamp
			UuidDef implOracleIndexColumnArgValueWhereFragValueGeneric
			UuidGen implOracleIndexColumnArgValueWhereFragValueGeneric
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueGeneric">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueFloat">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueText">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueBool">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueDate">
				+		"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueTime">
				+		"to_timestamp( ?, 'HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueTimestamp">
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueTZDate">
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueTZTime">
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueTZTimestamp">
				+		"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnArgValueWhereFragValueUuid">
				+		"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleIndexColumnWhereFragValueGenericVar
			BoolDef implOracleIndexColumnWhereFragValueBoolVar
			EnumDef implOracleIndexColumnWhereFragValueGenericVar
			Int16Def implOracleIndexColumnWhereFragValueGenericVar
			Int32Def implOracleIndexColumnWhereFragValueGenericVar
			Int64Def implOracleIndexColumnWhereFragValueGenericVar
			UInt16Def implOracleIndexColumnWhereFragValueGenericVar
			UInt32Def implOracleIndexColumnWhereFragValueGenericVar
			UInt64Def implOracleIndexColumnWhereFragValueGenericVar
			Id16Gen implOracleIndexColumnWhereFragValueGenericVar
			Id32Gen implOracleIndexColumnWhereFragValueGenericVar
			Id64Gen implOracleIndexColumnWhereFragValueGenericVar
			FloatDef implOracleIndexColumnWhereFragValueFloatVar
			DoubleDef implOracleIndexColumnWhereFragValueGenericVar
			NumberDef implOracleIndexColumnWhereFragValueGenericVar
			StringDef implOracleIndexColumnWhereFragValueGenericVar
			TokenDef implOracleIndexColumnWhereFragValueGenericVar
			NmTokenDef implOracleIndexColumnWhereFragValueGenericVar
			NmTokensDef implOracleIndexColumnWhereFragValueGenericVar
			TextDef implOracleIndexColumnWhereFragValueTextVar
			DateDef implOracleIndexColumnWhereFragValueDateVar
			TimeDef implOracleIndexColumnWhereFragValueTimeVar
			TimestampDef implOracleIndexColumnWhereFragValueTimestampVar
			TZDateDef implOracleIndexColumnWhereFragValueTZDateVar
			TZTimeDef implOracleIndexColumnWhereFragValueTZTimeVar
			TZTimestampDef implOracleIndexColumnWhereFragValueTZTimestampVar
			UuidDef implOracleIndexColumnWhereFragValueGenericVar
			UuidGen implOracleIndexColumnWhereFragValueGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueGenericVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueFloatVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueTextVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueBoolVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueDateVar"
>				+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueTimeVar"
>				+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueTimestampVar"
>				+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueTZDateVar"
>				+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueTZTimeVar"
>				+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueTZTimestampVar"
>				+		"$lower ClassCode$.$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnWhereFragValueUuidVar"
>				+		"$lower ClassCode$.$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleTableColumnSelectFragDbNameComma"
		>$reference Column implOracleTableColumnSelectFragDbNameComma$</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameComma"
>				+		"$switch BaseModelAtomClass
				BlobDef implOracleTableColumnSelectFragDbNameBlob
				BoolDef implOracleTableColumnSelectFragDbNameBool
				EnumDef implOracleTableColumnSelectFragDbNameEnum
				Int16Def implOracleTableColumnSelectFragDbNameInt16
				Int32Def implOracleTableColumnSelectFragDbNameInt32
				Int64Def implOracleTableColumnSelectFragDbNameInt64
				UInt16Def implOracleTableColumnSelectFragDbNameUInt16
				UInt32Def implOracleTableColumnSelectFragDbNameUInt32
				UInt64Def implOracleTableColumnSelectFragDbNameUInt64
				Id16Gen implOracleTableColumnSelectFragDbNameInt16
				Id32Gen implOracleTableColumnSelectFragDbNameInt32
				Id64Gen implOracleTableColumnSelectFragDbNameInt64
				FloatDef implOracleTableColumnSelectFragDbNameFloat
				DoubleDef implOracleTableColumnSelectFragDbNameDouble
				NumberDef implOracleTableColumnSelectFragDbNameNumber
				StringDef implOracleTableColumnSelectFragDbNameString
				TokenDef implOracleTableColumnSelectFragDbNameToken
				NmTokenDef implOracleTableColumnSelectFragDbNameNmToken
				NmTokensDef implOracleTableColumnSelectFragDbNameNmTokens
				TextDef implOracleTableColumnSelectFragDbNameText
				DateDef implOracleTableColumnSelectFragDbNameDate
				TimeDef implOracleTableColumnSelectFragDbNameTime
				TimestampDef implOracleTableColumnSelectFragDbNameTimestamp
				TZDateDef implOracleTableColumnSelectFragDbNameTZDate
				TZTimeDef implOracleTableColumnSelectFragDbNameTZTime
				TZTimestampDef implOracleTableColumnSelectFragDbNameTZTimestamp
				UuidDef implOracleTableColumnSelectFragDbNameUuid
				UuidGen implOracleTableColumnSelectFragDbNameUuid
				default empty$, "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameBlob"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameBool"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameEnum"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameInt16"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameInt32"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameInt64"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameUInt16"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameUInt32"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameUInt64"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameFloat"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameDouble"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameNumber"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameString"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameToken"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameNmToken"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameNmTokens"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameText"
		>$lower ClassCode$.$DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameDate"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameTime"
		>to_char( $lower ClassCode$.$DbColumnName$, 'HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameTimestamp"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameTZDate"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameTZTime"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameTZTimestamp"
		>to_char( $lower ClassCode$.$DbColumnName$, 'YYYY-MM-DD HH24:MI:SS' ) AS $DbColumnName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbNameUuid"
		>$lower ClassCode$.$DbColumnName$</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnSelectFragDbName"
>			+		"$switch BaseModelAtomClass
			BlobDef implOracleTableColumnSelectFragDbNameBlob
			BoolDef implOracleTableColumnSelectFragDbNameBool
			EnumDef implOracleTableColumnSelectFragDbNameEnum
			Int16Def implOracleTableColumnSelectFragDbNameInt16
			Int32Def implOracleTableColumnSelectFragDbNameInt32
			Int64Def implOracleTableColumnSelectFragDbNameInt64
			UInt16Def implOracleTableColumnSelectFragDbNameUInt16
			UInt32Def implOracleTableColumnSelectFragDbNameUInt32
			UInt64Def implOracleTableColumnSelectFragDbNameUInt64
			Id16Gen implOracleTableColumnSelectFragDbNameInt16
			Id32Gen implOracleTableColumnSelectFragDbNameInt32
			Id64Gen implOracleTableColumnSelectFragDbNameInt64
			FloatDef implOracleTableColumnSelectFragDbNameFloat
			DoubleDef implOracleTableColumnSelectFragDbNameDouble
			NumberDef implOracleTableColumnSelectFragDbNameNumber
			StringDef implOracleTableColumnSelectFragDbNameString
			TokenDef implOracleTableColumnSelectFragDbNameToken
			NmTokenDef implOracleTableColumnSelectFragDbNameNmToken
			NmTokensDef implOracleTableColumnSelectFragDbNameNmTokens
			TextDef implOracleTableColumnSelectFragDbNameText
			DateDef implOracleTableColumnSelectFragDbNameDate
			TimeDef implOracleTableColumnSelectFragDbNameTime
			TimestampDef implOracleTableColumnSelectFragDbNameTimestamp
			TZDateDef implOracleTableColumnSelectFragDbNameTZDate
			TZTimeDef implOracleTableColumnSelectFragDbNameTZTime
			TZTimestampDef implOracleTableColumnSelectFragDbNameTZTimestamp
			UuidDef implOracleTableColumnSelectFragDbNameUuid
			UuidGen implOracleTableColumnSelectFragDbNameUuid
			default empty$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implOracleTableColumnSqlFragDbName"
>			+		"$lower ClassCode$.$DbColumnName$ "
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implOracleTableColumnSqlFragDbName"
>			+		"$lower ClassCode$.$DbColumnName$ "
</GenRule>

	<GenRule GenDef="Object" Name="implOracleIndexColumnOrderBy">
			+		"$lower reference Column ClassCode$.$reference Column DbColumnName$ ASC"</GenRule>
	<GenRule GenDef="Object" Name="implOracleIndexColumnCommaOrderBy"
		>$implOracleIndexColumnOrderBy$ + ", "</GenRule>

	<GenRule GenDef="IndexCol" Name="implUpdateTableCopyBuffToPKey">
			pkey.set$OptionalOrRequired$$Name$( Buff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableExtractRevision"
>			int Revision = Buff.getRequiredRevision();
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableCheckRevision"
>			int Revision = Buff.getRequiredRevision();
			$DefSchemaName$$TableName$PKey pkey = schema.getFactory$Name$().newPKey();$reference PrimaryKeyIndex iterate Columns( each implUpdateTableCopyBuffToPKey )$
			$DefSchemaName$$TableName$Buff readBuff = lockBuff( Authorization, pkey );
			if( readBuff == null ) {
				throw new CFLibStaleCacheDetectedException( getClass(),
					S_ProcName,
					"Attempted to update record which could not be locked/found",
					schema.getLowerDbSchemaName() + ".$lower DbTableName$",
					pkey );
			}
			int oldRevision = readBuff.getRequiredRevision();
			if( oldRevision != Revision ) {
				throw new CFLibCollisionDetectedException( getClass(),
					S_ProcName,
					Buff );
			}
			int newRevision = Revision + 1;</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSqlFragUpdateRevision">
				+		", Revision = ? "</GenRule>

	<GenRule GenDef="Table" Name="implOracleUpdateTableSqlFragWhereAndRevision">
				+	"AND "
				+		"Revision = ? "</GenRule>


	<GenRule GenDef="Table" Name="implUpdateTable"
		>$switch InheritsBlob yes implUpdateTableOldStyle default implUpdateTableSP$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableInitClassCode">
			String ClassCode = "$ClassCode$";</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractVars"
		>$switch HasSuperClassRelation yes implUpdateTableSPExtractInhVars default implUpdateTableSPExtractBaseVars$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractBaseVars"
		>$switch IsBaseTable yes implOracleCreateTableCopyClassCode default empty$$iterate Columns( each implOracleCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPExtractInhVars"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPExtractVars$$iterate Columns( each implOracleCreateTableCopyData empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyColumns"
		>$switch HasSuperClassRelation yes implUpdateTableSPCopyInhColumns default implUpdateTableSPCopyBaseColumns$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyInhColumns"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPCopyColumns$$iterate DataColumns( each implOracleCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPCopyBaseColumns"
		>$switch IsBaseTable yes implOracleCreateTableCopyClassCode default empty$$iterate Columns( each implOracleCreateTableCopyColumn empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSP">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";
		ResultSet resultSet = null;
		Connection cnx = schema.getCnx();
		CallableStatement stmtUpdateByPKey = null;
		List&lt;$DefSchemaName$$poptop Table TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$poptop Table TableName$Buff&gt;();
		try {$implUpdateTableSPTryBody$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmtUpdateByPKey != null ) {
				try {
					stmtUpdateByPKey.close();
				}
				catch( SQLException e ) {
				}
				stmtUpdateByPKey = null;
			}
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPTryBody"
>$implUpdateTableSPCopyColumns$			int Revision = Buff.getRequiredRevision();
			stmtUpdateByPKey = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$sp_update_dbtablename$( ?, ?, ?, ?, ?, ?, ?"$implUpdateTableSPPassArgs$ + ", "
					+	"? ); end;" );
			int argIdx = 1;
			stmtUpdateByPKey.registerOutParameter( argIdx++, OracleTypes.CURSOR );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtUpdateByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtUpdateByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$switch BaseDefIsBaseTable yes implOracleUpdateTableBindClassCode default implOracleUpdateTableBindConstClassCode$$implUpdateTableSPBindArgs$$implOracleUpdateTableBindRevision$
			stmtUpdateByPKey.execute();
			resultSet = (ResultSet)stmtUpdateByPKey.getObject( 1 );$implUpdateTableSPEvalResultSet$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPEvalResultSet">
			if( resultSet != null ) {
				try {
					if( resultSet.next() ) {
						$poptop Table DefSchemaName$$poptop Table TableName$Buff updatedBuff = unpack$poptop Table TableName$ResultSetToBuff( resultSet );
						if( resultSet.next() ) {
							resultSet.last();
							throw new CFLibRuntimeException( getClass(),
								S_ProcName,
								"Did not expect multi-record response, " + resultSet.getRow() + " rows selected" );
						}$implOracleUpdateTableApplyBuff$$implOracleUpdateTableApplyRevision$
					}
					else {
						throw new CFLibRuntimeException( getClass(),
							S_ProcName,
							"Expected a single-record response, " + resultSet.getRow() + " rows selected" );
					}
				}
				catch( SQLException e ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"$sp_update_dbtablename$() did not return a valid result cursor" );
				}
				finally {
					if( resultSet != null ) {
						try {
							resultSet.close();
						}
						catch( SQLException e ) {
						}
						resultSet = null;
					}
				}
			}
			else {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"$sp_update_dbtablename$() did not return a result cursor" );
			}</GenRule>

	<GenRule GenDef="Table" Name="implOracleUpdateTableApplyRevision">
				Buff.setRequiredRevision( updatedBuff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Table" Name="implOracleUpdateTableApplyBuff"
		>$switch HasSuperClassRelation yes implOracleUpdateTableApplyInhBuff default implOracleUpdateTableApplyBaseBuff$</GenRule>

	<GenRule GenDef="Table" Name="implOracleUpdateTableApplyInhBuff"
		>$reference SuperClassRelation reference ToTable implOracleUpdateTableApplyBuff$$iterate Columns( each implOracleUpdateTableApplyDataCol )$</GenRule>

	<!-- Note: Updates aren't allowed to change the primary key so we don't copy back those attributes -->
	<GenRule GenDef="Table" Name="implOracleUpdateTableApplyBaseBuff"
		>$iterate Columns( each implOracleUpdateTableApplyDataCol )$</GenRule>

	<GenRule GenDef="Value" Name="implOracleUpdateTableApplyDataCol"
		>$switch ColumnInPrimaryIndex yes empty default implOracleUpdateTableApplyCol$</GenRule>

	<GenRule GenDef="Value" Name="implOracleUpdateTableApplyCol">
				Buff.set$OptionalOrRequired$$Name$( updatedBuff.get$OptionalOrRequired$$Name$() );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPBindInhArgs default implUpdateTableSPBindBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPBindArgs$$iterate Columns( each implUpdateTableSPBindDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPBindBaseArgs"
		>$iterate Columns( each implOracleUpdateTableBindVar )$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPBindDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implOracleUpdateTableBindVar$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassArgs"
		>$switch HasSuperClassRelation yes implUpdateTableSPPassInhArgs default implUpdateTableSPPassBaseArgs$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassInhArgs"
		>$reference SuperClassRelation reference ToTable implUpdateTableSPPassArgs$$iterate Columns( each implUpdateTableSPPassDataArg )$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableSPPassBaseArgs"
		>$iterate Columns( each implUpdateTableSPPassAnArg )$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPPassDataArg"
		>$switch ColumnInPrimaryIndex yes empty default implUpdateTableSPPassAnArg$</GenRule>

	<GenRule GenDef="Value" Name="implUpdateTableSPPassAnArg"
		>$switch BaseModelAtomClass
			BlobDef implOracleUpdateTableSPPassGenericVar
			BoolDef implOracleUpdateTableSPPassGenericVar
			EnumDef implOracleUpdateTableSPPassGenericVar
			Int16Def implOracleUpdateTableSPPassGenericVar
			Int32Def implOracleUpdateTableSPPassGenericVar
			Int64Def implOracleUpdateTableSPPassGenericVar
			UInt16Def implOracleUpdateTableSPPassGenericVar
			UInt32Def implOracleUpdateTableSPPassGenericVar
			UInt64Def implOracleUpdateTableSPPassGenericVar
			Id16Gen implOracleUpdateTableSPPassGenericVar
			Id32Gen implOracleUpdateTableSPPassGenericVar
			Id64Gen implOracleUpdateTableSPPassGenericVar
			FloatDef implOracleUpdateTableSPPassFloatVar
			DoubleDef implOracleUpdateTableSPPassGenericVar
			NumberDef implOracleUpdateTableSPPassGenericVar
			StringDef implOracleUpdateTableSPPassGenericVar
			TokenDef implOracleUpdateTableSPPassGenericVar
			NmTokenDef implOracleUpdateTableSPPassGenericVar
			NmTokensDef implOracleUpdateTableSPPassGenericVar
			TextDef implOracleUpdateTableSPPassTextVar
			DateDef implOracleUpdateTableSPPassDateVar
			TimeDef implOracleUpdateTableSPPassTimeVar
			TimestampDef implOracleUpdateTableSPPassTimestampVar
			TZDateDef implOracleUpdateTableSPPassTZDateVar
			TZTimeDef implOracleUpdateTableSPPassTZTimeVar
			TZTimestampDef implOracleUpdateTableSPPassTZTimestampVar
			UuidDef implOracleUpdateTableSPPassGenericVar
			UuidGen implOracleUpdateTableSPPassGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableSPPassGenericVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableSPPassFloatVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableSPPassTextVar"> + ", "
					+	"?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableSPPassDateVar"> + ", "
					+	"cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableSPPassTimeVar"> + ", "
					+	"to_timestamp( ?, 'HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableSPPassTimestampVar"> + ", "
					+	"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableSPPassTZDateVar"> + ", "
					+	"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableSPPassTZTimeVar"> + ", "
					+	"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableSPPassTZTimestampVar"> + ", "
					+	"to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleInvokeSuper">
		schema.getTable$reference SuperClassRelation reference ToTable Name$().update$reference SuperClassRelation reference ToTable Name$( Authorization, Buff );</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyle">
	public void update$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "update$TableName$";$switch SecScope None empty System implUpdateTableOSCheckSystem Cluster implUpdateTableOSCheckCluster Tenant implUpdateTableOSCheckTenant default error$$switch HasSuperClassRelation yes implUpdateTableOldStyleInvokeSuper default empty$
		try {
			Connection cnx = schema.getCnx();
$switch IsBaseTable yes implOracleCreateTableCopyClassCode default empty$$iterate Columns( each implOracleCreateTableCopyColumn empty empty )$$switch HasSuperClassRelation no implUpdateTableCheckRevision default implUpdateTableExtractRevision$$switch HasDataColumns yes implUpdateTableOldStyleDoUpdate default empty$$poptop Table switch BaseHasHistory yes implUpdateTableOldStyleAuditUpdated default empty$
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
	}
</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckSystem">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isSystemUser( Authorization ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- only system user can modify $TableName$ data" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckCluster">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isClusterUser( Authorization,
				Buff.get$reference ClusterIdColumn OptionalOrRequired$$reference ClusterIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of SecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOSCheckTenant">
		if( "$ClassCode$".equals( Buff.getClassCode() )
			&amp;&amp; ( ! schema.isTenantUser( Authorization,
				Buff.get$reference TenantIdColumn OptionalOrRequired$$reference TenantIdColumn Name$(),
				"Update$Name$" ) ) )
		{
			throw new CFLibRuntimeException( getClass(),
				S_ProcName,
				"Permission denied -- User not part of TSecGroup Update$Name$" );
		}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdated"
		>$switch BaseHasClassCode yes implUpdateTableOldStyleAuditUpdatedWithCC default implUpdateTableOldStyleAuditUpdatedNoCC$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedWithCC">
			if( "$ClassCode$".equals( Buff.getClassCode() ) ) {
				String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp, "
					+		" classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, sysdate, $lower reference BaseClass ClassCode$.classcode"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
				if( stmtAuditUpdatedByPKey == null ) {
					stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
				}
				argIdx = 1;
				stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
				stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleUpdateTableAssignVar )$
				int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
				if( rowsAudited != 1 ) {
					throw new CFLibRuntimeException( getClass(),
						S_ProcName,
						"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
				}
			}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleAuditUpdatedNoCC">
			String sqlAuditUpdated =
						"INSERT INTO " + schema.getLowerDbSchemaName() + ".$DbTableName$_h( auditclusterid, "
					+		" auditsessionid, "
					+		" auditstamp"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditArgIndexColName )$$implCreateTableOldStyleAuditCreatedData$ + ", "
					+		" revision, "
					+		" auditaction ) "
					+	"SELECT ?, ?, sysdate"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implCreateTableOldStyleAuditValIndexColName)$$implCreateTableOldStyleAuditCreatedVal$ + ", "
					+		" $lower reference BaseClass ClassCode$.revision, "
					+		" 1 "
					+	"FROM $implReadTableBuffBuildFromHierarchy$
					+	" WHERE "$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implCreateTableOldStyleAuditWhereIndexCol each implCreateTableOldStyleAuditWhereAndIndexCol )$;
			if( stmtAuditUpdatedByPKey == null ) {
				stmtAuditUpdatedByPKey = cnx.prepareStatement( sqlAuditUpdated );
			}
			argIdx = 1;
			stmtAuditUpdatedByPKey.setLong( argIdx++, Authorization.getSecClusterId() );
			stmtAuditUpdatedByPKey.setString( argIdx++, Authorization.getSecSessionId().toString() );$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleUpdateTableAssignVar )$
			int rowsAudited = stmtAuditUpdatedByPKey.executeUpdate();
			if( rowsAudited != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by audit via insert-selected, not " + rowsAffected );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignVar"
		>$switch IsNullable yes implOracleUpdateTableAssignOptVar
			default implOracleUpdateTableAssignReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleUpdateTableAssignOptBlobVar
			BoolDef implOracleUpdateTableAssignOptBoolVar
			EnumDef implOracleUpdateTableAssignOptEnumVar
			Int16Def implOracleUpdateTableAssignOptInt16Var
			Int32Def implOracleUpdateTableAssignOptInt32Var
			Int64Def implOracleUpdateTableAssignOptInt64Var
			UInt16Def implOracleUpdateTableAssignOptUInt16Var
			UInt32Def implOracleUpdateTableAssignOptUInt32Var
			UInt64Def implOracleUpdateTableAssignOptUInt64Var
			Id16Gen implOracleUpdateTableAssignOptInt16Var
			Id32Gen implOracleUpdateTableAssignOptInt32Var
			Id64Gen implOracleUpdateTableAssignOptInt64Var
			FloatDef implOracleUpdateTableAssignOptFloatVar
			DoubleDef implOracleUpdateTableAssignOptDoubleVar
			NumberDef implOracleUpdateTableAssignOptNumberVar
			StringDef implOracleUpdateTableAssignOptStringVar
			TokenDef implOracleUpdateTableAssignOptTokenVar
			NmTokenDef implOracleUpdateTableAssignOptNmTokenVar
			NmTokensDef implOracleUpdateTableAssignOptNmTokensVar
			TextDef implOracleUpdateTableAssignOptTextVar
			DateDef implOracleUpdateTableAssignOptDateVar
			TimeDef implOracleUpdateTableAssignOptTimeVar
			TimestampDef implOracleUpdateTableAssignOptTimestampVar
			TZDateDef implOracleUpdateTableAssignOptTZDateVar
			TZTimeDef implOracleUpdateTableAssignOptTZTimeVar
			TZTimestampDef implOracleUpdateTableAssignOptTZTimestampVar
			UuidDef implOracleUpdateTableAssignOptUuidVar
			UuidGen implOracleUpdateTableAssignOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleUpdateTableAssignReqBlobVar
			BoolDef implOracleUpdateTableAssignReqBoolVar
			EnumDef implOracleUpdateTableAssignReqEnumVar
			Int16Def implOracleUpdateTableAssignReqInt16Var
			Int32Def implOracleUpdateTableAssignReqInt32Var
			Int64Def implOracleUpdateTableAssignReqInt64Var
			UInt16Def implOracleUpdateTableAssignReqUInt16Var
			UInt32Def implOracleUpdateTableAssignReqUInt32Var
			UInt64Def implOracleUpdateTableAssignReqUInt64Var
			Id16Gen implOracleUpdateTableAssignReqInt16Var
			Id32Gen implOracleUpdateTableAssignReqInt32Var
			Id64Gen implOracleUpdateTableAssignReqInt64Var
			FloatDef implOracleUpdateTableAssignReqFloatVar
			DoubleDef implOracleUpdateTableAssignReqDoubleVar
			NumberDef implOracleUpdateTableAssignReqNumberVar
			StringDef implOracleUpdateTableAssignReqStringVar
			TokenDef implOracleUpdateTableAssignReqTokenVar
			NmTokenDef implOracleUpdateTableAssignReqNmTokenVar
			NmTokensDef implOracleUpdateTableAssignReqNmTokensVar
			TextDef implOracleUpdateTableAssignReqTextVar
			DateDef implOracleUpdateTableAssignReqDateVar
			TimeDef implOracleUpdateTableAssignReqTimeVar
			TimestampDef implOracleUpdateTableAssignReqTimestampVar
			TZDateDef implOracleUpdateTableAssignReqTZDateVar
			TZTimeDef implOracleUpdateTableAssignReqTZTimeVar
			TZTimestampDef implOracleUpdateTableAssignReqTZTimestampVar
			UuidDef implOracleUpdateTableAssignReqUuidVar
			UuidGen implOracleUpdateTableAssignReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqBlobVar">
				stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptBlobVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBytes( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqBoolVar">
				stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptBoolVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBoolean( argIdx++, $Name$.booleanValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqEnumVar">
				stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptEnumVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqInt16Var">
				stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setShort( argIdx++, $Name$.shortValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqInt32Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqInt64Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqUInt16Var">
				stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptUInt16Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setInt( argIdx++, $Name$.intValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqUInt32Var">
				stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptUInt32Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setLong( argIdx++, $Name$.longValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqUInt64Var">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptUInt64Var">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqFloatVar">
				stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptFloatVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setFloat( argIdx++, $Name$.floatValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqDoubleVar">
				stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptDoubleVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setDouble( argIdx++, $Name$.doubleValue() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqNumberVar">
				stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptNumberVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setBigDecimal( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqStringVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptStringVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqNmTokenVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptNmTokenVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqNmTokensVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptNmTokensVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqTextVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptTextVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$ );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqTZDateVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptTZDateVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqTZTimeVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptTZTimeVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqTZTimestampVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptTZTimestampVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignReqUuidVar">
				stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableAssignOptUuidVar">
				if( $Name$ != null ) {
					stmtAuditUpdatedByPKey.setString( argIdx++, $Name$.toString() );
				}
				else {
					stmtAuditUpdatedByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleDoUpdate">
			String sql =
					"UPDATE " + schema.getLowerDbSchemaName() + ".$DbTableName$ "
				+	"SET "$popto Table iterate Columns( each implOracleUpdateTableValuesVarComma last implOracleUpdateTableValuesVar )$$switch HasSuperClassRelation no implUpdateTableOldStyleOptSetClause default empty$$switch HasSuperClassRelation no implUpdateTableSqlFragUpdateRevision default empty$
				+	"WHERE "
$reference PrimaryKeyIndex iterate Columns( first implOracleUpdateIndexColumnWhereFragValuesVar each implOracleUpdateIndexColumnWhereAndFragValuesVar )$$switch HasSuperClassRelation no implOracleUpdateTableSqlFragWhereAndRevision default empty$;
			if( stmtUpdateByPKey == null ) {
				stmtUpdateByPKey = cnx.prepareStatement( sql );
			}
			int argIdx = 1;
$popto Table iterate Columns( each implOracleUpdateTableBindVar )$$switch HasSuperClassRelation no implOracleUpdateTableBindOptAuditColumns default empty$$switch HasSuperClassRelation no implOracleUpdateTableBindUpdatedRevision default empty$$reference PrimaryKeyIndex iterate Columns( each implOracleUpdateTableBindVar )$$switch HasSuperClassRelation no implOracleUpdateTableBindOldRevision default empty$;
			int rowsAffected = stmtUpdateByPKey.executeUpdate();
			if( rowsAffected != 1 ) {
				throw new CFLibRuntimeException( getClass(),
					S_ProcName,
					"Expected 1 row to be affected by update, not " + rowsAffected );
			}$switch HasSuperClassRelation no implOracleUpdateSetRevision default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleOptSetClause"
		>$switch HasAuditColumns yes implUpdateTableOldStyleSetClause default empty$</GenRule>

	<GenRule GenDef="Table" Name="implUpdateTableOldStyleSetClause"> + ", "
				+		"updatedby = ?, "
				+		"updatedat = sysdate "</GenRule>

	<GenRule GenDef="Table" Name="implOracleUpdateTableBindOptAuditColumns"
		>$switch HasAuditColumns yes implOracleUpdateTableBindAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="implOracleUpdateTableBindAuditColumns">
			stmtUpdateByPKey.setString( argIdx++, Authorization.getSecUserId().toString() );</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOldRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindUpdatedRevision">
			stmtUpdateByPKey.setInt( argIdx++, newRevision );</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindClassCode">
			stmtUpdateByPKey.setString( argIdx++, ClassCode );</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindRevision">
			stmtUpdateByPKey.setInt( argIdx++, Revision );</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindConstClassCode">
			stmtUpdateByPKey.setString( argIdx++, "$poptop Table ClassCode$" );</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesVarComma"
		>$implOracleUpdateTableValuesVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleUpdateTableValuesGenericVar
			BoolDef implOracleUpdateTableValuesGenericVar
			EnumDef implOracleUpdateTableValuesGenericVar
			Int16Def implOracleUpdateTableValuesGenericVar
			Int32Def implOracleUpdateTableValuesGenericVar
			Int64Def implOracleUpdateTableValuesGenericVar
			UInt16Def implOracleUpdateTableValuesGenericVar
			UInt32Def implOracleUpdateTableValuesGenericVar
			UInt64Def implOracleUpdateTableValuesGenericVar
			Id16Gen implOracleUpdateTableValuesGenericVar
			Id32Gen implOracleUpdateTableValuesGenericVar
			Id64Gen implOracleUpdateTableValuesGenericVar
			FloatDef implOracleUpdateTableValuesFloatVar
			DoubleDef implOracleUpdateTableValuesGenericVar
			NumberDef implOracleUpdateTableValuesGenericVar
			StringDef implOracleUpdateTableValuesGenericVar
			TokenDef implOracleUpdateTableValuesGenericVar
			NmTokenDef implOracleUpdateTableValuesGenericVar
			NmTokensDef implOracleUpdateTableValuesGenericVar
			TextDef implOracleUpdateTableValuesTextVar
			DateDef implOracleUpdateTableValuesDateVar
			TimeDef implOracleUpdateTableValuesTimeVar
			TimestampDef implOracleUpdateTableValuesTimestampVar
			TZDateDef implOracleUpdateTableValuesTZDateVar
			TZTimeDef implOracleUpdateTableValuesTZTimeVar
			TZTimestampDef implOracleUpdateTableValuesTZTimestampVar
			UuidDef implOracleUpdateTableValuesGenericVar
			UuidGen implOracleUpdateTableValuesGenericVar
			default error$</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesGenericVar">
				+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesFloatVar">
				+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesTextVar">
				+		"$DbColumnName$ = ?"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesDateVar">
				+		"$DbColumnName$ = cast( to_timestamp( ?, 'YYYY-MM-DD' ) as date )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesTimeVar">
				+		"$DbColumnName$ = to_timestamp( ?, 'HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesTimestampVar">
				+		"$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesTZDateVar">
				+		"$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesTZTimeVar">
				+		"$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableValuesTZTimestampVar">
				+		"$DbColumnName$ = to_timestamp( ?, 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindVarComma"
		>$implOracleUpdateTableBindVar$ + ", "</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindVar"
		>$switch IsNullable yes implOracleUpdateTableBindOptVar
			default implOracleUpdateTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleUpdateTableBindOptBlobVar
			BoolDef implOracleUpdateTableBindOptBoolVar
			EnumDef implOracleUpdateTableBindOptEnumVar
			Int16Def implOracleUpdateTableBindOptInt16Var
			Int32Def implOracleUpdateTableBindOptInt32Var
			Int64Def implOracleUpdateTableBindOptInt64Var
			UInt16Def implOracleUpdateTableBindOptUInt16Var
			UInt32Def implOracleUpdateTableBindOptUInt32Var
			UInt64Def implOracleUpdateTableBindOptUInt64Var
			Id16Gen implOracleUpdateTableBindOptInt16Var
			Id32Gen implOracleUpdateTableBindOptInt32Var
			Id64Gen implOracleUpdateTableBindOptInt64Var
			FloatDef implOracleUpdateTableBindOptFloatVar
			DoubleDef implOracleUpdateTableBindOptDoubleVar
			NumberDef implOracleUpdateTableBindOptNumberVar
			StringDef implOracleUpdateTableBindOptStringVar
			TokenDef implOracleUpdateTableBindOptTokenVar
			NmTokenDef implOracleUpdateTableBindOptNmTokenVar
			NmTokensDef implOracleUpdateTableBindOptNmTokensVar
			TextDef implOracleUpdateTableBindOptTextVar
			DateDef implOracleUpdateTableBindOptDateVar
			TimeDef implOracleUpdateTableBindOptTimeVar
			TimestampDef implOracleUpdateTableBindOptTimestampVar
			TZDateDef implOracleUpdateTableBindOptTZDateVar
			TZTimeDef implOracleUpdateTableBindOptTZTimeVar
			TZTimestampDef implOracleUpdateTableBindOptTZTimestampVar
			UuidDef implOracleUpdateTableBindOptUuidVar
			UuidGen implOracleUpdateTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleUpdateTableBindReqBlobVar
			BoolDef implOracleUpdateTableBindReqBoolVar
			EnumDef implOracleUpdateTableBindReqEnumVar
			Int16Def implOracleUpdateTableBindReqInt16Var
			Int32Def implOracleUpdateTableBindReqInt32Var
			Int64Def implOracleUpdateTableBindReqInt64Var
			UInt16Def implOracleUpdateTableBindReqUInt16Var
			UInt32Def implOracleUpdateTableBindReqUInt32Var
			UInt64Def implOracleUpdateTableBindReqUInt64Var
			Id16Gen implOracleUpdateTableBindReqInt16Var
			Id32Gen implOracleUpdateTableBindReqInt32Var
			Id64Gen implOracleUpdateTableBindReqInt64Var
			FloatDef implOracleUpdateTableBindReqFloatVar
			DoubleDef implOracleUpdateTableBindReqDoubleVar
			NumberDef implOracleUpdateTableBindReqNumberVar
			StringDef implOracleUpdateTableBindReqStringVar
			TokenDef implOracleUpdateTableBindReqTokenVar
			NmTokenDef implOracleUpdateTableBindReqNmTokenVar
			NmTokensDef implOracleUpdateTableBindReqNmTokensVar
			TextDef implOracleUpdateTableBindReqTextVar
			DateDef implOracleUpdateTableBindReqDateVar
			TimeDef implOracleUpdateTableBindReqTimeVar
			TimestampDef implOracleUpdateTableBindReqTimestampVar
			TZDateDef implOracleUpdateTableBindReqTZDateVar
			TZTimeDef implOracleUpdateTableBindReqTZTimeVar
			TZTimestampDef implOracleUpdateTableBindReqTZTimestampVar
			UuidDef implOracleUpdateTableBindReqUuidVar
			UuidGen implOracleUpdateTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqBlobVar">
			stmtUpdateByPKey.setBytes( argIdx++, Buff.get$OptionalOrRequired$$Name$() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqBoolVar">
			if( $Name$ ) {
				stmtUpdateByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtUpdateByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtUpdateByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtUpdateByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqEnumVar">
			stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqInt16Var">
			stmtUpdateByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqInt32Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqInt64Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqUInt16Var">
			stmtUpdateByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqUInt32Var">
			stmtUpdateByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqUInt64Var">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqFloatVar">
			stmtUpdateByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqDoubleVar">
			stmtUpdateByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqNumberVar">
			stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqStringVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqNmTokenVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqNmTokensVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqTextVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqTZDateVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqTZTimeVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqTZTimestampVar">
			stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateTableBindReqUuidVar">
			stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtUpdateByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtUpdateByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Table" Name="implOracleUpdateSetRevision">
			Buff.setRequiredRevision( newRevision );</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="implOracleUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="implOracleUpdateTableCopyBackColumn"
>				updated.set$switch IsNullable yes implColumnAttrOptional default implColumnAttrRequired$$Name$( $Name$ );
</GenRule>

	<GenRule GenDef="Atom" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>
	<GenRule GenDef="TableCol" Name="HasSuperClassRelation">$reference Table HasSuperClassRelation$</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameLast"
		>$switch HasSuperClassRelation no implOracleTableColumnUpdateFragDbNameComma default implOracleTableColumnUpdateFragDbNameSpace$</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameSpace"
		>$implOracleTableColumnUpdateFragDbName$ + " "</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameComma"
		>$implOracleTableColumnUpdateFragDbName$ + ", "
</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbName"
>				+		"$switch IsNullable yes implOracleTableColumnUpdateFragOptDbName
								default implOracleTableColumnUpdateFragReqDbName$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragOptDbName"
		>$switch BaseModelAtomClass
			BlobDef implOracleTableColumnUpdateFragDbNameOptBlob
			BoolDef implOracleTableColumnUpdateFragDbNameOptBool
			EnumDef implOracleTableColumnUpdateFragDbNameOptEnum
			Int16Def implOracleTableColumnUpdateFragDbNameOptInt16
			Int32Def implOracleTableColumnUpdateFragDbNameOptInt32
			Int64Def implOracleTableColumnUpdateFragDbNameOptInt64
			UInt16Def implOracleTableColumnUpdateFragDbNameOptUInt16
			UInt32Def implOracleTableColumnUpdateFragDbNameOptUInt32
			UInt64Def implOracleTableColumnUpdateFragDbNameOptUInt64
			Id16Gen implOracleTableColumnUpdateFragDbNameOptInt16
			Id32Gen implOracleTableColumnUpdateFragDbNameOptInt32
			Id64Gen implOracleTableColumnUpdateFragDbNameOptInt64
			FloatDef implOracleTableColumnUpdateFragDbNameOptFloat
			DoubleDef implOracleTableColumnUpdateFragDbNameOptDouble
			NumberDef implOracleTableColumnUpdateFragDbNameOptNumber
			StringDef implOracleTableColumnUpdateFragDbNameOptString
			TokenDef implOracleTableColumnUpdateFragDbNameOptToken
			NmTokenDef implOracleTableColumnUpdateFragDbNameOptNmToken
			NmTokensDef implOracleTableColumnUpdateFragDbNameOptNmTokens
			TextDef implOracleTableColumnUpdateFragDbNameOptText
			DateDef implOracleTableColumnUpdateFragDbNameOptDate
			TimeDef implOracleTableColumnUpdateFragDbNameOptTime
			TimestampDef implOracleTableColumnUpdateFragDbNameOptTimestamp
			TZDateDef implOracleTableColumnUpdateFragDbNameOptTZDate
			TZTimeDef implOracleTableColumnUpdateFragDbNameOptTZTime
			TZTimestampDef implOracleTableColumnUpdateFragDbNameOptTZTimestamp
			UuidDef implOracleTableColumnUpdateFragDbNameOptUuid
			UuidGen implOracleTableColumnUpdateFragDbNameOptUuid
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragReqDbName"
		>$switch BaseModelAtomClass
			BlobDef implOracleTableColumnUpdateFragDbNameReqBlob
			BoolDef implOracleTableColumnUpdateFragDbNameReqBool
			EnumDef implOracleTableColumnUpdateFragDbNameReqEnum
			Int16Def implOracleTableColumnUpdateFragDbNameReqInt16
			Int32Def implOracleTableColumnUpdateFragDbNameReqInt32
			Int64Def implOracleTableColumnUpdateFragDbNameReqInt64
			UInt16Def implOracleTableColumnUpdateFragDbNameReqUInt16
			UInt32Def implOracleTableColumnUpdateFragDbNameReqUInt32
			UInt64Def implOracleTableColumnUpdateFragDbNameReqUInt64
			Id16Gen implOracleTableColumnUpdateFragDbNameReqInt16
			Id32Gen implOracleTableColumnUpdateFragDbNameReqInt32
			Id64Gen implOracleTableColumnUpdateFragDbNameReqInt64
			FloatDef implOracleTableColumnUpdateFragDbNameReqFloat
			DoubleDef implOracleTableColumnUpdateFragDbNameReqDouble
			NumberDef implOracleTableColumnUpdateFragDbNameReqNumber
			StringDef implOracleTableColumnUpdateFragDbNameReqString
			TokenDef implOracleTableColumnUpdateFragDbNameReqToken
			NmTokenDef implOracleTableColumnUpdateFragDbNameReqNmToken
			NmTokensDef implOracleTableColumnUpdateFragDbNameReqNmTokens
			TextDef implOracleTableColumnUpdateFragDbNameReqText
			DateDef implOracleTableColumnUpdateFragDbNameReqDate
			TimeDef implOracleTableColumnUpdateFragDbNameReqTime
			TimestampDef implOracleTableColumnUpdateFragDbNameReqTimestamp
			TZDateDef implOracleTableColumnUpdateFragDbNameReqTZDate
			TZTimeDef implOracleTableColumnUpdateFragDbNameReqTZTime
			TZTimestampDef implOracleTableColumnUpdateFragDbNameReqTZTimestamp
			UuidDef implOracleTableColumnUpdateFragDbNameReqUuid
			UuidGen implOracleTableColumnUpdateFragDbNameReqUuid
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptBlob"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getBlobString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptBool"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getBoolString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptEnum"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getInt32String( $ColumnName$.ordinal() ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptInt16"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptInt32"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptInt64"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptUInt16"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getUInt16String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptUInt32"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getUInt32String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptUInt64"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getUInt64String( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptFloat"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getFloatString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptDouble"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getDoubleString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptNumber"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getNumberString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptString"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptToken"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptNmToken"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptNmTokens"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptText"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getQuotedString( $ColumnName$ ) : "null" )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptDate"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$OracleSchema.getDateString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD' ) "</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptTime"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$OracleSchema.getTimeString( $ColumnName$ )
									:	"null" )
					+			", 'HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptTimestamp"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$OracleSchema.getTimestampString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptTZDate"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$OracleSchema.getTZDateString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptTZTime"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$OracleSchema.getTZTimeString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptTZTimestamp"
		>$DbColumnName$ = to_timestamp( " + ( ( $ColumnName$ != null )
									?	$SchemaName$OracleSchema.getTZTimestampString( $ColumnName$ )
									:	"null" )
					+			", 'YYYY-MM-DD HH24:MI:SS' ) "</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameOptUuid"
		>$DbColumnName$ = " + ( ( $ColumnName$ != null ) ? $SchemaName$OracleSchema.getQuotedString( $ColumnName$.toString() ) : "null" )</GenRule>

	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqBlob"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getBlobString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqBool"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getBoolString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqEnum"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getInt32String( $ColumnName$.ordinal() )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqInt16"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqInt32"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqInt64"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqUInt16"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getUInt16String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqUInt32"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getUInt32String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqUInt64"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getUInt64String( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqFloat"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getFloatString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqDouble"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getDoubleString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqNumber"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getNumberString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqString"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqToken"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqNmToken"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqNmTokens"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqText"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $ColumnName$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqDate"
		>$DbColumnName$ = cast( to_timestamp( " + $SchemaName$OracleSchema.getDateString( $ColumnName$ ) + ", 'YYYY-MM-DD' ) as date ) "</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqTime"
		>$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTimeString( $ColumnName$ ) + ", 'HH24:MI:SS' )"</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqTimestamp"
		>$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTimestampString( $ColumnName$ ) + ", 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqTZDate"
		>$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTZDateString( $ColumnName$ ) + ", 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqTZTime"
		>$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTZTimeString( $ColumnName$ ) + ", 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqTZTimestamp"
		>$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTZTimestampString( $ColumnName$ ) + ", 'YYYY-MM-DD HH24:MI:SS' )"</GenRule>
	<GenRule GenDef="Object" Name="implOracleTableColumnUpdateFragDbNameReqUuid"
		>$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $ColumnName$.toString() )</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleUpdateTablePassReadArg"
>				$reference Column Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implOracleUpdateTablePassReadArgComma"
		>$implOracleUpdateTablePassReadArg$,
</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleUpdateIndexColumnWhereAndFragValuesVar">
				+	"AND "
$implOracleUpdateIndexColumnWhereFragValuesVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleUpdateIndexColumnWhereFragValuesVar"
>				+		"$DbColumnName$ = ? "</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleUpdateIndexColumnWhereAndFragBindVar">
				+	"AND "
$implOracleUpdateIndexColumnWhereFragBindVar$</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleUpdateIndexColumnWhereFragBindVar"
		>$switch IsNullable yes implOracleUpdateIndexColumnWhereFragBindOptVar
			default implOracleUpdateIndexColumnWhereFragBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleUpdateIndexColumnWhereFragBindOptBlobVar
			BoolDef implOracleUpdateIndexColumnWhereFragBindOptBoolVar
			EnumDef implOracleUpdateIndexColumnWhereFragBindOptEnumVar
			Int16Def implOracleUpdateIndexColumnWhereFragBindOptInt16Var
			Int32Def implOracleUpdateIndexColumnWhereFragBindOptInt32Var
			Int64Def implOracleUpdateIndexColumnWhereFragBindOptInt64Var
			UInt16Def implOracleUpdateIndexColumnWhereFragBindOptUInt16Var
			UInt32Def implOracleUpdateIndexColumnWhereFragBindOptUInt32Var
			UInt64Def implOracleUpdateIndexColumnWhereFragBindOptUInt64Var
			Id16Gen implOracleUpdateIndexColumnWhereFragBindOptInt16Var
			Id32Gen implOracleUpdateIndexColumnWhereFragBindOptInt32Var
			Id64Gen implOracleUpdateIndexColumnWhereFragBindOptInt64Var
			FloatDef implOracleUpdateIndexColumnWhereFragBindOptFloatVar
			DoubleDef implOracleUpdateIndexColumnWhereFragBindOptDoubleVar
			NumberDef implOracleUpdateIndexColumnWhereFragBindOptNumberVar
			StringDef implOracleUpdateIndexColumnWhereFragBindOptStringVar
			TokenDef implOracleUpdateIndexColumnWhereFragBindOptTokenVar
			NmTokenDef implOracleUpdateIndexColumnWhereFragBindOptNmTokenVar
			NmTokensDef implOracleUpdateIndexColumnWhereFragBindOptNmTokensVar
			TextDef implOracleUpdateIndexColumnWhereFragBindOptTextVar
			DateDef implOracleUpdateIndexColumnWhereFragBindOptDateVar
			TimeDef implOracleUpdateIndexColumnWhereFragBindOptTimeVar
			TimestampDef implOracleUpdateIndexColumnWhereFragBindOptTimestampVar
			TZDateDef implOracleUpdateIndexColumnWhereFragBindOptTZDateVar
			TZTimeDef implOracleUpdateIndexColumnWhereFragBindOptTZTimeVar
			TZTimestampDef implOracleUpdateIndexColumnWhereFragBindOptTZTimestampVar
			UuidDef implOracleUpdateIndexColumnWhereFragBindOptUuidVar
			UuidGen implOracleUpdateIndexColumnWhereFragBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleUpdateIndexColumnWhereFragBindReqBlobVar
			BoolDef implOracleUpdateIndexColumnWhereFragBindReqBoolVar
			EnumDef implOracleUpdateIndexColumnWhereFragBindReqEnumVar
			Int16Def implOracleUpdateIndexColumnWhereFragBindReqInt16Var
			Int32Def implOracleUpdateIndexColumnWhereFragBindReqInt32Var
			Int64Def implOracleUpdateIndexColumnWhereFragBindReqInt64Var
			UInt16Def implOracleUpdateIndexColumnWhereFragBindReqUInt16Var
			UInt32Def implOracleUpdateIndexColumnWhereFragBindReqUInt32Var
			UInt64Def implOracleUpdateIndexColumnWhereFragBindReqUInt64Var
			Id16Gen implOracleUpdateIndexColumnWhereFragBindReqInt16Var
			Id32Gen implOracleUpdateIndexColumnWhereFragBindReqInt32Var
			Id64Gen implOracleUpdateIndexColumnWhereFragBindReqInt64Var
			FloatDef implOracleUpdateIndexColumnWhereFragBindReqFloatVar
			DoubleDef implOracleUpdateIndexColumnWhereFragBindReqDoubleVar
			NumberDef implOracleUpdateIndexColumnWhereFragBindReqNumberVar
			StringDef implOracleUpdateIndexColumnWhereFragBindReqStringVar
			TokenDef implOracleUpdateIndexColumnWhereFragBindReqTokenVar
			NmTokenDef implOracleUpdateIndexColumnWhereFragBindReqNmTokenVar
			NmTokensDef implOracleUpdateIndexColumnWhereFragBindReqNmTokensVar
			TextDef implOracleUpdateIndexColumnWhereFragBindReqTextVar
			DateDef implOracleUpdateIndexColumnWhereFragBindReqDateVar
			TimeDef implOracleUpdateIndexColumnWhereFragBindReqTimeVar
			TimestampDef implOracleUpdateIndexColumnWhereFragBindReqTimestampVar
			TZDateDef implOracleUpdateIndexColumnWhereFragBindReqTZDateVar
			TZTimeDef implOracleUpdateIndexColumnWhereFragBindReqTZTimeVar
			TZTimestampDef implOracleUpdateIndexColumnWhereFragBindReqTZTimestampVar
			UuidDef implOracleUpdateIndexColumnWhereFragBindReqUuidVar
			UuidGen implOracleUpdateIndexColumnWhereFragBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqBlobVar"
>				+		"$DbColumnName$ = " + $SchemaName$OracleSchema.getBlobString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptBlobVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$OracleSchema.getBlobString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqBoolVar"
>				+		( $Name$ ? "$DbColumnName$ = 'Y' " : "$DbColumnName$ = 'N' " )</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptBoolVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null " :
							( $Name$ ? "'Y', " : "'N', " ) )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqEnumVar"
>				+		"$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptEnumVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + Integer.toString( $Name$.ordinal() ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqInt16Var"
>				+		"$DbColumnName$ = " + Short.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptInt16Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqInt32Var"
>				+		"$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptInt32Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqInt64Var"
>				+		"$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptInt64Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqUInt16Var"
>				+		"$DbColumnName$ = " + Integer.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptUInt16Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqUInt32Var"
>				+		"$DbColumnName$ = " + Long.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptUInt32Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqUInt64Var"
>				+		"$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptUInt64Var"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqFloatVar"
>				+		"$DbColumnName$ = " + Float.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptFloatVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqDoubleVar"
>				+		"$DbColumnName$ = " + Double.toString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptDoubleVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqNumberVar"
>				+		"$DbColumnName$ = " + $Name$.toString() + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptNumberVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $Name$.toString() + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqStringVar"
>				+		"$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptStringVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqTokenVar"
>				+		"$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptTokenVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqNmTokenVar"
>				+		"$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptNmTokenVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqNmTokensVar"
>				+		"$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptNmTokensVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqTextVar"
>				+		"$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ )</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptTextVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$ ) + " " )</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqDateVar"
>				+		"cast( to_timestamp( " + $SchemaName$OracleSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) as date ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptDateVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = cast( to_timestamp( " + $SchemaName$OracleSchema.getDateString( $Name$ ) + ", 'YYYY-MM-DD' ) as date ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqTimeVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTimeString( $Name$ ) + ", 'HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptTimeVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTimeString( $Name$ ) + ", 'HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqTimestampVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptTimestampVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqTZDateVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptTZDateVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTZDateString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqTZTimeVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTZTimeString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptTZTimeVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTZTimeString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqTZTimestampVar"
>				+		"to_timestamp( " + $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) "
</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptTZTimestampVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = to_timestamp( " + $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) + ", 'YYYY-MM-DD HH24:MI:SS' ) " )
</GenRule>

	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindReqUuidVar"
>				+		"$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$.toString() ) + " "</GenRule>
	<GenRule GenDef="Object" Name="implOracleUpdateIndexColumnWhereFragBindOptUuidVar"
>				+		( ( $Name$ == null ) ? "$DbColumnName$ is null "
							: "$DbColumnName$ = " + $SchemaName$OracleSchema.getQuotedString( $Name$.toString() ) + " " )</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTableSqlFragWhereAndRevision">
				+	"AND "
				+		"Revision = ?"</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleDeleteTableCopyColumn"
		>$reference Column implOracleCreateTableCopyColumn$</GenRule>

	<GenRule GenDef="Table" Name="implDeleteTable">
	public void delete$TableName$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$Buff Buff )
	{
		final String S_ProcName = "delete$TableName$";
		Connection cnx = schema.getCnx();
		CallableStatement stmtDeleteByPKey = null;
		try {
$reference PrimaryKeyIndex iterate Columns( each implOracleDeleteTableCopyColumn empty empty )$			stmtDeleteByPKey = cnx.prepareCall( "begin " + schema.getLowerDbSchemaName() + ".$sp_delete_dbtablename$( ?, ?, ?, ?, ?"$reference BaseClass reference PrimaryKeyIndex iterate Columns( each implOracleIndexColumnCommaArgValueVar )$$implOracleCommaArgRevision$ + " ); end;" );
			int argIdx = 1;
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmtDeleteByPKey.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmtDeleteByPKey.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$reference PrimaryKeyIndex iterate Columns( each implOracleDeleteTableBindVar )$$implOracleDeleteTableBindRevision$;
			stmtDeleteByPKey.execute();
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( stmtDeleteByPKey != null ) {
				try {
					stmtDeleteByPKey.close();
				}
				catch( SQLException e ) {
				}
				stmtDeleteByPKey = null;
			}
		}
	}
$implOracleDeleteTableByInheritedIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implOracleDeleteTableByInheritedIndexes"
		>$switch HasSuperClassRelation yes implOracleDeleteTableByInhIndexes default implOracleDeleteTableByBaseIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implOracleDeleteTableByInhIndexes"
		>$iterate Index( each implOracleDeleteTableByNonPrimaryIndex empty empty )$$reference SuperClassRelation reference ToTable implOracleDeleteTableByInheritedIndexes$</GenRule>

	<GenRule GenDef="Table" Name="implOracleDeleteTableByBaseIndexes"
		>$iterate Index( each implOracleDeleteTableBySpecialIndex empty empty )$</GenRule>

	<GenRule GenDef="Index" Name="implOracleDeleteTableByNonPrimaryIndex"
		>$switch IsPrimaryIndex yes empty default implOracleDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implOracleDeleteTableBySpecialIndex"
		>$switch IsPrimaryIndex yes implOracleDeleteTableByPrimaryIndex default implOracleDeleteTableByIndex$</GenRule>

	<GenRule GenDef="Index" Name="implOracleDeleteTableByIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";
		ResultSet resultSet = null;
		try {
				Connection cnx = schema.getCnx();$implOracleDeleteTableByReqIndex$
		}$implOracleDeleteTableByIndexCatchBlockPlus$
</GenRule>

	<GenRule GenDef="Index" Name="implOracleDeleteTableByIndexCatchBlockPlus">
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
		}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$By$Suffix$Key argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implOracleDeleteCommaPassArgColumn )$ );
	}</GenRule>

	<GenRule GenDef="Index" Name="implOracleDeleteTableByReqIndex">
				String sql = "begin call " + schema.getLowerDbSchemaName() + ".$sp_delete_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end";
				if( stmtDeleteBy$Suffix$ == null ) {
					stmtDeleteBy$Suffix$ = cnx.prepareStatement( sql );
				}
				int argIdx = 1;
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
				stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
				stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implOracleDeleteTableBindSuffixVar )$
				int rowsUpdated = stmtDeleteBy$Suffix$.executeUpdate();</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixVar"
		>$switch IsNullable yes implOracleDeleteTableBindSuffixOptVar
			default implOracleDeleteTableBindSuffixReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleDeleteTableBindSuffixOptBlobVar
			BoolDef implOracleDeleteTableBindSuffixOptBoolVar
			EnumDef implOracleDeleteTableBindSuffixOptEnumVar
			Int16Def implOracleDeleteTableBindSuffixOptInt16Var
			Int32Def implOracleDeleteTableBindSuffixOptInt32Var
			Int64Def implOracleDeleteTableBindSuffixOptInt64Var
			UInt16Def implOracleDeleteTableBindSuffixOptUInt16Var
			UInt32Def implOracleDeleteTableBindSuffixOptUInt32Var
			UInt64Def implOracleDeleteTableBindSuffixOptUInt64Var
			Id16Gen implOracleDeleteTableBindSuffixOptInt16Var
			Id32Gen implOracleDeleteTableBindSuffixOptInt32Var
			Id64Gen implOracleDeleteTableBindSuffixOptInt64Var
			FloatDef implOracleDeleteTableBindSuffixOptFloatVar
			DoubleDef implOracleDeleteTableBindSuffixOptDoubleVar
			NumberDef implOracleDeleteTableBindSuffixOptNumberVar
			StringDef implOracleDeleteTableBindSuffixOptStringVar
			TokenDef implOracleDeleteTableBindSuffixOptTokenVar
			NmTokenDef implOracleDeleteTableBindSuffixOptNmTokenVar
			NmTokensDef implOracleDeleteTableBindSuffixOptNmTokensVar
			TextDef implOracleDeleteTableBindSuffixOptTextVar
			DateDef implOracleDeleteTableBindSuffixOptDateVar
			TimeDef implOracleDeleteTableBindSuffixOptTimeVar
			TimestampDef implOracleDeleteTableBindSuffixOptTimestampVar
			TZDateDef implOracleDeleteTableBindSuffixOptTZDateVar
			TZTimeDef implOracleDeleteTableBindSuffixOptTZTimeVar
			TZTimestampDef implOracleDeleteTableBindSuffixOptTZTimestampVar
			UuidDef implOracleDeleteTableBindSuffixOptUuidVar
			UuidGen implOracleDeleteTableBindSuffixOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleDeleteTableBindSuffixReqBlobVar
			BoolDef implOracleDeleteTableBindSuffixReqBoolVar
			EnumDef implOracleDeleteTableBindSuffixReqEnumVar
			Int16Def implOracleDeleteTableBindSuffixReqInt16Var
			Int32Def implOracleDeleteTableBindSuffixReqInt32Var
			Int64Def implOracleDeleteTableBindSuffixReqInt64Var
			UInt16Def implOracleDeleteTableBindSuffixReqUInt16Var
			UInt32Def implOracleDeleteTableBindSuffixReqUInt32Var
			UInt64Def implOracleDeleteTableBindSuffixReqUInt64Var
			Id16Gen implOracleDeleteTableBindSuffixReqInt16Var
			Id32Gen implOracleDeleteTableBindSuffixReqInt32Var
			Id64Gen implOracleDeleteTableBindSuffixReqInt64Var
			FloatDef implOracleDeleteTableBindSuffixReqFloatVar
			DoubleDef implOracleDeleteTableBindSuffixReqDoubleVar
			NumberDef implOracleDeleteTableBindSuffixReqNumberVar
			StringDef implOracleDeleteTableBindSuffixReqStringVar
			TokenDef implOracleDeleteTableBindSuffixReqTokenVar
			NmTokenDef implOracleDeleteTableBindSuffixReqNmTokenVar
			NmTokensDef implOracleDeleteTableBindSuffixReqNmTokensVar
			TextDef implOracleDeleteTableBindSuffixReqTextVar
			DateDef implOracleDeleteTableBindSuffixReqDateVar
			TimeDef implOracleDeleteTableBindSuffixReqTimeVar
			TimestampDef implOracleDeleteTableBindSuffixReqTimestampVar
			TZDateDef implOracleDeleteTableBindSuffixReqTZDateVar
			TZTimeDef implOracleDeleteTableBindSuffixReqTZTimeVar
			TZTimestampDef implOracleDeleteTableBindSuffixReqTZTimestampVar
			UuidDef implOracleDeleteTableBindSuffixReqUuidVar
			UuidGen implOracleDeleteTableBindSuffixReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqBlobVar">
				stmtDeleteBy$Suffix$.setBytes( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptBlobVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setBytes( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.ARRAY );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqBoolVar">
				stmtDeleteBy$Suffix$.setBoolean( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptBoolVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setBoolean( argIdx++, arg$Name$.booleanValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BOOLEAN );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqEnumVar">
				stmtDeleteBy$Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptEnumVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setShort( argIdx++, (short)arg$Name$.ordinal() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqInt16Var">
				stmtDeleteBy$Suffix$.setShort( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptInt16Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setShort( argIdx++, arg$Name$.shortValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.SMALLINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqInt32Var">
				stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptInt32Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$.intValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqInt64Var">
				stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptInt64Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$.longValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqUInt16Var">
				stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptUInt16Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setInt( argIdx++, arg$Name$.intValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.INTEGER );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqUInt32Var">
				stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptUInt32Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setLong( argIdx++, arg$Name$.longValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.BIGINT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqUInt64Var">
				stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptUInt64Var">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.DECIMAL );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqFloatVar">
				stmtDeleteBy$Suffix$.setFloat( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptFloatVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setFloat( argIdx++, arg$Name$.floatValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.FLOAT );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqDoubleVar">
				stmtDeleteBy$Suffix$.setDouble( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptDoubleVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setDouble( argIdx++, arg$Name$.doubleValue() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.DOUBLE );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqNumberVar">
				stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptNumberVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setBigDecimal( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.NUMERIC );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqStringVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptStringVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqTokenVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptTokenVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqNmTokenVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptNmTokenVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqNmTokensVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptNmTokensVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqTextVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptTextVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$ );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqDateVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptDateVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getDateString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqTimeVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptTimeVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqTimestampVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptTimestampVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqTZDateVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptTZDateVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqTZTimeVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptTZTimeVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqTZTimestampVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( arg$Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptTZTimestampVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( arg$Name$ ) );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixReqUuidVar">
				stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindSuffixOptUuidVar">
				if( arg$Name$ != null ) {
					stmtDeleteBy$Suffix$.setString( argIdx++, arg$Name$.toString() );
				}
				else {
					stmtDeleteBy$Suffix$.setNull( argIdx++, java.sql.Types.VARCHAR );
				}</GenRule>

	<GenRule GenDef="IndexCol" Name="implOracleDeleteCommaPassArgColumn">,
			argKey.get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Index" Name="implOracleDeleteTableByPrimaryIndex">
	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization$iterate Columns( each implNextIdGenDeclAttr )$ )
	{
		final String S_ProcName = "delete$poptop Table TableName$By$Suffix$";
		ResultSet resultSet = null;
		try {
				Connection cnx = schema.getCnx();
				String sql = "begin call " + schema.getLowerDbSchemaName() + ".$sp_delete_dbtablename_by_suffix$( ?, ?, ?, ?, ?"$iterate Columns( each implOracleIndexColumnCommaArgValueVar )$ + " ); end";
				if( stmtDeleteBy$Suffix$ == null ) {
					stmtDeleteBy$Suffix$ = cnx.prepareStatement( sql );
				}
				int argIdx = 1;
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
				stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
				stmtDeleteBy$Suffix$.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
				stmtDeleteBy$Suffix$.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );$iterate Columns( each implOracleDeleteTableBindSuffixVar )$
				int rowsUpdated = stmtDeleteBy$Suffix$.executeUpdate();
			}$implOracleDeleteTableByPrimaryIndexCatchBlockPlus$
</GenRule>

	<GenRule GenDef="Index" Name="implOracleDeleteTableByPrimaryIndexCatchBlockPlus">
			catch( SQLException e ) {
				throw new CFLibDbException( getClass(),
					S_ProcName,
					e );
			}
			finally {
				if( resultSet != null ) {
					try {
						resultSet.close();
					}
					catch( SQLException e ) {
					}
					resultSet = null;
				}
			}
	}

	public void delete$poptop Table TableName$By$Suffix$( $SecSchemaName$Authorization Authorization,
		$DefSchemaName$$TableName$PKey argKey )
	{
		delete$poptop Table TableName$By$Suffix$( Authorization$iterate Columns( each implOracleDeleteCommaPassArgColumn )$ );
	}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindRevision">
			stmtDeleteByPKey.setInt( argIdx++, Buff.getRequiredRevision() );</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindVar"
		>$switch IsNullable yes implOracleDeleteTableBindOptVar
			default implOracleDeleteTableBindReqVar$</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleDeleteTableBindOptBlobVar
			BoolDef implOracleDeleteTableBindOptBoolVar
			EnumDef implOracleDeleteTableBindOptEnumVar
			Int16Def implOracleDeleteTableBindOptInt16Var
			Int32Def implOracleDeleteTableBindOptInt32Var
			Int64Def implOracleDeleteTableBindOptInt64Var
			UInt16Def implOracleDeleteTableBindOptUInt16Var
			UInt32Def implOracleDeleteTableBindOptUInt32Var
			UInt64Def implOracleDeleteTableBindOptUInt64Var
			Id16Gen implOracleDeleteTableBindOptInt16Var
			Id32Gen implOracleDeleteTableBindOptInt32Var
			Id64Gen implOracleDeleteTableBindOptInt64Var
			FloatDef implOracleDeleteTableBindOptFloatVar
			DoubleDef implOracleDeleteTableBindOptDoubleVar
			NumberDef implOracleDeleteTableBindOptNumberVar
			StringDef implOracleDeleteTableBindOptStringVar
			TokenDef implOracleDeleteTableBindOptTokenVar
			NmTokenDef implOracleDeleteTableBindOptNmTokenVar
			NmTokensDef implOracleDeleteTableBindOptNmTokensVar
			TextDef implOracleDeleteTableBindOptTextVar
			DateDef implOracleDeleteTableBindOptDateVar
			TimeDef implOracleDeleteTableBindOptTimeVar
			TimestampDef implOracleDeleteTableBindOptTimestampVar
			TZDateDef implOracleDeleteTableBindOptTZDateVar
			TZTimeDef implOracleDeleteTableBindOptTZTimeVar
			TZTimestampDef implOracleDeleteTableBindOptTZTimestampVar
			UuidDef implOracleDeleteTableBindOptUuidVar
			UuidGen implOracleDeleteTableBindOptUuidVar
			default empty$</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqVar"
		>$switch BaseModelAtomClass
			BlobDef implOracleDeleteTableBindReqBlobVar
			BoolDef implOracleDeleteTableBindReqBoolVar
			EnumDef implOracleDeleteTableBindReqEnumVar
			Int16Def implOracleDeleteTableBindReqInt16Var
			Int32Def implOracleDeleteTableBindReqInt32Var
			Int64Def implOracleDeleteTableBindReqInt64Var
			UInt16Def implOracleDeleteTableBindReqUInt16Var
			UInt32Def implOracleDeleteTableBindReqUInt32Var
			UInt64Def implOracleDeleteTableBindReqUInt64Var
			Id16Gen implOracleDeleteTableBindReqInt16Var
			Id32Gen implOracleDeleteTableBindReqInt32Var
			Id64Gen implOracleDeleteTableBindReqInt64Var
			FloatDef implOracleDeleteTableBindReqFloatVar
			DoubleDef implOracleDeleteTableBindReqDoubleVar
			NumberDef implOracleDeleteTableBindReqNumberVar
			StringDef implOracleDeleteTableBindReqStringVar
			TokenDef implOracleDeleteTableBindReqTokenVar
			NmTokenDef implOracleDeleteTableBindReqNmTokenVar
			NmTokensDef implOracleDeleteTableBindReqNmTokensVar
			TextDef implOracleDeleteTableBindReqTextVar
			DateDef implOracleDeleteTableBindReqDateVar
			TimeDef implOracleDeleteTableBindReqTimeVar
			TimestampDef implOracleDeleteTableBindReqTimestampVar
			TZDateDef implOracleDeleteTableBindReqTZDateVar
			TZTimeDef implOracleDeleteTableBindReqTZTimeVar
			TZTimestampDef implOracleDeleteTableBindReqTZTimestampVar
			UuidDef implOracleDeleteTableBindReqUuidVar
			UuidGen implOracleDeleteTableBindReqUuidVar
			default empty$</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqBlobVar">
			stmtDeleteByPKey.setBytes( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptBlobVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBytes( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqBoolVar">
			if( $Name$ ) {
				stmtDeleteByPKey.setString( argIdx++, "Y" );
			}
			else {
				stmtDeleteByPKey.setString( argIdx++, "N" );
			}</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptBoolVar">
			if( $Name$ != null ) {
				if( $Name$.booleanValue() ) {
					stmtDeleteByPKey.setString( argIdx++, "Y" );
				}
				else {
					stmtDeleteByPKey.setString( argIdx++, "N" );
				}
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqEnumVar">
			stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptEnumVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, (short)$Name$.ordinal() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqInt16Var">
			stmtDeleteByPKey.setShort( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setShort( argIdx++, $Name$.shortValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.SMALLINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqInt32Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqInt64Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqUInt16Var">
			stmtDeleteByPKey.setInt( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptUInt16Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setInt( argIdx++, $Name$.intValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.INTEGER );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqUInt32Var">
			stmtDeleteByPKey.setLong( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptUInt32Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setLong( argIdx++, $Name$.longValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.BIGINT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqUInt64Var">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptUInt64Var">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.DECIMAL );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqFloatVar">
			stmtDeleteByPKey.setFloat( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptFloatVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setFloat( argIdx++, $Name$.floatValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.FLOAT );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqDoubleVar">
			stmtDeleteByPKey.setDouble( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptDoubleVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setDouble( argIdx++, $Name$.doubleValue() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.DOUBLE );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqNumberVar">
			stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptNumberVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setBigDecimal( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.NUMERIC );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqStringVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptStringVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqNmTokenVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptNmTokenVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqNmTokensVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptNmTokensVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqTextVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$ );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptTextVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$ );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.CLOB );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqTZDateVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptTZDateVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZDateString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqTZTimeVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptTZTimeVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimeString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqTZTimestampVar">
			stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptTZTimestampVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $SchemaName$OracleSchema.getTZTimestampString( $Name$ ) );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implOracleDeleteTableBindReqUuidVar">
			stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );</GenRule>
	<GenRule GenDef="Object" Name="implOracleDeleteTableBindOptUuidVar">
			if( $Name$ != null ) {
				stmtDeleteByPKey.setString( argIdx++, $Name$.toString() );
			}
			else {
				stmtDeleteByPKey.setNull( argIdx++, java.sql.Types.VARCHAR );
			}</GenRule>

	<GenRule GenDef="Object" Name="implCommaColumnArg">,
		$implColumnArg$</GenRule>

	<GenRule GenDef="TableCol" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="Atom" Name="implColumnArg"
		>$implJavaAtomType$ $Name$</GenRule>
	<GenRule GenDef="IndexCol" Name="implColumnArg"
		>$reference Column implColumnArg$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTable">
	public $DefSchemaName$$TableName$Buff[] readAll$TableName$( $SecSchemaName$Authorization Authorization ) {
		final String S_ProcName = "readAll$TableName$";
		ResultSet resultSet = null;
		Statement stmt = null;
		try {
			Connection cnx = schema.getCnx();
			String sql = "SELECT * FROM " + schema.getLowerDbSchemaName() + ".$poptop Table sp_read_dbtablename_all$( ?, ?, ?, ?, ? )";
			stmt = cnx.createStatement( ResultSet.TYPE_FORWARD_ONLY,
				ResultSet.CONCUR_READ_ONLY );
			int argIdx = 1;
			stmt.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmt.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecUserId().toString() );
			stmt.setString( argIdx++, ( Authorization == null ) ? "" : Authorization.getSecSessionId().toString() );
			stmt.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecClusterId() );
			stmt.setLong( argIdx++, ( Authorization == null ) ? 0 : Authorization.getSecTenantId() );
			resultSet = stmt.executeQuery( sql );
			List&lt;$DefSchemaName$$TableName$Buff&gt; buffList = new LinkedList&lt;$DefSchemaName$$TableName$Buff&gt;();
			int idx = 0;$implReadAllTableEvalResultSet$</GenRule>

	<GenRule GenDef="Table" Name="implReadAllTableEvalResultSet">
			while( resultSet.next() ) {
				$DefSchemaName$$TableName$Buff buff = schema.getFactory$TableName$().newBuff();
				int idxcol = 1;
$popto Table switch HasClassCode yes implOracleTableColumnFetchClassCode default empty$$popto Table iterate Columns( each implOracleTableColumnFetchColumn )
$				buff.setRequiredRevision( resultSet.getInt( idxcol ) );
				buffList.add( buff );
				idx ++;
			}
			int idx = 0;
			$DefSchemaName$$TableName$Buff[] retBuff = new $DefSchemaName$$TableName$Buff[ buffList.size() ];
			Iterator&lt;$DefSchemaName$$TableName$Buff&gt; iter = buffList.iterator();
			while( iter.hasNext() ) {
				retBuff[idx++] = iter.next();
			}
			return( retBuff );
		}
		catch( SQLException e ) {
			throw new CFLibDbException( getClass(),
				S_ProcName,
				e );
		}
		finally {
			if( resultSet != null ) {
				try {
					resultSet.close();
				}
				catch( SQLException e ) {
				}
				resultSet = null;
			}
			if( stmt != null ) {
				try {
					stmt.close();
				}
				catch( SQLException e ) {
				}
				stmt = null;
			}
		}
	}
</GenRule>

</RuleSet>
