<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="mssql"
	Name="schema/dbcreate/mssql/crsp_next_tableidgen.tsql"
	Revision="2.13"
	Descr="null">

	<GenFile GenDef="Id16Gen" Name="dbadminfile_CreateSPNextTableIdGen"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="mssql"
		ExpansionClassName="$dbadminfilename_CreateSPNextTableIdGen$"
		ExpansionKeyName="$dbadminfilename_CreateSPNextTableIdGen$"
		ExpansionFileName="$dbadminfilename_CreateSPNextTableIdGen$" >--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
use $lower DbSchemaName$
go

create proc $sp_next_tableidgen$
	@NextId smallint output$reference Dispenser reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$
as
begin
	if not exists (
		select *
		from $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg16
		where slice_id = $Slice$$reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenPassExistsArg )$ )
	begin
		insert into $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg16 ($reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenInsertCol )$
			slice_id,
			next_id )
		values ($reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenInsertArg )$
			$Slice$,
			1 )
	end

	select @NextId = next_id
	from $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg16
	where slice_id = $Slice$$reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenPassWhereArg )$

	update $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg16
	set next_id = @NextId + 1
	where slice_id = $Slice$$reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenPassWhereArg )$
end
go

quit
</GenFile>

	<GenRule GenDef="Object" Name="CreateSPNextTableIdGenPassExistsArg">
			and $lower DbColumnName$ = @arg$Name$</GenRule>

	<GenRule GenDef="Object" Name="CreateSPNextTableIdGenPassWhereArg">
		and $lower DbColumnName$ = @arg$Name$</GenRule>

	<GenRule GenDef="Object" Name="CreateSPNextTableIdGenInsertCol">
			$lower DbColumnName$,</GenRule>

	<GenRule GenDef="Object" Name="CreateSPNextTableIdGenInsertArg">
			@arg$Name$,</GenRule>

	<GenFile GenDef="Id32Gen" Name="dbadminfile_CreateSPNextTableIdGen"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="mssql"
		ExpansionClassName="$dbadminfilename_CreateSPNextTableIdGen$"
		ExpansionKeyName="$dbadminfilename_CreateSPNextTableIdGen$"
		ExpansionFileName="$dbadminfilename_CreateSPNextTableIdGen$" >--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
use $lower DbSchemaName$
go

create proc $sp_next_tableidgen$
	@NextId int output$reference Dispenser reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$
as
begin
	if not exists (
		select *
		from $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg32
		where slice_id = $Slice$$reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenPassExistsArg )$ )
	begin
		insert into $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg32 ($reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenInsertCol )$
			slice_id,
			next_id )
		values ($reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenInsertArg )$
			$Slice$,
			1 )
	end

	select @NextId = next_id
	from $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg32
	where slice_id = $Slice$$reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenPassWhereArg )$

	update $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg32
	set next_id = @NextId + 1
	where slice_id = $Slice$$reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenPassWhereArg )$
end
go

quit
</GenFile>

	<GenFile GenDef="Id64Gen" Name="dbadminfile_CreateSPNextTableIdGen"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="mssql"
		ExpansionClassName="$dbadminfilename_CreateSPNextTableIdGen$"
		ExpansionKeyName="$dbadminfilename_CreateSPNextTableIdGen$"
		ExpansionFileName="$dbadminfilename_CreateSPNextTableIdGen$" >--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
use $lower DbSchemaName$
go

create proc $sp_next_tableidgen$
	@NextId bigint output$reference Dispenser reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$
as
begin
	if not exists (
		select *
		from $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg64
		where slice_id = $Slice$$reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenPassExistsArg )$ )
	begin
		insert into $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg64 ($reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenInsertCol )$
			slice_id,
			next_id )
		values ($reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenInsertArg )$
			$Slice$,
			1 )
	end

	select @NextId = next_id
	from $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg64
	where slice_id = $Slice$$reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenPassWhereArg )$

	update $lower DbSchemaName$..$lower reference Dispenser DbTableName$_idg64
	set next_id = @NextId + 1
	where slice_id = $Slice$$reference Dispenser reference PrimaryKeyIndex iterate Columns( each CreateSPNextTableIdGenPassWhereArg )$
end
go

quit
</GenFile>

</RuleSet>
