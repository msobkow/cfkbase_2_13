<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="mssql"
	Name="schema/dbcreate/mssql/crtbl_schema.bat"
	Revision="2.13"
	Descr="Microsoft SQL Server Developer Edition Create Schema Tables Bash Script">

	<GenFile GenDef="SchemaDef" Name="dbadminfile_CreateAllTables"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="mssql"
		ExpansionClassName="crtbl_$lower DbSchemaName$"
		ExpansionKeyName="crtbl_$lower DbSchemaName$"
		ExpansionFileName="$dbadminfilename_CreateAllTables$"
>@ECHO OFF
REM	@(#) $GenPackageDir$/$GenFileName$
$MssBatScriptLicense$
$parseMSSqlArgs$$validateMSSqlArgs$$defineMSSqlCommands$
$iterate Id16Generators( first invoke_CreateSchemaIdgTable each empty empty empty )$$iterate Id32Generators( first invoke_CreateSchemaIdgTable each empty empty empty )$$iterate Id64Generators( first invoke_CreateSchemaIdgTable each empty empty empty )$$iterate SchemaTables( each invoke_CreateSecTable empty empty )$$iterate SchemaTables( each invoke_CreateNonSecTable empty empty )$$iterate SchemaTables( each maybe_CreateTableH )$
</GenFile>

	<GenRule GenDef="Table" Name="invoke_CreateSecTable"
		>$switch TableName
			Cluster invoke_CreateTable
			Tenant invoke_CreateTable
			SecApp invoke_CreateTable
			SecForm invoke_CreateTable
			SecGroup invoke_CreateTable
			SecGroupForm invoke_CreateTable
			SecGroupInclude invoke_CreateTable
			SecGroupMember invoke_CreateTable
			SecSession invoke_CreateTable
			SecUser invoke_CreateTable
			default empty$</GenRule>

	<GenRule GenDef="Table" Name="invoke_CreateNonSecTable"
		>$switch TableName
			Cluster empty
			Tenant empty
			SecApp empty
			SecForm empty
			SecGroup empty
			SecGroupForm empty
			SecGroupInclude empty
			SecGroupMember empty
			SecSession empty
			SecUser empty
			default invoke_CreateTable$</GenRule>

	<GenRule GenDef="Table" Name="maybe_CreateTableH"
		>$switch BaseHasHistory yes invoke_CreateTableH default empty$</GenRule>

	<GenRule GenDef="Table" Name="invoke_CreateTableH">%cmddb% &lt;$dbadminfilename_CreateTableH$ &gt;&gt;%logfilename%
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id16Gen" Name="invoke_CreateSchemaIdgTable">%cmddb% &lt;$dbadminfilename_CreateSchemaIdg16Table$ &gt;&gt;%logfilename%
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id32Gen" Name="invoke_CreateSchemaIdgTable">%cmddb% &lt;$dbadminfilename_CreateSchemaIdg32Table$ &gt;&gt;%logfilename%
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id64Gen" Name="invoke_CreateSchemaIdgTable">%cmddb% &lt;$dbadminfilename_CreateSchemaIdg64Table$ &gt;&gt;%logfilename%
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Table" Name="invoke_CreateTable">%cmddb% &lt;$dbadminfilename_CreateTable$ &gt;&gt;%logfilename%
$iterate DispensedId16Generators( first invoke_CreateTableIdgTable each empty empty empty )$$iterate DispensedId32Generators( first invoke_CreateTableIdgTable each empty empty empty )$$iterate DispensedId64Generators( first invoke_CreateTableIdgTable each empty empty empty )$</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id16Gen" Name="invoke_CreateTableIdgTable">%cmddb% &lt;$dbadminfilename_CreateTableIdg16Table$ &gt;&gt;%logfilename%
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id32Gen" Name="invoke_CreateTableIdgTable">%cmddb% &lt;$dbadminfilename_CreateTableIdg32Table$ &gt;&gt;%logfilename%
</GenRule>

	<GenRule ScopeDef="Table" GenDef="Id64Gen" Name="invoke_CreateTableIdgTable">%cmddb% &lt;$dbadminfilename_CreateTableIdg64Table$ &gt;&gt;%logfilename%
</GenRule>

</RuleSet>
