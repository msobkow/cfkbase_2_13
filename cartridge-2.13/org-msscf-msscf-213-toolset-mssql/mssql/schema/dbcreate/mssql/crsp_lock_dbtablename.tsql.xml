<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="mssql"
	Name="schema/dbcreate/mssql/crsp_lock_dbtablename.tsql"
	Revision="2.13"
	Descr="null">

	<GenFile ScopeDef="SchemaDef" GenDef="Table" Name="dbadminfile_CreateSPLockDbTableName"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="dbcreate"
		BasePackageName="$lower SchemaName$"
		SubPackageName="mssql"
		ExpansionClassName="$dbadminfilename_CreateSPLockDbTableName$"
		ExpansionKeyName="$dbadminfilename_CreateSPLockDbTableName$"
		ExpansionFileName="$dbadminfilename_CreateSPLockDbTableName$">--
--	@(#) $GenPackageDir$/$GenFileName$
$MssDoubleDashScriptLicense$
$switch HasSuperClassRelation yes implMSSqlLockTableHierarchyBody default implMSSqlLockTableBaseBody$</GenFile>

	<GenRule GenDef="Table" Name="implMSSqlLockTableBaseBody">
use $lower DbSchemaName$
go

create proc $sp_lock_dbtablename$$implMSSqlSPStandardArgs$$reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$
as$implMSSqlSPLockTableDeclVars$
begin$switch TableName Cluster empty Tenant empty SecUser empty default implMSSqlSPLockEnforceSec$$implMSSqlLockTables$$switch TableName Cluster implMSSqlSPLockTableRetSelectByPKeyNormal Tenant implMSSqlSPLockTableRetSelectByPKeyNormal SecUser implMSSqlSPLockTableRetSelectByPKeyNormal default implMSSqlSPLockTableRetSelectMakeChoice$
end
go

quit
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableDeclVars">$switch SecScope None empty System implMSSqlSPLockTableDeclSysVars Cluster implMSSqlSPLockTableDeclSysVars Tenant implMSSqlSPLockTableDeclSysVars default error$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableDeclSysVars">
	declare @permissionFlag int
	declare @isSystemUser int</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableCheckPermissions"
		>$switch SecScope None empty System implMSSqlSPLockTableCheckSystem Cluster implMSSqlSPLockTableCheckCluster Tenant implMSSqlSPLockTableCheckTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableCheckSystem">
	exec sp_is_system_user @permissionFlag output, @argAuditUserId
	if( @permissionFlag = 0 )
	begin
		raiserror( 'Permission denied -- only system user can update $TableName$ records',
			15,
			1 )
	end
	select 1 into @isSystemUser
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableCheckCluster">
	exec sp_is_cluster_user @permissionFlag output, @arg$reference ClusterIdColumn Name$, 'Update$TableName$', @argAuditUserId
	if( @permissionFlag = 0 )
	begin
		raiserror( 'Permission denied -- User not found in cluster SecGroup for Update$TableName$',
			15,
			1 )
	end
	exec sp_is_system_user @isSystemUser output, @argAuditUserId
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableCheckTenant">
	exec sp_is_tenant_user @permissionFlag output, @secTenantId, 'Update$TableName$', @argAuditUserId
	if( @permissionFlag = 0 )
	begin
		raiserror( 'Permission denied -- User not found in tenant TSecGroup for Update$TableName$',
			15,
			1 )
	end
	exec sp_is_system_user @isSystemUser output, @argAuditUserId
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableRetSelectMakeChoice"
		>$switch SecScope None implMSSqlSPLockTableRetSelectByPKeyNormal System implMSSqlSPLockTableRetSelectByPKeyNormal Cluster implMSSqlSPLockTableRetSelectByPKeyRestrictCluster Tenant implMSSqlSPLockTableRetSelectByPKeyRestrictTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableRetSelectByPKeyNormal">
	select$poptop Table implMSSqlSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
	from $lower DbSchemaName$..$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implMSSqlClassCodeJoinSuperTable default empty$
	where
			$reference PrimaryKeyIndex iterate Columns( first implMSSqlIndexColumnWhereFragBindVar each implMSSqlIndexColumnWhereAndFragBindVar )$
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableRetSelectByPKeyRestrictCluster">
	if( @isSystemUser = 1 )
	begin
		select$poptop Table implMSSqlSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$..$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implMSSqlClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implMSSqlIndexColumnWhereFragBindVar each implMSSqlIndexColumnWhereAndFragBindVar )$
	end
	else begin
		select$poptop Table implMSSqlSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$..$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implMSSqlClassCodeJoinSuperTable default empty$
		where
			$reference PrimaryKeyIndex iterate Columns( first implMSSqlIndexColumnWhereFragBindVar each implMSSqlIndexColumnWhereAndFragBindVar )$
			and $lower reference ClusterIdColumn reference Table ClassCode$.$lower reference ClusterIdColumn DbColumnName$ = @secClusterId
	end</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockTableRetSelectByPKeyRestrictTenant">
	if( @isSystemUser = 1 )
	begin
		select$poptop Table implMSSqlSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$..$DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implMSSqlClassCodeJoinSuperTable default empty$
		where
			$poptop Table reference PrimaryKeyIndex iterate Columns( first implMSSqlIndexColumnWhereFragBindVar each implMSSqlIndexColumnWhereAndFragBindVar )$
	end
	else begin
		select$poptop Table implMSSqlSelectTableColumns$,
			$lower reference BaseClass ClassCode$.revision as revision
		from $lower DbSchemaName$..$poptop Table DbTableName$ as $lower ClassCode$$switch HasSuperClassRelation yes implMSSqlClassCodeJoinSuperTable default empty$
		where
			$poptop Table reference PrimaryKeyIndex iterate Columns( first implMSSqlIndexColumnWhereFragBindVar each implMSSqlIndexColumnWhereAndFragBindVar )$
			and $lower reference TenantIdColumn reference Table ClassCode$.$lower reference TenantIdColumn DbColumnName$ = @secTenantId
	end</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlSPLockEnforceSec"
		>$switch SecScope None empty System empty Cluster implMSSqlSPLockTableCheckCluster Tenant implMSSqlSPLockTableCheckTenant default error$</GenRule>

	<GenRule GenDef="Table" Name="restrictLockPKeyQuery"
		>$switch HasSuperClassRelation yes restrictLockPKeyQueryByClassCode default restrictBaseLockPKeyQueryByClassCode$</GenRule>

	<GenRule GenDef="Table" Name="restrictBaseLockPKeyQueryByClassCode"
		>$switch IsBaseTable yes restrictLockPKeyQueryByClassCode default empty$</GenRule>

	<GenRule GenDef="Table" Name="restrictLockPKeyQueryByClassCode">
			and $lower reference BaseClass ClassCode$.ClassCode = '$poptop Table ClassCode$'</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlLockTableHierarchyBody">
use $lower DbSchemaName$
go

create proc $sp_lock_dbtablename$$implMSSqlSPStandardArgs$$reference PrimaryKeyIndex iterate Columns( each sparg_CommaTableCol )$
as$implMSSqlSPLockTableDeclVars$
begin$switch TableName Cluster empty Tenant empty SecUser empty default implMSSqlSPLockEnforceSec$$implMSSqlLockTables$$switch TableName Cluster implMSSqlSPLockTableRetSelectByPKeyNormal Tenant implMSSqlSPLockTableRetSelectByPKeyNormal SecUser implMSSqlSPLockTableRetSelectByPKeyNormal default implMSSqlSPLockTableRetSelectMakeChoice$
end
go

quit
</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlLockTables"
		>$switch HasSuperClassRelation yes implMSSqlLockInhTable default implMSSqlLockBaseTable$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlLockInhTable"
		>$reference SuperClassRelation reference ToTable implMSSqlLockTables$</GenRule>

	<GenRule GenDef="Table" Name="implMSSqlLockBaseTable">
	update $lower DbSchemaName$..$DbTableName$
	set forcesynclock = forcesynclock + 1
	where
			$reference BaseClass reference PrimaryKeyIndex iterate Columns( first implMSSqlLockWhereFragBindVar each implMSSqlLockWhereAndFragBindVar )$
	if @@rowcount != 1
	begin
		raiserror( 'Data collision detected -- primary key does not exist',
			15,
			1 )
	end
</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlLockWhereFragBindVar"
		>$lower DbColumnName$ = @arg$Name$</GenRule>

	<GenRule GenDef="IndexCol" Name="implMSSqlLockWhereAndFragBindVar">
		and $implMSSqlLockWhereFragBindVar$</GenRule>

	<GenRule GenDef="Value" Name="implMSSqlLockSelectCommaCol">,
		@old$Name$ = $lower DbColumnName$</GenRule>

	<GenRule GenDef="Value" Name="implMSSqlLockSelectCol"
		>@old$Name$ = $lower DbColumnName$</GenRule>

</RuleSet>
