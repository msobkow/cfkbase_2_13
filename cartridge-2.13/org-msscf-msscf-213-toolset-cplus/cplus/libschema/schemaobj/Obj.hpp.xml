<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schemaobj/Obj.hpp"
	Revision="2.13"
	Descr="C++18 base object instance declementation">

	<GenFile GenDef="Table" Name="fileObjHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$obj"
		ExpansionClassName="$SchemaName$$TableName$ObjHpp"
		ExpansionKeyName="$SchemaName$$TableName$ObjHpp"
		ExpansionFileName="$SchemaName$$TableName$Obj.hpp"
>#pragma once

// Description: C++18 base object instance specification for $SchemaName$ $TableName$.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;

namespace $CPlusNamespace$ {
	class I$SchemaName$SchemaObj;$poptop SchemaDef iterate SchemaTables( each declForwardIObjTableObjs empty empty )$
}
$maybeIncludeIObjInheritSuperClass$$maybeIncludeObjInheritSuperClass$
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$Obj.hpp&gt;$iterate TableRefs( each alsoIncludeISchemaTableObj empty empty )$
#include &lt;$lower SchemaName$obj/I$SchemaName$SchemaObj.hpp&gt;$CPlusObjInclude$

namespace $CPlusNamespace$ {

	class $SchemaName$$TableName$Obj$switch HasSuperClassRelation yes declSchemaTableObjSuperClassForm default declSchemaTableObjBaseForm$
	{
	protected:$declSchemaTableObjBaseMembers$$HPlusObjMembers$
	public:
		static const std::string CLASS_NAME;
		static const classcode_t CLASS_CODE;
$declSchemaTableObjAllTheMethods$	};
}
</GenFile>

	<GenRule GenDef="Table" Name="declSchemaTableObjSuperClassForm">
	: public $reference SuperClassRelation reference ToTable SchemaName$$reference SuperClassRelation reference ToTable TableName$Obj,
	  public virtual I$SchemaName$$TableName$Obj$iterate TableRefs( each declCommaIObjInheritSchemaTableObj empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declSchemaTableObjBaseForm">
	: public virtual I$SchemaName$$TableName$Obj$iterate TableRefs( each declCommaIObjInheritSchemaTableObj empty empty )$</GenRule>

	<GenRule GenDef="ServerProc" Name="declCPlusObjServerMethod"
		>$switch IsInstanceMethod yes declCPlusObjInstServerProc default empty$</GenRule>

	<GenRule GenDef="ServerProc" Name="declCPlusObjInstServerProc">
		virtual bool $leadlower Name$($iterate Params( first declServerMethodParamNoComma each declServerMethodParam empty empty )$ );
</GenRule>

	<GenRule GenDef="ServerObjFunc" Name="declCPlusObjServerMethod"
		>$switch IsInstanceMethod yes declCPlusObjInstServerObjFunc default empty$</GenRule>

	<GenRule GenDef="ServerObjFunc" Name="declCPlusObjInstServerObjFunc">
		virtual $CPlusDefNamespace$::I$DefSchemaName$$reference RetTable Name$Obj* $leadlower Name$($iterate Params( first declServerMethodParamNoComma each declServerMethodParam empty empty )$ );
</GenRule>

	<GenRule GenDef="ServerListFunc" Name="declCPlusObjServerMethod"
		>$switch IsInstanceMethod yes declCPlusObjInstServerListFunc default empty$</GenRule>

	<GenRule GenDef="ServerListFunc" Name="declCPlusObjInstServerListFunc">
		virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$$reference RetTable Name$Obj*&gt; $leadlower Name$($iterate Params( first declServerMethodParamNoComma each declServerMethodParam empty empty )$ );
</GenRule>

	<GenRule GenDef="Table" Name="alsoIncludeSchemaTableObj">
#include &lt;$lower reference SchemaDef SchemaName$obj/$reference SchemaDef SchemaName$$TableName$Obj.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="alsoIncludeObjInheritSuperClass">$reference SuperClassRelation reference ToTable maybeIncludeObjInheritSuperClass$
#include &lt;$lower reference SuperClassRelation reference ToTable SchemaName$obj/$reference SuperClassRelation reference ToTable SchemaName$$reference SuperClassRelation reference ToTable TableName$Obj.hpp&gt;</GenRule>

	<GenRule GenDef="Table" Name="maybeIncludeObjInheritSuperClass"
		>$switch HasSuperClassRelation yes alsoIncludeObjInheritSuperClass default empty$</GenRule>

	<GenRule GenDef="Table" Name="includeHierarchyRootSchemaTableIObjs"
		>$switch HasSuperClassRelation yes empty default includeAndWalkHierarchySchemaTableIObjs$</GenRule>

	<GenRule GenDef="Table" Name="includeAndWalkHierarchySchemaTableIObjs">
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$Obj.hpp&gt;$iterate TableSubClasses( each includeAndWalkHierarchySchemaTableIObjs empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="includeHierarchyRootSchemaTableIEditObjs"
		>$switch HasSuperClassRelation yes empty default includeAndWalkHierarchySchemaTableIEditObjs$</GenRule>

	<GenRule GenDef="Table" Name="includeAndWalkHierarchySchemaTableIEditObjs">
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$EditObj.hpp&gt;$iterate TableSubClasses( each includeAndWalkHierarchySchemaTableIEditObjs empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="includeHierarchyRootSchemaTableITableObjs"
		>$switch HasSuperClassRelation yes empty default includeAndWalkHierarchySchemaTableITableObjs$</GenRule>

	<GenRule GenDef="Table" Name="includeAndWalkHierarchySchemaTableITableObjs">
#include &lt;$lower SchemaName$obj/I$SchemaName$$TableName$TableObj.hpp&gt;$iterate TableSubClasses( each includeAndWalkHierarchySchemaTableITableObjs empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="includeHierarchyRootSchemaTableObjs"
		>$switch HasSuperClassRelation yes empty default includeAndWalkHierarchySchemaTableObjs$</GenRule>

	<GenRule GenDef="Table" Name="includeAndWalkHierarchySchemaTableObjs">
#include &lt;$lower SchemaName$obj/$SchemaName$$TableName$Obj.hpp&gt;$iterate TableSubClasses( each includeAndWalkHierarchySchemaTableObjs empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="includeHierarchyRootSchemaTableEditObjs"
		>$switch HasSuperClassRelation yes empty default includeAndWalkHierarchySchemaTableEditObjs$</GenRule>

	<GenRule GenDef="Table" Name="includeAndWalkHierarchySchemaTableEditObjs">
#include &lt;$lower SchemaName$obj/$SchemaName$$TableName$EditObj.hpp&gt;$iterate TableSubClasses( each includeAndWalkHierarchySchemaTableEditObjs empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="includeHierarchyRootSchemaTableTableObjs"
		>$switch HasSuperClassRelation yes empty default includeAndWalkHierarchySchemaTableTableObjs$</GenRule>

	<GenRule GenDef="Table" Name="includeAndWalkHierarchySchemaTableTableObjs">
#include &lt;$lower SchemaName$obj/$SchemaName$$TableName$TableObj.hpp&gt;$iterate TableSubClasses( each includeAndWalkHierarchySchemaTableTableObjs empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declSchemaTableObjBaseMembers"
		>$switch HasSuperClassRelation no declObjAttrOptAuditColumns default empty$$switch HasSuperClassRelation no declObjAttrIsNew default empty$$switch HasSuperClassRelation no declObjEditAttr default empty$$switch HasSuperClassRelation no declObjSchemaAttr default empty$$switch HasSuperClassRelation no declObjPKeyAttr default empty$$switch HasSuperClassRelation no declObjBuffAttr default empty$</GenRule>

	<GenRule GenDef="Table" Name="declObjAttrOptAuditColumns"
		>$switch BaseHasAuditColumns yes declObjAttrAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="declObjAttrAuditColumns">
		$CPlusSecNamespace$::I$SecSchemaName$SecUserObj* createdBy = NULL;
		$CPlusSecNamespace$::I$SecSchemaName$SecUserObj* updatedBy = NULL;</GenRule>

	<GenRule GenDef="Table" Name="declObjGetOptAuditColumns"
		>$switch BaseHasAuditColumns yes declObjGetAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="declObjGetAuditColumns">
		virtual $CPlusSecNamespace$::I$SecSchemaName$SecUserObj* getCreatedBy();
		virtual const std::chrono::system_clock::time_point&amp; getCreatedAt();
		virtual $CPlusSecNamespace$::I$SecSchemaName$SecUserObj* getUpdatedBy();
		virtual const std::chrono::system_clock::time_point&amp; getUpdatedAt();
</GenRule>

	<GenRule GenDef="Table" Name="declSchemaTableObjAllTheMethods">$switch HasSuperClassRelation yes declSchemaTableObjColumnSuperAccessors default declSchemaTableObjColumnBaseAccessors$$iterate Relation( each declObjRelationAccessors empty empty )$
		$SchemaName$$TableName$Obj();
		$SchemaName$$TableName$Obj( $CPlusDefNamespace$::I$DefSchemaName$SchemaObj* argSchema );
		virtual const std::string&amp; getClassName() const;
		virtual ~$SchemaName$$TableName$Obj();$declSchemaObjMethods$$iterate ServerMethods( each declCPlusObjServerMethod empty empty )$$HPlusObjImplementation$
</GenRule>

	<GenRule GenDef="Table" Name="declSchemaTableObjColumnSuperAccessors"
		>$iterate DataColumns( each declObjColumnAccessors empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declSchemaTableObjColumnBaseAccessors"
		>$iterate Columns( each declObjColumnAccessors empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declSchemaObjMethods"
		>$declGetClassCode$$declImplementsClassCode$$switch HasSuperClassRelation no declGetRequiredRevision default empty$$declSchemaObjToString$$declObjTableGetBuff$$declObjTableBuffAccessors$$declGetObjName$$declGetGenDefName$$maybeDeclGetScope$$declGetObjQualifier$$declGetQualNamedObject$$declGetNamedObject$$declGetObjQualifiedName$$declGetObjFullName$$declObjRealize$$declObjRead$$switch HasChain yes declObjMoveUp default empty$$switch HasChain yes declObjMoveDown default empty$$switch HasSuperClassRelation no declObjTableAccessors default empty$$switch HasSuperClassRelation no declObjSchemaAccessors default empty$$switch HasSuperClassRelation no declObjPKeyAccessors default empty$$switch HasSuperClassRelation no declObjIsNewAccessors default empty$$declObjBeginEdit$$switch HasSuperClassRelation no declObjEndEdit default empty$$switch HasSuperClassRelation no declObjEditAccessors default empty$$declObjEditAsAccessors$$switch HasSuperClassRelation no maybeDeclObjGetAuditColumns default empty$$switch HasSuperClassRelation no declObjCopyPKeyToBuff default empty$$switch HasSuperClassRelation no declObjCopyBuffToPKey default empty$</GenRule>

	<GenRule GenDef="Table" Name="maybeDeclObjGetAuditColumns"
		>$switch BaseHasAuditColumns yes declObjGetAuditColumns default empty$</GenRule>

	<GenRule GenDef="Table" Name="maybeDeclObjSchemaAccessors"
		>$declObjSchemaAccessors$</GenRule>

	<GenRule GenDef="Table" Name="maybeDeclObjTableAccessors"
		>$declObjTableAccessors$</GenRule>

	<GenRule GenDef="Table" Name="maybeDeclGetRequiredRevision"
		>$declGetRequiredRevision$</GenRule>

	<GenRule GenDef="Table" Name="declSchemaObjToString">
		virtual std::string toString();</GenRule>

	<GenRule GenDef="Table" Name="declObjToStringEmitXmlAttr"
		>$switch HasSuperClassRelation yes declObjToStringEmitSuperXmlAttr default declObjToStringEmitBaseXmlAttr$</GenRule>

	<GenRule GenDef="Table" Name="declObjToStringEmitBaseXmlAttr"
		>$iterate Columns( each declToStringEmitXmlAttr )$</GenRule>

	<GenRule GenDef="Table" Name="declObjToStringEmitSuperXmlAttr"
		>$reference SuperClassRelation reference ToTable declObjToStringEmitXmlAttr$$iterate Columns( each declToStringEmitXmlDataAttr )$</GenRule>

	<GenRule GenDef="Value" Name="declToStringEmitXmlDataAttr"
		>$switch ColumnInPrimaryIndex yes empty default declToStringEmitXmlAttr$</GenRule>

	<GenRule GenDef="Table" Name="declGetGenDefName">
		virtual const std::string getGenDefName();
</GenRule>

	<GenRule GenDef="Table" Name="declGetQualNamedObject">
		virtual cflib::ICFLibAnyObj* getNamedObject( const classcode_t* qualifyingClass, const std::string&amp; objName );
</GenRule>

	<GenRule GenDef="Table" Name="declGetNamedObject">
		virtual cflib::ICFLibAnyObj* getNamedObject( const std::string&amp; objName );
</GenRule>

	<GenRule GenDef="IndexCol" Name="declGetNamedObjectReadByArg"
		>nextName</GenRule>

	<GenRule GenDef="IndexCol" Name="declGetNamedObjectReadByPKeyArgs"
		>$poptop Table declGetNamedObjectReadByPKeyArgs$</GenRule>

	<GenRule GenDef="Table" Name="declGetNamedObjectReadByPKeyArgs"
		>$reference PrimaryKeyIndex iterate Columns( first declGetNamedObjectPassPKeyArg each declGetNamedObjectCommaPassPKeyArg empty empty )$,
					nextName</GenRule>

	<GenRule GenDef="IndexCol" Name="declGetNamedObjectPassPKeyArg"
		>get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="IndexCol" Name="declGetNamedObjectCommaPassPKeyArg">,
					get$OptionalOrRequired$$Name$()</GenRule>

	<GenRule GenDef="Table" Name="maybeDeclGetObjQualifier"
		>$declGetObjQualifier$</GenRule>

	<GenRule GenDef="Table" Name="declGetObjQualifier">
		virtual cflib::ICFLibAnyObj* getObjQualifier( const classcode_t* qualifyingClass );
</GenRule>

	<GenRule GenDef="Table" Name="maybeDeclGetObjQualifiedName"
		>$declGetObjQualifiedName$</GenRule>

	<GenRule GenDef="Table" Name="declGetObjQualifiedName">
		virtual std::string getObjQualifiedName();
</GenRule>

	<GenRule GenDef="Table" Name="maybeDeclGetObjFullName"
		>$switch HasSuperClassRelation no declGetObjFullName default empty$</GenRule>

	<GenRule GenDef="Table" Name="declGetObjFullName">
		virtual std::string getObjFullName();
</GenRule>

	<GenRule GenDef="Table" Name="declGetObjName">
		virtual std::string getObjName();
</GenRule>

	<GenRule GenDef="Table" Name="maybeDeclGetScope"
		>$switch ContainerStyle
			Single declGetScopeViaSingleContainer
			Multiple maybeDeclGetScopeNull
			default maybeDeclGetScopeNull$</GenRule>

	<GenRule GenDef="Table" Name="maybeDeclGetScopeNull"
		>$switch HasSuperClassRelation no declGetScopeNull default empty$</GenRule>

	<GenRule GenDef="Table" Name="declGetScopeNull">
		virtual cflib::ICFLibAnyObj* getScope();
		virtual cflib::ICFLibAnyObj* getObjScope();
</GenRule>

	<GenRule GenDef="Table" Name="declGetScopeViaSingleContainer">
		virtual cflib::ICFLibAnyObj* getScope();
		virtual cflib::ICFLibAnyObj* getObjScope();
</GenRule>

	<GenRule GenDef="Table" Name="declObjEditAttr">
		$CPlusDefNamespace$::I$DefSchemaName$$TableName$EditObj* edit;</GenRule>

	<GenRule GenDef="Table" Name="declObjBeginEdit">
		virtual $reference BaseClass CPlusDefNamespace$::I$reference BaseClass DefSchemaName$$reference BaseClass TableName$EditObj* beginEdit();
</GenRule>

	<GenRule GenDef="Table" Name="declObjEndEdit">
		virtual void endEdit();
</GenRule>

	<GenRule GenDef="Table" Name="declObjEditAccessors">
		virtual $CPlusDefNamespace$::I$DefSchemaName$$TableName$EditObj* getEdit();
</GenRule>

	<GenRule GenDef="Table" Name="declObjEditAsAccessors">
		virtual $CPlusDefNamespace$::I$DefSchemaName$$TableName$EditObj* get$TableName$Edit();
</GenRule>

	<GenRule GenDef="Table" Name="declObjConstructorMaybeInitPKeyClassCode"
		>$switch HasSuperClassRelation no declObjConstructorInitPKeyClassCode default empty$</GenRule>

	<GenRule GenDef="Table" Name="declObjAttrIsNew">
		bool isNew;</GenRule>

	<GenRule GenDef="Table" Name="declObjSchemaAttr">
		$CPlusDefNamespace$::I$DefSchemaName$SchemaObj* schema;</GenRule>

	<GenRule GenDef="Table" Name="declObjIsNewAccessors">
		virtual bool getIsNew();
		virtual void setIsNew( bool value );
</GenRule>

	<GenRule GenDef="Table" Name="declObjSchemaAccessors">
		virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaObj* getSchema();
		virtual void setSchema( $CPlusDefNamespace$::I$DefSchemaName$SchemaObj* value );
</GenRule>

	<GenRule GenDef="Table" Name="declObjTableAccessors">
		virtual $CPlusDefNamespace$::I$DefSchemaName$$TableName$TableObj* get$TableName$Table();
</GenRule>

	<GenRule GenDef="Relation" Name="RelationToIndexIsUnique"
		>$reference ToIndex IsUnique$</GenRule>

	<GenRule GenDef="Relation" Name="declObjRelationAccessors"
		>$switch RelationToIndexIsUnique yes maybeDeclObjRelationSingletonAccessors default maybeDeclObjRelationCollectionAccessors$</GenRule>

	<GenRule GenDef="Relation" Name="maybeDeclObjRelationSingletonAccessors"
		>$switch RelationTypeTag Superclass empty default declObjRelationSingletonAccessors$</GenRule>

	<GenRule GenDef="Relation" Name="maybeDeclObjRelationCollectionAccessors"
		>$switch RelationTypeTag Superclass empty default declObjRelationCollectionAccessors$</GenRule>

	<GenRule GenDef="Object" Name="declObjRelationC++18Optional">?</GenRule>

	<GenRule GenDef="Relation" Name="OptionalOrRequired"
		>$switch IsRequired yes declRequired default declOptional$</GenRule>
	<GenRule ScopeDef="Relation" GenDef="Object" Name="OptionalOrRequired"
		>$popto Relation OptionalOrRequired$</GenRule>
	<GenRule GenDef="TableCol" Name="OptionalOrRequired"
		>$switch IsNullable no declRequired default declOptional$</GenRule>
	<GenRule GenDef="Atom" Name="OptionalOrRequired"
		>$switch IsNullable no declRequired default declOptional$</GenRule>
	<GenRule GenDef="IndexCol" Name="OptionalOrRequired"
		>$switch IsNullable no declRequired default declOptional$</GenRule>
	<GenRule GenDef="Param" Name="OptionalOrRequired"
		>$switch IsNullable no declRequired default declOptional$</GenRule>

	<GenRule GenDef="Object" Name="declRequired">Required</GenRule>
	<GenRule GenDef="Object" Name="declOptional">Optional</GenRule>

	<GenRule GenDef="Relation" Name="declToIndexSuffix"
		>$reference ToIndex Suffix$</GenRule>
		<!--$reference ToIndex declToIndexSuffix$</GenRule -->
	<GenRule GenDef="Index" Name="declToIndexSuffix"
		>$Suffix$</GenRule>
		<!-->$switch IsPrimaryIndex yes declToIndexBasePrimarySuffix default Suffix$</GenRule-->
	<GenRule GenDef="Index" Name="declToIndexBasePrimarySuffix"
		>$reference BaseClass reference PrimaryKeyIndex Suffix$</GenRule>

	<GenRule GenDef="Relation" Name="declObjRelationSingletonAccessors">
		virtual $reference ToTable CPlusDefNamespace$::I$reference ToTable DefSchemaName$$reference ToTable TableName$Obj* get$OptionalOrRequired$$RelationTypeTag$$Suffix$( bool forceRead = false );
</GenRule>

	<GenRule GenDef="RelationCol" Name="FromColDefIsNullable"
		>$reference FromCol IsNullable$</GenRule>

	<GenRule GenDef="Object" Name="declObjColumnNull">Null</GenRule>

	<GenRule GenDef="RelationCol" Name="declObjRelationAccessorsPassArg"
		>$reference FromCol switch ColumnInPrimaryIndex yes declObjRelationAccessorsPKey default declObjRelationAccessorsBuff$-&gt;get$reference FromCol OptionalOrRequired$$reference FromCol Name$()</GenRule>

	<GenRule GenDef="RelationCol" Name="declObjRelationAccessorsToColIsNullable"
		>$reference ToCol IsNullable$</GenRule>
	<GenRule GenDef="RelationCol" Name="declObjRelationAccessorsFromColIsNullable"
		>$reference FromCol IsNullable$</GenRule>

	<GenRule GenDef="RelationCol" Name="declObjRelationAccessorsCommaPassArg">,
						$declObjRelationAccessorsPassArg$</GenRule>

	<GenRule GenDef="Object" Name="declObjRelationAccessorsPKey">getPKey()</GenRule>

	<GenRule GenDef="RelationCol" Name="declObjRelationAccessorsBuff">get$reference Relation reference FromTable TableName$Buff()</GenRule>

	<GenRule GenDef="IndexCol" Name="declObjRelationAccessorsBuff">get$reference Index reference Table TableName$Buff()</GenRule>

	<GenRule GenDef="Value" Name="declObjRelationAccessorsBuff">get$reference Table TableName$Buff()</GenRule>

	<GenRule GenDef="Relation" Name="declObjRelationCollectionAccessors">
		virtual std::vector&lt;$reference ToTable CPlusDefNamespace$::I$reference ToTable DefSchemaName$$reference ToTable TableName$Obj*&gt; get$OptionalOrRequired$$RelationTypeTag$$Suffix$( bool forceRead = false );
</GenRule>

	<GenRule GenDef="TableCol" Name="declObjColumnAccessors"
		>$switch ColumnInPrimaryIndex yes declObjColumnBaseROPKeyAccessor default declObjColumnDataAccessor$</GenRule>
	<GenRule GenDef="Atom" Name="declObjColumnAccessors"
		>$switch ColumnInPrimaryIndex yes declObjColumnBaseROPKeyAccessor default declObjColumnDataAccessor$</GenRule>

	<GenRule GenDef="TableCol" Name="declObjColumnDataAccessor"
		>$switch ColumnInContainerOrNamedLookupRelation yes declObjColumnRODataAccessor default declObjColumnRWDataAccessor$</GenRule>
	<GenRule GenDef="Atom" Name="declObjColumnDataAccessor"
		>$switch ColumnInContainerOrNamedLookupRelation yes declObjColumnRODataAccessor default declObjColumnRWDataAccessor$</GenRule>

	<GenRule ScopeDef="Table" GenDef="TableCol" Name="IsBaseTable"
		>$popto Table IsBaseTable$</GenRule>
	<GenRule ScopeDef="Table" GenDef="Atom" Name="IsBaseTable"
		>$popto Table IsBaseTable$</GenRule>

	<GenRule GenDef="TableCol" Name="HasSuperClassRelation"
		>$reference Table HasSuperClassRelation$</GenRule>
	<GenRule GenDef="Atom" Name="HasSuperClassRelation"
		>$reference Table HasSuperClassRelation$</GenRule>

	<GenRule GenDef="TableCol" Name="declObjColumnBaseROPKeyAccessor"
		>$switch HasSuperClassRelation no declObjColumnROPKeyAccessor default empty$</GenRule>
	<GenRule GenDef="Atom" Name="declObjColumnBaseROPKeyAccessor"
		>$switch HasSuperClassRelation no declObjColumnROPKeyAccessor default empty$</GenRule>

	<GenRule GenDef="TableCol" Name="declObjColumnROAccessor"
		>$switch ColumnInPrimaryIndex yes declObjColumnROPKeyAccessor default declObjColumnRODataAccessor$</GenRule>
	<GenRule GenDef="Atom" Name="declObjColumnROAccessor"
		>$switch ColumnInPrimaryIndex yes declObjColumnROPKeyAccessor default declObjColumnRODataAccessor$</GenRule>

	<GenRule GenDef="TableCol" Name="declObjColumnROPKeyAccessor">$switch IsNullable yes declIObjIsColumnNull default empty$
		virtual $declConstReqAtomType$ get$implColumnAttrOptionality$$Name$$switch IsNullable yes declIObjColumnValue default empty$();
		virtual $declConstReferenceAtomType$ get$implColumnAttrOptionality$$Name$Reference();
</GenRule>

	<GenRule GenDef="Atom" Name="declObjColumnROPKeyAccessor">$switch IsNullable yes declIObjIsColumnNull default empty$
		virtual $declConstReqAtomType$ get$implColumnAttrOptionality$$Name$$switch IsNullable yes declIObjColumnValue default empty$();
		virtual $declConstReferenceAtomType$ get$implColumnAttrOptionality$$Name$Reference();
</GenRule>

	<GenRule GenDef="Object" Name="declObjColumnRODataAccessor">$switch IsNullable yes declIObjIsColumnNull default empty$
		virtual $declConstReqAtomType$ get$implColumnAttrOptionality$$Name$$switch IsNullable yes declIObjColumnValue default empty$();
		virtual $declConstReferenceAtomType$ get$implColumnAttrOptionality$$Name$Reference();
</GenRule>

	<GenRule GenDef="Object" Name="declObjColumnRWDataAccessor">$switch IsNullable yes declIObjIsColumnNull default empty$
		virtual $declConstReqAtomType$ get$implColumnAttrOptionality$$Name$$switch IsNullable yes declIObjColumnValue default empty$();
		virtual $declConstReferenceAtomType$ get$implColumnAttrOptionality$$Name$Reference();
</GenRule>

	<GenRule GenDef="Object" Name="declIObjIsColumnNull">
		virtual bool is$implColumnAttrOptionality$$Name$Null();</GenRule>

	<GenRule GenDef="Table" Name="declObjPKeyAttr">
		$reference BaseClass CPlusDefNamespace$::$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey* pKey;</GenRule>

	<GenRule GenDef="Table" Name="declObjBuffAttr">
		$CPlusDefNamespace$::$DefSchemaName$$TableName$Buff* buff;</GenRule>

	<GenRule GenDef="Table" Name="declObjPKeyAccessors">
		virtual $reference BaseClass CPlusDefNamespace$::$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey* getPKey();
		virtual void setPKey( $reference BaseClass CPlusDefNamespace$::$reference BaseClass DefSchemaName$$reference BaseClass TableName$PKey* value );
</GenRule>

	<GenRule GenDef="Table" Name="declObjRealize">
		virtual $reference BaseClass CPlusDefNamespace$::I$reference BaseClass DefSchemaName$$reference BaseClass TableName$Obj* realize();
</GenRule>

	<GenRule GenDef="Table" Name="declObjRead">
		virtual $reference BaseClass CPlusDefNamespace$::I$reference BaseClass DefSchemaName$$reference BaseClass TableName$Obj* read( bool forceRead = false );
</GenRule>

	<GenRule GenDef="Table" Name="declObjMoveUp">
		virtual $reference Chain reference Table CPlusDefNamespace$::I$reference BaseClass DefSchemaName$$reference Chain reference Table TableName$Obj* moveUp();
</GenRule>

	<GenRule GenDef="Table" Name="declObjMoveDown">
		virtual $reference Chain reference Table CPlusDefNamespace$::I$reference BaseClass DefSchemaName$$reference Chain reference Table TableName$Obj* moveDown();
</GenRule>

	<GenRule GenDef="Table" Name="declObjCopyPKeyToBuff">
		virtual void copyPKeyToBuff();
</GenRule>

	<GenRule GenDef="Table" Name="declObjCopyBuffToPKey">
		virtual void copyBuffToPKey();
</GenRule>

	<GenRule GenDef="Table" Name="declObjTableGetBuff">
		virtual $reference BaseClass CPlusDefNamespace$::$reference BaseClass DefSchemaName$$reference BaseClass TableName$Buff* getBuff();
		virtual void setBuff( $reference BaseClass CPlusDefNamespace$::$reference BaseClass DefSchemaName$$reference BaseClass TableName$Buff* value );
</GenRule>

	<GenRule GenDef="Table" Name="declObjTableSetBuffClearRelations"
		>$switch HasSuperClassRelation yes declObjTableSetBuffClearInhRelations default declObjTableSetBuffClearBaseRelations$</GenRule>

	<GenRule GenDef="Table" Name="declObjTableSetBuffClearInhRelations"
		>$reference SuperClassRelation reference ToTable declObjTableSetBuffClearRelations$</GenRule>

	<GenRule GenDef="Table" Name="declObjTableSetBuffClearBaseRelations"
		>$iterate Relation( each declObjConstructorInitRelationAttr empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="declObjTableBuffAccessors">
		inline $CPlusDefNamespace$::$DefSchemaName$$TableName$Buff* get$TableName$Buff() {
			if( buff == NULL ) {
				getBuff();
			}
			return( static_cast&lt;$CPlusDefNamespace$::$DefSchemaName$$TableName$Buff*&gt;( buff ) );
		};

		inline $CPlusDefNamespace$::$DefSchemaName$$TableName$Buff* get$TableName$EditBuff() {
			if( buff == NULL ) {
				getBuff();
			}
			return( dynamic_cast&lt;$CPlusDefNamespace$::$DefSchemaName$$TableName$Buff*&gt;( buff ) );
		};
</GenRule>

</RuleSet>
