<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schemaobj/ISchemaSchemaObj.hpp"
	Revision="2.13"
	Descr="C++18 Schema Object interface">

	<GenFile GenDef="SchemaDef" Name="fileISchemaSchemaObjHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$obj"
		ExpansionClassName="I$SchemaName$SchemaObjHpp"
		ExpansionKeyName="I$SchemaName$SchemaObjHpp"
		ExpansionFileName="I$SchemaName$SchemaObj.hpp"
>#pragma once

// Description: C++18 Schema Object interface for $SchemaName$.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;

#include &lt;$lower SecSchemaName$/$SecSchemaName$Authorization.hpp&gt;$iterate SchemaRefs( each includeISchemaSchemaHpp empty empty )$
#include &lt;$lower SchemaName$/I$SchemaName$Schema.hpp&gt;$iterate SchemaRefs( each includeISchemaSchemaObj empty empty )$

namespace $CPlusNamespace$ {
	class I$SchemaName$SchemaObj;$iterate SchemaTables( each declForwardSchemaTableObjs empty empty )$
}

namespace $CPlusNamespace$ {
	class I$SchemaName$SchemaObj$iterate SchemaRefs( first extendISchemaSchemaObj each commaNewlineISchemaSchemaObj empty empty )$
	{
	public:
		I$SchemaName$SchemaObj();
		virtual ~I$SchemaName$SchemaObj();
$iterate SchemaRefs( each empty empty declISchemaSchemaObj )$$iterate SchemaRefs( each empty empty declISchemaSchemaObjGetSetDbSchemaNameMethods )$$iterate SchemaRefs( each empty empty declISchemaSchemaObjTransactionMethods )$$iterate SchemaRefs( each empty empty declISchemaSchemaObjReleasePreparedStatements )$$iterate SchemaTables( each declISchemaSchemaObjTableObjAccessors empty empty )$$HPlusSchemaObjInterface$$ReferencedHPlusSchemaObjInterface$
	};
}
</GenFile>

	<GenRule GenDef="SchemaRef" Name="extendISchemaSchemaObj">
	: public virtual $reference RefSchema CPlusNamespace$::I$reference RefSchema SchemaName$SchemaObj</GenRule>

	<GenRule GenDef="SchemaRef" Name="commaNewlineISchemaSchemaObj">,
	  public virtual $reference RefSchema CPlusNamespace$::I$reference RefSchema SchemaName$SchemaObj</GenRule>

	<GenRule GenDef="Object" Name="declISchemaSchemaObj">
		virtual $CPlusSecNamespace$::$SecSchemaName$Authorization* getAuthorization() const = 0;
		virtual void setAuthorization( $CPlusSecNamespace$::$SecSchemaName$Authorization* value ) = 0;

		virtual $CPlusSecNamespace$::I$SecSchemaName$Schema* getBackingStore() = 0;
		virtual void setBackingStore( $CPlusSecNamespace$::I$SecSchemaName$Schema* value ) = 0;

		virtual std::string getSchemaName() = 0;

		virtual void setSecClusterName( const std::string&amp; value ) = 0;
		virtual $CPlusSecNamespace$::I$SecSchemaName$ClusterObj* getSecCluster() = 0;
		virtual void setSecCluster( $CPlusSecNamespace$::I$SecSchemaName$ClusterObj* value ) = 0;

		virtual void setSecTenantName( const std::string&amp; value ) = 0;
		virtual $CPlusSecNamespace$::I$SecSchemaName$TenantObj* getSecTenant() = 0;
		virtual void setSecTenant( $CPlusSecNamespace$::I$SecSchemaName$TenantObj* value ) = 0;

		virtual void setSecUserName( const std::string&amp; value ) = 0;
		virtual $CPlusSecNamespace$::I$SecSchemaName$SecUserObj* getSecUser() = 0;
		virtual void setSecUser( $CPlusSecNamespace$::I$SecSchemaName$SecUserObj* value ) = 0;

		virtual void setSecSessionId( const uuid_ptr_t value ) = 0;
		virtual $CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* getSecSession() = 0;
		virtual void setSecSession( $CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* value ) = 0;

		virtual bool isConnected() = 0;
		virtual bool connect() = 0;
		virtual bool connect( const std::string&amp; username, const std::string&amp; password ) = 0;
		virtual bool connect( const std::string&amp; clusterName, const std::string&amp; tenantName, const std::string&amp; secUserName, const std::string&amp; password ) = 0;
		virtual void disconnect( bool doCommit ) = 0;
		virtual void logout() = 0;

		virtual void minimizeMemory() = 0;

		virtual std::string fileImport( const std::string&amp; fileName, const std::string&amp; fileContent ) = 0;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="includeHPlusPackageSchemaNameObj"
		>$reference RefSchema includeHPlusPackageSchemaNameObj$</GenRule>
	<GenRule GenDef="SchemaDef" Name="includeHPlusPackageSchemaNameObj">
include $lower HPlusExpandPackage$.$SchemaName$Obj.*;</GenRule>
	<GenRule GenDef="Table" Name="includeHPlusPackageSchemaNameObj"
		>$popto SchemaDef includeHPlusPackageSchemaNameObj$</GenRule>
	<GenRule GenDef="Object" Name="includeHPlusPackageSchemaNameObj"
		>$popto SchemaDef includeHPlusPackageSchemaNameObj$</GenRule>

	<GenRule GenDef="SchemaDef" Name="ReferencedHPlusSchemaObjInterface"
		>$iterate SchemaRefs( each ApplyHPlusSchemaObjInterface empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ApplyHPlusSchemaObjInterface"
		>$reference RefSchema HPlusSchemaObjInterface$</GenRule>

	<GenRule GenDef="SchemaDef" Name="ReferencedHPlusSchemaObjImport"
		>$iterate SchemaRefs( each ApplyHPlusSchemaObjImport empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ApplyHPlusSchemaObjImport"
		>$reference RefSchema HPlusSchemaObjImport$</GenRule>

	<GenRule GenDef="Object" Name="declISchemaSchemaObjReleasePreparedStatements">
		virtual void releasePreparedStatements() = 0;
</GenRule>

	<GenRule GenDef="Object" Name="declISchemaSchemaObjGetSetDbSchemaNameMethods">
		virtual std::string getDbSchemaName() = 0;
		virtual std::string getLowerDbSchemaName() = 0;
		virtual void setDbSchemaName( const std::string&amp; argDbSchemaName ) = 0;
</GenRule>

	<GenRule GenDef="Object" Name="declISchemaSchemaObjTransactionMethods">
		virtual bool isTransactionOpen() = 0;
		virtual bool beginTransaction() = 0;
		virtual void commit() = 0;
		virtual void rollback() = 0;
</GenRule>

	<GenRule GenDef="Table" Name="declISchemaSchemaObjTableObjAccessors"
		>$switch HasDefSchema yes empty default reallyDeclISchemaSchemaObjTableObjAccessors$</GenRule>

	<GenRule GenDef="Table" Name="reallyDeclISchemaSchemaObjTableObjAccessors">
		virtual $reference BaseClass CPlusDefNamespace$::I$DefSchemaName$$TableName$TableObj* get$TableName$TableObj() = 0;</GenRule>

</RuleSet>
