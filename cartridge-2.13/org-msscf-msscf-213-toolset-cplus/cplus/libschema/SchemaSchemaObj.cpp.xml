<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/SchemaSchemaObj.cpp"
	Revision="2.13"
	Descr="C++18 Schema Object implementation">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSchemaObjCpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName=""
		ExpansionClassName="$SchemaName$SchemaObjCpp"
		ExpansionKeyName="$SchemaName$SchemaObjCpp"
		ExpansionFileName="$SchemaName$SchemaObj.cpp"
>// Description: C++18 Schema Object implementation for $SchemaName$.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;

using namespace std;

#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;
#include &lt;$lower SchemaName$obj/I$SchemaName$ObjPublic.hpp&gt;
#include &lt;$lower SchemaName$obj/$SchemaName$SchemaObj.hpp&gt;
$poptop SchemaDef iterate SchemaTables( each includeHierarchyRootSchemaTableTableObjs empty empty )$

namespace $CPlusNamespace$ {
	const std::string $SchemaName$SchemaObj::CLASS_NAME( "$SchemaName$SchemaObj" );
	const std::string $SchemaName$SchemaObj::SCHEMA_NAME( "$SchemaName$" );
	const std::string $SchemaName$SchemaObj::SCHEMA_DBNAME( "$lower DbSchemaName$" );
	const std::string $SchemaName$SchemaObj::S_System( "system" );
$implSchemaObjClassBody$}
</GenFile>

<GenRule GenDef="SchemaDef" Name="implSchemaObjClassBody"
	>$implSchemaSchemaObjConstructor$$implSchemaSchemaObjDestructor$$implSchemaObjGetSetSecCluster$$implSchemaObjGetSetSecTenant$$implSchemaObjGetSetSecUser$$implSchemaObjGetSetSecSession$$implSchemaSchemaObjGetSetDbSchemaNameMethods$$implSchemaFileImportMethod$$implSchemaSchemaObjReleasePreparedStatements$$implSchemaSchemaObjMethods$$iterate SchemaTables( each implSchemaSchemaObjTableObjAccessors empty empty )$$CPlusSchemaObjImplementation$$ReferencedCPlusSchemaObjImplementation$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaObjConstructor">
	$poptop SchemaDef SchemaName$SchemaObj::$SchemaName$SchemaObj() {
		authorization = NULL;
		backingStore = NULL;
		secClusterName = new std::string( S_System );
		secTenantName = new std::string( S_System );
		secUserName = new std::string( S_System );
		secCluster = NULL;
		secClusterId = 0L;
		secTenant = NULL;
		secTenantId = 0L;
		secUser = NULL;
		for( int i = 0; i &lt; 16; i++ ) {
			secSessionUserId[i] = 0;
		}
		secSession = NULL;
		for( int i = 0; i &lt; 16; i++ ) {
			secSessionSessionId[i] = 0;
		}
		schemaDbName = new std::string( SCHEMA_DBNAME );
		lowerDbSchemaName = new std::string( SCHEMA_DBNAME );
		std::transform( lowerDbSchemaName-&gt;begin(), lowerDbSchemaName-&gt;end(), lowerDbSchemaName-&gt;begin(), ::tolower );$iterate SchemaTables( each initSchemaSchemaObjConstructorTableObjMember empty empty )$
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaObjDestructor">
	$poptop SchemaDef SchemaName$SchemaObj::~$SchemaName$SchemaObj() {
		authorization = NULL;
		backingStore = NULL;
		if( secClusterName != NULL ) {
			delete secClusterName;
			secClusterName = NULL;
		}
		if( secTenantName != NULL ) {
			delete secTenantName;
			secTenantName = NULL;
		}
		if( secUserName != NULL ) {
			delete secUserName;
			secUserName = NULL;
		}
		secCluster = NULL;
		secClusterId = 0L;
		secTenant = NULL;
		secTenantId = 0L;
		secUser = NULL;
		for( int i = 0; i &lt; 16; i++ ) {
			secSessionUserId[i] = 0;
		}
		for( int i = 0; i &lt; 16; i++ ) {
			secSessionSessionId[i] = 0;
		}
		if( schemaDbName != NULL ) {
			delete schemaDbName;
			schemaDbName = NULL;
		}
		if( lowerDbSchemaName != NULL ) {
			delete lowerDbSchemaName;
			lowerDbSchemaName = NULL;
		}$iterate SchemaTables( each topDeleteSchemaSchemaObjDestructorTableObjMember empty empty )$
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaFileImportMethod">
	std::string $poptop SchemaDef SchemaName$SchemaObj::fileImport( const std::string&amp; fileName, const std::string&amp; fileContent ) {
		std::string logContent = backingStore-&gt;fileImport( getAuthorization(), fileName, fileContent );
		return( logContent );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="ReferencedCPlusSchemaObjImplementation"
		>$iterate SchemaRefs( each ApplyCPlusSchemaObjImplementation empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ApplyCPlusSchemaObjImplementation"
		>$reference RefSchema CPlusSchemaObjImplementation$</GenRule>

	<GenRule GenDef="SchemaDef" Name="ReferencedCPlusSchemaObjMembers"
		>$iterate SchemaRefs( each ApplyCPlusSchemaObjMembers empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="ApplyCPlusSchemaObjMembers"
		>$reference RefSchema CPlusSchemaObjMembers$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaObjReleasePreparedStatements">
	/**
	 *	Release any prepared statements acquired by this connection.
	 *	&lt;p&gt;
	 *	Resets the prepared statements so they can acquire the new value of
	 *	&lt;tt&gt;setDbSchemaName()&lt;/tt&gt;.
	 */
	void $poptop SchemaDef SchemaName$SchemaObj::releasePreparedStatements() {
	}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaObjGetSetDbSchemaNameMethods"
		>$implSchemaSchemaObjGetSetDbSchemaNameGetMethods$$implSchemaSchemaObjGetSetDbSchemaNameSetMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaObjGetSetDbSchemaNameGetMethods">
	std::string $poptop SchemaDef SchemaName$SchemaObj::getDbSchemaName() {
		std::string retval( *schemaDbName );
		return( retval );
	}

	std::string $poptop SchemaDef SchemaName$SchemaObj::getLowerDbSchemaName() {
		std::string retval( *lowerDbSchemaName );
		return( retval );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaObjGetSetDbSchemaNameSetMethods">
	void $poptop SchemaDef SchemaName$SchemaObj::setDbSchemaName( const std::string&amp; argDbSchemaName ) {
		static const std::string S_ProcName = "setDbSchemaName";

		rollback();

		if( argDbSchemaName.length() &lt;= 0 ) {
			throw cflib::CFLibEmptyArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				"argDbSchemaName" );
		}

		if( backingStore != NULL ) {
			backingStore-&gt;setDbSchemaName( argDbSchemaName );
		}

		if( schemaDbName != NULL ) {
			delete schemaDbName;
			schemaDbName = NULL;
		}
		schemaDbName = new std::string( argDbSchemaName );
		lowerDbSchemaName = new std::string( argDbSchemaName );
		std::transform( lowerDbSchemaName-&gt;begin(), lowerDbSchemaName-&gt;end(), lowerDbSchemaName-&gt;begin(), ::tolower );

		releasePreparedStatements();
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaObjGetSetSecCluster">
	void $poptop SchemaDef SchemaName$SchemaObj::setSecClusterName( const std::string&amp; value ) {
		if( value.length() &lt;= 0 ) {
			throw cflib::CFLibEmptyArgumentException( CLASS_NAME,
				"setClusterName",
				1,
				"value" );
		}
		if( secClusterName != NULL ) {
			delete secClusterName;
			secClusterName = NULL;
		}
		secClusterName = new std::string( value );
		secCluster = NULL;
	}

	std::string $poptop SchemaDef SchemaName$SchemaObj::getSecClusterName() {
		std::string retval( *secClusterName );
		return( retval );
	}

	$CPlusSecNamespace$::I$SecSchemaName$ClusterObj* $poptop SchemaDef SchemaName$SchemaObj::getSecCluster() {
		if( secCluster == NULL ) {
			if( authorization != NULL ) {
				secCluster = getClusterTableObj()-&gt;readClusterByIdIdx( authorization-&gt;getSecClusterId() );
			}
			else {
				secCluster = getClusterTableObj()-&gt;readClusterByUDomNameIdx( *secClusterName );
				if( ( secCluster == NULL ) &amp;&amp; ( secClusterId &gt; 0 ) ) {
					secCluster = getClusterTableObj()-&gt;readClusterByIdIdx( secClusterId );
				}
			}
			if( secCluster != NULL ) {
				if( secClusterName != NULL ) {
					delete secClusterName;
					secClusterName = NULL;
				}
				secClusterName = new std::string( secCluster-&gt;getRequiredFullDomName() );
				secClusterId = secCluster-&gt;getRequiredId();
				if( authorization != NULL ) {
					authorization-&gt;setSecCluster( *secCluster );
				}
			}
		}
		return( secCluster );
	}

	void $poptop SchemaDef SchemaName$SchemaObj::setSecCluster( $CPlusSecNamespace$::I$SecSchemaName$ClusterObj* value ) {
		secCluster = value;
		if( secCluster == NULL ) {
			return;
		}
		secClusterId = secCluster-&gt;getRequiredId();
		if( secClusterName != NULL ) {
			delete secClusterName;
			secClusterName = NULL;
		}
		secClusterName = new std::string( secCluster-&gt;getRequiredFullDomName() );
		if( authorization != NULL ) {
			authorization-&gt;setSecCluster( *secCluster );
		}
	}

	long $poptop SchemaDef SchemaName$SchemaObj::getSecClusterId() {
		return( secClusterId );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaObjGetSetSecTenant">
	void $poptop SchemaDef SchemaName$SchemaObj::setSecTenantName( const std::string&amp; value ) {
		if( value.length() &lt;= 0 ) {
			throw cflib::CFLibEmptyArgumentException( CLASS_NAME,
				"setTenantName",
				1,
				"value" );
		}
		if( secTenantName != NULL ) {
			delete secTenantName;
			secTenantName = NULL;
		}
		secTenantName = new std::string( value );
		secTenant = NULL;
	}

	std::string $poptop SchemaDef SchemaName$SchemaObj::getSecTenantName() {
		std::string retval( *secTenantName );
		return( retval );
	}

	$CPlusSecNamespace$::I$SecSchemaName$TenantObj* $poptop SchemaDef SchemaName$SchemaObj::getSecTenant() {
		if( secTenant == NULL ) {
			if( authorization != NULL ) {
				secTenant = getTenantTableObj()-&gt;readTenantByIdIdx( authorization-&gt;getSecTenantId() );
			}
			else {
				secTenant = getTenantTableObj()-&gt;readTenantByUNameIdx( getSecCluster()-&gt;getRequiredId(), *secTenantName );
				if( ( secTenant == NULL ) &amp;&amp; ( secTenantId &gt; 0 ) ) {
					secTenant = getTenantTableObj()-&gt;readTenantByIdIdx( secTenantId );
				}
			}
			if( secTenant != NULL ) {
				if( secTenantName != NULL ) {
					delete secTenantName;
					secTenantName = NULL;
				}
				secTenantName = new std::string( secTenant-&gt;getRequiredTenantName() );
				secTenantId = secTenant-&gt;getRequiredId();
				if( authorization != NULL ) {
					authorization-&gt;setSecTenant( *secTenant );
				}
			}
		}
		return( secTenant );
	}

	void $poptop SchemaDef SchemaName$SchemaObj::setSecTenant( $CPlusSecNamespace$::I$SecSchemaName$TenantObj* value ) {
		secTenant = value;
		if( secTenant == NULL ) {
			return;
		}
		secTenantId = secTenant-&gt;getRequiredId();
		if( secTenantName != NULL ) {
			delete secTenantName;
			secTenantName = NULL;
		}
		secTenantName = new std::string( secTenant-&gt;getRequiredTenantName() );
		if( authorization != NULL ) {
			authorization-&gt;setSecTenant( *secTenant );
		}
	}

	long $poptop SchemaDef SchemaName$SchemaObj::getSecTenantId() {
		return( secTenantId );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaObjGetSetSecUser">
	void $poptop SchemaDef SchemaName$SchemaObj::setSecUserName( const std::string&amp; value ) {
		if( value.length() &lt;= 0 ) {
			throw cflib::CFLibEmptyArgumentException( CLASS_NAME,
				"setUserName",
				1,
				"value" );
		}
		if( secUserName != NULL ) {
			delete secUserName;
			secUserName = NULL;
		}
		secUserName = new std::string( value );
		secUser = NULL;
	}

	std::string $poptop SchemaDef SchemaName$SchemaObj::getSecUserName() {
		std::string retval( *secUserName );
		return( retval );
	}

	$CPlusSecNamespace$::I$SecSchemaName$SecUserObj* $poptop SchemaDef SchemaName$SchemaObj::getSecUser() {
		if( secUser == NULL ) {
			if( authorization != NULL ) {
				secUser = getSecUserTableObj()-&gt;readSecUserByIdIdx( authorization-&gt;getSecUserId() );
			}
			else {
				secUser = getSecUserTableObj()-&gt;readSecUserByULoginIdx( *secUserName );
				if( ( secUser == NULL ) &amp;&amp;
					( ( secSessionUserId[0] != 0 ) || ( secSessionUserId[1] != 0 )
						|| ( secSessionUserId[2] != 0 ) || ( secSessionUserId[3] != 0 )
						|| ( secSessionUserId[4] != 0 ) || ( secSessionUserId[5] != 0 )
						|| ( secSessionUserId[6] != 0 ) || ( secSessionUserId[7] != 0 )
						|| ( secSessionUserId[8] != 0 ) || ( secSessionUserId[9] != 0 )
						|| ( secSessionUserId[10] != 0 ) || ( secSessionUserId[11] != 0 )
						|| ( secSessionUserId[12] != 0 ) || ( secSessionUserId[13] != 0 )
						|| ( secSessionUserId[14] != 0 ) || ( secSessionUserId[15] != 0 ) ) )
				{
					secUser = getSecUserTableObj()-&gt;readSecUserByIdIdx( secSessionUserId );
				}
			}
			if( secUser != NULL ) {
				if( secUserName != NULL ) {
					delete secUserName;
					secUserName = NULL;
				}
				secUserName = new std::string( secUser-&gt;getRequiredLoginId() );
				uuid_copy( secSessionUserId, secUser-&gt;getRequiredSecUserId() );
			}
		}
		return( secUser );
	}

	void $poptop SchemaDef SchemaName$SchemaObj::setSecUser( $CPlusSecNamespace$::I$SecSchemaName$SecUserObj* value ) {
		secUser = value;
		if( secUser != NULL ) {
			if( secUserName != NULL ) {
				delete secUserName;
				secUserName = NULL;
			}
			secUserName = new std::string( secUser-&gt;getRequiredLoginId() );
			uuid_copy( secSessionUserId, secUser-&gt;getRequiredSecUserId() );
		}
	}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaObjGetSetSecSession">
	$CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* $poptop SchemaDef SchemaName$SchemaObj::getSecSession() {
		if( secSession == NULL ) {
			if( authorization != NULL ) {
				secSession = getSecSessionTableObj()-&gt;readSecSessionByIdIdx( authorization-&gt;getSecSessionId() );
			}
			else if( ( secSessionSessionId[0] != 0 )
				|| ( secSessionSessionId[1] != 0 )
				|| ( secSessionSessionId[2] != 0 )
				|| ( secSessionSessionId[3] != 0 )
				|| ( secSessionSessionId[4] != 0 )
				|| ( secSessionSessionId[5] != 0 )
				|| ( secSessionSessionId[6] != 0 )
				|| ( secSessionSessionId[7] != 0 )
				|| ( secSessionSessionId[8] != 0 )
				|| ( secSessionSessionId[9] != 0 )
				|| ( secSessionSessionId[10] != 0 )
				|| ( secSessionSessionId[11] != 0 )
				|| ( secSessionSessionId[12] != 0 )
				|| ( secSessionSessionId[13] != 0 )
				|| ( secSessionSessionId[14] != 0 )
				|| ( secSessionSessionId[15] != 0 ) )
			{
				secSession = getSecSessionTableObj()-&gt;readSecSessionByIdIdx( secSessionSessionId );
			}
			if( secSession != NULL ) {
				uuid_copy( secSessionSessionId, secSession-&gt;getRequiredSecSessionId() );
				uuid_copy( secSessionUserId, secSession-&gt;getRequiredSecUserId() );
			}
		}
		return( secSession );
	}

	void $poptop SchemaDef SchemaName$SchemaObj::setSecSession( $CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* value ) {
		secSession = value;
		if( secSession == NULL ) {
			return;
		}
		uuid_copy( secSessionSessionId, secSession-&gt;getRequiredSecSessionId() );
		uuid_copy( secSessionUserId, secSession-&gt;getRequiredSecUserId() );
		if( authorization != NULL ) {
			authorization-&gt;setSecSession( secSession );
		}
	}

	void $poptop SchemaDef SchemaName$SchemaObj::setSecSessionId( const uuid_ptr_t value ) {
		uuid_copy( secSessionSessionId, value );
	}

	uuid_ptr_t $poptop SchemaDef SchemaName$SchemaObj::getSecSessionSessionId() {
		return( secSessionSessionId );
	}

	uuid_ptr_t $poptop SchemaDef SchemaName$SchemaObj::getSecSessionUserId() {
		return( secSessionUserId );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaObjMethods">
	$CPlusSecNamespace$::$SecSchemaName$Authorization* $poptop SchemaDef SchemaName$SchemaObj::getAuthorization() const {
		return( authorization );
	}

	void $poptop SchemaDef SchemaName$SchemaObj::setAuthorization( $CPlusSecNamespace$::$SecSchemaName$Authorization* value ) {
		authorization = value;
	}

	$CPlusSecNamespace$::I$SecSchemaName$Schema* $poptop SchemaDef SchemaName$SchemaObj::getBackingStore() {
		return( backingStore );
	}

	void $poptop SchemaDef SchemaName$SchemaObj::setBackingStore( $CPlusSecNamespace$::I$SecSchemaName$Schema* value ) {
		backingStore = value;
	}

	std::string $poptop SchemaDef SchemaName$SchemaObj::getSchemaName() {
		return( SCHEMA_NAME );
	}

	bool $poptop SchemaDef SchemaName$SchemaObj::isConnected() {
		if( backingStore == NULL ) {
			return( false );
		}
		else {
			return( backingStore-&gt;isConnected() );
		}
	}

	bool $poptop SchemaDef SchemaName$SchemaObj::connect() {
		return( backingStore-&gt;connect() );
	}

	bool $poptop SchemaDef SchemaName$SchemaObj::connect( const std::string&amp; username, const std::string&amp; password ) {
		return( backingStore-&gt;connect( username, password ) );
	}

	bool $poptop SchemaDef SchemaName$SchemaObj::connect( const std::string&amp; clusterName, const std::string&amp; tenantName, const std::string&amp; secUserName, const std::string&amp; password ) {
		static const std::string S_ProcName = "connect-full";$implSchemaSchemaConnectAuthUserPWCheckArgs$
		if( ! backingStore-&gt;connect( secUserName, password, clusterName, tenantName ) ) {
			authorization = NULL;
			return( false );
		}
		if( authorization != NULL ) {
			// The login was established as an XMsg client, which automatically sets the Authorization
			// information based on the return message.  You only need to do the remaining SecSession
			// and authorization creation if you're using a direct client-server model instead of
			// an XMsg client-server model.
			setSecClusterName( clusterName );
			setSecTenantName( tenantName );
			setSecUserName( secUserName );
			return( true );
		}

		if( ( clusterName == S_System )
		 &amp;&amp; ( tenantName == S_System )
		 &amp;&amp; ( secUserName == S_System ) )
		{
			if( secCluster == NULL ) {
				secCluster = getClusterTableObj()-&gt;newInstance();
				$CPlusSecNamespace$::I$SecSchemaName$ClusterEditObj* editCluster = secCluster-&gt;getEdit();
				if( editCluster == NULL ) {
					editCluster = secCluster-&gt;beginEdit();
					editCluster-&gt;setRequiredDescription( S_System );
					editCluster-&gt;setRequiredFullDomName( S_System );
					secCluster = editCluster-&gt;create();
					editCluster = NULL;
				}
			}
			if( secTenant == NULL ) {
				secTenant = getTenantTableObj()-&gt;newInstance();
				$CPlusSecNamespace$::I$SecSchemaName$TenantEditObj* editTenant = secTenant-&gt;getEdit();
				if( editTenant == NULL ) {
					editTenant = secTenant-&gt;beginEdit();
					editTenant-&gt;setRequiredContainerCluster( secCluster);
					editTenant-&gt;setRequiredTenantName( S_System );
					secTenant = editTenant-&gt;create();
					editTenant = NULL;
				}
			}
			if( secUser == NULL ) {
				secUser = getSecUserTableObj()-&gt;newInstance();
				$CPlusSecNamespace$::I$SecSchemaName$SecUserEditObj* editSecUser = secUser-&gt;getEdit();
				if( editSecUser == NULL ) {
					editSecUser = secUser-&gt;beginEdit();
					editSecUser-&gt;setRequiredEMailAddress( S_System );
					editSecUser-&gt;setRequiredLoginId( S_System );
					secUser = editSecUser-&gt;create();
					editSecUser = NULL;
				}
			}
			setSecClusterName( clusterName );
			setSecTenantName( tenantName );
			setSecUserName( secUserName );
			secCluster = NULL;
			secTenant = NULL;
			secUser = NULL;
			secSession = NULL;
			$CPlusSecNamespace$::I$SecSchemaName$ClusterObj* cluster = getSecCluster();
			$CPlusSecNamespace$::I$SecSchemaName$TenantObj* tenant = getSecTenant();
			$CPlusSecNamespace$::I$SecSchemaName$SecUserObj* user = getSecUser();
			$CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* session;
			if( ( cluster != NULL ) &amp;&amp; ( tenant != NULL ) &amp;&amp; ( user != NULL ) ) {
				session = getSecSessionTableObj()-&gt;newInstance();
				$CPlusSecNamespace$::I$SecSchemaName$SecSessionEditObj* sessionEdit = session-&gt;beginEdit();
				sessionEdit-&gt;setRequiredContainerSecUser( user );
				std::chrono::system_clock::time_point timestamp = cflib::CFLib::getUTCTimestampInstance();
				sessionEdit-&gt;setRequiredStart( timestamp );
				sessionEdit-&gt;setOptionalFinishNull();
				session = sessionEdit-&gt;create();
				setSecSession( session );
			}
			else {
				session = NULL;
			}
			if( ( cluster == NULL ) || ( tenant == NULL ) || ( user == NULL ) || ( session == NULL ) ) {
				disconnect( false );
				authorization = NULL;
				throw cflib::CFLibRuntimeException( CLASS_NAME,
					S_ProcName,
					"Could not resolve cluster name, tenant name, user name, or session.  Login cancelled" );
			}
			if( authorization == NULL ) {
				authorization = new $CPlusSecNamespace$::$SecSchemaName$Authorization();
			}
			authorization-&gt;setSecCluster( *cluster );
			authorization-&gt;setSecTenant( *tenant );
			authorization-&gt;setSecSession( session );
			return( true );
		}
		setSecClusterName( clusterName );
		setSecTenantName( tenantName );
		setSecUserName( secUserName );
		bool transactionStarted = beginTransaction();
		secCluster = NULL;
		secTenant = NULL;
		secUser = NULL;
		secSession = NULL;
		$CPlusSecNamespace$::I$SecSchemaName$ClusterObj* cluster = getSecCluster();
		$CPlusSecNamespace$::I$SecSchemaName$TenantObj* tenant = getSecTenant();
		$CPlusSecNamespace$::I$SecSchemaName$SecUserObj* user = getSecUser();
		$CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* session;
		if( ( cluster != NULL ) &amp;&amp; ( tenant != NULL ) &amp;&amp; ( user != NULL ) ) {
			session = getSecSessionTableObj()-&gt;newInstance();
			$CPlusSecNamespace$::I$SecSchemaName$SecSessionEditObj* sessionEdit = session-&gt;beginEdit();
			sessionEdit-&gt;setRequiredContainerSecUser( user );
			std::chrono::system_clock::time_point timestamp = cflib::CFLib::getUTCTimestampInstance();
			sessionEdit-&gt;setRequiredStart( timestamp );
			sessionEdit-&gt;setOptionalFinishNull();
			session = sessionEdit-&gt;create();
			setSecSession( session );
		}
		else {
			session = NULL;
		}
		if( transactionStarted ) {
			commit();
		}
		if( ( cluster == NULL ) || ( tenant == NULL ) || ( user == NULL ) || ( session == NULL ) ) {
			disconnect( false );
			authorization = NULL;
			throw cflib::CFLibRuntimeException( CLASS_NAME,
				S_ProcName,
				"Could not resolve cluster name, tenant name, user name, or session.  Login cancelled" );
		}
		if( authorization == NULL ) {
			authorization = new $CPlusSecNamespace$::$SecSchemaName$Authorization();
		}
		authorization-&gt;setSecCluster( *cluster );
		authorization-&gt;setSecTenant( *tenant );
		authorization-&gt;setSecSession( session );
		return( true );
	}
$implSchemaSchemaObjMethodsPart8$</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaConnectAuthUserPWCheckArgs">
		if( clusterName.length() &lt;= 0 ) {
			throw cflib::CFLibEmptyArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				"clusterName" );
		}
		if( tenantName.length() &lt;= 0 ) {
			throw cflib::CFLibEmptyArgumentException( CLASS_NAME,
				S_ProcName,
				2,
				"tenantName" );
		}
		if( secUserName.length() &lt;= 0 ) {
			throw cflib::CFLibEmptyArgumentException( CLASS_NAME,
				S_ProcName,
				3,
				"secUserName" );
		}
		if( password.length() &lt;= 0 ) {
			throw cflib::CFLibEmptyArgumentException( CLASS_NAME,
				S_ProcName,
				5,
				"password" );
		}</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaSchemaObjMethodsPart8">
	void $poptop SchemaDef SchemaName$SchemaObj::disconnect( bool doCommit ) {
		backingStore-&gt;disconnect( doCommit );
	}

	void $poptop SchemaDef SchemaName$SchemaObj::logout() {
		if( authorization == NULL ) {
			if( isConnected() ) {
				disconnect( false );
			}
			return;
		}
		if( isConnected() ) {
			try {
				bool transactionStarted = beginTransaction();
				if( ! transactionStarted ) {
					rollback();
					transactionStarted = beginTransaction();
					if( ! transactionStarted ) {
						setAuthorization( NULL );
						return;
					}
				}
				const uuid_ptr_t secSessionId = authorization-&gt;getSecSessionId();
				if( ( secSessionId[0] != 0 )
					|| ( secSessionId[1] != 0 )
					|| ( secSessionId[2] != 0 )
					|| ( secSessionId[3] != 0 )
					|| ( secSessionId[4] != 0 )
					|| ( secSessionId[5] != 0 )
					|| ( secSessionId[6] != 0 )
					|| ( secSessionId[7] != 0 )
					|| ( secSessionId[8] != 0 )
					|| ( secSessionId[9] != 0 )
					|| ( secSessionId[10] != 0 )
					|| ( secSessionId[11] != 0 )
					|| ( secSessionId[12] != 0 )
					|| ( secSessionId[13] != 0 )
					|| ( secSessionId[14] != 0 )
					|| ( secSessionId[15] != 0 ) )
				{
					$CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* secSession = getSecSessionTableObj()-&gt;readSecSessionByIdIdx( secSessionId );
					if( secSession != NULL ) {
						if( secSession-&gt;isOptionalFinishNull() ) {
							$CPlusSecNamespace$::I$SecSchemaName$SecSessionEditObj* editSecSession = secSession-&gt;beginEdit();
							std::chrono::system_clock::time_point timestamp = cflib::CFLib::getUTCTimestampInstance();
							editSecSession-&gt;setOptionalFinishValue( timestamp );
							editSecSession-&gt;update();
							editSecSession = NULL;
						}
					}
				}
				commit();
			}
			catch( std::exception x ) {
				setAuthorization( NULL );
				try {
					disconnect( false );
				}
				catch( std::exception e ) {
				}
			}
			setAuthorization( NULL );
			try {
				disconnect( false );
			}
			catch( std::exception e ) {
			}
		}
	}

	void $poptop SchemaDef SchemaName$SchemaObj::minimizeMemory() {$iterate SchemaTables( each implBaseInvokeTableMinimizeMemory empty empty )$
	}

	bool $poptop SchemaDef SchemaName$SchemaObj::isTransactionOpen() {
		bool txnOpen = backingStore-&gt;isTransactionOpen();
		return( txnOpen );
	}

	bool $poptop SchemaDef SchemaName$SchemaObj::beginTransaction() {
		bool txnInitiated = backingStore-&gt;beginTransaction();
		return( txnInitiated );
	}

	void $poptop SchemaDef SchemaName$SchemaObj::commit() {
		backingStore-&gt;commit();
	}

	void $poptop SchemaDef SchemaName$SchemaObj::rollback() {
		backingStore-&gt;rollback();
	}</GenRule>

	<GenRule GenDef="Table" Name="implSchemaSchemaObjTableObjAccessors">
	$CPlusDefNamespace$::I$DefSchemaName$$TableName$TableObj* $poptop SchemaDef SchemaName$SchemaObj::get$TableName$TableObj() {
		return( $leadlower TableName$TableObj );
	}
</GenRule>

	<GenRule GenDef="Table" Name="initSchemaSchemaObjConstructorTableObjMember"
		>$switch HasSuperClassRelation yes empty default walkInitSchemaSchemaObjConstructorTableObjMember$</GenRule>

	<GenRule GenDef="Table" Name="walkInitSchemaSchemaObjConstructorTableObjMember">
		$leadlower TableName$TableObj = new $SchemaName$$TableName$TableObj( this );$iterate TableSubClasses( each walkInitSchemaSchemaObjConstructorTableObjMember empty empty )$</GenRule>

	<GenRule GenDef="Table" Name="topDeleteSchemaSchemaObjDestructorTableObjMember"
		>$switch HasSuperClassRelation yes empty default baseDeleteSchemaSchemaObjDestructorTableObjMember$</GenRule>

	<GenRule GenDef="Table" Name="baseDeleteSchemaSchemaObjDestructorTableObjMember">
$iterate TableSubClasses( each minimizeMemorySchemaSchemaObjDestructorTableObjMember empty empty )$
		if( $leadlower TableName$TableObj != NULL ) {
			$leadlower TableName$TableObj-&gt;minimizeMemory();
		}
$iterate TableSubClasses( each deleteSchemaSchemaObjDestructorTableObjMember empty empty )$
		if( $leadlower TableName$TableObj != NULL ) {
			delete $leadlower TableName$TableObj;
			$leadlower TableName$TableObj = NULL;
		}</GenRule>

	<GenRule GenDef="Table" Name="minimizeMemorySchemaSchemaObjDestructorTableObjMember">$iterate TableSubClasses( each minimizeMemorySchemaSchemaObjDestructorTableObjMember empty empty )$
		if( $leadlower TableName$TableObj != NULL ) {
			$leadlower TableName$TableObj-&gt;minimizeMemory();
		}</GenRule>

	<GenRule GenDef="Table" Name="deleteSchemaSchemaObjDestructorTableObjMember">$iterate TableSubClasses( each deleteSchemaSchemaObjDestructorTableObjMember empty empty )$
		if( $leadlower TableName$TableObj != NULL ) {
			delete $leadlower TableName$TableObj;
			$leadlower TableName$TableObj = NULL;
		}</GenRule>

	<GenRule GenDef="Table" Name="implBaseInvokeTableMinimizeMemory"
		>$switch HasSuperClassRelation yes empty default implInvokeTableMinimizeMemory$</GenRule>

	<GenRule GenDef="Table" Name="implInvokeTableMinimizeMemory">$iterate TableSubClasses( each implInvokeTableMinimizeMemory empty empty )$
		if( $leadlower TableName$TableObj != NULL ) {
			$leadlower TableName$TableObj-&gt;minimizeMemory();
		}</GenRule>

</RuleSet>
