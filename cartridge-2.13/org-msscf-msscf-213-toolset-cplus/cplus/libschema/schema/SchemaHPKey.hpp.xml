<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schema/SchemaHPKey.hpp"
	Revision="2.13"
	Descr="C++18 specification of a generic $SchemaName$ history primary key base object.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaHPKeyHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$HPKeyHpp"
		ExpansionKeyName="$SchemaName$HPKeyHpp"
		ExpansionFileName="$SchemaName$HPKey.hpp"
>#pragma once

// Description: C++18 specification of a generic $SchemaName$ history primary key base object.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;
$iterate SchemaRefs( first SchemaHPKeyIncludeBaseDef each empty empty empty )$
namespace $CPlusNamespace$ {

	class $SchemaName$HPKey$iterate SchemaRefs( first SchemaHPKeyExtendBaseDef each empty empty empty )$
	{$iterate SchemaRefs( first SchemaHPKeyExtendBaseDefBody each empty empty SchemaHPKeyImplBaseDefBody )$	};
}
</GenFile>

	<GenRule GenDef="SchemaRef" Name="SchemaHPKeyIncludeBaseDef">
#include &lt;$lower reference RefSchema SchemaName$/$reference RefSchema SchemaName$HPKey.hpp&gt;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="SchemaHPKeyExtendBaseDefBody">
	public:
		static const std::string CLASS_NAME;
		$poptop SchemaDef SchemaName$HPKey();
		virtual ~$poptop SchemaDef SchemaName$HPKey();
</GenRule>

	<GenRule GenDef="Object" Name="SchemaHPKeyImplBaseDefBody">
	protected:
		int64_t auditClusterId;
		std::chrono::system_clock::time_point auditStamp;
		int16_t auditActionId;$declRevisionAttr$
		uuid_t auditSessionId;
		classcode_t classCode;
	public:
		static const std::string CLASS_NAME;$declSValue$$reference ManufacturingSchema declHPKeyConstructor$$reference ManufacturingSchema declAuditClusterIdGetterSetter$$reference ManufacturingSchema declAuditStampGetterSetter$$reference ManufacturingSchema declAuditActionIdGetterSetter$$reference ManufacturingSchema declRevisionGetterSetter$$declAuditSessionIdGetterSetter$$reference ManufacturingSchema declGetHashCode$$reference ManufacturingSchema declToString$$declHPKeyClassCodeGetterSetter$</GenRule>

	<GenRule GenDef="Object" Name="declHPKeyClassCodeGetterSetter">
		virtual const std::string&amp; getClassName() const;
		virtual const classcode_t getClassCode() const;
		virtual void setClassCode( const classcode_t value );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="SchemaHPKeyExtendBaseDef"> : public $reference RefSchema CPlusNamespace$::$reference RefSchema SchemaName$HPKey</GenRule>

	<GenRule GenDef="SchemaDef" Name="declHPKeyConstructor">
		$SchemaName$HPKey();
		virtual ~$poptop SchemaDef SchemaName$HPKey();
</GenRule>

</RuleSet>
