<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schema/SchemaSchemaPool.hpp"
	Revision="2.13"
	Descr="C++18 specification of a $SchemaName$ schema pool.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSchemaPoolHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$SchemaPoolHpp"
		ExpansionKeyName="$SchemaName$SchemaPoolHpp"
		ExpansionFileName="$SchemaName$SchemaPool.hpp"
>#pragma once

// Description: C++18 specification of a $SchemaName$ schema pool.

$MssSourceLicense$
#include &lt;cflib/ICFLibPublic.hpp&gt;$iterate SchemaRefs( first includeSchemaSchemaPool each empty empty empty )$
#include &lt;$lower SecSchemaName$/$SecSchemaName$ConfigurationFile.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Schema.hpp&gt;
#include &lt;$lower SchemaName$/$SchemaName$Schema.hpp&gt;$iterate SchemaRefs( each includeSchemaISchema empty empty )$

namespace $CPlusNamespace$ {

	class $SchemaName$SchemaPool$iterate SchemaRefs( first extendsSchemaSchemaPool each empty empty empty )$
	{
	public:
		static const std::string CLASS_NAME;$iterate SchemaRefs( first declSchemaSchemaPoolSubMembers empty declSchemaSchemaPoolBaseMembers each empty )$
	};

}
</GenFile>

	<GenRule GenDef="SchemaRef" Name="includeSchemaSchemaPool">
#include &lt;$lower reference RefSchema SchemaName$/$reference RefSchema SchemaName$SchemaPool.hpp&gt;</GenRule>

	<GenRule GenDef="SchemaRef" Name="includeSchemaISchema">
#include &lt;$lower reference RefSchema SchemaName$/I$reference RefSchema SchemaName$Schema.hpp&gt;
#include &lt;$lower reference RefSchema SchemaName$/$reference RefSchema SchemaName$Schema.hpp&gt;</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaPoolMembers"
		>$reference RefSchema declSchemaSchemaPoolMembers$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolMembers"
		>$iterate SchemaRefs( first derefDeclSchemaSchemaPoolMembers each empty empty empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="derefDeclSchemaSchemaPoolMembers"
		>$reference RefSchema derefDeclSchemaSchemaPoolSubMembers$</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaPoolSubMembers">
	public:$declSchemaSchemaPoolConstructorInvokeSuper$$reference RefSchema declSchemaSchemaPoolSetConfigurationFile$$reference RefSchema declSchemaSchemaPoolStaticSetterMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolBaseMembers">
	protected:$declSchemaSchemaPoolVarMembers$
	public:$declSchemaSchemaPoolBaseConstructor$$declSchemaSchemaPoolGetConfigurationFile$$declSchemaSchemaPoolStaticMethods$$declSchemaSchemaPoolInstanceAllocators$$declSchemaSchemaPoolToBeOverloaded$$declSchemaPoolConfigurationGetSetJndiName$</GenRule>

	<GenRule GenDef="Object" Name="declSchemaSchemaPoolBaseMembers">
$popto SchemaDef declSchemaPoolBaseMembers$</GenRule>

	<GenRule GenDef="SchemaRef" Name="extendsSchemaSchemaPool"> : public $reference RefSchema CPlusNamespace$::$reference RefSchema SchemaName$SchemaPool</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolVarMembers">
		$iterate SchemaRefs( empty declConfigurationFileConf first empty each empty )$$iterate SchemaRefs( first empty each empty empty declConfigurationFileInstances )$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declConfigurationFileInstances">
		std::list&lt;$CPlusNamespace$::I$SchemaName$Schema*&gt;* instances;</GenRule>

	<GenRule GenDef="SchemaRef" Name="declConfigurationFileInstances">
		std::list&lt;$reference RefSchema CPlusNamespace$::I$reference RefSchema SchemaName$Schema*&gt;* instances;</GenRule>

	<GenRule GenDef="Object" Name="declConfigurationFileInstances">
		std::list&lt;$CPlusDefNamespace$::I$popto SchemaDef SchemaName$Schema*&gt;* instances;</GenRule>

	<GenRule GenDef="SchemaRef" Name="declConfigurationFileConf">
		std::string* jndiName;
		$reference RefSchema CPlusNamespace$::$reference RefSchema SchemaName$ConfigurationFile* configFile;</GenRule>

	<GenRule GenDef="Object" Name="declConfigurationFileConf">
		std::string* jndiName;
		$popto SchemaDef CPlusNamespace$::$popto SchemaDef SchemaName$ConfigurationFile* configFile;</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolStaticMethods">
	protected:
		static $CPlusNamespace$::$SchemaName$SchemaPool* getSetStaticSchemaPool( $CPlusNamespace$::$SchemaName$SchemaPool* value );
	public:
		static $CPlusNamespace$::$SchemaName$SchemaPool* getSchemaPool();
		static void setSchemaPool( $CPlusNamespace$::$SchemaName$SchemaPool* pool );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolStaticSetterMethods">
		static void setSchemaPool( $CPlusNamespace$::$SchemaName$SchemaPool* pool );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolGetConfigurationFile">
		virtual $CPlusDefNamespace$::$DefSchemaName$ConfigurationFile* getConfigurationFile();
$declSchemaSchemaPoolSetConfigurationFile$
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolSetConfigurationFile">
		virtual void setConfigurationFile( $CPlusNamespace$::$SchemaName$ConfigurationFile* value );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaPoolSetConfigurationFile">
		virtual void setConfigurationFile( $reference RefSchema CPlusNamespace$::$reference RefSchema SchemaName$ConfigurationFile* value );
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaPoolConfigurationGetSetJndiName">
		virtual const std::string* getJndiName();
		virtual void setJndiName( const std::string* value );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolBaseConstructor">
		$poptop SchemaDef SchemaName$SchemaPool();
		virtual ~$poptop SchemaDef SchemaName$SchemaPool();
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaSchemaPoolConstructorInvokeSuper">
		$poptop SchemaDef SchemaName$SchemaPool();
		virtual ~$poptop SchemaDef SchemaName$SchemaPool();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolToBeOverloaded"
		>$iterate SchemaRefs( first reallyDeclSchemaPoolToBeOverloaded each empty empty reallyDeclSchemaSchemaPoolToBeOverloaded )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="reallyDeclSchemaSchemaPoolToBeOverloaded">
		/**
		 *	You need to overload the declementation of newInstance() to return
		 *	connected instances of your backing store.
		 */
		virtual $reference RefSchema CPlusNamespace$::I$reference RefSchema DefSchemaName$Schema* newInstance();

		/**
		 *	Overload disposeInstance().
		 */
		virtual void disposeInstance( $reference RefSchema CPlusNamespace$::I$reference RefSchema DefSchemaName$Schema* inst );
</GenRule>

	<GenRule GenDef="Object" Name="reallyDeclSchemaSchemaPoolToBeOverloaded">
		/**
		 *	You need to overload the declementation of newInstance() to return
		 *	connected instances of your backing store.
		 */
		virtual $CPlusDefNamespace$::I$DefSchemaName$Schema* newInstance();

		/**
		 *	Overload disposeInstance().
		 */
		virtual void disposeInstance( $CPlusDefNamespace$::I$DefSchemaName$Schema* inst );
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaSchemaPoolInstanceAllocators">
		/**
		 *	Retrieve an entry from the pool with a previously
		 *	established database connection.
		 */
		/* TODO: synchronized */ virtual $CPlusDefNamespace$::I$DefSchemaName$Schema* getInstance();

		/**
		 *	Return an entry to the pool.
		 */
		/* TODO: synchronized */ virtual void releaseInstance( $CPlusDefNamespace$::I$DefSchemaName$Schema* inst );
</GenRule>

</RuleSet>
