<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schema/ISchemaSchema.hpp"
	Revision="2.13"
	Descr="C++18 interface for a $SchemaName$ schema.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaISchemaHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$"
		ExpansionClassName="I$SchemaName$SchemaHpp"
		ExpansionKeyName="I$SchemaName$SchemaHpp"
		ExpansionFileName="I$SchemaName$Schema.hpp"
>#pragma once

// Description: C++18 interface for a $SchemaName$ schema.

$MssSourceLicense$

$SchemaISchemaIncludes$

namespace $CPlusNamespace$ {

	class I$SchemaName$Schema$iterate SchemaRefs( first extendsPackageSchemaName each commaNewlinePackageSchemaName empty empty )$
	{$declISchemaSchemaMembers$
	};
}
</GenFile>

	<GenRule GenDef="SchemaRef" Name="DefSchemaName"
		>$reference RefSchema SchemaName$</GenRule>

	<GenRule GenDef="SchemaDef" Name="DefSchemaName"
		>$iterate SchemaRefs( first DefSchemaName each empty empty SchemaName )$</GenRule>

	<GenRule GenDef="Object" Name="DefSchemaName"
		>$switch HasDefSchema yes DerefDefSchemaName default MyDefSchemaName$</GenRule>

	<GenRule GenDef="Object" Name="DerefDefSchemaName"
		>$reference DefSchema SchemaName$</GenRule>

	<GenRule GenDef="Object" Name="MyDefSchemaName"
		>$popto SchemaDef SchemaName$</GenRule>

	<GenRule GenDef="SchemaRef" Name="SecSchemaName"
		>$poptop SchemaDef SecSchemaName$</GenRule>

	<GenRule GenDef="SchemaDef" Name="SecSchemaName"
		>$iterate SchemaRefs( first UseSecSchemaName each empty empty SchemaName )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="UseSecSchemaName"
		>$reference RefSchema SchemaName$</GenRule>

	<GenRule GenDef="Object" Name="SecSchemaName"
		>$poptop SchemaDef SecSchemaName$</GenRule>

	<GenRule GenDef="SchemaDef" Name="CPlusNamespace"
		>$lower reference MinorVersion reference ParentMajVer reference ParentSPrj Name$</GenRule>

	<GenRule GenDef="Table" Name="CPlusNamespace"
		>$lower reference SchemaDef reference MinorVersion reference ParentMajVer reference ParentSPrj Name$</GenRule>

	<GenRule GenDef="Object" Name="CPlusNamespace"
		>$lower popto Table CPlusNamespace$</GenRule>

	<GenRule GenDef="SchemaRef" Name="CPlusDefNamespace"
		>$poptop SchemaDef CPlusDefNamespace$</GenRule>

	<GenRule GenDef="SchemaDef" Name="CPlusDefNamespace"
		>$lower reference MinorVersion reference ParentMajVer reference ParentSPrj Name$</GenRule>

	<GenRule GenDef="Table" Name="CPlusDefNamespace"
		>$switch HasDefSchema yes DerefDefSchemaTableImplNamespace default LocalDefSchemaTableImplNamespace$</GenRule>

	<GenRule GenDef="Table" Name="DerefDefSchemaTableImplNamespace"
		>$lower reference DefSchema reference MinorVersion reference ParentMajVer reference ParentSPrj Name$</GenRule>

	<GenRule GenDef="Table" Name="LocalDefSchemaTableImplNamespace"
		>$lower reference SchemaDef reference MinorVersion reference ParentMajVer reference ParentSPrj Name$</GenRule>

	<GenRule GenDef="Object" Name="CPlusDefNamespace"
		>$lower popto Table CPlusDefNamespace$</GenRule>

	<GenRule GenDef="SchemaRef" Name="CPlusSecNamespace"
		>$poptop SchemaDef CPlusSecNamespace$</GenRule>

	<GenRule GenDef="SchemaDef" Name="CPlusSecNamespace"
		>$iterate SchemaRefs( first UseCPlusSecNamespace each empty empty CPlusNamespace )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="UseCPlusSecNamespace"
		>$reference RefSchema CPlusNamespace$</GenRule>

	<GenRule GenDef="Object" Name="CPlusSecNamespace"
		>$poptop SchemaDef CPlusSecNamespace$</GenRule>

	<GenRule GenDef="EnumDef" Name="declISchemaParseEnumVars"
		>$switch HasDefSchema yes empty default reallyDeclSchemaParseEnumVars$</GenRule>

	<GenRule GenDef="EnumDef" Name="reallyDeclSchemaParseEnumVars">
		static std::map&lt;std::string,$Name$&gt;* lookup$Name$;
		static std::map&lt;$Name$,std::string&gt;* tostring$Name$;</GenRule>

	<GenRule GenDef="Value" Name="declISchemaParseEnumVars"></GenRule>

	<GenRule GenDef="SchemaDef" Name="declISchemaSchemaMembers">
	public:
		static const std::string CLASS_NAME;$iterate Types( empty empty each declISchemaEnumType )$
<!--
	protected:$iterate Types( each declISchemaParseEnumVars empty empty )$
-->
	public:$declISchemaSchemaConstructor$$iterate Types( empty empty each declISchemaParseEnum )$<!--$iterate SchemaRefs( each empty empty declSchemaGetCFTipClientHandler )$-->$iterate SchemaRefs( first declSchemaConfigurationFileAccessors each empty empty declSchemaConfigurationFileAccessors )$$iterate SchemaRefs( first declSchemaJndiNameAccessors each empty empty declSchemaJndiNameAccessors )$$iterate SchemaRefs( each empty empty declSchemaAuthorizationAccessors )$$iterate SchemaRefs( first declSchemaConnectionMethods each empty empty declSchemaConnectionMethods )$$iterate SchemaRefs( first declFileImport each empty empty declFileImport )$$iterate SchemaRefs( first declNewSchema each empty empty declNewSchema )$$iterate Id16Generators( each declNextIdGen empty empty)$$iterate Id32Generators( each declNextIdGen empty empty)$$iterate Id64Generators( each declNextIdGen empty empty)$$iterate UuidGenerators( each declNextIdGen empty empty )$$iterate SchemaTables( each declTableMethods empty empty )$$iterate SchemaRefs( first declSchemaCommitControl each empty empty declSchemaCommitControl )$$iterate SchemaRefs( first declSchemaTablePermsAccessors each empty empty declSchemaTablePermsAccessors )$$iterate SchemaRefs( first declSchemaReleasePreparedStatements each empty empty declSchemaReleasePreparedStatements )$$iterate SchemaRefs( first declSchemaISchemaGetSetDbSchemaNameMethods each empty empty declSchemaISchemaGetSetDbSchemaNameMethods )$;</GenRule>

	<GenRule GenDef="SchemaDef" Name="declISchemaSchemaConstructor">
		I$SchemaName$Schema();
		virtual ~I$SchemaName$Schema();
</GenRule>

	<GenRule GenDef="SchemaDef" Name="SchemaISchemaIncludes">
#include &lt;uuid/uuid.h&gt;

#include &lt;array&gt;
#include &lt;cassert&gt;
#include &lt;cstddef&gt;
#include &lt;chrono&gt;
#include &lt;ctime&gt;
#include &lt;functional&gt;
#include &lt;list&gt;
#include &lt;string&gt;

#include &lt;cflib/ICFLibPublic.hpp&gt;

#include &lt;$lower SecSchemaName$/$SecSchemaName$Authorization.hpp&gt;$iterate SchemaRefs( each includeISchemaSchemaHpp empty empty )$
#include &lt;$lower SchemaName$/$SchemaName$ConfigurationFile.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$TablePerms.hpp&gt;
$iterate SchemaRefs( each includeReferencedISchemaPublicHpp empty empty )$
namespace $CPlusNamespace$ {
$iterate SchemaTables( each forwardDeclSchemaTablePKey empty empty )$
$iterate SchemaTables( each forwardDeclSchemaTableHPKey empty empty )$
$iterate SchemaTables( each forwardDeclSchemaTableBuff empty empty )$
$iterate SchemaTables( each forwardDeclSchemaTableHBuff empty empty )$
$iterate SchemaTables( each forwardDeclISchemaTableTable empty empty )$
}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="includeReferencedISchemaSchemaHpp">
#include &lt;$lower reference RefSchema SchemaName$/I$reference RefSchema SchemaName$Schema.hpp&gt;</GenRule>

	<GenRule GenDef="SchemaRef" Name="forwardDeclSchemaTablePKey"
		>$reference RefSchema forwardDeclSchemaTablePKey$</GenRule>

	<GenRule GenDef="SchemaDef" Name="forwardDeclSchemaTablePKey">
namespace $CPlusNamespace$ {$iterate SchemaTables( each forwardDeclSchemaTablePKey empty empty )$
}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="forwardDeclSchemaTableHPKey"
		>$reference RefSchema forwardDeclSchemaTableHPKey$</GenRule>

	<GenRule GenDef="SchemaDef" Name="forwardDeclSchemaTableHPKey">
namespace $CPlusNamespace$ {$iterate SchemaTables( each forwardDeclSchemaTableHPKey empty empty )$
}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="forwardDeclSchemaTableBuff"
		>$reference RefSchema forwardDeclSchemaTableBuff$</GenRule>

	<GenRule GenDef="SchemaDef" Name="forwardDeclSchemaTableBuff">
namespace $CPlusNamespace$ {$iterate SchemaTables( each forwardDeclSchemaTableBuff empty empty )$
}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="forwardDeclSchemaTableHBuff"
		>$reference RefSchema forwardDeclSchemaTableHBuff$</GenRule>

	<GenRule GenDef="SchemaDef" Name="forwardDeclSchemaTableHBuff">
namespace $CPlusNamespace$ {$iterate SchemaTables( each forwardDeclSchemaTableHBuff empty empty )$
}
</GenRule>

	<GenRule GenDef="SchemaRef" Name="forwardDeclISchemaTableTable"
		>$reference RefSchema forwardDeclISchemaTableTable$</GenRule>

	<GenRule GenDef="SchemaDef" Name="forwardDeclISchemaTableTable">
namespace $CPlusNamespace$ {$iterate SchemaTables( each forwardDeclISchemaTableTable empty empty )$
}
</GenRule>

	<GenRule GenDef="EnumDef" Name="declISchemaEnumType"
		>$switch HasDefSchema yes empty default reallyDeclISchemaEnumType$</GenRule>

	<GenRule GenDef="EnumDef" Name="reallyDeclISchemaEnumType">
		enum $Name$ {$iterate Tag( first declISchemaEnumTypeFirstTag each declISchemaEnumTypeEachTag )$
		};
</GenRule>

	<GenRule GenDef="EnumTag" Name="declISchemaEnumTypeFirstTag">
			$Name$</GenRule>

	<GenRule GenDef="EnumTag" Name="declISchemaEnumTypeEachTag">,
			$Name$</GenRule>

	<GenRule GenDef="Value" Name="declISchemaEnumType"></GenRule>

	<GenRule GenDef="Object" Name="declSchemaGetCFTipClientHandler">
		virtual CFTipClientHandler getCFTipClientHandler() = 0;

		virtual const std::string getServerURL() = 0;
		virtual void setServerURL( const std::string&amp; value ) = 0;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="extendsPackageSchemaName">
	: public virtual $reference RefSchema CPlusNamespace$::I$PackageSchemaName$Schema</GenRule>
	<GenRule GenDef="SchemaRef" Name="commaNewlinePackageSchemaName">,
	  public virtual $reference RefSchema CPlusNamespace$::I$PackageSchemaName$Schema</GenRule>

	<GenRule GenDef="SchemaRef" Name="PackageSchemaName"
		>$reference RefSchema PackageSchemaName$</GenRule>
	<GenRule GenDef="SchemaDef" Name="PackageSchemaName"
		>$SchemaName$</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaISchemaGetSetDbSchemaNameMethods"
		>$reference RefSchema declSchemaISchemaGetSetDbSchemaNameMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaISchemaGetSetDbSchemaNameMethods">
		virtual const std::string* getDbSchemaName() const = 0;
		virtual const std::string* getLowerDbSchemaName() const = 0;

		virtual void setDbSchemaName( const std::string&amp; argDbSchemaName ) = 0;
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaISchemaGetSetDbSchemaNameMethods">
		virtual const std::string* getDbSchemaName() = 0;
		virtual const std::string* getLowerDbSchemaName() = 0;

		virtual void setDbSchemaName( const std::string&amp; argDbSchemaName ) = 0;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaReleasePreparedStatements"
		>$reference RefSchema declSchemaReleasePreparedStatements$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaReleasePreparedStatements">
		virtual void releasePreparedStatements() = 0;
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaReleasePreparedStatements">
		virtual void releasePreparedStatements() = 0;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaConfigurationFileAccessors"
		>$reference RefSchema declSchemaConfigurationFileAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaConfigurationFileAccessors">
		virtual $CPlusNamespace$::$SchemaName$ConfigurationFile* getConfigurationFile() const = 0;
		virtual void setConfigurationFile( $CPlusNamespace$::$SchemaName$ConfigurationFile* value ) = 0;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaJndiNameAccessors"
		>$reference RefSchema declSchemaJndiNameAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaJndiNameAccessors"
		>$iterate SchemaRefs( first reallyDeclSchemaJndiNameAccessors each empty empty reallyDeclSchemaJndiNameAccessors )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="reallyDeclSchemaJndiNameAccessors"
		>$reference RefSchema reallyDeclSchemaJndiNameAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="reallyDeclSchemaJndiNameAccessors">
		virtual const std::string* getJndiName() const = 0;
		virtual void setJndiName( const std::string&amp; value ) = 0;
</GenRule>

	<GenRule GenDef="Object" Name="reallyDeclSchemaJndiNameAccessors">
		virtual const std::string* getJndiName() const = 0;
		virtual void setJndiName( const std::string&amp; value );
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaConnectionMethods"
		>$reference RefSchema declSchemaConnectionMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaConnectionMethods"
		>$iterate SchemaRefs( first reallyDeclSchemaConnectionMethods each empty empty reallyDeclSchemaConnectionMethods )$</GenRule>

	<GenRule GenDef="Object" Name="declSchemaConnectionMethods"
		>$poptop SchemaDef iterate SchemaRefs( first reallyDeclSchemaConnectionMethods each empty empty reallyDeclSchemaConnectionMethods )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="reallyDeclSchemaConnectionMethods"
		>$reference RefSchema reallyDeclSchemaConnectionMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="reallyDeclSchemaConnectionMethods">
		virtual bool isConnected() = 0;
		virtual bool connect() = 0;
		virtual bool connect( const std::string&amp; username, const std::string&amp; password ) = 0;
		virtual bool connect( const std::string&amp; loginId, const std::string&amp; password, const std::string&amp; clusterName, const std::string&amp; tenantName ) = 0;
		virtual void disconnect( bool doCommit ) = 0;
		virtual void logout( $CPlusSecNamespace$::$SecSchemaName$Authorization* auth ) = 0;
</GenRule>

	<GenRule GenDef="Object" Name="reallyDeclSchemaConnectionMethods">
		virtual bool isConnected() = 0;
		virtual bool connect() = 0;
		virtual bool connect( const std::string&amp; username, const std::string&amp; password ) = 0;
		virtual bool connect( const std::string&amp; loginId, const std::string&amp; password, const std::string&amp; clusterName, const std::string&amp; tenantName ) = 0;
		virtual void disconnect( bool doCommit ) = 0;
		virtual void logout( $CPlusSecNamespace$::$SecSchemaName$Authorization* auth ) = 0;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaCommitControl"
		>$reference RefSchema declSchemaCommitControl$</GenRule>

	<GenRule GenDef="Object" Name="declSchemaCommitControl">
		virtual bool isTransactionOpen() const = 0;
		virtual bool beginTransaction() = 0;
		virtual void commit() = 0;
		virtual void rollback() = 0;
</GenRule>

	<GenRule GenDef="Object" Name="declFileImport">
		virtual std::string fileImport( const $CPlusSecNamespace$::$SecSchemaName$Authorization* auth, const std::string&amp; fileName, const std::string&amp; fileContent ) = 0;
</GenRule>

	<GenRule GenDef="SchemaDef" Name="declFileImport">
		virtual std::string fileImport( const $CPlusSecNamespace$::$SecSchemaName$Authorization* auth, const std::string&amp; fileName, const std::string&amp; fileContent ) = 0;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declNewSchema"
		>$reference RefSchema declNewSchema$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declNewSchema">
		virtual I$DefSchemaName$Schema* newSchema() = 0;
</GenRule>

	<GenRule GenDef="Object" Name="declNewSchema">
		virtual I$DefSchemaName$Schema* newSchema() = 0;
</GenRule>

	<GenRule ScopeDef="SchemaDef" GenDef="Id16Gen" Name="declNextIdGen">
		virtual int16_t next$Name$() = 0;
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id32Gen" Name="declNextIdGen">
		virtual int32_t next$Name$() = 0;
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="Id64Gen" Name="declNextIdGen">
		virtual int64_t next$Name$() = 0;
</GenRule>
	<GenRule ScopeDef="SchemaDef" GenDef="UuidGen" Name="declNextIdGen"></GenRule>

	<GenRule GenDef="Table" Name="declTableMethods"
		>$declSchemaTableTableAccessors$</GenRule>

	<GenRule GenDef="Table" Name="declSchemaTableTableAccessors">
		virtual $CPlusDefNamespace$::I$DefSchemaName$$TableName$Table* getTable$TableName$() = 0;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="declSchemaTablePermsAccessors"
		>$reference RefSchema declSchemaTablePermsAccessors$</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaTablePermsAccessors">
		virtual $CPlusDefNamespace$::I$DefSchemaName$TablePerms* getTablePerms() = 0;
		virtual void setTablePerms( $CPlusDefNamespace$::I$DefSchemaName$TablePerms* value ) = 0;
</GenRule>

	<GenRule GenDef="Object" Name="declSchemaAuthorizationAccessors">
		virtual $CPlusSecNamespace$::$SecSchemaName$Authorization* getAuthorization() const = 0;
		virtual void setAuthorization( $CPlusSecNamespace$::$SecSchemaName$Authorization* value ) = 0;
</GenRule>

	<GenRule GenDef="EnumDef" Name="declISchemaParseEnum"
		>$switch HasDefSchema yes empty default reallyDeclISchemaParseEnum$</GenRule>

	<GenRule GenDef="EnumDef" Name="reallyDeclISchemaParseEnum"
		>$declISchemaParseEnumParse$$declISchemaParseEnumOrdinal$</GenRule>

	<GenRule GenDef="Value" Name="declISchemaParseEnum"></GenRule>

	<GenRule GenDef="EnumDef" Name="declISchemaParseEnumParse">
		static $Name$* parse$Name$( const std::string* value );
		static $Name$* parse$Name$( const std::string&amp; fieldOrClassName, const std::string* value );
		static const std::string* to$Name$String( const $Name$ value );
</GenRule>

	<GenRule GenDef="EnumDef" Name="declISchemaParseEnumOrdinal">
		static const $Name$ ordinalTo$Name$( const std::string&amp; fieldOrClassName, const int16_t value );
		static const $Name$* ordinalTo$Name$( const std::string&amp; fieldOrClassName, const int16_t* value );
		static const $Name$ ordinalTo$Name$( const int16_t value );
		static const $Name$* ordinalTo$Name$( const int16_t* value );
		static const $Name$ ordinalTo$Name$( const int32_t value );
		static const $Name$* ordinalTo$Name$( const int32_t* value );
		static const $Name$ ordinalTo$Name$( const std::string&amp; fieldOrClassName, const int32_t value );
		static const $Name$* ordinalTo$Name$( const std::string&amp; fieldOrClassName, const int32_t* value );
</GenRule>

</RuleSet>
