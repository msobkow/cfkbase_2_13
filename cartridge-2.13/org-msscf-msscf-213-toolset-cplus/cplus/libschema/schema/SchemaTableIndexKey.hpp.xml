<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schema/SchemaTableIndexKey.hpp"
	Revision="2.13"
	Descr="C++18 specification of a $TableName$ $Suffix$ index key object.">

	<GenRule GenDef="Index" Name="fileSchemaTableIndexKeyHpp"
		>$switch IsPrimaryIndex yes empty default declFileSchemaTableIndexKeyHpp$</GenRule>

	<GenFile GenDef="Index" Name="declFileSchemaTableIndexKeyHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$$TableName$By$Suffix$KeyHpp"
		ExpansionKeyName="$SchemaName$$TableName$By$Suffix$KeyHpp"
		ExpansionFileName="$SchemaName$$TableName$By$Suffix$Key.hpp"
>#pragma once

// Description: C++18 specification for a $TableName$ by $Suffix$ index key object.

$MssSourceLicense$
#include &lt;cflib/ICFLibPublic.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Schema.hpp&gt;

namespace $CPlusNamespace$ {

	class $SchemaName$$TableName$Buff;
	class $SchemaName$$TableName$HBuff;

	class $SchemaName$$TableName$By$Suffix$Key$switch HasDefSchema yes extendSchemaTableBySuffixKey default empty$
	{
	public:
		static const std::string CLASS_NAME;$switch HasDefSchema no declSValue default empty$
	protected:$switch HasDefSchema yes empty default declSchemaTableBySuffixKeyColumnAttr$
	public:$switch HasDefSchema yes declIndexKeyInhConstructor default declIndexKeyBaseConstructor$$switch HasDefSchema yes empty default declIndexKeyBaseColumns$$switch HasDefSchema yes empty default declIndexKeyGetHashCode$$switch HasDefSchema yes empty default declIndexKeyToString$$declIndexKeyComparison$$declIndexKeySet$};
}
$declStdIndexKeyComparison$
</GenFile>

	<GenRule GenDef="Index" Name="implStdIndexKeyHash">
	template&lt;&gt; struct hash&lt;$CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&gt; {
		typedef $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key argument_type;
		typedef size_t result_type;
		result_type operator()(argument_type const&amp; s) const {
			return( s.hashCode() );
		}
	};
</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeySet">
		$CPlusDefNamespace$::$DefSchemaName$$popto Table TableName$By$Suffix$Key operator =( $CPlusDefNamespace$::$DefSchemaName$$popto Table TableName$By$Suffix$Key&amp; src );
		$CPlusDefNamespace$::$DefSchemaName$$popto Table TableName$By$Suffix$Key operator =( $CPlusDefNamespace$::$DefSchemaName$$popto Table TableName$Buff&amp; src );
		$CPlusDefNamespace$::$DefSchemaName$$popto Table TableName$By$Suffix$Key operator =( $CPlusDefNamespace$::$DefSchemaName$$popto Table TableName$HBuff&amp; src );
</GenRule>

	<GenRule GenDef="IndexCol" Name="declIndexKeyColumnGetterSetter"
		>$reference Column declIndexKeyColumnGetterSetter$</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyBaseColumns"
		>$iterate Columns( each declColumnGetterSetter )$</GenRule>

	<GenRule GenDef="Index" Name="declSchemaTableBySuffixKeyColumnAttr"
		>$iterate Columns( each declColumnAttr )$</GenRule>

	<GenRule GenDef="Index" Name="extendSchemaTableBySuffixKey"> : public $reference DefSchema SchemaName$$TableName$By$Suffix$Key</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyInhConstructor">
		$SchemaName$$TableName$By$Suffix$Key();
		$SchemaName$$TableName$By$Suffix$Key( const $SchemaName$$TableName$By$Suffix$Key&amp; src );
		virtual ~$SchemaName$$TableName$By$Suffix$Key();
</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyBaseConstructor">
		$SchemaName$$TableName$By$Suffix$Key();
		$SchemaName$$TableName$By$Suffix$Key( const $SchemaName$$TableName$By$Suffix$Key&amp; src );
		virtual ~$SchemaName$$TableName$By$Suffix$Key();
</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyGetHashCode">
		virtual size_t hashCode() const;
</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyToString">
		std::string toString();
</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyComparison"
		>$declIndexKeyComparisonLessThan$
$declIndexKeyComparisonLessOrEqual$
$declIndexKeyComparisonEqual$
$declIndexKeyComparisonNotEqual$
$declIndexKeyComparisonGreaterOrEqual$
$declIndexKeyComparisonGreaterThan$</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyComparisonLessThan">
		bool operator &lt;( const $SchemaName$$TableName$By$Suffix$Key&amp; rhs );
		bool operator &lt;( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator &lt;( const $SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyComparisonLessOrEqual">
		bool operator &lt;=( const $SchemaName$$TableName$By$Suffix$Key&amp; rhs );
		bool operator &lt;=( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator &lt;=( const $SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyComparisonEqual">
		bool operator ==( const $SchemaName$$TableName$By$Suffix$Key&amp; rhs );
		bool operator ==( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator ==( const $SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyComparisonNotEqual">
		bool operator !=( const $SchemaName$$TableName$By$Suffix$Key&amp; rhs );
		bool operator !=( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator !=( const $SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyComparisonGreaterOrEqual">
		bool operator &gt;=( const $SchemaName$$TableName$By$Suffix$Key&amp; rhs );
		bool operator &gt;=( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator &gt;=( const $SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declIndexKeyComparisonGreaterThan">
		bool operator &gt;( const $SchemaName$$TableName$By$Suffix$Key&amp; rhs );
		bool operator &gt;( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator &gt;( const $SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declStdIndexKeyComparison">
namespace std {
$declStdIndexKeyComparisonLessThan$
$declStdIndexKeyComparisonLessOrEqual$
$declStdIndexKeyComparisonEqual$
$declStdIndexKeyComparisonNotEqual$
$declStdIndexKeyComparisonGreaterOrEqual$
$declStdIndexKeyComparisonGreaterThan$
$implStdIndexKeyHash$
}
</GenRule>

	<GenRule GenDef="Index" Name="declStdIndexKeyComparisonLessThan">
	bool operator &lt;(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; rhs );
	bool operator &lt;(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator &lt;(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declStdIndexKeyComparisonLessOrEqual">
	bool operator &lt;=(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; rhs );
	bool operator &lt;=(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator &lt;=(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );</GenRule>


	<GenRule GenDef="Index" Name="declStdIndexKeyComparisonEqual">
	bool operator ==(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; rhs );
	bool operator ==(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator ==(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declStdIndexKeyComparisonNotEqual">
	bool operator !=(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; rhs );
	bool operator !=(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator !=(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declStdIndexKeyComparisonGreaterOrEqual">
	bool operator &gt;=(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; rhs );
	bool operator &gt;=(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator &gt;=(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );</GenRule>

	<GenRule GenDef="Index" Name="declStdIndexKeyComparisonGreaterThan">
	bool operator &gt;(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; rhs );
	bool operator &gt;(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator &gt;(const  $CPlusNamespace$::$SchemaName$$TableName$By$Suffix$Key&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );</GenRule>

</RuleSet>
