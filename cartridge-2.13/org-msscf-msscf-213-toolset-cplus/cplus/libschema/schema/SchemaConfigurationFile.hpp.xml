<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schema/SchemaConfigurationFile.hpp"
	Revision="2.13"
	Descr="C++18 configuration file specification for schema.">

	<GenFile GenDef="SchemaDef" Name="fileSchemaConfigurationFileHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$ConfigurationFileHpp"
		ExpansionKeyName="$SchemaName$ConfigurationFileHpp"
		ExpansionFileName="$SchemaName$ConfigurationFile.hpp"
>#pragma once

// Description: C++18 configuration file specification for a $SchemaName$ schema.

$MssSourceLicense$
#include &lt;cflib/ICFLibPublic.hpp&gt;
$iterate SchemaRefs( first includeSchemaConfigurationFile each empty empty empty )$
namespace $CPlusNamespace$ {

	class $SchemaName$ConfigurationFile$iterate SchemaRefs( first extendSchemaConfigurationFile each empty empty empty )$
	{$iterate SchemaRefs( first ConfigurationFileExtendDefBaseBody each empty empty ConfigurationFileImplDefBaseBody )$	};
}
</GenFile>

	<GenRule GenDef="SchemaRef" Name="includeSchemaConfigurationFile">
#include &lt;$lower SecSchemaName$/$SecSchemaName$ConfigurationFile.hpp&gt;
</GenRule>

	<GenRule GenDef="SchemaRef" Name="ConfigurationFileExtendDefBaseBody">
	public:
		$poptop SchemaDef SchemaName$ConfigurationFile();
		virtual ~$poptop SchemaDef SchemaName$ConfigurationFile();
</GenRule>

	<GenRule GenDef="Object" Name="ConfigurationFileImplDefBaseBody">
	protected:
		std::string* fileName;
		std::string* dbServer;
		int32_t dbPort = -1;
		std::string* dbDatabase;
		std::string* dbUserName;
		std::string* dbPassword;

	public:
		static const std::string CLASS_NAME;
		static const std::string S_DBSERVER;
		static const std::string S_DBPORT;
		static const std::string S_DBDATABASE;
		static const std::string S_DBUSERNAME;
		static const std::string S_DBPASSWORD;
$poptop SchemaDef declSchemaConfigurationFileMethods$
</GenRule>

	<GenRule GenDef="SchemaRef" Name="extendSchemaConfigurationFile"> : public $reference RefSchema CPlusNamespace$::$reference RefSchema SchemaName$ConfigurationFile</GenRule>

	<GenRule GenDef="SchemaDef" Name="declSchemaConfigurationFileMethods"
		>$iterate SchemaRefs( empty reallyDeclSchemaConfigurationFileMethods each empty )$</GenRule>

	<GenRule GenDef="SchemaRef" Name="reallyDeclSchemaConfigurationFileMethods"
		>$reference RefSchema reallyDeclSchemaConfigurationFileMethods$</GenRule>

	<GenRule GenDef="Object" Name="reallyDeclSchemaConfigurationFileMethods"
		>$switch HasDefSchema yes reallyDerefDeclSchemaConfigurationFileMethods default empty empty empty$</GenRule>

	<GenRule GenDef="Object" Name="reallyDerefDeclSchemaConfigurationFileMethods"
		>$reference DefSchema reallyDeclSchemaConfigurationFileMethods$</GenRule>

	<GenRule GenDef="SchemaDef" Name="reallyDeclSchemaConfigurationFileMethods">
	public:
		$SecSchemaName$ConfigurationFile();
		virtual ~$SecSchemaName$ConfigurationFile();

		virtual std::string* getFileName() const;
		virtual void setFileName( const std::string&amp; value );

		virtual std::string* getDbServer() const;
		virtual void setDbServer( const std::string&amp; value );

		virtual int32_t getDbPort() const;
		virtual void setDbPort( int32_t value );

		virtual std::string* getDbDatabase() const;
		virtual void setDbDatabase( const std::string&amp; value );

		virtual std::string* getDbUserName() const;
		virtual void setDbUserName( const std::string&amp; value );

		virtual std::string* getDbPassword() const;
		virtual void setDbPassword( const std::string&amp; value );

		virtual bool load();
		virtual bool save() const;</GenRule>

</RuleSet>
