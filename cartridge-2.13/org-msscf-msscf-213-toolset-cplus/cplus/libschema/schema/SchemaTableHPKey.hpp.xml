<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/schema/SchemaTableHPKey.hpp"
	Revision="2.13"
	Descr="C++18 specification of a $TableName$ history primary key object.">

	<GenFile GenDef="Table" Name="fileSchemaTableHPKeyHpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName="$lower reference ManufacturingSchema SchemaName$"
		ExpansionClassName="$SchemaName$$TableName$HPKeyHpp"
		ExpansionKeyName="$SchemaName$$TableName$HPKeyHpp"
		ExpansionFileName="$SchemaName$$TableName$HPKey.hpp"
>#pragma once

// Description: C++18 specification of a $TableName$ history primary key object.

$MssSourceLicense$
#include &lt;cflib/ICFLibPublic.hpp&gt;

#include &lt;$lower SchemaName$/$SchemaName$HPKey.hpp&gt;
#include &lt;$lower SchemaName$/I$SchemaName$Schema.hpp&gt;

namespace $CPlusNamespace$ {

	class $SchemaName$$TableName$PKey;
	class $SchemaName$$TableName$Buff;
	class $SchemaName$$TableName$HBuff;

	class $poptop SchemaDef SchemaName$$TableName$HPKey$switch HasDefSchema yes SchemaTableHPKeyExtendDefSchemaNameHPKey default SchemaTableHPKeyExtendSchemaHPKey$
	{$switch HasDefSchema yes SchemaDeclTableHPKeyExtendDefBody default SchemaDeclTableHPKeyDeclDefBody$	};
}

$reference PrimaryKeyIndex declStdHPKeyComparison$
</GenFile>

	<GenRule GenDef="Index" Name="implStdHPKeyHash">
	template&lt;&gt; struct hash&lt;$CPlusNamespace$::$SchemaName$$TableName$HPKey&gt; {
		typedef $CPlusNamespace$::$SchemaName$$TableName$HPKey argument_type;
		typedef size_t result_type;
		result_type operator()(argument_type const&amp; s) const {
			return( s.hashCode() );
		}
	};
</GenRule>

	<GenRule GenDef="Table" Name="declHPKeySet">
		$CPlusDefNamespace$::$DefSchemaName$$TableName$HPKey operator =( $CPlusDefNamespace$::$DefSchemaName$$TableName$PKey&amp; src );
		$CPlusDefNamespace$::$DefSchemaName$$TableName$HPKey operator =( $CPlusDefNamespace$::$DefSchemaName$$TableName$HPKey&amp; src );
		$CPlusDefNamespace$::$DefSchemaName$$TableName$HPKey operator =( $CPlusDefNamespace$::$DefSchemaName$$TableName$Buff&amp; src );
		$CPlusDefNamespace$::$DefSchemaName$$TableName$HPKey operator =( $CPlusDefNamespace$::$DefSchemaName$$TableName$HBuff&amp; src );
</GenRule>

	<GenRule GenDef="Table" Name="SchemaDeclTableHPKeyExtendDefBody">
	public:
		static const std::string CLASS_NAME;
		$poptop SchemaDef SchemaName$$TableName$HPKey();
		virtual ~$poptop SchemaDef SchemaName$$TableName$HPKey();
$declHPKeyComparison$
</GenRule>

	<GenRule GenDef="Table" Name="SchemaDeclTableHPKeyDeclDefBody">
	protected:
$switch IsBaseTable yes declClassCodeColumnAttr default empty$$reference PrimaryKeyIndex iterate Columns( each declColumnAttr )$
	public:
		static const std::string CLASS_NAME;
		static const std::string S_VALUE;
$reference PrimaryKeyIndex declHPKeyConstructor$$reference PrimaryKeyIndex iterate Columns( each declColumnGetterSetter )$$reference PrimaryKeyIndex declGetHashCode$$reference PrimaryKeyIndex declToString$$reference PrimaryKeyIndex declHPKeyComparison$$declHPKeySet$
</GenRule>

	<GenRule GenDef="Table" Name="SchemaTableHPKeyExtendDefSchemaNameHPKey"> : public $CPlusDefNamespace$::$DefSchemaName$$TableName$HPKey</GenRule>
	<GenRule GenDef="Table" Name="SchemaTableHPKeyExtendSchemaHPKey"> : public $SchemaName$HPKey</GenRule>

	<GenRule GenDef="Index" Name="declHPKeyConstructor">
		$SchemaName$$TableName$HPKey();
		$SchemaName$$TableName$HPKey( const $SchemaName$$TableName$HPKey&amp; src );
		virtual ~$poptop SchemaDef SchemaName$$TableName$HPKey();
</GenRule>

	<GenRule GenDef="Index" Name="declHPKeyComparison"
		>$declHPKeyComparisonLessThan$
$declHPKeyComparisonLessOrEqual$
$declHPKeyComparisonEqual$
$declHPKeyComparisonNotEqual$
$declHPKeyComparisonGreaterOrEqual$
$declHPKeyComparisonGreaterThan$</GenRule>

	<GenRule GenDef="Index" Name="declHPKeyComparisonLessThan">
		bool operator &lt;( const $SchemaName$$TableName$PKey&amp; rhs );
		bool operator &lt;( const $SchemaName$$TableName$HPKey&amp; rhs );
		bool operator &lt;( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator &lt;( const $SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declHPKeyComparisonLessOrEqual">
		bool operator &lt;=( const $SchemaName$$TableName$PKey&amp; rhs );
		bool operator &lt;=( const $SchemaName$$TableName$HPKey&amp; rhs );
		bool operator &lt;=( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator &lt;=( const $SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declHPKeyComparisonEqual">
		bool operator ==( const $SchemaName$$TableName$PKey&amp; rhs );
		bool operator ==( const $SchemaName$$TableName$HPKey&amp; rhs );
		bool operator ==( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator ==( const $SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declHPKeyComparisonNotEqual">
		bool operator !=( const $SchemaName$$TableName$PKey&amp; rhs );
		bool operator !=( const $SchemaName$$TableName$HPKey&amp; rhs );
		bool operator !=( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator !=( const $SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declHPKeyComparisonGreaterOrEqual">
		bool operator &gt;=( const $SchemaName$$TableName$PKey&amp; rhs );
		bool operator &gt;=( const $SchemaName$$TableName$HPKey&amp; rhs );
		bool operator &gt;=( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator &gt;=( const $SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declHPKeyComparisonGreaterThan">
		bool operator &gt;( const $SchemaName$$TableName$PKey&amp; rhs );
		bool operator &gt;( const $SchemaName$$TableName$HPKey&amp; rhs );
		bool operator &gt;( const $SchemaName$$TableName$HBuff&amp; rhs );
		bool operator &gt;( const $SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="implHPKeyHash">
	template&lt;&gt; struct hash&lt;$CPlusNamespace$::$SchemaName$$TableName$HPKey&gt; {
		typedef $CPlusNamespace$::$SchemaName$$TableName$HPKey argument_type;
		typedef size_t result_type;
		result_type operator()(argument_type const&amp; s) const {
			return( s.hashCode() );
		}
	};
</GenRule>

	<GenRule GenDef="Index" Name="declStdHPKeyComparison">
namespace std {
$declStdHPKeyComparisonLessThan$
$declStdHPKeyComparisonLessOrEqual$
$declStdHPKeyComparisonEqual$
$declStdHPKeyComparisonNotEqual$
$declStdHPKeyComparisonGreaterOrEqual$
$declStdHPKeyComparisonGreaterThan$
$implStdHPKeyHash$
}
</GenRule>

	<GenRule GenDef="Index" Name="declStdHPKeyComparisonLessThan">
	bool operator &lt;(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$PKey&amp; rhs );
	bool operator &lt;(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; rhs );
	bool operator &lt;(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator &lt;(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declStdHPKeyComparisonLessOrEqual">
	bool operator &lt;=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$PKey&amp; rhs );
	bool operator &lt;=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; rhs );
	bool operator &lt;=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator &lt;=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declStdHPKeyComparisonEqual">
	bool operator ==(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$PKey&amp; rhs );
	bool operator ==(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; rhs );
	bool operator ==(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator ==(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declStdHPKeyComparisonNotEqual">
	bool operator !=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$PKey&amp; rhs );
	bool operator !=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; rhs );
	bool operator !=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator !=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declStdHPKeyComparisonGreaterOrEqual">
	bool operator &gt;=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$PKey&amp; rhs );
	bool operator &gt;=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; rhs );
	bool operator &gt;=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator &gt;=(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

	<GenRule GenDef="Index" Name="declStdHPKeyComparisonGreaterThan">
	bool operator &gt;(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$PKey&amp; rhs );
	bool operator &gt;(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; rhs );
	bool operator &gt;(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$HBuff&amp; rhs );
	bool operator &gt;(const  $CPlusNamespace$::$SchemaName$$TableName$HPKey&amp; lhs, const $CPlusNamespace$::$SchemaName$$TableName$Buff&amp; rhs );
</GenRule>

</RuleSet>
