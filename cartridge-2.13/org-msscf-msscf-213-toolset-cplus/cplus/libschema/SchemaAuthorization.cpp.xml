<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/SchemaAuthorization.cpp"
	Revision="2.13"
	Descr="C++18 $SchemaName$ Authorization Implementation">

	<GenFile GenDef="SchemaDef" Name="fileSchemaAuthorizationCpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName=""
		ExpansionClassName="$SchemaName$AuthorizationCpp"
		ExpansionKeyName="$SchemaName$AuthorizationCpp"
		ExpansionFileName="$SchemaName$Authorization.cpp"
>// Description: C++18 $SchemaName$ Authorization Implementation

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;

using namespace std;

#include &lt;$lower SchemaName$/I$SchemaName$Public.hpp&gt;
#include &lt;$lower SchemaName$/$SchemaName$Authorization.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$ClusterObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$TenantObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$SecSessionObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$SecUserObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$ClusterTableObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$TenantTableObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$SecSessionTableObj.hpp&gt;
#include &lt;$lower SecSchemaName$obj/I$SecSchemaName$SecUserTableObj.hpp&gt;

namespace $CPlusNamespace$ {

	$SchemaName$Authorization::$SchemaName$Authorization()$iterate SchemaRefs( first SchemaAuthorizationConstructInheritAuthorization each empty empty empty )$
	{$iterate SchemaRefs( each empty empty initSchemaAuthorizationConstructAttrs )$
	}

	$SchemaName$Authorization::~$SchemaName$Authorization() {$iterate SchemaRefs( each empty empty destructSchemaAuthorizationAttrs )$
	}
$iterate SchemaRefs( each empty empty implSchemaAuthorizationMethods )$
}
</GenFile>

	<GenRule GenDef="SchemaRef" Name="SchemaAuthorizationConstructInheritAuthorization">
	: $poptop SchemaDef CPlusSecNamespace$::$poptop SchemaDef SecSchemaName$Authorization()</GenRule>

	<GenRule GenDef="Object" Name="initSchemaAuthorizationConstructAttrs">
		uuid_generate_random( authUUID );
		authUUIDStr = cflib::CFLibXmlUtil::formatUuid( authUUID );
		secClusterId = 0L;
		secTenantId = 0L;
		for( int i = 0; i &lt; 16; i++ ) {
			secSessionId[i] = 0;
		}
		for( int i = 0; i &lt; 16; i++ ) {
			secUserId[i] = 0;
		}</GenRule>

	<GenRule GenDef="Object" Name="destructSchemaAuthorizationAttrs"></GenRule>

	<GenRule GenDef="Object" Name="implSchemaAuthorizationMethods"
		>$implSchemaAuthorizationAuthUUID$$implSchemaAuthorizationSecClusterId$$implSchemaAuthorizationSecTenantId$$implSchemaAuthorizationSecSessionId$$implSchemaAuthorizationSecUserId$</GenRule>

	<GenRule GenDef="Object" Name="implSchemaAuthorizationAuthUUID">
	const uuid_ptr_t $poptop SchemaDef SchemaName$Authorization::getAuthUUID() const {
		return( authUUID );
	}

	void $poptop SchemaDef SchemaName$Authorization::setAuthUUID( const uuid_ptr_t value ) {
		uuid_copy( authUUID, value );
		authUUIDStr = cflib::CFLibXmlUtil::formatUuid( authUUID );
	}

	const std::string $poptop SchemaDef SchemaName$Authorization::getAuthUUIDStr() {
		return( authUUIDStr );
	}
</GenRule>

	<GenRule GenDef="Object" Name="implSchemaAuthorizationSecClusterId">
	int64_t $poptop SchemaDef SchemaName$Authorization::getSecClusterId() const {
		return( secClusterId );
	}

	void $poptop SchemaDef SchemaName$Authorization::setSecClusterId( int64_t clusterId ) {
		secClusterId = clusterId;
	}

	void $poptop SchemaDef SchemaName$Authorization::setSecCluster( $CPlusSecNamespace$::I$SecSchemaName$ClusterObj&amp; value ) {
		secClusterId = value.getRequiredId();
	}
</GenRule>

	<GenRule GenDef="Object" Name="implSchemaAuthorizationSecTenantId">
	int64_t $poptop SchemaDef SchemaName$Authorization::getSecTenantId() const {
		return( secTenantId );
	}

	void $poptop SchemaDef SchemaName$Authorization::setSecTenantId( int64_t tenantId ) {
		secTenantId = tenantId;
	}

	void $poptop SchemaDef SchemaName$Authorization::setSecTenant( $CPlusSecNamespace$::I$SecSchemaName$TenantObj&amp; value ) {
		secTenantId = value.getRequiredId();
	}
</GenRule>

	<GenRule GenDef="Object" Name="implSchemaAuthorizationSecSessionId">
	const uuid_ptr_t $poptop SchemaDef SchemaName$Authorization::getSecSessionId() const {
		return( secSessionId );
	}

	void $poptop SchemaDef SchemaName$Authorization::setSecSessionId( const uuid_ptr_t sessionId ) {
		uuid_copy( secSessionId, sessionId );
	}

	void $poptop SchemaDef SchemaName$Authorization::setSecSession( $CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* value ) {
		if( value == NULL ) {
			for( int i = 0; i &lt; 16; i++ ) {
				secSessionId[i] = 0;
			}
			return;
		}
		else {
			uuid_copy( secSessionId, value-&gt;getRequiredSecSessionId() );
		}
	}
</GenRule>

	<GenRule GenDef="Object" Name="implSchemaAuthorizationSecUserId">
	const uuid_ptr_t $poptop SchemaDef SchemaName$Authorization::getSecUserId() const {
		return( secUserId );
	}

	void $poptop SchemaDef SchemaName$Authorization::setSecUserId( const uuid_ptr_t userId ) {
		uuid_copy( secUserId, userId );
	}
</GenRule>

</RuleSet>
