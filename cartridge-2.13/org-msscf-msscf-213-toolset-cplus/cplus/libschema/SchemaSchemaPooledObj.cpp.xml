<?xml version="1.0" encoding="UTF-8"?>
<!--
 *	MSS Code Factory 2.13 Knowledge Base
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed under Mark Stephen
 *	Sobkow's Proprietary Data License, Version 1.0.
 *
 *	MSS Code Factory 2.13 Knowledge Base is proprietary code and is only available
 *	for production and distribution builds and environments for use in running the
 *	MSS Code Factory executables delivered.  Only registered .edu organizations may
 *	modify, extend, or refactor this knowledge base for research or courseware use.
 *
 *	The code produced by MSS Code Factory or an educational derivative thereof under
 *	an educational authorization may not be used to produced any software that is to
 *	be used for anything but research and couseware use.  You may not use an
 *	educational authorization to produce code for any business or publice use
 *	without a commercial license.
 *
 *	You may install one copy of MSS Code Factory 2.13 Knowledge Base per installation
 *	of MSS Code Factory.  You may not redistribute this data software in any form
 *	without a commercial or educational authorization license.
 *
 *	MSS Code Factory 2.13 Knowledge Base is published so that you may study it for
 *	academic purposes, perform security verification reviews, and run the MSS Code
 *	Factory tool itself.
 *
 *	Any use of a modified or extended version of MSS Code Factory 2.13 Knowledge
 *	Base in a production environment, or use of code produced by applying such
 *	a version without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory 2.13 Knowledge Base is distributed in the hope that it will
 *	be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory 2.13 Knowledge Base can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at msobkow@sasktel.net for commercial licensing.
 * -->
<RuleSet
	xmlns="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/cfgenkb-2.13-ruleset file:/opt/msscf/2.0.13/xsd/cfgenkb-2.13-ruleset.xsd"
	ToolSet="cplus"
	Name="libschema/SchemaSchemaPooledObj.cpp"
	Revision="2.13"
	Descr="C++18 Schema Pooled Object implementation">

	<GenFile GenDef="SchemaDef" Name="fileSchemaSchemaPooledObjCpp"
			GenerateOnce="false"
			ModuleName=""
		SourceBundle="cplus"
		BasePackageName="lib$lower reference ManufacturingSchema SchemaName$"
		SubPackageName=""
		ExpansionClassName="$SchemaName$SchemaPooledObjCpp"
		ExpansionKeyName="$SchemaName$SchemaPooledObjCpp"
		ExpansionFileName="$SchemaName$SchemaPooledObj.cpp"
>// Description: C++18 Schema Pooled Object implementation for $SchemaName$.

$MssSourceLicense$

#include &lt;cflib/ICFLibPublic.hpp&gt;

using namespace std;

#include &lt;$lower SchemaName$obj/$SchemaName$SchemaObj.hpp&gt;
#include &lt;$lower SchemaName$obj/$SchemaName$SchemaPooledObj.hpp&gt;
$iterate Tables( each includeHierarchyRootSchemaTableIObjs empty empty )$
$iterate Tables( each includeHierarchyRootSchemaTableITableObjs empty empty )$

namespace $CPlusNamespace$ {

	const std::string $SchemaName$SchemaPooledObj::CLASS_NAME( "$SchemaName$SchemaPooledObj" );

	$SchemaName$SchemaPooledObj::$SchemaName$SchemaPooledObj()
	: $CPlusNamespace$::$SchemaName$SchemaObj()
	{
	}

	$SchemaName$SchemaPooledObj::~$SchemaName$SchemaPooledObj() {
	}
$implSchemaPooledObjCnxAccessors$$implSchemaPooledObjLogout$
}

</GenFile>

	<GenRule GenDef="SchemaDef" Name="implSchemaPooledObjCnxAccessors">
	bool $SchemaName$SchemaPooledObj::isConnected() {
		if( backingStore == NULL ) {
			return( false );
		}
		else {
			return( true );
		}
	}

	void $SchemaName$SchemaPooledObj::disconnect( bool doCommit ) {
		static const std::string S_ProcName( "disconnect" );
		static const std::string S_Message( "Schema objects over pooled storage cannot be explicitly disconnected" );
		throw cflib::CFLibUsageException( CLASS_NAME,
			S_ProcName,
			S_Message );
	}
</GenRule>

	<GenRule GenDef="SchemaDef" Name="implSchemaPooledObjLogout">
	void $SchemaName$SchemaPooledObj::logout() {
		if( ( authorization == NULL ) || ( backingStore == NULL ) ) {
			return;
		}
		try {
			bool transactionStarted = beginTransaction();
			if( ! transactionStarted ) {
				rollback();
				transactionStarted = beginTransaction();
				if( ! transactionStarted ) {
					setAuthorization( NULL );
					return;
				}
			}
			const uuid_ptr_t secSessionId = authorization-&gt;getSecSessionId();
			if( ( secSessionId[0] != 0 )
				|| ( secSessionId[1] != 0 )
				|| ( secSessionId[2] != 0 )
				|| ( secSessionId[3] != 0 )
				|| ( secSessionId[4] != 0 )
				|| ( secSessionId[5] != 0 )
				|| ( secSessionId[6] != 0 )
				|| ( secSessionId[7] != 0 )
				|| ( secSessionId[8] != 0 )
				|| ( secSessionId[9] != 0 )
				|| ( secSessionId[10] != 0 )
				|| ( secSessionId[11] != 0 )
				|| ( secSessionId[12] != 0 )
				|| ( secSessionId[13] != 0 )
				|| ( secSessionId[14] != 0 )
				|| ( secSessionId[15] != 0 ) )
			{
				$CPlusSecNamespace$::I$SecSchemaName$SecSessionObj* secSession = getSecSessionTableObj()-&gt;readSecSessionByIdIdx( secSessionId );
				if( secSession != NULL ) {
					if( secSession-&gt;isOptionalFinishNull() ) {
						$CPlusSecNamespace$::I$SecSchemaName$SecSessionEditObj* editSecSession = secSession-&gt;beginEdit();
						std::chrono::system_clock::time_point timestamp = cflib::CFLib::getUTCTimestampInstance();
						editSecSession-&gt;setOptionalFinishValue( timestamp );
						editSecSession-&gt;update();
						editSecSession = NULL;
					}
				}
			}
			commit();
		}
		catch( xercesc::SAXNotRecognizedException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( xercesc::SAXNotSupportedException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( xercesc::SAXParseException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( xercesc::SAXException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibArgumentOverflowException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibArgumentRangeException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibArgumentUnderflowException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibCollisionDetectedException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibDbException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibDependentsDetectedException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibEmptyArgumentException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibInvalidArgumentException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibMathException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibMustOverrideException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibNotImplementedYetException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibNotSupportedException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibNullArgumentException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibPrimaryKeyNotNewException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibStaleCacheDetectedException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibSubroutineException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibUniqueIndexViolationException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibUnrecognizedAttributeException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibUnresolvedRelationException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibUnsupportedClassException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibUsageException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibArgumentException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( cflib::CFLibRuntimeException x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
		catch( std::exception x ) {
			setAuthorization( NULL );
			minimizeMemory();
			throw x;
		}
	}
</GenRule>

</RuleSet>
